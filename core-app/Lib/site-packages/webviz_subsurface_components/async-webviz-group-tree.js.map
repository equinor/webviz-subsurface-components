{"version":3,"file":"async-webviz-group-tree.js","mappings":"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","sources":["webpack://webviz_subsurface_components/./src/components/GroupTree/components/Settings/date_time_slider.css","webpack://webviz_subsurface_components/./src/components/GroupTree/redux/reducer.ts","webpack://webviz_subsurface_components/./src/components/GroupTree/components/DataLoader.tsx","webpack://webviz_subsurface_components/./src/components/GroupTree/redux/store.ts","webpack://webviz_subsurface_components/./src/components/GroupTree/redux/actions.ts","webpack://webviz_subsurface_components/./src/components/GroupTree/components/Settings/date_time_slider.css?a909","webpack://webviz_subsurface_components/./src/components/GroupTree/components/Settings/DateTimeSlider.tsx","webpack://webviz_subsurface_components/./src/components/GroupTree/components/Settings/FlowRateSelector.tsx","webpack://webviz_subsurface_components/./src/components/GroupTree/components/Settings/NodeInfoSelector.tsx","webpack://webviz_subsurface_components/./src/components/GroupTree/components/Settings/SettingsBar.tsx","webpack://webviz_subsurface_components/./src/components/GroupTree/components/GroupTreeViewer.tsx","webpack://webviz_subsurface_components/./src/components/GroupTree/components/GroupTreeComponent.tsx"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/*\\nThis css is to override default slider css styling for the date time slider\\n*/\\n\\n.slider,\\n.slider-inset,\\n.slider-overlay {\\n    stroke-linecap: round;\\n}\\n\\n.slider {\\n    stroke-width: 8px;\\n}\\n\\n.slider-inset {\\n    stroke: #b20276;\\n    stroke-width: 8px;\\n}\\n\\n.slider-overlay {\\n    pointer-events: stroke;\\n    cursor: pointer;\\n}\\n\\n.handle {\\n    fill: #fff;\\n    stroke: #b20276;\\n    stroke-opacity: 0.5;\\n    stroke-width: 1.25px;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/GroupTree/components/Settings/date_time_slider.css\"],\"names\":[],\"mappings\":\"AAAA;;CAEC;;AAED;;;IAGI,qBAAqB;AACzB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,UAAU;IACV,eAAe;IACf,mBAAmB;IACnB,oBAAoB;AACxB\",\"sourcesContent\":[\"/*\\nThis css is to override default slider css styling for the date time slider\\n*/\\n\\n.slider,\\n.slider-inset,\\n.slider-overlay {\\n    stroke-linecap: round;\\n}\\n\\n.slider {\\n    stroke-width: 8px;\\n}\\n\\n.slider-inset {\\n    stroke: #b20276;\\n    stroke-width: 8px;\\n}\\n\\n.slider-overlay {\\n    pointer-events: stroke;\\n    cursor: pointer;\\n}\\n\\n.handle {\\n    fill: #fff;\\n    stroke: #b20276;\\n    stroke-opacity: 0.5;\\n    stroke-width: 1.25px;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import type { PayloadAction } from \"@reduxjs/toolkit\";\nimport { combineReducers, createSlice } from \"@reduxjs/toolkit\";\nimport type { UISettings } from \"./types\";\n\nexport const idSlice = createSlice({\n    name: \"id\",\n    initialState: \"\",\n    reducers: {\n        updateId: (_, action: PayloadAction<string>) => action.payload,\n    },\n});\nexport const uiSlice = createSlice({\n    name: \"ui\",\n    initialState: {\n        currentDateTime: \"\",\n        currentFlowRate: \"\",\n        currentNodeInfo: \"\",\n    } as UISettings,\n    reducers: {\n        updateCurrentDateTime: (state, action: PayloadAction<string>) => {\n            state.currentDateTime = action.payload;\n        },\n        updateCurrentFlowRate: (state, action: PayloadAction<string>) => {\n            state.currentFlowRate = action.payload;\n        },\n        updateCurrentNodeInfo: (state, action: PayloadAction<string>) => {\n            state.currentNodeInfo = action.payload;\n        },\n    },\n});\n\nexport const rootReducer = combineReducers({\n    id: idSlice.reducer,\n    ui: uiSlice.reducer,\n});\n","/* eslint-disable react-hooks/exhaustive-deps */ // remove when ready to fix these.\n\nimport type { PropsWithChildren, ReactNode } from \"react\";\nimport React, { useMemo } from \"react\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport { createReduxStore } from \"../redux/store\";\nimport type { UISettings } from \"../redux/types\";\nimport type {\n    DatedTree,\n    EdgeMetadata,\n    NodeMetadata,\n} from \"@webviz/group-tree-plot\";\n\nexport type DateTreesIndices = {\n    treeIndex: number;\n    dateIndex: number;\n};\n\ninterface DataProviderProps {\n    id: string;\n    data: DatedTree[];\n    edgeMetadataList: EdgeMetadata[];\n    nodeMetadataList: NodeMetadata[];\n    initialIndices: DateTreesIndices;\n    children: ReactNode;\n}\n\nexport const DataContext = React.createContext<DatedTree[]>([]);\n\nconst DataProvider: React.FC<DataProviderProps> = (\n    props: PropsWithChildren<DataProviderProps>\n) => {\n    const preloadedState = useMemo(() => {\n        // Use \"initialIndices\" from previous data if it refers to a valid date otherwise use first date.\n        const treeIdx = props.initialIndices.treeIndex;\n        const dateIdx = props.initialIndices.dateIndex;\n        const hasValidIndices =\n            props.data.length > treeIdx &&\n            props.data[treeIdx].dates.length > dateIdx;\n        const initialDateTime = hasValidIndices\n            ? props.data[treeIdx].dates[dateIdx]\n            : props.data[0].dates[0];\n\n        const initialFlowRate = props.edgeMetadataList[0]?.key ?? \"\";\n        const initialNodeInfo = props.nodeMetadataList[0]?.key ?? \"\";\n\n        return {\n            id: props.id,\n            ui: {\n                currentDateTime: initialDateTime,\n                currentFlowRate: initialFlowRate,\n                currentNodeInfo: initialNodeInfo,\n            } as UISettings,\n        };\n    }, [props.id, props.data]); // Shallow compare does not detect updated data? Will useMemo actually help?\n\n    const store = useMemo(\n        () => createReduxStore(preloadedState),\n        [preloadedState]\n    );\n\n    return (\n        <DataContext.Provider value={props.data}>\n            <ReduxProvider store={store}>{props.children}</ReduxProvider>\n        </DataContext.Provider>\n    );\n};\n\nexport default DataProvider;\n","import type { EnhancedStore } from \"@reduxjs/toolkit\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { rootReducer } from \"./reducer\";\n\nexport type GroupTreeState = ReturnType<typeof rootReducer>;\nexport const createReduxStore = (\n    preloadedState: Partial<GroupTreeState>\n): EnhancedStore =>\n    configureStore({\n        reducer: rootReducer,\n        preloadedState,\n        enhancers: [],\n    });\n","import { idSlice, uiSlice } from \"./reducer\";\n\nexport const { updateId } = idSlice.actions;\nexport const {\n    updateCurrentDateTime,\n    updateCurrentFlowRate,\n    updateCurrentNodeInfo,\n} = uiSlice.actions;\n","\n      import API from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      \n      import setAttributes from \"!../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js!./date_time_slider.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = function insertAtTop(element) {\n                                    var parent = document.querySelector(\"head\");\n                                    var lastInsertedElement =\n                                        window._lastElementInsertedByStyleLoader;\n\n                                    if (!lastInsertedElement) {\n                                        parent.insertBefore(\n                                            element,\n                                            parent.firstChild\n                                        );\n                                    } else if (\n                                        lastInsertedElement.nextSibling\n                                    ) {\n                                        parent.insertBefore(\n                                            element,\n                                            lastInsertedElement.nextSibling\n                                        );\n                                    } else {\n                                        parent.appendChild(element);\n                                    }\n\n                                    window._lastElementInsertedByStyleLoader =\n                                        element;\n                                };\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js!./date_time_slider.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import { Slider } from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\nimport React, { useCallback, useContext, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateCurrentDateTime } from \"../../redux/actions\";\nimport type { GroupTreeState } from \"../../redux/store\";\nimport { DataContext } from \"../DataLoader\";\n\nimport { DatedTree } from \"@webviz/group-tree-plot\";\n\nimport \"./date_time_slider.css\";\n\nconst classes = {\n    root: \"DateTimeSlider-root\",\n};\n\nconst Root = styled(\"div\")(({ theme }) => ({\n    [`& .${classes.root}`]: {\n        width: \"200px\",\n        marginRight: theme.spacing(4),\n    },\n}));\n\nconst EdsSlider = styled(Slider)(() => ({\n    root: {\n        color: \"#007079\",\n    },\n    valueLabel: {\n        top: 22,\n        \"& *\": {\n            background: \"transparent\",\n            color: \"#000\",\n        },\n    },\n}));\n\nconst DateTimeSlider: React.FC = React.memo(() => {\n    const data: DatedTree[] = useContext(DataContext);\n    // Redux\n    const dispatch = useDispatch();\n\n    const currentDateTime = useSelector(\n        (state: GroupTreeState) => state.ui.currentDateTime\n    );\n\n    const times = useMemo(\n        // list of all dates\n        () => {\n            const times: string[] = data.reduce(\n                (total: string[], currentValue: DatedTree) => {\n                    return total.concat(currentValue.dates);\n                },\n                []\n            );\n            return times;\n        },\n        [data]\n    );\n\n    const currentDateTimeIndex = useMemo(\n        () => times.indexOf(currentDateTime),\n        [times, currentDateTime]\n    );\n\n    // handlers\n    const outputFunction = useCallback((step: number) => times[step], [times]);\n    const onChange = useCallback(\n        (_: Event, step: number | number[]) => {\n            if (typeof step === \"number\") {\n                dispatch(updateCurrentDateTime(times[step]));\n            }\n        },\n        [dispatch, times]\n    );\n    return (\n        <Root className={classes.root}>\n            <span>Time Steps</span>\n            <EdsSlider\n                track={false}\n                aria-labelledby=\"date-time-slider-label\"\n                value={currentDateTimeIndex}\n                valueLabelDisplay=\"on\"\n                onChange={onChange}\n                min={0}\n                max={times.length - 1}\n                step={1}\n                marks={true}\n                valueLabelFormat={outputFunction}\n            />\n        </Root>\n    );\n});\n\nDateTimeSlider.displayName = \"DateTimeSlider\";\nexport default DateTimeSlider;\n","import { NativeSelect } from \"@equinor/eds-core-react\";\nimport { styled } from \"@mui/material/styles\";\nimport React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateCurrentFlowRate } from \"../../redux/actions\";\nimport type { GroupTreeState } from \"../../redux/store\";\nimport { EdgeMetadata } from \"@webviz/group-tree-plot\";\n\nconst PREFIX = \"FlowRateSelector\";\n\nconst classes = {\n    root: `${PREFIX}-root`,\n};\n\nconst StyledNativeSelect = styled(NativeSelect)(({ theme }) => ({\n    [`&.${classes.root}`]: {\n        maxWidth: \"250px\",\n        padding: theme.spacing(1),\n    },\n}));\n\ninterface FlowRateSelectorProps {\n    edgeMetadataList: EdgeMetadata[];\n}\n\nconst FlowRateSelector: React.FC<FlowRateSelectorProps> = React.memo(\n    (props: FlowRateSelectorProps) => {\n        // Redux\n        const dispatch = useDispatch();\n        const currentFlowRate = useSelector(\n            (st: GroupTreeState) => st.ui.currentFlowRate\n        );\n        // handlers\n        const handleSelectedItemChange = useCallback(\n            (event: React.ChangeEvent<HTMLSelectElement>) => {\n                dispatch(updateCurrentFlowRate(event.target.value));\n            },\n            [dispatch]\n        );\n\n        return (\n            <StyledNativeSelect\n                className={classes.root}\n                id=\"flow-rate-selector\"\n                label=\"Flow Rate\"\n                value={currentFlowRate}\n                onChange={handleSelectedItemChange}\n            >\n                {props.edgeMetadataList.map((metadata: EdgeMetadata) => (\n                    <option key={`option-${metadata.key}`} value={metadata.key}>\n                        {metadata.label}\n                    </option>\n                ))}\n            </StyledNativeSelect>\n        );\n    }\n);\n\nFlowRateSelector.displayName = \"FlowRateSelector\";\nexport default FlowRateSelector;\n","import { NativeSelect } from \"@equinor/eds-core-react\";\nimport { styled } from \"@mui/material/styles\";\nimport React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateCurrentNodeInfo } from \"../../redux/actions\";\nimport type { GroupTreeState } from \"../../redux/store\";\nimport { NodeMetadata } from \"@webviz/group-tree-plot\";\n\nconst PREFIX = \"NodeInfoSelector\";\n\nconst classes = {\n    root: `${PREFIX}-root`,\n};\n\nconst StyledNativeSelect = styled(NativeSelect)(({ theme }) => ({\n    [`&.${classes.root}`]: {\n        maxWidth: \"250px\",\n        padding: theme.spacing(1),\n    },\n}));\n\ninterface NodeInfoSelectorProps {\n    nodeMetadataList: NodeMetadata[];\n}\n\nconst NodeInfoSelector: React.FC<NodeInfoSelectorProps> = React.memo(\n    (props: NodeInfoSelectorProps) => {\n        // Redux\n        const dispatch = useDispatch();\n        const currentNodeInfo = useSelector(\n            (st: GroupTreeState) => st.ui.currentNodeInfo\n        );\n        // handlers\n        const handleSelectedItemChange = useCallback(\n            (event: React.ChangeEvent<HTMLSelectElement>) => {\n                dispatch(updateCurrentNodeInfo(event.target.value as string));\n            },\n            [dispatch]\n        );\n\n        return (\n            <StyledNativeSelect\n                className={classes.root}\n                id=\"node-info-selector\"\n                label=\"Node Data\"\n                value={currentNodeInfo}\n                onChange={handleSelectedItemChange}\n            >\n                {props.nodeMetadataList.map((metadata: NodeMetadata) => (\n                    <option key={`option-${metadata.key}`} value={metadata.key}>\n                        {metadata.label}\n                    </option>\n                ))}\n            </StyledNativeSelect>\n        );\n    }\n);\n\nNodeInfoSelector.displayName = \"NodeInfoSelector\";\nexport default NodeInfoSelector;\n","import { TopBar } from \"@equinor/eds-core-react\";\nimport { styled } from \"@mui/material/styles\";\nimport React from \"react\";\nimport DateTimeSlider from \"./DateTimeSlider\";\nimport FlowRateSelector from \"./FlowRateSelector\";\nimport NodeInfoSelector from \"./NodeInfoSelector\";\nimport { EdgeMetadata, NodeMetadata } from \"@webviz/group-tree-plot\";\n\nconst PREFIX = \"SettingsBar\";\n\nconst classes = {\n    topBar: `${PREFIX}-topBar`,\n    actions: `${PREFIX}-actions`,\n};\n\nconst StyledTopBar = styled(TopBar)(() => ({\n    [`&.${classes.topBar}`]: {\n        minHeight: \"90px\",\n    },\n\n    [`& .${classes.actions}`]: {\n        position: \"relative\",\n        display: \"flex\",\n        flexDirection: \"row\",\n    },\n}));\n\ninterface SettingsBarProps {\n    edgeMetadataList: EdgeMetadata[];\n    nodeMetadataList: NodeMetadata[];\n}\n\nconst SettingsBar: React.FC<SettingsBarProps> = React.memo(\n    (props: SettingsBarProps) => {\n        return (\n            <StyledTopBar className={classes.topBar}>\n                <TopBar.Header className={classes.actions}>\n                    <FlowRateSelector\n                        edgeMetadataList={props.edgeMetadataList}\n                    />\n                    <NodeInfoSelector\n                        nodeMetadataList={props.nodeMetadataList}\n                    />\n                </TopBar.Header>\n                <TopBar.Actions className={classes.actions}>\n                    <DateTimeSlider />\n                </TopBar.Actions>\n            </StyledTopBar>\n        );\n    }\n);\n\nSettingsBar.displayName = \"SettingsBar\";\nexport default SettingsBar;\n","/* eslint-disable react-hooks/exhaustive-deps */ // remove when ready to fix these.\n\nimport { styled } from \"@mui/material/styles\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport type { GroupTreeState } from \"../redux/store\";\nimport { DataContext } from \"./DataLoader\";\nimport SettingsBar from \"./Settings/SettingsBar\";\n\nimport {\n    GroupTreePlot,\n    EdgeMetadata,\n    NodeMetadata,\n} from \"@webviz/group-tree-plot\";\n\nconst PREFIX = \"GroupTreeViewer\";\n\nconst classes = {\n    root: `${PREFIX}-root`,\n};\n\nconst Root = styled(\"div\")(() => ({\n    [`&.${classes.root}`]: {\n        position: \"relative\",\n        display: \"flex\",\n        flex: 1,\n        flexDirection: \"column\",\n        height: \"90%\",\n    },\n}));\n\ninterface GroupTreeViewerProps {\n    id: string;\n    edgeMetadataList: EdgeMetadata[];\n    nodeMetadataList: NodeMetadata[];\n    currentDateTimeChangedCallBack: (currentDateTime: string) => void;\n}\n\nconst GroupTreeViewer: React.FC<GroupTreeViewerProps> = (\n    props: GroupTreeViewerProps\n) => {\n    const data = useContext(DataContext);\n\n    const currentDateTime = useSelector(\n        (state: GroupTreeState) => state.ui.currentDateTime\n    );\n    const currentFlowRateKey = useSelector(\n        (state: GroupTreeState) => state.ui.currentFlowRate\n    );\n    const currentNodeKey = useSelector(\n        (state: GroupTreeState) => state.ui.currentNodeInfo\n    );\n\n    useEffect(() => {\n        if (typeof props.currentDateTimeChangedCallBack !== \"undefined\") {\n            props.currentDateTimeChangedCallBack(currentDateTime);\n        }\n    }, [currentDateTime]);\n\n    return (\n        <Root className={classes.root}>\n            <SettingsBar\n                edgeMetadataList={props.edgeMetadataList}\n                nodeMetadataList={props.nodeMetadataList}\n            />\n            <GroupTreePlot\n                id={props.id}\n                datedTrees={data}\n                edgeMetadataList={props.edgeMetadataList}\n                nodeMetadataList={props.nodeMetadataList}\n                selectedEdgeKey={currentFlowRateKey}\n                selectedNodeKey={currentNodeKey}\n                selectedDateTime={currentDateTime}\n            />\n        </Root>\n    );\n};\n\nGroupTreeViewer.displayName = \"GroupTreeViewer\";\nexport default GroupTreeViewer;\n","import React, { useCallback, useState } from \"react\";\n\nimport DataProvider, { DateTreesIndices } from \"./DataLoader\";\nimport GroupTreeViewer from \"./GroupTreeViewer\";\nimport { DatedTree, EdgeMetadata, NodeMetadata } from \"@webviz/group-tree-plot\";\n\n//TODO schema check\nexport interface GroupTreeProps {\n    /**\n     * The ID of this component, used to identify dash components\n     * in callbacks. The ID needs to be unique across all of the\n     * components in an app.\n     */\n    id: string;\n    /**\n     * Array of JSON objects describing group tree data.\n     */\n    data: DatedTree[];\n\n    /**\n     * Arrays of metadata. Used in drop down selectors and tree visualization.\n     */\n    edgeMetadataList: EdgeMetadata[];\n    nodeMetadataList: NodeMetadata[];\n}\n\nconst GroupTreeComponent: React.FC<GroupTreeProps> = React.memo(\n    (props: GroupTreeProps) => {\n        const [indices, setIndices] = useState<DateTreesIndices>({\n            treeIndex: 0,\n            dateIndex: 0,\n        });\n\n        const currentDateTimeChangedCallBack = useCallback(\n            (currentDateTime: string) => {\n                const newTreeIndex = props.data.findIndex((e) => {\n                    return e.dates.includes(currentDateTime);\n                });\n                const newDateIndex =\n                    props.data[newTreeIndex].dates.indexOf(currentDateTime);\n\n                setIndices({\n                    treeIndex: newTreeIndex,\n                    dateIndex: newDateIndex,\n                });\n            },\n            [props.data]\n        );\n\n        return (\n            <DataProvider\n                id={props.id}\n                data={props.data}\n                edgeMetadataList={props.edgeMetadataList}\n                nodeMetadataList={props.nodeMetadataList}\n                initialIndices={indices}\n            >\n                <GroupTreeViewer\n                    id={props.id}\n                    edgeMetadataList={props.edgeMetadataList}\n                    nodeMetadataList={props.nodeMetadataList}\n                    currentDateTimeChangedCallBack={\n                        currentDateTimeChangedCallBack\n                    }\n                />\n            </DataProvider>\n        );\n    }\n);\n\nGroupTreeComponent.displayName = \"GroupTreeComponent\";\nexport default GroupTreeComponent;\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","idSlice","name","initialState","reducers","updateId","_","action","payload","uiSlice","currentDateTime","currentFlowRate","currentNodeInfo","updateCurrentDateTime","state","updateCurrentFlowRate","updateCurrentNodeInfo","rootReducer","reducer","ui","DataContext","props","preloadedState","useMemo","treeIdx","initialIndices","treeIndex","dateIdx","dateIndex","initialDateTime","data","length","dates","initialFlowRate","edgeMetadataList","key","initialNodeInfo","nodeMetadataList","store","enhancers","createReduxStore","Provider","value","children","actions","options","styleTagTransform","setAttributes","insert","element","parent","document","querySelector","lastInsertedElement","window","_lastElementInsertedByStyleLoader","nextSibling","insertBefore","appendChild","firstChild","domAPI","insertStyleElement","locals","classes","Root","styled","theme","width","marginRight","spacing","EdsSlider","Slider","root","color","valueLabel","top","background","DateTimeSlider","useContext","dispatch","times","reduce","total","currentValue","concat","currentDateTimeIndex","indexOf","outputFunction","useCallback","step","onChange","className","track","valueLabelDisplay","min","max","marks","valueLabelFormat","displayName","StyledNativeSelect","NativeSelect","maxWidth","padding","FlowRateSelector","st","handleSelectedItemChange","event","target","label","map","metadata","NodeInfoSelector","topBar","StyledTopBar","TopBar","minHeight","position","display","flexDirection","SettingsBar","Header","Actions","flex","height","GroupTreeViewer","currentFlowRateKey","currentNodeKey","useEffect","currentDateTimeChangedCallBack","datedTrees","selectedEdgeKey","selectedNodeKey","selectedDateTime","GroupTreeComponent","indices","setIndices","useState","newTreeIndex","findIndex","e","includes","newDateIndex"],"sourceRoot":""}