"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[5764],{"./node_modules/@equinor/eds-core-react/dist/esm/components/Label/Label.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{_:function(){return Label}});var objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),objectWithoutProperties=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),react=__webpack_require__("./node_modules/react/index.js"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),templates=__webpack_require__("./node_modules/@equinor/eds-utils/dist/esm/utils/templates/index.mjs"),esm=__webpack_require__("./node_modules/@equinor/eds-tokens/dist/esm/index.mjs"),colors=esm.T.colors,comfortable=esm.T.spacings.comfortable,typography=esm.T.typography,label={background:colors.ui.background__light.rgba,typography:(0,objectSpread2.Z)((0,objectSpread2.Z)({},typography.input.label),{},{color:colors.text.static_icons__tertiary.rgba}),spacings:{left:comfortable.small,right:comfortable.small,top:"6px",bottom:"6px"},states:{disabled:{typography:{color:colors.interactive.disabled__text.rgba}}}},jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),_excluded=["label","meta","disabled"],LabelBase=styled_components_browser_esm.ZP.label.withConfig({displayName:"Label__LabelBase",componentId:"sc-1gi2bcn-0"})(["display:flex;justify-content:space-between;position:relative;"," margin-left:",";margin-right:",";color:",";"],(0,templates.oc)(label.typography),label.spacings.left,label.spacings.right,(function(_ref){return _ref.$disabledText?label.states.disabled.typography.color:label.typography.color})),Text=styled_components_browser_esm.ZP.span.withConfig({displayName:"Label__Text",componentId:"sc-1gi2bcn-1"})(["margin:0;"]),Label=(0,react.forwardRef)((function Label(props,ref){var _props$label=props.label,label=void 0===_props$label?"":_props$label,meta=props.meta,_props$disabled=props.disabled,disabled=void 0!==_props$disabled&&_props$disabled,other=(0,objectWithoutProperties.Z)(props,_excluded);return(0,jsx_runtime.jsxs)(LabelBase,(0,objectSpread2.Z)((0,objectSpread2.Z)({ref:ref,$disabledText:disabled},other),{},{children:[(0,jsx_runtime.jsx)(Text,{children:label}),meta&&(0,jsx_runtime.jsx)(Text,{children:meta})]}))}))},"./node_modules/@equinor/eds-core-react/dist/esm/components/Select/NativeSelect.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{p:function(){return NativeSelect}});var objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),objectWithoutProperties=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),react=__webpack_require__("./node_modules/react/index.js"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),esm=__webpack_require__("./node_modules/@equinor/eds-tokens/dist/esm/index.mjs"),colors=esm.T.colors,_tokens$spacings$comf=esm.T.spacings.comfortable,small=_tokens$spacings$comf.small,x_small=_tokens$spacings$comf.x_small,typography=esm.T.typography,shape=esm.T.shape,nativeselect={background:colors.ui.background__light.rgba,typography:(0,objectSpread2.Z)((0,objectSpread2.Z)({},typography.input.text),{},{color:colors.text.static_icons__default.rgba}),entities:{input:{spacings:{left:small,right:small,top:"6px",bottom:"6px"}},icon:{width:"24px"}},boxShadow:"inset 0 -1px 0 0 "+colors.text.static_icons__tertiary.rgba,states:{focus:{outline:{type:"outline",width:"2px",color:colors.interactive.primary__resting.rgba,style:"solid",offset:"0px"}},disabled:{typography:{color:colors.interactive.disabled__text.rgba}}},modes:{compact:{minHeight:shape._modes.compact.straight.minHeight,entities:{input:{spacings:{left:x_small,right:x_small,top:"0",bottom:"0"}}}}}},templates=__webpack_require__("./node_modules/@equinor/eds-utils/dist/esm/utils/templates/index.mjs"),templates_focus=__webpack_require__("./node_modules/@equinor/eds-utils/dist/esm/utils/templates/focus.mjs"),useToken=__webpack_require__("./node_modules/@equinor/eds-utils/dist/esm/hooks/useToken.mjs"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),eds_context=__webpack_require__("./node_modules/@equinor/eds-core-react/dist/esm/components/EdsProvider/eds.context.js"),Label=__webpack_require__("./node_modules/@equinor/eds-core-react/dist/esm/components/Label/Label.js"),_excluded=["label","children","className","style","selectRef","id","meta","disabled","multiple"],Container=styled_components_browser_esm.ZP.div.withConfig({displayName:"NativeSelect__Container",componentId:"sc-82vb16-0"})(["min-width:100px;width:100%;"]),StyledSelect=styled_components_browser_esm.ZP.select.withConfig({displayName:"NativeSelect__StyledSelect",componentId:"sc-82vb16-1"})(["border:none;border-radius:0;box-shadow:",";"," "," padding-right:calc("," *2 + ",");display:block;margin:0;appearance:none;background-image:url(\"data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='%236f6f6f' d='M7 9.5l5 5 5-5H7z'/%3E%3C/svg%3E\"),linear-gradient( to bottom,"," 0%,"," 100% );background-repeat:no-repeat,repeat;background-position:right "," top 50%;width:100%;&:active,&:focus{box-shadow:none;","}&:disabled{color:",";background-image:url(\"data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='%23bebebe' d='M7 9.5l5 5 5-5H7z'/%3E%3C/svg%3E\"),linear-gradient( to bottom,"," 0%,"," 100% );cursor:not-allowed;box-shadow:none;outline:none;.arrow-icon{fill:red;}&:focus,&:active{outline:none;}}"],nativeselect.boxShadow,(0,templates.oc)(nativeselect.typography),(function(_ref){var theme=_ref.theme;return(0,styled_components_browser_esm.iv)(["height:",";",""],theme.minHeight,(0,templates.SH)(theme.entities.input.spacings))}),nativeselect.entities.input.spacings.right,nativeselect.entities.icon.width,nativeselect.background,nativeselect.background,nativeselect.entities.input.spacings.right,(0,templates_focus.p)(nativeselect.states.focus.outline),nativeselect.states.disabled.typography.color,nativeselect.background,nativeselect.background),NativeSelect=(0,react.forwardRef)((function NativeSelect(_ref2,ref){var label=_ref2.label,children=_ref2.children,className=_ref2.className,style=_ref2.style,selectRef=_ref2.selectRef,id=_ref2.id,meta=_ref2.meta,_ref2$disabled=_ref2.disabled,disabled=void 0!==_ref2$disabled&&_ref2$disabled,_ref2$multiple=_ref2.multiple,multiple=void 0!==_ref2$multiple&&_ref2$multiple,other=(0,objectWithoutProperties.Z)(_ref2,_excluded),density=(0,eds_context.q)().density,token=(0,useToken.d)({density:density},nativeselect),containerProps={ref:ref,className:className,style:style},selectProps=(0,objectSpread2.Z)({ref:selectRef,id:id,disabled:disabled,multiple:multiple},other),labelProps={htmlFor:id,label:label,meta:meta,disabled:disabled},showLabel=label||meta;return(0,jsx_runtime.jsx)(styled_components_browser_esm.f6,{theme:token,children:(0,jsx_runtime.jsxs)(Container,(0,objectSpread2.Z)((0,objectSpread2.Z)({},containerProps),{},{children:[showLabel&&(0,jsx_runtime.jsx)(Label._,(0,objectSpread2.Z)({},labelProps)),(0,jsx_runtime.jsx)(StyledSelect,(0,objectSpread2.Z)((0,objectSpread2.Z)({},selectProps),{},{children:children}))]}))})}))},"./packages/subsurface-viewer/src/layers/wells/wellsLayer.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllTrajectoryHidden:function(){return AllTrajectoryHidden},AllWellHeadsHidden:function(){return AllWellHeadsHidden},CallbackStyledWells:function(){return CallbackStyledWells},ContinuousColorTable:function(){return ContinuousColorTable},ContinuousWellLogs:function(){return ContinuousWellLogs},CustomColoredWells:function(){return CustomColoredWells},CustomWidthWells:function(){return CustomWidthWells},DashedWells:function(){return DashedWells},DiscreteWellLogs:function(){return DiscreteWellLogs},LegendWithColorSelector:function(){return LegendWithColorSelector},MultipleVolveWells:function(){return MultipleVolveWells},SimplifiedRendering:function(){return SimplifiedRendering},VerticalWellWithDuplicates:function(){return VerticalWellWithDuplicates},VolveWells:function(){return VolveWells},VolveWellsWithResetButton:function(){return VolveWellsWithResetButton},Wells3d:function(){return Wells3d},Wells3dDashed:function(){return Wells3dDashed},WellsRefine:function(){return WellsRefine},__namedExportsOrder:function(){return __namedExportsOrder},volveWells2:function(){return volveWells2}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_mui_material_styles__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),_equinor_eds_core_react__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@equinor/eds-core-react/dist/esm/components/Select/NativeSelect.js"),_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@emerson-eps/color-tables/dist/index.js"),_wellsLayer__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./packages/subsurface-viewer/src/layers/wells/wellsLayer.ts"),_axes_axesLayer__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./packages/subsurface-viewer/src/layers/axes/axesLayer.ts"),_mui_material__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mui/material/Slider/Slider.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const classes={main:"VolveWells-main"},Root=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_5__.ZP)("div")({[`& .${classes.main}`]:{height:500,border:"1px solid black",position:"relative"}});__webpack_exports__.default={parameters:{storySource:{source:'function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n // remove when ready to fix these.\n\nimport React, { useState } from "react";\nimport { styled } from "@mui/material/styles";\nimport SubsurfaceViewer from "../../SubsurfaceViewer";\nimport { NativeSelect } from "@equinor/eds-core-react";\nimport { createColorMapFunction, ColorLegend, colorTables } from "@emerson-eps/color-tables";\nimport WellsLayer from "./wellsLayer";\nimport AxesLayer from "../axes/axesLayer";\nimport { Slider } from "@mui/material";\nconst PREFIX = "VolveWells";\nconst testWellWithDuplicates = {\n  type: "FeatureCollection",\n  features: [{\n    type: "Feature",\n    geometry: {\n      type: "GeometryCollection",\n      geometries: [{\n        type: "Point",\n        coordinates: [0, 0]\n      }, {\n        type: "LineString",\n        coordinates: [[0, 0, 0], [0, 0, -100], [0, 0, -200], [0, 0, -300], [0, 0, -400], [0, 0, -500], [0, 0, -600], [0, 0, -700], [0, 0, -800]]\n      }]\n    },\n    properties: {\n      name: "wl6",\n      color: [255, 255, 0, 255],\n      md: [[0, 1, 2, 3, 4, 5, 8, 9]]\n    }\n  }]\n};\nconst classes = {\n  main: `${PREFIX}-main`\n};\nconst Root = styled("div")({\n  [`& .${classes.main}`]: {\n    height: 500,\n    border: "1px solid black",\n    position: "relative"\n  }\n});\nexport default {\n  component: SubsurfaceViewer,\n  title: "SubsurfaceViewer / Wells Layer"\n};\nconst Template = args => /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\nconst defaultProps = {\n  id: "volve-wells",\n  resources: {\n    wellsData: "./volve_wells.json"\n  },\n  bounds: [432150, 6475800, 439400, 6481500],\n  layers: [{\n    "@@type": "WellsLayer",\n    data: "@@#resources.wellsData"\n  }]\n};\nconst continuousLogsLayer = {\n  ...defaultProps.layers[0],\n  refine: false,\n  outline: false,\n  logData: "./volve_logs.json",\n  logrunName: "BLOCKING",\n  logName: "PORO",\n  logColor: "Physics"\n};\n\n// Volve wells default example.\nexport const VolveWells = Template.bind({});\nVolveWells.args = defaultProps;\nVolveWells.parameters = {\n  docs: {\n    description: {\n      story: "Volve wells example"\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\n\n// Volve wells with mouseCallback function without logs\nconst VolveWellsWithMouseCallback = args => {\n  const onMouseEvent = React.useCallback(event => {\n    console.log(event);\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({}, args, {\n    onMouseEvent: onMouseEvent\n  })), /*#__PURE__*/React.createElement("div", {\n    style: {\n      position: "absolute",\n      marginLeft: 200\n    }\n  }));\n};\nexport const volveWells2 = VolveWellsWithMouseCallback.bind({});\nvolveWells2.args = {\n  id: "volve-wells",\n  resources: {\n    wellsData: "./volve_wells.json"\n  },\n  bounds: [432150, 6475800, 439400, 6481500],\n  layers: [{\n    "@@type": "WellsLayer",\n    data: "@@#resources.wellsData"\n  }, {\n    "@@type": "Axes2DLayer",\n    id: "axes-layer2D",\n    axisColor: [100, 100, 255],\n    marginH: 100,\n    // Horizontal margin (in pixels)\n    marginV: 40 // Vertical margin (in pixels)\n  }]\n};\n\n// Volve wells with logs.\n//\nexport const DiscreteWellLogs = Template.bind({});\nDiscreteWellLogs.args = {\n  ...defaultProps,\n  layers: [{\n    ...defaultProps.layers[0],\n    refine: false,\n    outline: false,\n    logData: "volve_blocking_zonelog_logs.json",\n    logrunName: "BLOCKING",\n    logName: "ZONELOG",\n    logColor: "Stratigraphy"\n  }]\n};\nDiscreteWellLogs.parameters = {\n  docs: {\n    description: {\n      story: "Volve wells example with well logs."\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nexport const ContinuousWellLogs = Template.bind({});\nContinuousWellLogs.args = {\n  ...defaultProps,\n  layers: [continuousLogsLayer]\n};\nContinuousWellLogs.parameters = {\n  docs: {\n    description: {\n      story: "Volve wells example with well logs."\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nexport const DashedWells = Template.bind({});\nDashedWells.args = {\n  ...defaultProps,\n  layers: [{\n    ...defaultProps.layers[0],\n    lineStyle: {\n      dash: true\n    },\n    refine: false,\n    outline: false\n  }]\n};\nDashedWells.parameters = {\n  docs: {\n    description: {\n      story: "Volve wells example with default dashed well trajectories."\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\n\n// Volve wells default example.\nexport const MultipleVolveWells = Template.bind({});\nMultipleVolveWells.args = {\n  id: "volve-wells",\n  resources: {\n    wellsData: "./volve_wells_1.json",\n    wellsData2: "./volve_wells_2.json"\n  },\n  bounds: [432150, 6475800, 439400, 6481500],\n  layers: [{\n    "@@type": "WellsLayer",\n    data: "@@#resources.wellsData",\n    id: "id1"\n  }, {\n    "@@type": "WellsLayer",\n    data: "@@#resources.wellsData2",\n    id: "id2"\n  }]\n};\nMultipleVolveWells.parameters = {\n  docs: {\n    description: {\n      story: "Multiple Volve wells example"\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nexport const CustomColoredWells = Template.bind({});\nCustomColoredWells.args = {\n  ...defaultProps,\n  layers: [{\n    ...defaultProps.layers[0],\n    lineStyle: {\n      color: [255, 0, 0, 255],\n      dash: [10, 3]\n    },\n    wellHeadStyle: {\n      color: [255, 0, 0, 255]\n    },\n    refine: false,\n    outline: false\n  }]\n};\nCustomColoredWells.parameters = {\n  docs: {\n    description: {\n      story: "Volve wells example with dashed style and red trajectories, with custom style."\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nexport const CustomWidthWells = Template.bind({});\nCustomWidthWells.args = {\n  ...defaultProps,\n  layers: [{\n    ...defaultProps.layers[0],\n    lineStyle: {\n      width: 10\n    },\n    refine: false,\n    outline: false\n  }]\n};\nexport const VolveWellsWithResetButton = args => {\n  const [editedData, setEditedData] = React.useState(args.editedData);\n  const [triggerResetMultipleWells, setTriggerResetMultipleWells] = React.useState(0);\n  const handleChange1 = () => {\n    setTriggerResetMultipleWells(triggerResetMultipleWells + 1);\n  };\n  React.useEffect(() => {\n    setEditedData(args.editedData);\n  }, [args.editedData]);\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({}, args, {\n    editedData: editedData,\n    setProps: updatedProps => {\n      setEditedData(updatedProps);\n    },\n    triggerResetMultipleWells: triggerResetMultipleWells\n  }))), /*#__PURE__*/React.createElement("button", {\n    onClick: handleChange1\n  }, " Reset Multiple Wells "));\n};\nVolveWellsWithResetButton.args = {\n  id: "volve-wells",\n  resources: {\n    wellsData: "./volve_wells.json"\n  },\n  bounds: [432150, 6475800, 439400, 6481500],\n  layers: [{\n    "@@type": "WellsLayer",\n    data: "@@#resources.wellsData"\n  }]\n};\nfunction wellheadSizeCallback(object) {\n  if (object["properties"]["name"].match("15/9-19")) return 0;else return 8;\n}\nfunction colorCallback(object) {\n  if (object["properties"]["name"].match("15/9-F-10")) return [0, 0, 0, 0];else return object["properties"]["color"];\n}\nfunction dashCallback(object) {\n  if (object["properties"]["name"].match("15/9-19")) return [1.5, 1.5];else if (object["properties"]["name"] === "15/9-F-15") return true;else return false;\n}\nfunction widthCallback(object) {\n  if (object["properties"]["name"].match("15/9-F-1")) return 3;else if (object["properties"]["name"] === "15/9-F-4") return 8;else return 5;\n}\nexport const CallbackStyledWells = Template.bind({});\nCallbackStyledWells.args = {\n  ...defaultProps,\n  layers: [{\n    ...defaultProps.layers[0],\n    lineStyle: {\n      color: colorCallback,\n      dash: dashCallback,\n      width: widthCallback\n    },\n    wellHeadStyle: {\n      size: wellheadSizeCallback\n    },\n    refine: false,\n    outline: false\n  }]\n};\nCallbackStyledWells.parameters = {\n  docs: {\n    description: {\n      story: "Volve wells example with trajectory color, width and dash style supplied as callback."\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nexport const AllTrajectoryHidden = Template.bind({});\nAllTrajectoryHidden.args = {\n  ...defaultProps,\n  layers: [{\n    ...defaultProps.layers[0],\n    lineStyle: {\n      color: [0, 0, 0, 0]\n    },\n    refine: false,\n    outline: false\n  }]\n};\nAllTrajectoryHidden.parameters = {\n  docs: {\n    description: {\n      story: "Volve wells example with all trajectory hidden."\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nexport const AllWellHeadsHidden = Template.bind({});\nAllWellHeadsHidden.args = {\n  ...defaultProps,\n  layers: [{\n    ...defaultProps.layers[0],\n    wellHeadStyle: {\n      size: 0\n    },\n    refine: false,\n    outline: false\n  }]\n};\nAllWellHeadsHidden.parameters = {\n  docs: {\n    description: {\n      story: "Volve wells example with all well heads hidden."\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nconst testWell = {\n  type: "FeatureCollection",\n  features: [{\n    type: "Feature",\n    geometry: {\n      type: "GeometryCollection",\n      geometries: [{\n        type: "Point",\n        coordinates: [0, 0]\n      }, {\n        type: "LineString",\n        coordinates: [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 50, -50], [0, 0, -100], [99, 99, -150], [99, 0, -250]]\n      }]\n    },\n    properties: {\n      name: "well99",\n      color: [255, 255, 0, 255],\n      md: [[0, 1, 2, 3, 4, 5, 8, 9]]\n    }\n  }]\n};\nconst BBox = [-100, -100, -250, 100, 100, 0];\nexport const WellsRefine = args => {\n  const [refineNumber, setRefineNumber] = React.useState(1);\n  const props = {\n    ...args,\n    layers: [{\n      "@@type": "WellsLayer",\n      data: testWell,\n      refine: refineNumber\n    }, {\n      "@@type": "AxesLayer",\n      ZIncreasingDownwards: false,\n      bounds: BBox\n    }]\n  };\n  const handleChange = React.useCallback((_event, value) => {\n    setRefineNumber(value);\n  }, []);\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, props)), /*#__PURE__*/React.createElement(Slider, {\n    min: 1,\n    max: 10,\n    defaultValue: 1,\n    step: 1,\n    onChange: handleChange,\n    valueLabelDisplay: "auto"\n  }));\n};\nWellsRefine.args = {\n  id: "refine-wells",\n  cameraPosition: {\n    rotationOrbit: -45,\n    rotationX: 15,\n    zoom: BBox,\n    target: [0, 0, 0]\n  },\n  views: {\n    layout: [1, 1],\n    viewports: [{\n      id: "a",\n      show3D: true\n    }]\n  }\n};\nWellsRefine.parameters = {\n  docs: {\n    description: {\n      story: "3D wells example"\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nexport const Wells3d = Template.bind({});\nWells3d.args = {\n  ...defaultProps,\n  views: {\n    layout: [1, 1],\n    viewports: [{\n      id: "a",\n      show3D: true\n    }]\n  }\n};\nWells3d.parameters = {\n  docs: {\n    description: {\n      story: "3D wells example"\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nexport const VerticalWellWithDuplicates = Template.bind({});\nVerticalWellWithDuplicates.args = {\n  id: "well_176",\n  bounds: [-150, -150, 150, 150],\n  layers: [new WellsLayer({\n    data: testWellWithDuplicates\n  }), new AxesLayer({\n    id: "axes-layer",\n    bounds: [-100, -100, 0, 100, 100, 500]\n  })],\n  views: {\n    layout: [1, 1],\n    viewports: [{\n      id: "verticalwell",\n      show3D: true\n    }]\n  }\n};\nVerticalWellWithDuplicates.parameters = {\n  docs: {\n    description: {\n      story: "One single vertical well"\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\n\n// Gullfaks wells.\nexport const SimplifiedRendering = args => {\n  const [simplifiedRendering, setSimplifiedRendering] = React.useState(false);\n  const props = {\n    ...args,\n    onDragStart: () => setSimplifiedRendering(true),\n    onDragEnd: () => setSimplifiedRendering(false),\n    layers: [new WellsLayer({\n      data: "./gullfaks.json",\n      wellHeadStyle: {\n        size: 4\n      },\n      refine: true,\n      outline: true,\n      simplifiedRendering // If true will cause wellslayer to draw simplified.\n    }), new AxesLayer({\n      id: "axes-layer",\n      bounds: [450000, 6781000, 0, 464000, 6791000, 3500]\n    })]\n  };\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, props);\n};\nSimplifiedRendering.args = {\n  id: "gullfaks",\n  bounds: [450000, 6781000, 464000, 6791000],\n  views: {\n    layout: [1, 1],\n    viewports: [{\n      id: "the_view",\n      show3D: true\n    }]\n  }\n};\nSimplifiedRendering.parameters = {\n  docs: {\n    description: {\n      story: "3D gullfaks wells example"\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nexport const Wells3dDashed = Template.bind({});\nWells3dDashed.args = {\n  ...defaultProps,\n  layers: [{\n    ...defaultProps.layers[0],\n    lineStyle: {\n      dash: true\n    },\n    refine: false,\n    outline: false\n  }],\n  views: {\n    layout: [1, 1],\n    viewports: [{\n      id: "a",\n      show3D: true\n    }]\n  }\n};\nWells3dDashed.parameters = {\n  docs: {\n    description: {\n      story: "3D dashed wells example"\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nexport const ContinuousColorTable = () => {\n  const [colorTable, setColorTable] = useState("Physics");\n  const mapProps = React.useMemo(() => {\n    return {\n      ...defaultProps,\n      layers: [{\n        ...continuousLogsLayer,\n        logColor: colorTable\n      }]\n    };\n  }, [colorTable]);\n  const handleOnChange = event => {\n    setColorTable(event.target?.value);\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NativeSelect, {\n    id: "test",\n    label: "Color table",\n    value: colorTable,\n    onChange: handleOnChange\n  }, /*#__PURE__*/React.createElement("option", {\n    key: "Physics"\n  }, "Physics"), /*#__PURE__*/React.createElement("option", {\n    key: "Rainbow"\n  }, "Rainbow")), /*#__PURE__*/React.createElement("div", {\n    style: {\n      height: "80vh",\n      position: "relative"\n    }\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, mapProps)));\n};\n\n// colorselector for welllayer\nconst wellLayers = [{\n  ...defaultProps.layers[0],\n  refine: false,\n  outline: false,\n  logData: "./volve_logs.json",\n  logrunName: "BLOCKING",\n  logName: "ZONELOG",\n  logColor: "Stratigraphy",\n  colorMappingFunction: createColorMapFunction("Stratigraphy")\n}];\n\n// prop for legend\nconst min = 0;\nconst max = 0.35;\nconst dataObjectName = "ZONELOG";\nconst position = [16, 10];\nconst horizontal = true;\nconst discreteData = {\n  Above_BCU: [[], 0],\n  ABOVE: [[], 1],\n  H12: [[], 2],\n  H11: [[], 3],\n  H10: [[], 4],\n  H9: [[], 5],\n  H8: [[], 6],\n  H7: [[], 7],\n  H6: [[], 8],\n  H5: [[], 9],\n  H4: [[], 10],\n  H3: [[], 11],\n  H2: [[], 12],\n  H1: [[], 13],\n  BELOW: [[], 14]\n};\nconst reverseRange = false;\n\n\nconst wellLayerTemplate = args => {\n  \n  const [getColorName, setColorName] = React.useState("Rainbow");\n  \n  const [isLog, setIsLog] = React.useState(false);\n  \n  const wellLayerData = React.useCallback(data => {\n    setColorName(data);\n  }, []);\n\n  // interpolation method\n  \n  const getInterpolateMethod = React.useCallback(data => {\n    setIsLog(data.isLog);\n  }, []);\n  const layers = [{\n    ...args.wellLayers[0],\n    colorMappingFunction: createColorMapFunction(getColorName),\n    logColor: getColorName ? getColorName : wellLayers[0].logColor,\n    isLog: isLog\n  }];\n  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {\n    style: {\n      float: "right",\n      zIndex: 999,\n      opacity: 1,\n      position: "relative"\n    }\n  }, /*#__PURE__*/React.createElement(ColorLegend, _extends({}, args, {\n    getColorName: wellLayerData,\n    getInterpolateMethod: getInterpolateMethod\n  }))), /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({}, args, {\n    layers: layers\n  })));\n};\n\n\nexport const LegendWithColorSelector = wellLayerTemplate.bind({});\nLegendWithColorSelector.args = {\n  min,\n  max,\n  dataObjectName,\n  position,\n  horizontal,\n  colorTables,\n  discreteData,\n  ...defaultProps,\n  id: defaultProps.id,\n  wellLayers,\n  legend: {\n    visible: false\n  },\n  reverseRange\n};\nLegendWithColorSelector.parameters = {\n  docs: {\n    description: {\n      story: "Clicking on legend opens(toggle) the color selector component and then click on the color scale to update the layer."\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nVolveWells.parameters = {\n  ...VolveWells.parameters,\n  docs: {\n    ...VolveWells.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args} />",\n      ...VolveWells.parameters?.docs?.source\n    }\n  }\n};\nvolveWells2.parameters = {\n  ...volveWells2.parameters,\n  docs: {\n    ...volveWells2.parameters?.docs,\n    source: {\n      originalSource: "args => {\\n  const onMouseEvent = React.useCallback((event: MapMouseEvent) => {\\n    console.log(event);\\n  }, []);\\n  return <>\\n            <SubsurfaceViewer {...args} onMouseEvent={onMouseEvent} />\\n            <div style={{\\n      position: \\"absolute\\",\\n      marginLeft: 200\\n    }}></div>\\n        </>;\\n}",\n      ...volveWells2.parameters?.docs?.source\n    }\n  }\n};\nDiscreteWellLogs.parameters = {\n  ...DiscreteWellLogs.parameters,\n  docs: {\n    ...DiscreteWellLogs.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args} />",\n      ...DiscreteWellLogs.parameters?.docs?.source\n    }\n  }\n};\nContinuousWellLogs.parameters = {\n  ...ContinuousWellLogs.parameters,\n  docs: {\n    ...ContinuousWellLogs.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args} />",\n      ...ContinuousWellLogs.parameters?.docs?.source\n    }\n  }\n};\nDashedWells.parameters = {\n  ...DashedWells.parameters,\n  docs: {\n    ...DashedWells.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args} />",\n      ...DashedWells.parameters?.docs?.source\n    }\n  }\n};\nMultipleVolveWells.parameters = {\n  ...MultipleVolveWells.parameters,\n  docs: {\n    ...MultipleVolveWells.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args} />",\n      ...MultipleVolveWells.parameters?.docs?.source\n    }\n  }\n};\nCustomColoredWells.parameters = {\n  ...CustomColoredWells.parameters,\n  docs: {\n    ...CustomColoredWells.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args} />",\n      ...CustomColoredWells.parameters?.docs?.source\n    }\n  }\n};\nCustomWidthWells.parameters = {\n  ...CustomWidthWells.parameters,\n  docs: {\n    ...CustomWidthWells.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args} />",\n      ...CustomWidthWells.parameters?.docs?.source\n    }\n  }\n};\nVolveWellsWithResetButton.parameters = {\n  ...VolveWellsWithResetButton.parameters,\n  docs: {\n    ...VolveWellsWithResetButton.parameters?.docs,\n    source: {\n      originalSource: "args => {\\n  const [editedData, setEditedData] = React.useState(args.editedData);\\n  const [triggerResetMultipleWells, setTriggerResetMultipleWells] = React.useState<number>(0);\\n  const handleChange1 = () => {\\n    setTriggerResetMultipleWells(triggerResetMultipleWells + 1);\\n  };\\n  React.useEffect(() => {\\n    setEditedData(args.editedData);\\n  }, [args.editedData]);\\n  return <Root>\\n            <div className={classes.main}>\\n                <SubsurfaceViewer {...args} editedData={editedData} setProps={updatedProps => {\\n        setEditedData(updatedProps);\\n      }} triggerResetMultipleWells={triggerResetMultipleWells} />\\n            </div>\\n            <button onClick={handleChange1}> Reset Multiple Wells </button>\\n        </Root>;\\n}",\n      ...VolveWellsWithResetButton.parameters?.docs?.source\n    }\n  }\n};\nCallbackStyledWells.parameters = {\n  ...CallbackStyledWells.parameters,\n  docs: {\n    ...CallbackStyledWells.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args} />",\n      ...CallbackStyledWells.parameters?.docs?.source\n    }\n  }\n};\nAllTrajectoryHidden.parameters = {\n  ...AllTrajectoryHidden.parameters,\n  docs: {\n    ...AllTrajectoryHidden.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args} />",\n      ...AllTrajectoryHidden.parameters?.docs?.source\n    }\n  }\n};\nAllWellHeadsHidden.parameters = {\n  ...AllWellHeadsHidden.parameters,\n  docs: {\n    ...AllWellHeadsHidden.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args} />",\n      ...AllWellHeadsHidden.parameters?.docs?.source\n    }\n  }\n};\nWellsRefine.parameters = {\n  ...WellsRefine.parameters,\n  docs: {\n    ...WellsRefine.parameters?.docs,\n    source: {\n      originalSource: "args => {\\n  const [refineNumber, setRefineNumber] = React.useState<number>(1);\\n  const props = {\\n    ...args,\\n    layers: [{\\n      \\"@@type\\": \\"WellsLayer\\",\\n      data: testWell,\\n      refine: refineNumber\\n    }, {\\n      \\"@@type\\": \\"AxesLayer\\",\\n      ZIncreasingDownwards: false,\\n      bounds: BBox\\n    }]\\n  };\\n  const handleChange = React.useCallback((_event: Event | SyntheticEvent, value: number | number[]) => {\\n    setRefineNumber((value as number));\\n  }, []);\\n  return <Root>\\n            <div className={classes.main}>\\n                <SubsurfaceViewer {...props} />\\n            </div>\\n            <Slider min={1} max={10} defaultValue={1} step={1} onChange={handleChange} valueLabelDisplay={\\"auto\\"} />\\n        </Root>;\\n}",\n      ...WellsRefine.parameters?.docs?.source\n    }\n  }\n};\nWells3d.parameters = {\n  ...Wells3d.parameters,\n  docs: {\n    ...Wells3d.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args} />",\n      ...Wells3d.parameters?.docs?.source\n    }\n  }\n};\nVerticalWellWithDuplicates.parameters = {\n  ...VerticalWellWithDuplicates.parameters,\n  docs: {\n    ...VerticalWellWithDuplicates.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args} />",\n      ...VerticalWellWithDuplicates.parameters?.docs?.source\n    }\n  }\n};\nSimplifiedRendering.parameters = {\n  ...SimplifiedRendering.parameters,\n  docs: {\n    ...SimplifiedRendering.parameters?.docs,\n    source: {\n      originalSource: "args => {\\n  const [simplifiedRendering, setSimplifiedRendering] = React.useState<boolean>(false);\\n  const props = {\\n    ...args,\\n    onDragStart: () => setSimplifiedRendering(true),\\n    onDragEnd: () => setSimplifiedRendering(false),\\n    layers: [new WellsLayer({\\n      data: \\"./gullfaks.json\\",\\n      wellHeadStyle: {\\n        size: 4\\n      },\\n      refine: true,\\n      outline: true,\\n      simplifiedRendering // If true will cause wellslayer to draw simplified.\\n    }), new AxesLayer({\\n      id: \\"axes-layer\\",\\n      bounds: [450000, 6781000, 0, 464000, 6791000, 3500]\\n    })]\\n  };\\n  return <SubsurfaceViewer {...props} />;\\n}",\n      ...SimplifiedRendering.parameters?.docs?.source\n    }\n  }\n};\nWells3dDashed.parameters = {\n  ...Wells3dDashed.parameters,\n  docs: {\n    ...Wells3dDashed.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args} />",\n      ...Wells3dDashed.parameters?.docs?.source\n    }\n  }\n};\nContinuousColorTable.parameters = {\n  ...ContinuousColorTable.parameters,\n  docs: {\n    ...ContinuousColorTable.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  const [colorTable, setColorTable] = useState(\\"Physics\\");\\n  const mapProps = React.useMemo(() => {\\n    return {\\n      ...defaultProps,\\n      layers: [{\\n        ...continuousLogsLayer,\\n        logColor: colorTable\\n      }]\\n    };\\n  }, [colorTable]);\\n  const handleOnChange = (event: React.FormEvent) => {\\n    setColorTable((event.target as HTMLInputElement)?.value);\\n  };\\n  return <>\\n            <NativeSelect id={\\"test\\"} label={\\"Color table\\"} value={colorTable} onChange={handleOnChange}>\\n                <option key={\\"Physics\\"}>{\\"Physics\\"}</option>\\n                <option key={\\"Rainbow\\"}>{\\"Rainbow\\"}</option>\\n            </NativeSelect>\\n            {<div style={{\\n      height: \\"80vh\\",\\n      position: \\"relative\\"\\n    }}>\\n                    <SubsurfaceViewer {...mapProps} />\\n                </div>}\\n        </>;\\n}",\n      ...ContinuousColorTable.parameters?.docs?.source\n    }\n  }\n};\nLegendWithColorSelector.parameters = {\n  ...LegendWithColorSelector.parameters,\n  docs: {\n    ...LegendWithColorSelector.parameters?.docs,\n    source: {\n      originalSource: "(args: any) => {\\n  // eslint-disable-next-line react-hooks/rules-of-hooks\\n  const [getColorName, setColorName] = React.useState(\\"Rainbow\\");\\n  // eslint-disable-next-line react-hooks/rules-of-hooks\\n  const [isLog, setIsLog] = React.useState(false);\\n  // eslint-disable-next-line react-hooks/rules-of-hooks\\n  const wellLayerData = React.useCallback((data: React.SetStateAction<string>) => {\\n    setColorName(data);\\n  }, []);\\n\\n  // interpolation method\\n  // eslint-disable-next-line react-hooks/rules-of-hooks\\n  const getInterpolateMethod = React.useCallback((data: {\\n    isLog: boolean | ((prevState: boolean) => boolean);\\n  }) => {\\n    setIsLog(data.isLog);\\n  }, []);\\n  const layers = [{\\n    ...args.wellLayers[0],\\n    colorMappingFunction: createColorMapFunction(getColorName),\\n    logColor: getColorName ? getColorName : wellLayers[0].logColor,\\n    isLog: isLog\\n  }];\\n  return <div>\\n            <div style={{\\n      float: \\"right\\",\\n      zIndex: 999,\\n      opacity: 1,\\n      position: \\"relative\\"\\n    }}>\\n                <ColorLegend {...args} getColorName={wellLayerData} getInterpolateMethod={getInterpolateMethod} />\\n            </div>\\n            <SubsurfaceViewer {...args} layers={layers} />\\n        </div>;\\n}",\n      ...LegendWithColorSelector.parameters?.docs?.source\n    }\n  }\n};',locationsMap:{"volve-wells":{startLoc:{col:17,line:48},endLoc:{col:81,line:48},startBody:{col:17,line:48},endBody:{col:81,line:48}},"volve-wells-2":{startLoc:{col:36,line:84},endLoc:{col:1,line:96},startBody:{col:36,line:84},endBody:{col:1,line:96}},"discrete-well-logs":{startLoc:{col:17,line:48},endLoc:{col:81,line:48},startBody:{col:17,line:48},endBody:{col:81,line:48}},"continuous-well-logs":{startLoc:{col:17,line:48},endLoc:{col:81,line:48},startBody:{col:17,line:48},endBody:{col:81,line:48}},"dashed-wells":{startLoc:{col:17,line:48},endLoc:{col:81,line:48},startBody:{col:17,line:48},endBody:{col:81,line:48}},"multiple-volve-wells":{startLoc:{col:17,line:48},endLoc:{col:81,line:48},startBody:{col:17,line:48},endBody:{col:81,line:48}},"custom-colored-wells":{startLoc:{col:17,line:48},endLoc:{col:81,line:48},startBody:{col:17,line:48},endBody:{col:81,line:48}},"custom-width-wells":{startLoc:{col:17,line:48},endLoc:{col:81,line:48},startBody:{col:17,line:48},endBody:{col:81,line:48}},"volve-wells-with-reset-button":{startLoc:{col:41,line:242},endLoc:{col:1,line:262},startBody:{col:41,line:242},endBody:{col:1,line:262}},"callback-styled-wells":{startLoc:{col:17,line:48},endLoc:{col:81,line:48},startBody:{col:17,line:48},endBody:{col:81,line:48}},"all-trajectory-hidden":{startLoc:{col:17,line:48},endLoc:{col:81,line:48},startBody:{col:17,line:48},endBody:{col:81,line:48}},"all-well-heads-hidden":{startLoc:{col:17,line:48},endLoc:{col:81,line:48},startBody:{col:17,line:48},endBody:{col:81,line:48}},"wells-refine":{startLoc:{col:27,line:376},endLoc:{col:1,line:403},startBody:{col:27,line:376},endBody:{col:1,line:403}},"wells-3-d":{startLoc:{col:17,line:48},endLoc:{col:81,line:48},startBody:{col:17,line:48},endBody:{col:81,line:48}},"vertical-well-with-duplicates":{startLoc:{col:17,line:48},endLoc:{col:81,line:48},startBody:{col:17,line:48},endBody:{col:81,line:48}},"simplified-rendering":{startLoc:{col:35,line:478},endLoc:{col:1,line:498},startBody:{col:35,line:478},endBody:{col:1,line:498}},"wells-3-d-dashed":{startLoc:{col:17,line:48},endLoc:{col:81,line:48},startBody:{col:17,line:48},endBody:{col:81,line:48}},"continuous-color-table":{startLoc:{col:36,line:547},endLoc:{col:1,line:576},startBody:{col:36,line:547},endBody:{col:1,line:576}},"legend-with-color-selector":{startLoc:{col:26,line:616},endLoc:{col:1,line:650},startBody:{col:26,line:616},endBody:{col:1,line:650}}}}},component:_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,title:"SubsurfaceViewer / Wells Layer"};const Template=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,args),defaultProps={id:"volve-wells",resources:{wellsData:"./volve_wells.json"},bounds:[432150,6475800,439400,6481500],layers:[{"@@type":"WellsLayer",data:"@@#resources.wellsData"}]},continuousLogsLayer={...defaultProps.layers[0],refine:!1,outline:!1,logData:"./volve_logs.json",logrunName:"BLOCKING",logName:"PORO",logColor:"Physics"},VolveWells=Template.bind({});VolveWells.args=defaultProps,VolveWells.parameters={docs:{description:{story:"Volve wells example"},inlineStories:!1,iframeHeight:500}};const volveWells2=(args=>{const onMouseEvent=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((event=>{console.log(event)}),[]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,_extends({},args,{onMouseEvent:onMouseEvent})),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{position:"absolute",marginLeft:200}}))}).bind({});volveWells2.args={id:"volve-wells",resources:{wellsData:"./volve_wells.json"},bounds:[432150,6475800,439400,6481500],layers:[{"@@type":"WellsLayer",data:"@@#resources.wellsData"},{"@@type":"Axes2DLayer",id:"axes-layer2D",axisColor:[100,100,255],marginH:100,marginV:40}]};const DiscreteWellLogs=Template.bind({});DiscreteWellLogs.args={...defaultProps,layers:[{...defaultProps.layers[0],refine:!1,outline:!1,logData:"volve_blocking_zonelog_logs.json",logrunName:"BLOCKING",logName:"ZONELOG",logColor:"Stratigraphy"}]},DiscreteWellLogs.parameters={docs:{description:{story:"Volve wells example with well logs."},inlineStories:!1,iframeHeight:500}};const ContinuousWellLogs=Template.bind({});ContinuousWellLogs.args={...defaultProps,layers:[continuousLogsLayer]},ContinuousWellLogs.parameters={docs:{description:{story:"Volve wells example with well logs."},inlineStories:!1,iframeHeight:500}};const DashedWells=Template.bind({});DashedWells.args={...defaultProps,layers:[{...defaultProps.layers[0],lineStyle:{dash:!0},refine:!1,outline:!1}]},DashedWells.parameters={docs:{description:{story:"Volve wells example with default dashed well trajectories."},inlineStories:!1,iframeHeight:500}};const MultipleVolveWells=Template.bind({});MultipleVolveWells.args={id:"volve-wells",resources:{wellsData:"./volve_wells_1.json",wellsData2:"./volve_wells_2.json"},bounds:[432150,6475800,439400,6481500],layers:[{"@@type":"WellsLayer",data:"@@#resources.wellsData",id:"id1"},{"@@type":"WellsLayer",data:"@@#resources.wellsData2",id:"id2"}]},MultipleVolveWells.parameters={docs:{description:{story:"Multiple Volve wells example"},inlineStories:!1,iframeHeight:500}};const CustomColoredWells=Template.bind({});CustomColoredWells.args={...defaultProps,layers:[{...defaultProps.layers[0],lineStyle:{color:[255,0,0,255],dash:[10,3]},wellHeadStyle:{color:[255,0,0,255]},refine:!1,outline:!1}]},CustomColoredWells.parameters={docs:{description:{story:"Volve wells example with dashed style and red trajectories, with custom style."},inlineStories:!1,iframeHeight:500}};const CustomWidthWells=Template.bind({});CustomWidthWells.args={...defaultProps,layers:[{...defaultProps.layers[0],lineStyle:{width:10},refine:!1,outline:!1}]};const VolveWellsWithResetButton=args=>{const[editedData,setEditedData]=react__WEBPACK_IMPORTED_MODULE_0__.useState(args.editedData),[triggerResetMultipleWells,setTriggerResetMultipleWells]=react__WEBPACK_IMPORTED_MODULE_0__.useState(0);return react__WEBPACK_IMPORTED_MODULE_0__.useEffect((()=>{setEditedData(args.editedData)}),[args.editedData]),react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.main},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,_extends({},args,{editedData:editedData,setProps:updatedProps=>{setEditedData(updatedProps)},triggerResetMultipleWells:triggerResetMultipleWells}))),react__WEBPACK_IMPORTED_MODULE_0__.createElement("button",{onClick:()=>{setTriggerResetMultipleWells(triggerResetMultipleWells+1)}}," Reset Multiple Wells "))};VolveWellsWithResetButton.args={id:"volve-wells",resources:{wellsData:"./volve_wells.json"},bounds:[432150,6475800,439400,6481500],layers:[{"@@type":"WellsLayer",data:"@@#resources.wellsData"}]};const CallbackStyledWells=Template.bind({});CallbackStyledWells.args={...defaultProps,layers:[{...defaultProps.layers[0],lineStyle:{color:function colorCallback(object){return object.properties.name.match("15/9-F-10")?[0,0,0,0]:object.properties.color},dash:function dashCallback(object){return object.properties.name.match("15/9-19")?[1.5,1.5]:"15/9-F-15"===object.properties.name},width:function widthCallback(object){return object.properties.name.match("15/9-F-1")?3:"15/9-F-4"===object.properties.name?8:5}},wellHeadStyle:{size:function wellheadSizeCallback(object){return object.properties.name.match("15/9-19")?0:8}},refine:!1,outline:!1}]},CallbackStyledWells.parameters={docs:{description:{story:"Volve wells example with trajectory color, width and dash style supplied as callback."},inlineStories:!1,iframeHeight:500}};const AllTrajectoryHidden=Template.bind({});AllTrajectoryHidden.args={...defaultProps,layers:[{...defaultProps.layers[0],lineStyle:{color:[0,0,0,0]},refine:!1,outline:!1}]},AllTrajectoryHidden.parameters={docs:{description:{story:"Volve wells example with all trajectory hidden."},inlineStories:!1,iframeHeight:500}};const AllWellHeadsHidden=Template.bind({});AllWellHeadsHidden.args={...defaultProps,layers:[{...defaultProps.layers[0],wellHeadStyle:{size:0},refine:!1,outline:!1}]},AllWellHeadsHidden.parameters={docs:{description:{story:"Volve wells example with all well heads hidden."},inlineStories:!1,iframeHeight:500}};const testWell={type:"FeatureCollection",features:[{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"Point",coordinates:[0,0]},{type:"LineString",coordinates:[[0,0,0],[0,0,1],[0,0,2],[0,50,-50],[0,0,-100],[99,99,-150],[99,0,-250]]}]},properties:{name:"well99",color:[255,255,0,255],md:[[0,1,2,3,4,5,8,9]]}}]},BBox=[-100,-100,-250,100,100,0],WellsRefine=args=>{const[refineNumber,setRefineNumber]=react__WEBPACK_IMPORTED_MODULE_0__.useState(1),props={...args,layers:[{"@@type":"WellsLayer",data:testWell,refine:refineNumber},{"@@type":"AxesLayer",ZIncreasingDownwards:!1,bounds:BBox}]},handleChange=react__WEBPACK_IMPORTED_MODULE_0__.useCallback(((_event,value)=>{setRefineNumber(value)}),[]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.main},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,props)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_6__.ZP,{min:1,max:10,defaultValue:1,step:1,onChange:handleChange,valueLabelDisplay:"auto"}))};WellsRefine.args={id:"refine-wells",cameraPosition:{rotationOrbit:-45,rotationX:15,zoom:BBox,target:[0,0,0]},views:{layout:[1,1],viewports:[{id:"a",show3D:!0}]}},WellsRefine.parameters={docs:{description:{story:"3D wells example"},inlineStories:!1,iframeHeight:500}};const Wells3d=Template.bind({});Wells3d.args={...defaultProps,views:{layout:[1,1],viewports:[{id:"a",show3D:!0}]}},Wells3d.parameters={docs:{description:{story:"3D wells example"},inlineStories:!1,iframeHeight:500}};const VerticalWellWithDuplicates=Template.bind({});VerticalWellWithDuplicates.args={id:"well_176",bounds:[-150,-150,150,150],layers:[new _wellsLayer__WEBPACK_IMPORTED_MODULE_3__.ZP({data:{type:"FeatureCollection",features:[{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"Point",coordinates:[0,0]},{type:"LineString",coordinates:[[0,0,0],[0,0,-100],[0,0,-200],[0,0,-300],[0,0,-400],[0,0,-500],[0,0,-600],[0,0,-700],[0,0,-800]]}]},properties:{name:"wl6",color:[255,255,0,255],md:[[0,1,2,3,4,5,8,9]]}}]}}),new _axes_axesLayer__WEBPACK_IMPORTED_MODULE_4__.Z({id:"axes-layer",bounds:[-100,-100,0,100,100,500]})],views:{layout:[1,1],viewports:[{id:"verticalwell",show3D:!0}]}},VerticalWellWithDuplicates.parameters={docs:{description:{story:"One single vertical well"},inlineStories:!1,iframeHeight:500}};const SimplifiedRendering=args=>{const[simplifiedRendering,setSimplifiedRendering]=react__WEBPACK_IMPORTED_MODULE_0__.useState(!1),props={...args,onDragStart:()=>setSimplifiedRendering(!0),onDragEnd:()=>setSimplifiedRendering(!1),layers:[new _wellsLayer__WEBPACK_IMPORTED_MODULE_3__.ZP({data:"./gullfaks.json",wellHeadStyle:{size:4},refine:!0,outline:!0,simplifiedRendering:simplifiedRendering}),new _axes_axesLayer__WEBPACK_IMPORTED_MODULE_4__.Z({id:"axes-layer",bounds:[45e4,6781e3,0,464e3,6791e3,3500]})]};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,props)};SimplifiedRendering.args={id:"gullfaks",bounds:[45e4,6781e3,464e3,6791e3],views:{layout:[1,1],viewports:[{id:"the_view",show3D:!0}]}},SimplifiedRendering.parameters={docs:{description:{story:"3D gullfaks wells example"},inlineStories:!1,iframeHeight:500}};const Wells3dDashed=Template.bind({});Wells3dDashed.args={...defaultProps,layers:[{...defaultProps.layers[0],lineStyle:{dash:!0},refine:!1,outline:!1}],views:{layout:[1,1],viewports:[{id:"a",show3D:!0}]}},Wells3dDashed.parameters={docs:{description:{story:"3D dashed wells example"},inlineStories:!1,iframeHeight:500}};const ContinuousColorTable=()=>{const[colorTable,setColorTable]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)("Physics"),mapProps=react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>({...defaultProps,layers:[{...continuousLogsLayer,logColor:colorTable}]})),[colorTable]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_equinor_eds_core_react__WEBPACK_IMPORTED_MODULE_7__.p,{id:"test",label:"Color table",value:colorTable,onChange:event=>{setColorTable(event.target?.value)}},react__WEBPACK_IMPORTED_MODULE_0__.createElement("option",{key:"Physics"},"Physics"),react__WEBPACK_IMPORTED_MODULE_0__.createElement("option",{key:"Rainbow"},"Rainbow")),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{height:"80vh",position:"relative"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,mapProps)))},wellLayers=[{...defaultProps.layers[0],refine:!1,outline:!1,logData:"./volve_logs.json",logrunName:"BLOCKING",logName:"ZONELOG",logColor:"Stratigraphy",colorMappingFunction:(0,_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_2__.rX)("Stratigraphy")}],LegendWithColorSelector=(args=>{const[getColorName,setColorName]=react__WEBPACK_IMPORTED_MODULE_0__.useState("Rainbow"),[isLog,setIsLog]=react__WEBPACK_IMPORTED_MODULE_0__.useState(!1),wellLayerData=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((data=>{setColorName(data)}),[]),getInterpolateMethod=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((data=>{setIsLog(data.isLog)}),[]),layers=[{...args.wellLayers[0],colorMappingFunction:(0,_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_2__.rX)(getColorName),logColor:getColorName||wellLayers[0].logColor,isLog:isLog}];return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{float:"right",zIndex:999,opacity:1,position:"relative"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_2__.n6,_extends({},args,{getColorName:wellLayerData,getInterpolateMethod:getInterpolateMethod}))),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,_extends({},args,{layers:layers})))}).bind({});LegendWithColorSelector.args={min:0,max:.35,dataObjectName:"ZONELOG",position:[16,10],horizontal:!0,colorTables:_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_2__.Su,discreteData:{Above_BCU:[[],0],ABOVE:[[],1],H12:[[],2],H11:[[],3],H10:[[],4],H9:[[],5],H8:[[],6],H7:[[],7],H6:[[],8],H5:[[],9],H4:[[],10],H3:[[],11],H2:[[],12],H1:[[],13],BELOW:[[],14]},...defaultProps,id:defaultProps.id,wellLayers:wellLayers,legend:{visible:!1},reverseRange:!1},LegendWithColorSelector.parameters={docs:{description:{story:"Clicking on legend opens(toggle) the color selector component and then click on the color scale to update the layer."},inlineStories:!1,iframeHeight:500}},VolveWells.parameters={...VolveWells.parameters,docs:{...VolveWells.parameters?.docs,source:{originalSource:"args => <SubsurfaceViewer {...args} />",...VolveWells.parameters?.docs?.source}}},volveWells2.parameters={...volveWells2.parameters,docs:{...volveWells2.parameters?.docs,source:{originalSource:'args => {\n  const onMouseEvent = React.useCallback((event: MapMouseEvent) => {\n    console.log(event);\n  }, []);\n  return <>\n            <SubsurfaceViewer {...args} onMouseEvent={onMouseEvent} />\n            <div style={{\n      position: "absolute",\n      marginLeft: 200\n    }}></div>\n        </>;\n}',...volveWells2.parameters?.docs?.source}}},DiscreteWellLogs.parameters={...DiscreteWellLogs.parameters,docs:{...DiscreteWellLogs.parameters?.docs,source:{originalSource:"args => <SubsurfaceViewer {...args} />",...DiscreteWellLogs.parameters?.docs?.source}}},ContinuousWellLogs.parameters={...ContinuousWellLogs.parameters,docs:{...ContinuousWellLogs.parameters?.docs,source:{originalSource:"args => <SubsurfaceViewer {...args} />",...ContinuousWellLogs.parameters?.docs?.source}}},DashedWells.parameters={...DashedWells.parameters,docs:{...DashedWells.parameters?.docs,source:{originalSource:"args => <SubsurfaceViewer {...args} />",...DashedWells.parameters?.docs?.source}}},MultipleVolveWells.parameters={...MultipleVolveWells.parameters,docs:{...MultipleVolveWells.parameters?.docs,source:{originalSource:"args => <SubsurfaceViewer {...args} />",...MultipleVolveWells.parameters?.docs?.source}}},CustomColoredWells.parameters={...CustomColoredWells.parameters,docs:{...CustomColoredWells.parameters?.docs,source:{originalSource:"args => <SubsurfaceViewer {...args} />",...CustomColoredWells.parameters?.docs?.source}}},CustomWidthWells.parameters={...CustomWidthWells.parameters,docs:{...CustomWidthWells.parameters?.docs,source:{originalSource:"args => <SubsurfaceViewer {...args} />",...CustomWidthWells.parameters?.docs?.source}}},VolveWellsWithResetButton.parameters={...VolveWellsWithResetButton.parameters,docs:{...VolveWellsWithResetButton.parameters?.docs,source:{originalSource:"args => {\n  const [editedData, setEditedData] = React.useState(args.editedData);\n  const [triggerResetMultipleWells, setTriggerResetMultipleWells] = React.useState<number>(0);\n  const handleChange1 = () => {\n    setTriggerResetMultipleWells(triggerResetMultipleWells + 1);\n  };\n  React.useEffect(() => {\n    setEditedData(args.editedData);\n  }, [args.editedData]);\n  return <Root>\n            <div className={classes.main}>\n                <SubsurfaceViewer {...args} editedData={editedData} setProps={updatedProps => {\n        setEditedData(updatedProps);\n      }} triggerResetMultipleWells={triggerResetMultipleWells} />\n            </div>\n            <button onClick={handleChange1}> Reset Multiple Wells </button>\n        </Root>;\n}",...VolveWellsWithResetButton.parameters?.docs?.source}}},CallbackStyledWells.parameters={...CallbackStyledWells.parameters,docs:{...CallbackStyledWells.parameters?.docs,source:{originalSource:"args => <SubsurfaceViewer {...args} />",...CallbackStyledWells.parameters?.docs?.source}}},AllTrajectoryHidden.parameters={...AllTrajectoryHidden.parameters,docs:{...AllTrajectoryHidden.parameters?.docs,source:{originalSource:"args => <SubsurfaceViewer {...args} />",...AllTrajectoryHidden.parameters?.docs?.source}}},AllWellHeadsHidden.parameters={...AllWellHeadsHidden.parameters,docs:{...AllWellHeadsHidden.parameters?.docs,source:{originalSource:"args => <SubsurfaceViewer {...args} />",...AllWellHeadsHidden.parameters?.docs?.source}}},WellsRefine.parameters={...WellsRefine.parameters,docs:{...WellsRefine.parameters?.docs,source:{originalSource:'args => {\n  const [refineNumber, setRefineNumber] = React.useState<number>(1);\n  const props = {\n    ...args,\n    layers: [{\n      "@@type": "WellsLayer",\n      data: testWell,\n      refine: refineNumber\n    }, {\n      "@@type": "AxesLayer",\n      ZIncreasingDownwards: false,\n      bounds: BBox\n    }]\n  };\n  const handleChange = React.useCallback((_event: Event | SyntheticEvent, value: number | number[]) => {\n    setRefineNumber((value as number));\n  }, []);\n  return <Root>\n            <div className={classes.main}>\n                <SubsurfaceViewer {...props} />\n            </div>\n            <Slider min={1} max={10} defaultValue={1} step={1} onChange={handleChange} valueLabelDisplay={"auto"} />\n        </Root>;\n}',...WellsRefine.parameters?.docs?.source}}},Wells3d.parameters={...Wells3d.parameters,docs:{...Wells3d.parameters?.docs,source:{originalSource:"args => <SubsurfaceViewer {...args} />",...Wells3d.parameters?.docs?.source}}},VerticalWellWithDuplicates.parameters={...VerticalWellWithDuplicates.parameters,docs:{...VerticalWellWithDuplicates.parameters?.docs,source:{originalSource:"args => <SubsurfaceViewer {...args} />",...VerticalWellWithDuplicates.parameters?.docs?.source}}},SimplifiedRendering.parameters={...SimplifiedRendering.parameters,docs:{...SimplifiedRendering.parameters?.docs,source:{originalSource:'args => {\n  const [simplifiedRendering, setSimplifiedRendering] = React.useState<boolean>(false);\n  const props = {\n    ...args,\n    onDragStart: () => setSimplifiedRendering(true),\n    onDragEnd: () => setSimplifiedRendering(false),\n    layers: [new WellsLayer({\n      data: "./gullfaks.json",\n      wellHeadStyle: {\n        size: 4\n      },\n      refine: true,\n      outline: true,\n      simplifiedRendering // If true will cause wellslayer to draw simplified.\n    }), new AxesLayer({\n      id: "axes-layer",\n      bounds: [450000, 6781000, 0, 464000, 6791000, 3500]\n    })]\n  };\n  return <SubsurfaceViewer {...props} />;\n}',...SimplifiedRendering.parameters?.docs?.source}}},Wells3dDashed.parameters={...Wells3dDashed.parameters,docs:{...Wells3dDashed.parameters?.docs,source:{originalSource:"args => <SubsurfaceViewer {...args} />",...Wells3dDashed.parameters?.docs?.source}}},ContinuousColorTable.parameters={...ContinuousColorTable.parameters,docs:{...ContinuousColorTable.parameters?.docs,source:{originalSource:'() => {\n  const [colorTable, setColorTable] = useState("Physics");\n  const mapProps = React.useMemo(() => {\n    return {\n      ...defaultProps,\n      layers: [{\n        ...continuousLogsLayer,\n        logColor: colorTable\n      }]\n    };\n  }, [colorTable]);\n  const handleOnChange = (event: React.FormEvent) => {\n    setColorTable((event.target as HTMLInputElement)?.value);\n  };\n  return <>\n            <NativeSelect id={"test"} label={"Color table"} value={colorTable} onChange={handleOnChange}>\n                <option key={"Physics"}>{"Physics"}</option>\n                <option key={"Rainbow"}>{"Rainbow"}</option>\n            </NativeSelect>\n            {<div style={{\n      height: "80vh",\n      position: "relative"\n    }}>\n                    <SubsurfaceViewer {...mapProps} />\n                </div>}\n        </>;\n}',...ContinuousColorTable.parameters?.docs?.source}}},LegendWithColorSelector.parameters={...LegendWithColorSelector.parameters,docs:{...LegendWithColorSelector.parameters?.docs,source:{originalSource:'(args: any) => {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [getColorName, setColorName] = React.useState("Rainbow");\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [isLog, setIsLog] = React.useState(false);\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const wellLayerData = React.useCallback((data: React.SetStateAction<string>) => {\n    setColorName(data);\n  }, []);\n\n  // interpolation method\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const getInterpolateMethod = React.useCallback((data: {\n    isLog: boolean | ((prevState: boolean) => boolean);\n  }) => {\n    setIsLog(data.isLog);\n  }, []);\n  const layers = [{\n    ...args.wellLayers[0],\n    colorMappingFunction: createColorMapFunction(getColorName),\n    logColor: getColorName ? getColorName : wellLayers[0].logColor,\n    isLog: isLog\n  }];\n  return <div>\n            <div style={{\n      float: "right",\n      zIndex: 999,\n      opacity: 1,\n      position: "relative"\n    }}>\n                <ColorLegend {...args} getColorName={wellLayerData} getInterpolateMethod={getInterpolateMethod} />\n            </div>\n            <SubsurfaceViewer {...args} layers={layers} />\n        </div>;\n}',...LegendWithColorSelector.parameters?.docs?.source}}};const __namedExportsOrder=["VolveWells","volveWells2","DiscreteWellLogs","ContinuousWellLogs","DashedWells","MultipleVolveWells","CustomColoredWells","CustomWidthWells","VolveWellsWithResetButton","CallbackStyledWells","AllTrajectoryHidden","AllWellHeadsHidden","WellsRefine","Wells3d","VerticalWellWithDuplicates","SimplifiedRendering","Wells3dDashed","ContinuousColorTable","LegendWithColorSelector"];try{ContinuousColorTable.displayName="ContinuousColorTable",ContinuousColorTable.__docgenInfo={description:"",displayName:"ContinuousColorTable",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/layers/wells/wellsLayer.stories.tsx#ContinuousColorTable"]={docgenInfo:ContinuousColorTable.__docgenInfo,name:"ContinuousColorTable",path:"packages/subsurface-viewer/src/layers/wells/wellsLayer.stories.tsx#ContinuousColorTable"})}catch(__react_docgen_typescript_loader_error){}}}]);