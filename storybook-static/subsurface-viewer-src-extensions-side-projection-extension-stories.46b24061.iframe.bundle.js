"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[4474],{"./packages/subsurface-viewer/src/extensions/side-projection-extension.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{SideProjection:function(){return SideProjection},__namedExportsOrder:function(){return __namedExportsOrder},default:function(){return side_projection_extension_stories}});var SubsurfaceViewer=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),react=__webpack_require__("./node_modules/react/index.js"),axesLayer=__webpack_require__("./packages/subsurface-viewer/src/layers/axes/axesLayer.ts"),geojson_layer=__webpack_require__("./node_modules/@deck.gl/layers/dist/esm/geojson-layer/geojson-layer.js"),layer_extension=__webpack_require__("./node_modules/@deck.gl/core/dist/esm/lib/layer-extension.js"),project=__webpack_require__("./node_modules/@deck.gl/core/dist/esm/shaderlib/project/project.js"),project32=__webpack_require__("./node_modules/@deck.gl/core/dist/esm/shaderlib/project32/project32.js");const defaultProps={sideViewIds:[]},shaderModuleVs={name:"unfold-vs",vs:"\nuniform float side_view;\n\nvec3 transform(vec3 clip_position) {\n    if (side_view < 1.0) {\n        return clip_position;\n    }\n    vec3 world_position = geometry.worldPosition.xyz;\n    vec4 transformed = vec4(world_position.x, world_position.z, 0.0, 1.0);\n\n    vec4 commonspace = project_position(transformed);\n\n    vec4 clipspace = project_common_position_to_clipspace(commonspace);\n\n    return clipspace.xyz;\n}\n"},injectionVs={"vs:#decl":"\n  varying vec3 new_position;\n","vs:DECKGL_FILTER_GL_POSITION":"\n  new_position = transform(position.xyz);\n  position.xyz = new_position;\n"};class SideProjectionExtension extends layer_extension.Z{static defaultProps=defaultProps;static extensionName="SideProjectionExtension";getShaders(){return{modules:[shaderModuleVs,project.Z,project32.Z],inject:injectionVs}}draw({uniforms:uniforms}){const{sideViewIds:sideViewIds}=this.props,isSideView=sideViewIds.includes(this.context.viewport.id);uniforms.side_view=isSideView?1:0}}var side_projection_extension_stories={parameters:{storySource:{source:'import SubsurfaceViewer from "../SubsurfaceViewer";\nimport React from "react";\nimport AxesLayer from "../layers/axes/axesLayer";\nimport { GeoJsonLayer } from "@deck.gl/layers/typed";\nimport { SideProjectionExtension } from "./side-projection-extension";\nexport default {\n  component: SubsurfaceViewer,\n  title: "SubsurfaceViewer / SideProjectionExtension"\n};\nconst StoryTemplate = args => {\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nconst defaultProps = {\n  id: "SubsurfaceViewer",\n  views: {\n    layout: [1, 1],\n    showLabel: true,\n    viewports: [{\n      id: "orbit_view",\n      name: "3d view",\n      show3D: true,\n      isSync: false\n    }]\n  }\n};\nconst IntersectionViewData = {\n  type: "FeatureCollection",\n  features: [{\n    type: "Feature",\n    geometry: {\n      type: "GeometryCollection",\n      geometries: [{\n        type: "Polygon",\n        coordinates: [[[500, 1000, -400], [800, 1200, -400], [1000, 1100, -400], [1000, 1100, -600], [800, 1200, -600], [500, 1000, -600], [500, 1000, -400]]]\n      }]\n    },\n    properties: {\n      name: "Fence",\n      color: [235, 107, 52, 255]\n    }\n  }, {\n    type: "Feature",\n    geometry: {\n      type: "GeometryCollection",\n      geometries: [{\n        type: "Point",\n        coordinates: [500, 1000, -400]\n      }, {\n        type: "LineString",\n        coordinates: [[500, 1000, -400], [575, 1050, -450], [650, 1100, -450], [725, 1150, -500], [800, 1200, -500], [900, 1150, -550], [950, 1125, -550], [1000, 1100, -550]]\n      }]\n    },\n    properties: {\n      name: "Well",\n      color: [52, 125, 235, 255]\n    }\n  }, {\n    type: "Feature",\n    geometry: {\n      type: "GeometryCollection",\n      geometries: [{\n        type: "LineString",\n        coordinates: [[500, 1000, -475], [800, 1200, -475], [1000, 1100, -475]]\n      }]\n    },\n    properties: {\n      name: "Surface 1",\n      color: [52, 235, 211, 255]\n    }\n  }, {\n    type: "Feature",\n    geometry: {\n      type: "GeometryCollection",\n      geometries: [{\n        type: "LineString",\n        coordinates: [[500, 1000, -525], [800, 1200, -525], [1000, 1100, -525]]\n      }]\n    },\n    properties: {\n      name: "Surface 2",\n      color: [32, 252, 3, 255]\n    }\n  }]\n};\nconst DEFAULT_LAYER_PROPS = {\n  id: "enhanced-path-layer",\n  data: IntersectionViewData,\n  lineWidthScale: 1,\n  lineBillboard: true,\n  pointBillboard: true,\n  stroked: true,\n  getPointRadius: 3,\n  getLineColor: d => d.properties?.["color"],\n  getFillColor: d => d.properties?.["color"]\n};\nexport const SideProjection = StoryTemplate.bind({});\nSideProjection.args = {\n  ...defaultProps,\n  bounds: [500, 1000, 1200, 1500],\n  layers: [new AxesLayer({\n    id: "axes-layer",\n    bounds: [300, 800, 400, 1300, 1600, 600]\n  }), new GeoJsonLayer({\n    ...DEFAULT_LAYER_PROPS,\n    extensions: [new SideProjectionExtension()],\n    sideViewIds: ["intersection"]\n  })],\n  views: {\n    layout: [1, 2],\n    viewports: [{\n      id: "normal",\n      show3D: true\n    }, {\n      id: "intersection",\n      show3D: false,\n      target: [700, -450]\n    }]\n  }\n};',locationsMap:{"side-projection":{startLoc:{col:22,line:10},endLoc:{col:1,line:12},startBody:{col:22,line:10},endBody:{col:1,line:12}}}}},component:SubsurfaceViewer.Z,title:"SubsurfaceViewer / SideProjectionExtension"};const DEFAULT_LAYER_PROPS={id:"enhanced-path-layer",data:{type:"FeatureCollection",features:[{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"Polygon",coordinates:[[[500,1e3,-400],[800,1200,-400],[1e3,1100,-400],[1e3,1100,-600],[800,1200,-600],[500,1e3,-600],[500,1e3,-400]]]}]},properties:{name:"Fence",color:[235,107,52,255]}},{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"Point",coordinates:[500,1e3,-400]},{type:"LineString",coordinates:[[500,1e3,-400],[575,1050,-450],[650,1100,-450],[725,1150,-500],[800,1200,-500],[900,1150,-550],[950,1125,-550],[1e3,1100,-550]]}]},properties:{name:"Well",color:[52,125,235,255]}},{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"LineString",coordinates:[[500,1e3,-475],[800,1200,-475],[1e3,1100,-475]]}]},properties:{name:"Surface 1",color:[52,235,211,255]}},{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"LineString",coordinates:[[500,1e3,-525],[800,1200,-525],[1e3,1100,-525]]}]},properties:{name:"Surface 2",color:[32,252,3,255]}}]},lineWidthScale:1,lineBillboard:!0,pointBillboard:!0,stroked:!0,getPointRadius:3,getLineColor:d=>d.properties?.color,getFillColor:d=>d.properties?.color},SideProjection=(args=>react.createElement(SubsurfaceViewer.Z,args)).bind({});SideProjection.args={id:"SubsurfaceViewer",views:{layout:[1,1],showLabel:!0,viewports:[{id:"orbit_view",name:"3d view",show3D:!0,isSync:!1}]},bounds:[500,1e3,1200,1500],layers:[new axesLayer.Z({id:"axes-layer",bounds:[300,800,400,1300,1600,600]}),new geojson_layer.Z({...DEFAULT_LAYER_PROPS,extensions:[new SideProjectionExtension],sideViewIds:["intersection"]})],views:{layout:[1,2],viewports:[{id:"normal",show3D:!0},{id:"intersection",show3D:!1,target:[700,-450]}]}},SideProjection.parameters={...SideProjection.parameters,docs:{...SideProjection.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...SideProjection.parameters?.docs?.source}}};const __namedExportsOrder=["SideProjection"]}}]);