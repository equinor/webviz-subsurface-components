"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[7893],{"./packages/subsurface-viewer/src/storybook/layers/MapLayer.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BigMap:function(){return BigMap},BigMap3d:function(){return BigMap3d},BigMapWithHole:function(){return BigMapWithHole},CellCenteredPropMap:function(){return CellCenteredPropMap},ContourLines:function(){return ContourLines},Extensions:function(){return Extensions},MapLayer2d:function(){return MapLayer2d},MapLayer2dDarkMode:function(){return MapLayer2dDarkMode},MapLayer3dPng:function(){return MapLayer3dPng},MapLayer3dPngNoBounds:function(){return MapLayer3dPngNoBounds},NodeCenteredPropMap:function(){return NodeCenteredPropMap},NodeCenteredPropMapWithArrayInput:function(){return NodeCenteredPropMapWithArrayInput},Readout:function(){return Readout},Rotated:function(){return Rotated},SmallMap:function(){return SmallMap},TypedArrayInput:function(){return TypedArrayInput},__namedExportsOrder:function(){return __namedExportsOrder}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@deck.gl/core/dist/esm/views/view.js"),_deck_gl_extensions_typed__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@deck.gl/extensions/dist/esm/clip/clip-extension.js"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),_components_InfoCard__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/subsurface-viewer/src/components/InfoCard.tsx"),_components_Map__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./packages/subsurface-viewer/src/components/Map.tsx"),_components_ViewFooter__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./packages/subsurface-viewer/src/components/ViewFooter.tsx"),_layers_axes_axesLayer__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./packages/subsurface-viewer/src/layers/axes/axesLayer.ts"),_layers_map_mapLayer__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./packages/subsurface-viewer/src/layers/map/mapLayer.ts"),_layers_northarrow_northArrow3DLayer__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./packages/subsurface-viewer/src/layers/northarrow/northArrow3DLayer.ts"),_sharedSettings__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./packages/subsurface-viewer/src/storybook/sharedSettings.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const stories={parameters:{storySource:{source:'function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from "react";\nimport { View } from "@deck.gl/core/typed";\nimport { ClipExtension } from "@deck.gl/extensions/typed";\nimport SubsurfaceViewer from "../../SubsurfaceViewer";\nimport InfoCard from "../../components/InfoCard";\nimport { useHoverInfo } from "../../components/Map";\nimport { ViewFooter } from "../../components/ViewFooter";\nimport AxesLayer from "../../layers/axes/axesLayer";\nimport MapLayer from "../../layers/map/mapLayer";\nimport NorthArrow3DLayer from "../../layers/northarrow/northArrow3DLayer";\nimport { default2DViews, default3DViews, defaultStoryParameters, hugin25mKhNetmapMapLayer, hugin25mKhNetmapMapLayerPng, hugin2DBounds, hugin5mKhNetmapMapLayer, huginAxes3DLayer, northArrowLayer } from "../sharedSettings";\nconst stories = {\n  component: SubsurfaceViewer,\n  title: "SubsurfaceViewer / Map Layer",\n  args: {\n    // Add a reset button for all the stories.\n    // Somehow, I do not manage to add the triggerHome to the general "unset" controls :/\n    triggerHome: 0\n  },\n  // Disable automatic tests for stories using the "no-test" tag.\n  tags: ["no-test"]\n};\nexport default stories;\n\n// Small test map. 4 by 5 cells. One inactive node => 4 inactive cells.\n// property values and depth values both from 0 to 29.\n// Useful for debugging.\nconst smallLayer = {\n  "@@type": "MapLayer",\n  id: "mesh-layer",\n  meshUrl: "small_depths.float32",\n  frame: {\n    origin: [459840.7, 5929826.1],\n    count: [5, 6],\n    increment: [175, 150],\n    rotDeg: 0\n  },\n  propertiesUrl: "small_properties.float32",\n  gridLines: true,\n  material: false,\n  // black to white colors.\n  colorMapFunction: value => [value * 255, value * 255, value * 255],\n  colorMapRange: [0, 29],\n  colorMapClampColor: [255, 0, 0]\n};\n\n// This layer has as many property values as depth values hence each cell will be interpolated in color.\nconst nodeCenteredPropertiesLayer = {\n  "@@type": "MapLayer",\n  id: "node-centered-layer",\n  meshUrl: "data:text/plain;base64,zczMP5qZ2T9mZuY/MzPzP5qZmT9mZqY/MzOzPwAAwD/NzEw/ZmZmPwAAgD/NzIw/zczMPgAAAD+amRk/MzMzPwAAAIDNzMw9zcxMPpqZmT4=",\n  frame: {\n    origin: [0, 0],\n    count: [4, 5],\n    increment: [1, 1],\n    rotDeg: 0\n  },\n  propertiesUrl: "data:text/plain;base64,ZmYmQM3MLEAzMzNAmpk5QM3MDEAzMxNAmpkZQAAAIEBmZuY/MzPzPwAAAEBmZgZAMzOzPwAAwD/NzMw/mpnZPwAAgD/NzIw/mpmZP2Zmpj8=",\n  gridLines: true,\n  material: true,\n  // black to white colors.\n  colorMapFunction: value => [value * 255, value * 255, value * 255]\n};\nconst nodeCenteredPropertiesLayerWithArrayInput = {\n  "@@type": "MapLayer",\n  id: "node-centered-layer",\n  frame: {\n    origin: [0, 0],\n    count: [4, 5],\n    increment: [1, 1],\n    rotDeg: 0\n  },\n  meshData: Array.from(Array(20)).map(() => Math.random()),\n  // Array of 20 random numbers\n  propertiesData: Array.from(Array(20)).map(() => Math.random()),\n  gridLines: true,\n  material: true,\n  // black to white colors.\n  colorMapFunction: value => [value * 255, value * 255, value * 255]\n};\n\n// This layer has as (nx-1)*(ny-1) property values and depth values are nx*ny hence each cell will be fixed in color.\nconst cellCenteredPropertiesLayer = {\n  "@@type": "MapLayer",\n  id: "cell-centered-layer",\n  \n  // One depth pr node\n  meshData: [1.6, 1.7, 1.8, 1.9, 1.2, 1.3, 1.4, 1.5, 0.8, 0.9, 1.0, 1.1, 0.4, 0.5, 0.6, 0.7, 0.0, 0.1, 0.2, 0.3],\n  // One property pr cell.\n  propertiesData: [0.9, 1.0, 1.1, 0.6, undefined, 0.8, 0.3, 0.4, 0.5, 0.0, 0.1, 0.2],\n  \n\n  frame: {\n    origin: [0, 0],\n    count: [4, 5],\n    increment: [1, 1],\n    rotDeg: 0\n  },\n  gridLines: true,\n  material: true,\n  // black to white colors.\n  colorMapFunction: value => [value * 255, value * 255, value * 255],\n  smoothShading: true\n};\n\n// Example rotated layer\nconst meshMapLayerRotated = {\n  ...hugin25mKhNetmapMapLayer,\n  id: "rotated-mesh-layer",\n  frame: {\n    ...hugin25mKhNetmapMapLayer.frame,\n    rotDeg: 30\n    //rotPoint: [436000, 6478000],\n  },\n  material: false\n};\nexport const MapLayer3dPng = {\n  args: {\n    id: "map",\n    layers: [huginAxes3DLayer, hugin25mKhNetmapMapLayerPng, northArrowLayer],\n    bounds: hugin2DBounds,\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example using png as mesh and properties data."\n      }\n    }\n  }\n};\nexport const MapLayer3dPngNoBounds = {\n  args: {\n    id: "map",\n    layers: [huginAxes3DLayer, hugin25mKhNetmapMapLayerPng, northArrowLayer],\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "If no bounds are specified will results in automatically calcultated camera. Will look at center of bounding box of the data"\n      }\n    }\n  }\n};\nconst axesLayer2D = {\n  "@@type": "Axes2DLayer",\n  id: "axesLayer2D",\n  backgroundColor: [0, 255, 255]\n};\nexport const MapLayer2d = {\n  args: {\n    id: "map",\n    layers: [hugin25mKhNetmapMapLayer, axesLayer2D],\n    bounds: hugin2DBounds,\n    views: default2DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example using png as mesh and properties data."\n      }\n    }\n  }\n};\nconst white = [255, 255, 255, 255];\nexport const MapLayer2dDarkMode = {\n  args: {\n    id: "map",\n    layers: [{\n      ...huginAxes3DLayer,\n      labelColor: white,\n      axisColor: white\n    }, {\n      ...hugin25mKhNetmapMapLayer,\n      material: false,\n      gridLines: false\n    }, {\n      ...northArrowLayer,\n      color: white\n    }],\n    bounds: hugin2DBounds,\n    scale: {\n      visible: true,\n      cssStyle: {\n        color: "white"\n      }\n    },\n    views: default2DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example using png as mesh and properties data."\n      }\n    },\n    backgrounds: {\n      default: "dark"\n    }\n  }\n};\nexport const Rotated = {\n  args: {\n    id: "map",\n    layers: [huginAxes3DLayer, meshMapLayerRotated, northArrowLayer],\n    bounds: hugin2DBounds,\n    views: default2DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example using png as mesh and properties data."\n      }\n    }\n  }\n};\nexport const BigMap = {\n  args: {\n    id: "map",\n    layers: [huginAxes3DLayer, hugin5mKhNetmapMapLayer, northArrowLayer],\n    bounds: hugin2DBounds\n  }\n};\nexport const BigMap3d = {\n  args: {\n    id: "map",\n    layers: [huginAxes3DLayer, hugin5mKhNetmapMapLayer, northArrowLayer],\n    bounds: hugin2DBounds,\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example using large map with approx. 1400x1400 cells."\n      }\n    }\n  }\n};\nconst axes_small = {\n  "@@type": "AxesLayer",\n  id: "axes_small",\n  bounds: [459790, 5929776, 0, 460590, 5930626, 30]\n};\nexport const SmallMap = {\n  args: {\n    id: "map",\n    layers: [axes_small, smallLayer, northArrowLayer],\n    bounds: [459840.7, 5929826.1, 460540.7, 5930576.1],\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "4x5 cells."\n      }\n    }\n  }\n};\nconst axes_lite = {\n  "@@type": "AxesLayer",\n  id: "axes_small",\n  bounds: [-1, -1, 0, 4, 5, 3]\n};\n\n//-- CellCenteredPropMap --\nexport const CellCenteredPropMap = {\n  args: {\n    id: "map",\n    layers: [axes_lite, cellCenteredPropertiesLayer, northArrowLayer],\n    bounds: [-1, -1, 4, 5],\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "A small map with properties given at cell centers. Each cell will be constant colored"\n      }\n    }\n  }\n};\n\n//-- NodeCenteredPropMap --\nexport const NodeCenteredPropMap = {\n  args: {\n    id: "map",\n    layers: [axes_lite, nodeCenteredPropertiesLayer, northArrowLayer],\n    bounds: [-1, -1, 4, 5],\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "A small map with properties given at nodes. Each cell will be interpolated in color."\n      }\n    }\n  }\n};\n\n//-- NodeCenteredPropMap  with native javascript arrays as input --\nexport const NodeCenteredPropMapWithArrayInput = {\n  args: {\n    id: "map",\n    layers: [axes_lite, nodeCenteredPropertiesLayerWithArrayInput, northArrowLayer],\n    bounds: [-1, -1, 4, 5],\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Both mesh and property data given as native javascript arrays (as opposed to URL)."\n      }\n    }\n  },\n  tags: ["no-test"]\n};\nfunction makeGaussian(amplitude, x0, y0, stdX, stdY) {\n  return function (amplitude, x0, y0, stdX, stdY, x, y) {\n    const exponent = -(Math.pow(x - x0, 2) / (2 * Math.pow(stdX, 2)) + Math.pow(y - y0, 2) / (2 * Math.pow(stdY, 2)));\n    return amplitude * Math.pow(Math.E, exponent);\n  }.bind(null, amplitude, x0, y0, stdX, stdY);\n}\nfunction makeData(n, amplitude) {\n  const X0 = 0;\n  const Y0 = 0;\n  const stdX = 75;\n  const stdY = 50;\n  const f = makeGaussian(amplitude, X0, Y0, stdX, stdY);\n  const data = new Float32Array(n * n).map((val, index) => {\n    const x = index % n - n / 2;\n    const y = Math.floor(index / n) - n / 2;\n    return f(x, y); // keep + 0.3 * Math.random();\n  });\n  return data;\n}\nfunction nearestColorMap(x) {\n  if (x > 0.5) return [100, 255, 255];else if (x > 0.1) return [255, 100, 255];\n  return [255, 255, 100];\n}\n\n//-- MapLayer with native javascript arrays as input --\nconst TypedArrayInputComponent = args => {\n  const subsurfaceViewerArgs = {\n    id: "map",\n    layers: [{\n      "@@type": "MapLayer",\n      id: "mesh-layer-typed-input",\n      frame: {\n        origin: [-args.dimension / 2, -args.dimension / 2],\n        count: [args.dimension, args.dimension],\n        increment: [1, 1],\n        rotDeg: 0\n      },\n      meshData: makeData(args.dimension, 99),\n      propertiesData: makeData(args.dimension, 1),\n      gridLines: false,\n      material: true,\n      ZIncreasingDownwards: false,\n      contours: [0, 5],\n      colorMapFunction: nearestColorMap\n    }, {\n      "@@type": "AxesLayer",\n      id: "axes-typed-input",\n      ZIncreasingDownwards: false,\n      bounds: [-args.dimension / 2, -args.dimension / 2, -10, args.dimension / 2, args.dimension / 2, 60]\n    }],\n    cameraPosition: {\n      rotationOrbit: 45,\n      rotationX: 45,\n      zoom: [-100, -100, -10, 100, 100, 60],\n      target: [0, 0, 0]\n    },\n    views: default3DViews,\n    triggerHome: args.triggerHome,\n    typedArraySupport: true\n  };\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, subsurfaceViewerArgs);\n};\nexport const TypedArrayInput = {\n  args: {\n    dimension: 300\n  },\n  argTypes: {\n    dimension: {\n      control: {\n        type: "range",\n        min: 150,\n        max: 300,\n        step: 1\n      }\n    }\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Both mesh and property data given as typed arrays arrays (as opposed to URL)."\n      }\n    }\n  },\n  render: args => /*#__PURE__*/React.createElement(TypedArrayInputComponent, args)\n};\nconst ReadoutComponent = () => {\n  const [hoverInfo, hoverCallback] = useHoverInfo();\n  const args = React.useMemo(() => {\n    return {\n      id: "readout",\n      bounds: hugin2DBounds,\n      layers: [{\n        ...hugin25mKhNetmapMapLayer,\n        material: false\n      }],\n      coords: {\n        visible: false\n      },\n      onMouseEvent: hoverCallback\n    };\n  }, [hoverCallback]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SubsurfaceViewer, args), hoverInfo && /*#__PURE__*/React.createElement(InfoCard, {\n    pickInfos: hoverInfo\n  }));\n};\nexport const Readout = {\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Readout example."\n      }\n    }\n  },\n  render: () => /*#__PURE__*/React.createElement(ReadoutComponent, null)\n};\nconst BigMapWithHoleComponent = () => {\n  const [hoverInfo, hoverCallback] = useHoverInfo();\n  const args = React.useMemo(() => {\n    return {\n      id: "readout",\n      bounds: hugin2DBounds,\n      layers: [{\n        ...hugin5mKhNetmapMapLayer,\n        meshUrl: "hugin_depth_5_m_w_hole.float32",\n        gridLines: false,\n        material: false\n      }],\n      coords: {\n        visible: false\n      },\n      onMouseEvent: hoverCallback\n    };\n  }, [hoverCallback]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SubsurfaceViewer, args), hoverInfo && /*#__PURE__*/React.createElement(InfoCard, {\n    pickInfos: hoverInfo\n  }));\n};\nexport const BigMapWithHole = {\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example of map with a hole."\n      }\n    }\n  },\n  render: () => /*#__PURE__*/React.createElement(BigMapWithHoleComponent, null)\n};\nconst ContourLinesComponent = props => {\n  const noContourMapLayer = new MapLayer({\n    ...hugin25mKhNetmapMapLayer,\n    id: "no_contours",\n    contours: [-1.0, -1.0]\n  });\n  const contourMapLayer = new MapLayer({\n    ...hugin25mKhNetmapMapLayer,\n    id: "contours",\n    contours: [props.contourOffset, props.zContourInterval]\n  });\n  const propertyContourMapLayer = new MapLayer({\n    ...hugin25mKhNetmapMapLayer,\n    id: "property_contours",\n    contours: [props.contourOffset, props.propertyContourInterval],\n    isContoursDepth: false\n  });\n  const flatPropertyContourMapLayer = new MapLayer({\n    ...hugin25mKhNetmapMapLayer,\n    id: "flat",\n    meshData: undefined,\n    contours: [props.contourOffset, props.propertyContourInterval]\n  });\n  const views = {\n    layout: [2, 2],\n    showLabel: true,\n    viewports: [{\n      id: "view_1",\n      show3D: props.show3d,\n      layerIds: [noContourMapLayer.id],\n      isSync: props.syncViewports\n    }, {\n      id: "view_2",\n      show3D: props.show3d,\n      layerIds: [contourMapLayer.id],\n      isSync: props.syncViewports\n    }, {\n      id: "view_3",\n      show3D: props.show3d,\n      layerIds: [propertyContourMapLayer.id],\n      isSync: props.syncViewports\n    }, {\n      id: "view_4",\n      show3D: props.show3d,\n      layerIds: [flatPropertyContourMapLayer.id],\n      isSync: props.syncViewports\n    }]\n  };\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, {\n    id: "test",\n    layers: [noContourMapLayer, contourMapLayer, propertyContourMapLayer, flatPropertyContourMapLayer],\n    views: views\n  },\n  /*#__PURE__*/\n  \n  /* @ts-expect-error */\n  React.createElement(View, {\n    id: "view_1"\n  }, /*#__PURE__*/React.createElement(ViewFooter, null, "Default - no contour lines")),\n  /*#__PURE__*/\n  \n  /* @ts-expect-error */\n  React.createElement(View, {\n    id: "view_2"\n  }, /*#__PURE__*/React.createElement(ViewFooter, null, "Contour lines enabled - default is Z value")),\n  /*#__PURE__*/\n  \n  /* @ts-expect-error */\n  React.createElement(View, {\n    id: "view_3"\n  }, /*#__PURE__*/React.createElement(ViewFooter, null, "Contour lines on property value")),\n  /*#__PURE__*/\n  \n  /* @ts-expect-error */\n  React.createElement(View, {\n    id: "view_4"\n  }, /*#__PURE__*/React.createElement(ViewFooter, null, "Contour lines on flat map - default is property value")));\n};\nexport const ContourLines = {\n  args: {\n    syncViewports: true,\n    show3d: false,\n    contourOffset: 0,\n    zContourInterval: 100,\n    propertyContourInterval: 5000,\n    marginPixels: 0\n  },\n  render: args => /*#__PURE__*/React.createElement(ContourLinesComponent, args)\n};\nconst ExtensionsComponent = args => {\n  const rightClipBounds = [args.bounds?.[0] + args.clipX, args.bounds?.[1], args.bounds?.[2], args.bounds?.[3]];\n  const leftClipBounds = [args.bounds?.[0], args.bounds?.[1], args.bounds?.[0] + args.clipX, args.bounds?.[3]];\n  // Can not use Record<string, unknown> because extensions will not be supported\n  const leftMap = new MapLayer({\n    ...hugin25mKhNetmapMapLayer,\n    id: "left",\n    material: false,\n    extensions: [new ClipExtension()],\n    clipBounds: leftClipBounds,\n    clipByInstance: true\n  });\n  const rightMap = new MapLayer({\n    ...hugin25mKhNetmapMapLayer,\n    id: "right",\n    colorMapName: "Physics reverse",\n    material: false,\n    extensions: [new ClipExtension()],\n    clipBounds: rightClipBounds,\n    clipByInstance: true\n  });\n  const layers = [new AxesLayer({\n    ...huginAxes3DLayer\n  }), leftMap, rightMap, new NorthArrow3DLayer()];\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({}, args, {\n    layers: layers\n  }));\n};\nexport const Extensions = {\n  args: {\n    id: "map",\n    bounds: hugin2DBounds,\n    views: default3DViews,\n    clipX: 1000\n  },\n  argTypes: {\n    clipX: {\n      control: {\n        type: "range",\n        min: 0,\n        max: 8000,\n        step: 10\n      }\n    }\n  },\n  render: args => /*#__PURE__*/React.createElement(ExtensionsComponent, args)\n};',locationsMap:{"map-layer-3-d-png":{startLoc:{col:29,line:118},endLoc:{col:1,line:133},startBody:{col:29,line:118},endBody:{col:1,line:133}},"map-layer-3-d-png-no-bounds":{startLoc:{col:37,line:134},endLoc:{col:1,line:148},startBody:{col:37,line:134},endBody:{col:1,line:148}},"map-layer-2-d":{startLoc:{col:26,line:154},endLoc:{col:1,line:169},startBody:{col:26,line:154},endBody:{col:1,line:169}},"map-layer-2-d-dark-mode":{startLoc:{col:34,line:171},endLoc:{col:1,line:206},startBody:{col:34,line:171},endBody:{col:1,line:206}},rotated:{startLoc:{col:23,line:207},endLoc:{col:1,line:222},startBody:{col:23,line:207},endBody:{col:1,line:222}},"big-map":{startLoc:{col:22,line:223},endLoc:{col:1,line:229},startBody:{col:22,line:223},endBody:{col:1,line:229}},"big-map-3-d":{startLoc:{col:24,line:230},endLoc:{col:1,line:245},startBody:{col:24,line:230},endBody:{col:1,line:245}},"small-map":{startLoc:{col:24,line:251},endLoc:{col:1,line:266},startBody:{col:24,line:251},endBody:{col:1,line:266}},"cell-centered-prop-map":{startLoc:{col:35,line:274},endLoc:{col:1,line:289},startBody:{col:35,line:274},endBody:{col:1,line:289}},"node-centered-prop-map":{startLoc:{col:35,line:292},endLoc:{col:1,line:307},startBody:{col:35,line:292},endBody:{col:1,line:307}},"node-centered-prop-map-with-array-input":{startLoc:{col:49,line:310},endLoc:{col:1,line:326},startBody:{col:49,line:310},endBody:{col:1,line:326}},"typed-array-input":{startLoc:{col:31,line:389},endLoc:{col:1,line:412},startBody:{col:31,line:389},endBody:{col:1,line:412}},readout:{startLoc:{col:23,line:433},endLoc:{col:1,line:443},startBody:{col:23,line:433},endBody:{col:1,line:443}},"big-map-with-hole":{startLoc:{col:30,line:466},endLoc:{col:1,line:476},startBody:{col:30,line:466},endBody:{col:1,line:476}},"contour-lines":{startLoc:{col:28,line:555},endLoc:{col:1,line:565},startBody:{col:28,line:555},endBody:{col:1,line:565}},extensions:{startLoc:{col:26,line:594},endLoc:{col:1,line:612},startBody:{col:26,line:594},endBody:{col:1,line:612}}}}},component:_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,title:"SubsurfaceViewer / Map Layer",args:{triggerHome:0},tags:["no-test"]};__webpack_exports__.default=stories;const nodeCenteredPropertiesLayerWithArrayInput={"@@type":"MapLayer",id:"node-centered-layer",frame:{origin:[0,0],count:[4,5],increment:[1,1],rotDeg:0},meshData:Array.from(Array(20)).map((()=>Math.random())),propertiesData:Array.from(Array(20)).map((()=>Math.random())),gridLines:!0,material:!0,colorMapFunction:value=>[255*value,255*value,255*value]},cellCenteredPropertiesLayer={"@@type":"MapLayer",id:"cell-centered-layer",meshData:[1.6,1.7,1.8,1.9,1.2,1.3,1.4,1.5,.8,.9,1,1.1,.4,.5,.6,.7,0,.1,.2,.3],propertiesData:[.9,1,1.1,.6,void 0,.8,.3,.4,.5,0,.1,.2],frame:{origin:[0,0],count:[4,5],increment:[1,1],rotDeg:0},gridLines:!0,material:!0,colorMapFunction:value=>[255*value,255*value,255*value],smoothShading:!0},meshMapLayerRotated={..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.vz,id:"rotated-mesh-layer",frame:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.vz.frame,rotDeg:30},material:!1},MapLayer3dPng={args:{id:"map",layers:[_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.QH,_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.e1,_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.D$],bounds:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.Jl,views:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.Pl},parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.R4.docs,description:{story:"Example using png as mesh and properties data."}}}},MapLayer3dPngNoBounds={args:{id:"map",layers:[_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.QH,_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.e1,_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.D$],views:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.Pl},parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.R4.docs,description:{story:"If no bounds are specified will results in automatically calcultated camera. Will look at center of bounding box of the data"}}}},MapLayer2d={args:{id:"map",layers:[_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.vz,{"@@type":"Axes2DLayer",id:"axesLayer2D",backgroundColor:[0,255,255]}],bounds:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.Jl,views:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.zs},parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.R4.docs,description:{story:"Example using png as mesh and properties data."}}}},white=[255,255,255,255],MapLayer2dDarkMode={args:{id:"map",layers:[{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.QH,labelColor:white,axisColor:white},{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.vz,material:!1,gridLines:!1},{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.D$,color:white}],bounds:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.Jl,scale:{visible:!0,cssStyle:{color:"white"}},views:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.zs},parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.R4.docs,description:{story:"Example using png as mesh and properties data."}},backgrounds:{default:"dark"}}},Rotated={args:{id:"map",layers:[_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.QH,meshMapLayerRotated,_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.D$],bounds:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.Jl,views:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.zs},parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.R4.docs,description:{story:"Example using png as mesh and properties data."}}}},BigMap={args:{id:"map",layers:[_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.QH,_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.cs,_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.D$],bounds:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.Jl}},BigMap3d={args:{id:"map",layers:[_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.QH,_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.cs,_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.D$],bounds:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.Jl,views:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.Pl},parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.R4.docs,description:{story:"Example using large map with approx. 1400x1400 cells."}}}},SmallMap={args:{id:"map",layers:[{"@@type":"AxesLayer",id:"axes_small",bounds:[459790,5929776,0,460590,5930626,30]},{"@@type":"MapLayer",id:"mesh-layer",meshUrl:"small_depths.float32",frame:{origin:[459840.7,5929826.1],count:[5,6],increment:[175,150],rotDeg:0},propertiesUrl:"small_properties.float32",gridLines:!0,material:!1,colorMapFunction:value=>[255*value,255*value,255*value],colorMapRange:[0,29],colorMapClampColor:[255,0,0]},_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.D$],bounds:[459840.7,5929826.1,460540.7,5930576.1],views:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.Pl},parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.R4.docs,description:{story:"4x5 cells."}}}},axes_lite={"@@type":"AxesLayer",id:"axes_small",bounds:[-1,-1,0,4,5,3]},CellCenteredPropMap={args:{id:"map",layers:[axes_lite,cellCenteredPropertiesLayer,_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.D$],bounds:[-1,-1,4,5],views:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.Pl},parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.R4.docs,description:{story:"A small map with properties given at cell centers. Each cell will be constant colored"}}}},NodeCenteredPropMap={args:{id:"map",layers:[axes_lite,{"@@type":"MapLayer",id:"node-centered-layer",meshUrl:"data:text/plain;base64,zczMP5qZ2T9mZuY/MzPzP5qZmT9mZqY/MzOzPwAAwD/NzEw/ZmZmPwAAgD/NzIw/zczMPgAAAD+amRk/MzMzPwAAAIDNzMw9zcxMPpqZmT4=",frame:{origin:[0,0],count:[4,5],increment:[1,1],rotDeg:0},propertiesUrl:"data:text/plain;base64,ZmYmQM3MLEAzMzNAmpk5QM3MDEAzMxNAmpkZQAAAIEBmZuY/MzPzPwAAAEBmZgZAMzOzPwAAwD/NzMw/mpnZPwAAgD/NzIw/mpmZP2Zmpj8=",gridLines:!0,material:!0,colorMapFunction:value=>[255*value,255*value,255*value]},_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.D$],bounds:[-1,-1,4,5],views:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.Pl},parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.R4.docs,description:{story:"A small map with properties given at nodes. Each cell will be interpolated in color."}}}},NodeCenteredPropMapWithArrayInput={args:{id:"map",layers:[axes_lite,nodeCenteredPropertiesLayerWithArrayInput,_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.D$],bounds:[-1,-1,4,5],views:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.Pl},parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.R4.docs,description:{story:"Both mesh and property data given as native javascript arrays (as opposed to URL)."}}},tags:["no-test"]};function makeData(n,amplitude){const f=function makeGaussian(amplitude,x0,y0,stdX,stdY){return function(amplitude,x0,y0,stdX,stdY,x,y){const exponent=-(Math.pow(x-x0,2)/(2*Math.pow(stdX,2))+Math.pow(y-y0,2)/(2*Math.pow(stdY,2)));return amplitude*Math.pow(Math.E,exponent)}.bind(null,amplitude,x0,y0,stdX,stdY)}(amplitude,0,0,75,50);return new Float32Array(n*n).map(((val,index)=>{const x=index%n-n/2,y=Math.floor(index/n)-n/2;return f(x,y)}))}function nearestColorMap(x){return x>.5?[100,255,255]:x>.1?[255,100,255]:[255,255,100]}const TypedArrayInputComponent=args=>{const subsurfaceViewerArgs={id:"map",layers:[{"@@type":"MapLayer",id:"mesh-layer-typed-input",frame:{origin:[-args.dimension/2,-args.dimension/2],count:[args.dimension,args.dimension],increment:[1,1],rotDeg:0},meshData:makeData(args.dimension,99),propertiesData:makeData(args.dimension,1),gridLines:!1,material:!0,ZIncreasingDownwards:!1,contours:[0,5],colorMapFunction:nearestColorMap},{"@@type":"AxesLayer",id:"axes-typed-input",ZIncreasingDownwards:!1,bounds:[-args.dimension/2,-args.dimension/2,-10,args.dimension/2,args.dimension/2,60]}],cameraPosition:{rotationOrbit:45,rotationX:45,zoom:[-100,-100,-10,100,100,60],target:[0,0,0]},views:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.Pl,triggerHome:args.triggerHome,typedArraySupport:!0};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,subsurfaceViewerArgs)},TypedArrayInput={args:{dimension:300},argTypes:{dimension:{control:{type:"range",min:150,max:300,step:1}}},parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.R4.docs,description:{story:"Both mesh and property data given as typed arrays arrays (as opposed to URL)."}}},render:args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(TypedArrayInputComponent,args)},ReadoutComponent=()=>{const[hoverInfo,hoverCallback]=(0,_components_Map__WEBPACK_IMPORTED_MODULE_3__.oO)(),args=react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>({id:"readout",bounds:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.Jl,layers:[{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.vz,material:!1}],coords:{visible:!1},onMouseEvent:hoverCallback})),[hoverCallback]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,args),hoverInfo&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_InfoCard__WEBPACK_IMPORTED_MODULE_2__.Z,{pickInfos:hoverInfo}))},Readout={parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.R4.docs,description:{story:"Readout example."}}},render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(ReadoutComponent,null)},BigMapWithHoleComponent=()=>{const[hoverInfo,hoverCallback]=(0,_components_Map__WEBPACK_IMPORTED_MODULE_3__.oO)(),args=react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>({id:"readout",bounds:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.Jl,layers:[{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.cs,meshUrl:"hugin_depth_5_m_w_hole.float32",gridLines:!1,material:!1}],coords:{visible:!1},onMouseEvent:hoverCallback})),[hoverCallback]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,args),hoverInfo&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_InfoCard__WEBPACK_IMPORTED_MODULE_2__.Z,{pickInfos:hoverInfo}))},BigMapWithHole={parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.R4.docs,description:{story:"Example of map with a hole."}}},render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(BigMapWithHoleComponent,null)},ContourLinesComponent=props=>{const noContourMapLayer=new _layers_map_mapLayer__WEBPACK_IMPORTED_MODULE_6__.Z({..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.vz,id:"no_contours",contours:[-1,-1]}),contourMapLayer=new _layers_map_mapLayer__WEBPACK_IMPORTED_MODULE_6__.Z({..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.vz,id:"contours",contours:[props.contourOffset,props.zContourInterval]}),propertyContourMapLayer=new _layers_map_mapLayer__WEBPACK_IMPORTED_MODULE_6__.Z({..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.vz,id:"property_contours",contours:[props.contourOffset,props.propertyContourInterval],isContoursDepth:!1}),flatPropertyContourMapLayer=new _layers_map_mapLayer__WEBPACK_IMPORTED_MODULE_6__.Z({..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.vz,id:"flat",meshData:void 0,contours:[props.contourOffset,props.propertyContourInterval]}),views={layout:[2,2],showLabel:!0,viewports:[{id:"view_1",show3D:props.show3d,layerIds:[noContourMapLayer.id],isSync:props.syncViewports},{id:"view_2",show3D:props.show3d,layerIds:[contourMapLayer.id],isSync:props.syncViewports},{id:"view_3",show3D:props.show3d,layerIds:[propertyContourMapLayer.id],isSync:props.syncViewports},{id:"view_4",show3D:props.show3d,layerIds:[flatPropertyContourMapLayer.id],isSync:props.syncViewports}]};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,{id:"test",layers:[noContourMapLayer,contourMapLayer,propertyContourMapLayer,flatPropertyContourMapLayer],views:views},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_9__.Z,{id:"view_1"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_ViewFooter__WEBPACK_IMPORTED_MODULE_4__.n,null,"Default - no contour lines")),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_9__.Z,{id:"view_2"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_ViewFooter__WEBPACK_IMPORTED_MODULE_4__.n,null,"Contour lines enabled - default is Z value")),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_9__.Z,{id:"view_3"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_ViewFooter__WEBPACK_IMPORTED_MODULE_4__.n,null,"Contour lines on property value")),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_9__.Z,{id:"view_4"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_ViewFooter__WEBPACK_IMPORTED_MODULE_4__.n,null,"Contour lines on flat map - default is property value")))},ContourLines={args:{syncViewports:!0,show3d:!1,contourOffset:0,zContourInterval:100,propertyContourInterval:5e3,marginPixels:0},render:args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(ContourLinesComponent,args)},ExtensionsComponent=args=>{const rightClipBounds=[args.bounds?.[0]+args.clipX,args.bounds?.[1],args.bounds?.[2],args.bounds?.[3]],leftClipBounds=[args.bounds?.[0],args.bounds?.[1],args.bounds?.[0]+args.clipX,args.bounds?.[3]],leftMap=new _layers_map_mapLayer__WEBPACK_IMPORTED_MODULE_6__.Z({..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.vz,id:"left",material:!1,extensions:[new _deck_gl_extensions_typed__WEBPACK_IMPORTED_MODULE_10__.Z],clipBounds:leftClipBounds,clipByInstance:!0}),rightMap=new _layers_map_mapLayer__WEBPACK_IMPORTED_MODULE_6__.Z({..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.vz,id:"right",colorMapName:"Physics reverse",material:!1,extensions:[new _deck_gl_extensions_typed__WEBPACK_IMPORTED_MODULE_10__.Z],clipBounds:rightClipBounds,clipByInstance:!0}),layers=[new _layers_axes_axesLayer__WEBPACK_IMPORTED_MODULE_5__.Z({..._sharedSettings__WEBPACK_IMPORTED_MODULE_8__.QH}),leftMap,rightMap,new _layers_northarrow_northArrow3DLayer__WEBPACK_IMPORTED_MODULE_7__.Z];return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,_extends({},args,{layers:layers}))},Extensions={args:{id:"map",bounds:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.Jl,views:_sharedSettings__WEBPACK_IMPORTED_MODULE_8__.Pl,clipX:1e3},argTypes:{clipX:{control:{type:"range",min:0,max:8e3,step:10}}},render:args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(ExtensionsComponent,args)};MapLayer3dPng.parameters={...MapLayer3dPng.parameters,docs:{...MapLayer3dPng.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [huginAxes3DLayer, hugin25mKhNetmapMapLayerPng, northArrowLayer],\n    bounds: hugin2DBounds,\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example using png as mesh and properties data."\n      }\n    }\n  }\n}',...MapLayer3dPng.parameters?.docs?.source}}},MapLayer3dPngNoBounds.parameters={...MapLayer3dPngNoBounds.parameters,docs:{...MapLayer3dPngNoBounds.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [huginAxes3DLayer, hugin25mKhNetmapMapLayerPng, northArrowLayer],\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "If no bounds are specified will results in automatically calcultated camera. Will look at center of bounding box of the data"\n      }\n    }\n  }\n}',...MapLayer3dPngNoBounds.parameters?.docs?.source}}},MapLayer2d.parameters={...MapLayer2d.parameters,docs:{...MapLayer2d.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [hugin25mKhNetmapMapLayer, axesLayer2D],\n    bounds: hugin2DBounds,\n    views: default2DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example using png as mesh and properties data."\n      }\n    }\n  }\n}',...MapLayer2d.parameters?.docs?.source}}},MapLayer2dDarkMode.parameters={...MapLayer2dDarkMode.parameters,docs:{...MapLayer2dDarkMode.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [{\n      ...huginAxes3DLayer,\n      labelColor: white,\n      axisColor: white\n    }, {\n      ...hugin25mKhNetmapMapLayer,\n      material: false,\n      gridLines: false\n    }, {\n      ...northArrowLayer,\n      color: white\n    }],\n    bounds: hugin2DBounds,\n    scale: {\n      visible: true,\n      cssStyle: {\n        color: "white"\n      }\n    },\n    views: default2DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example using png as mesh and properties data."\n      }\n    },\n    backgrounds: {\n      default: "dark"\n    }\n  }\n}',...MapLayer2dDarkMode.parameters?.docs?.source}}},Rotated.parameters={...Rotated.parameters,docs:{...Rotated.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [huginAxes3DLayer, meshMapLayerRotated, northArrowLayer],\n    bounds: hugin2DBounds,\n    views: default2DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example using png as mesh and properties data."\n      }\n    }\n  }\n}',...Rotated.parameters?.docs?.source}}},BigMap.parameters={...BigMap.parameters,docs:{...BigMap.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [huginAxes3DLayer, hugin5mKhNetmapMapLayer, northArrowLayer],\n    bounds: hugin2DBounds\n  }\n}',...BigMap.parameters?.docs?.source}}},BigMap3d.parameters={...BigMap3d.parameters,docs:{...BigMap3d.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [huginAxes3DLayer, hugin5mKhNetmapMapLayer, northArrowLayer],\n    bounds: hugin2DBounds,\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example using large map with approx. 1400x1400 cells."\n      }\n    }\n  }\n}',...BigMap3d.parameters?.docs?.source}}},SmallMap.parameters={...SmallMap.parameters,docs:{...SmallMap.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [axes_small, smallLayer, northArrowLayer],\n    bounds: ([459840.7, 5929826.1, 460540.7, 5930576.1] as BoundingBox2D),\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "4x5 cells."\n      }\n    }\n  }\n}',...SmallMap.parameters?.docs?.source}}},CellCenteredPropMap.parameters={...CellCenteredPropMap.parameters,docs:{...CellCenteredPropMap.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [axes_lite, cellCenteredPropertiesLayer, northArrowLayer],\n    bounds: ([-1, -1, 4, 5] as BoundingBox2D),\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "A small map with properties given at cell centers. Each cell will be constant colored"\n      }\n    }\n  }\n}',...CellCenteredPropMap.parameters?.docs?.source}}},NodeCenteredPropMap.parameters={...NodeCenteredPropMap.parameters,docs:{...NodeCenteredPropMap.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [axes_lite, nodeCenteredPropertiesLayer, northArrowLayer],\n    bounds: ([-1, -1, 4, 5] as BoundingBox2D),\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "A small map with properties given at nodes. Each cell will be interpolated in color."\n      }\n    }\n  }\n}',...NodeCenteredPropMap.parameters?.docs?.source}}},NodeCenteredPropMapWithArrayInput.parameters={...NodeCenteredPropMapWithArrayInput.parameters,docs:{...NodeCenteredPropMapWithArrayInput.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [axes_lite, nodeCenteredPropertiesLayerWithArrayInput, northArrowLayer],\n    bounds: ([-1, -1, 4, 5] as BoundingBox2D),\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Both mesh and property data given as native javascript arrays (as opposed to URL)."\n      }\n    }\n  },\n  tags: ["no-test"]\n}',...NodeCenteredPropMapWithArrayInput.parameters?.docs?.source}}},TypedArrayInput.parameters={...TypedArrayInput.parameters,docs:{...TypedArrayInput.parameters?.docs,source:{originalSource:'{\n  args: {\n    dimension: 300\n  },\n  argTypes: {\n    dimension: {\n      control: {\n        type: "range",\n        min: 150,\n        max: 300,\n        step: 1\n      }\n    }\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Both mesh and property data given as typed arrays arrays (as opposed to URL)."\n      }\n    }\n  },\n  render: args => <TypedArrayInputComponent {...args} />\n}',...TypedArrayInput.parameters?.docs?.source}}},Readout.parameters={...Readout.parameters,docs:{...Readout.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Readout example."\n      }\n    }\n  },\n  render: () => <ReadoutComponent />\n}',...Readout.parameters?.docs?.source}}},BigMapWithHole.parameters={...BigMapWithHole.parameters,docs:{...BigMapWithHole.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example of map with a hole."\n      }\n    }\n  },\n  render: () => <BigMapWithHoleComponent />\n}',...BigMapWithHole.parameters?.docs?.source}}},ContourLines.parameters={...ContourLines.parameters,docs:{...ContourLines.parameters?.docs,source:{originalSource:"{\n  args: {\n    syncViewports: true,\n    show3d: false,\n    contourOffset: 0,\n    zContourInterval: 100,\n    propertyContourInterval: 5000,\n    marginPixels: 0\n  },\n  render: args => <ContourLinesComponent {...args} />\n}",...ContourLines.parameters?.docs?.source}}},Extensions.parameters={...Extensions.parameters,docs:{...Extensions.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    bounds: hugin2DBounds,\n    views: default3DViews,\n    clipX: 1000\n  },\n  argTypes: {\n    clipX: {\n      control: {\n        type: "range",\n        min: 0,\n        max: 8000,\n        step: 10\n      }\n    }\n  },\n  render: args => <ExtensionsComponent {...args} />\n}',...Extensions.parameters?.docs?.source}}};const __namedExportsOrder=["MapLayer3dPng","MapLayer3dPngNoBounds","MapLayer2d","MapLayer2dDarkMode","Rotated","BigMap","BigMap3d","SmallMap","CellCenteredPropMap","NodeCenteredPropMap","NodeCenteredPropMapWithArrayInput","TypedArrayInput","Readout","BigMapWithHole","ContourLines","Extensions"]},"./packages/subsurface-viewer/src/components/ViewFooter.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{n:function(){return ViewFooter}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);const StyledViewFooter=(0,__webpack_require__("./node_modules/@mui/system/esm/styled.js").Z)("div")((({theme:theme})=>({position:"absolute",bottom:theme.spacing(0),right:theme.spacing(2),zIndex:999999,float:"right",backgroundColor:"#ffffffcc",color:"#000000ff",paddingLeft:"3px",display:"tableRow"}))),ViewFooter=({children:children})=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(StyledViewFooter,null,children);ViewFooter.propTypes={children:prop_types__WEBPACK_IMPORTED_MODULE_2___default().any};try{ViewFooter.displayName="ViewFooter",ViewFooter.__docgenInfo={description:"",displayName:"ViewFooter",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/components/ViewFooter.tsx#ViewFooter"]={docgenInfo:ViewFooter.__docgenInfo,name:"ViewFooter",path:"packages/subsurface-viewer/src/components/ViewFooter.tsx#ViewFooter"})}catch(__react_docgen_typescript_loader_error){}},"./packages/subsurface-viewer/src/storybook/sharedSettings.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{BX:function(){return EditedDataTemplate},D$:function(){return northArrowLayer},Dh:function(){return hillshadingLayer},HV:function(){return mainStyle},Jl:function(){return hugin2DBounds},M1:function(){return customLayerWithPolylineData},M8:function(){return volveWellsResources},Ng:function(){return customLayerWithTextData},On:function(){return volveWellsWithLogsLayer},Pl:function(){return default3DViews},QH:function(){return huginAxes3DLayer},R4:function(){return defaultStoryParameters},Rd:function(){return customLayerWithPolygonData},Sh:function(){return classes},Wj:function(){return colormapLayer},as:function(){return hugin25mDepthMapLayer},cs:function(){return hugin5mKhNetmapMapLayer},e1:function(){return hugin25mKhNetmapMapLayerPng},ex:function(){return volveWellsLayer},fC:function(){return Root},iH:function(){return redAxes2DLayer},vj:function(){return subsufaceProps},vz:function(){return hugin25mKhNetmapMapLayer},y8:function(){return volveWellsFromResourcesLayer},yP:function(){return hugin3DBounds},z:function(){return volveWellsBounds},zs:function(){return default2DViews}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../example-data/deckgl-map.json");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const defaultStoryParameters={docs:{inlineStories:!1,iframeHeight:500}},classes={main:"default-main"},mainStyle={[`& .${classes.main}`]:{width:750,height:500,top:"50%",left:"50%",transform:"translate(-50%, -50%)",border:"1px solid black",background:"azure",position:"absolute"}},Root=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__.ZP)("div")(mainStyle),subsufaceProps=_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0],colormapLayer={..._example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].layers[0],id:"colormap-layer"},hillshadingLayer={..._example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].layers[1],id:"hillshading-layer"},redAxes2DLayer={"@@type":"Axes2DLayer",id:"axes-layer",marginH:80,marginV:30,isLeftRuler:!0,isRightRuler:!1,isBottomRuler:!0,isTopRuler:!1,backgroundColor:[155,0,0,255]},hugin2DOrigin=[432150,6475800],hugin2DBounds=[432150,6475800,439400,6481500],hugin3DBounds=[432150,6475800,-2e3,439400,6481500,-3500],huginAxes3DLayer={"@@type":"AxesLayer",id:"axes-layer2",bounds:[432150,6475800,2e3,439400,6481500,3500]},northArrowLayer={"@@type":"NorthArrow3DLayer",id:"north-arrow-layer"},volveWellsResources={resources:{wellsData:"./volve_wells.json"}},volveWellsFromResourcesLayer={"@@type":"WellsLayer",id:"volve-wells",data:"@@#resources.wellsData",ZIncreasingDownwards:!1},volveWellsLayer={"@@type":"WellsLayer",id:"volve-wells",data:"./volve_wells.json",ZIncreasingDownwards:!1},volveWellsBounds=[432150,6475800,439400,6481500],volveWellsWithLogsLayer={"@@type":"WellsLayer",id:"volve-wells-with-logs",data:"./volve_wells.json",logData:"./volve_logs.json",logrunName:"BLOCKING",logName:"ZONELOG",logColor:"Stratigraphy",ZIncreasingDownwards:!1},hugin25mDepthMapLayer={"@@type":"MapLayer",id:"hugin_depth",meshData:"hugin_depth_25_m.float32",frame:{origin:hugin2DOrigin,count:[291,229],increment:[25,25],rotDeg:0},propertiesData:"hugin_depth_25_m.float32",contours:[0,100],isContoursDepth:!0,gridLines:!1,smoothShading:!0,material:!0},hugin25mKhNetmapMapLayer={...hugin25mDepthMapLayer,id:"hugin_kh_netmap",propertiesData:"kh_netmap_25_m.float32",colorMapName:"Physics"},hugin25mKhNetmapMapLayerPng={...hugin25mDepthMapLayer,meshData:"hugin_depth_25_m.png",propertiesData:"kh_netmap_25_m.png",colorMapName:"Physics"},hugin5mKhNetmapMapLayer={"@@type":"MapLayer",id:"mesh-layer",meshUrl:"hugin_depth_5_m.float32",frame:{origin:hugin2DOrigin,count:[1451,1141],increment:[5,5],rotDeg:0},propertiesUrl:"kh_netmap_5_m.float32",contours:[0,100],colorMapName:"Physics"},default2DViews={layout:[1,1],viewports:[{id:"view_1",show3D:!1}]},default3DViews={layout:[1,1],viewports:[{id:"view_1",show3D:!0}]},customLayerWithPolylineData={"@@type":"GeoJsonLayer",id:"geojson-line-layer",name:"Line",data:{type:"FeatureCollection",features:[{type:"Feature",properties:{},geometry:{type:"LineString",coordinates:[[434e3,6477500],[435500,6477500]]}}]},getLineWidth:20,lineWidthMinPixels:2},customLayerWithPolygonData={"@@type":"GeoJsonLayer",id:"geojson-layer",name:"Polygon",data:{type:"Feature",properties:{},geometry:{type:"Polygon",coordinates:[[[434562,6477595],[434562,6478595],[435062,6478595],[435062,6477595],[434562,6477595]]]}},getLineWidth:20,lineWidthMinPixels:2,getLineColor:[0,255,255],getFillColor:[0,255,0],opacity:.3},customLayerWithTextData={"@@type":"TextLayer",id:"text-layer",name:"Text",data:[{name:"Custom GeoJson layer",coordinates:[434800,6478695]}],pickable:!0,getPosition:d=>d.coordinates,getText:d=>d.name,getColor:[255,0,0],getSize:16,getAngle:0,getTextAnchor:"middle",getAlignmentBaseline:"center"},EditedDataTemplate=args=>{const[editedData,setEditedData]=react__WEBPACK_IMPORTED_MODULE_0__.useState(args.editedData);return react__WEBPACK_IMPORTED_MODULE_0__.useEffect((()=>{setEditedData(args.editedData)}),[args.editedData]),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,_extends({},args,{editedData:editedData,setProps:updatedProps=>{setEditedData(updatedProps.editedData)}}))};try{Root.displayName="Root",Root.__docgenInfo={description:"",displayName:"Root",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/sharedSettings.tsx#Root"]={docgenInfo:Root.__docgenInfo,name:"Root",path:"packages/subsurface-viewer/src/storybook/sharedSettings.tsx#Root"})}catch(__react_docgen_typescript_loader_error){}try{EditedDataTemplate.displayName="EditedDataTemplate",EditedDataTemplate.__docgenInfo={description:"",displayName:"EditedDataTemplate",props:{id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},resources:{defaultValue:null,description:"",name:"resources",required:!1,type:{name:"Record<string, unknown>"}},layers:{defaultValue:null,description:"",name:"layers",required:!1,type:{name:"Record<string, unknown>[] | LayersList"}},bounds:{defaultValue:null,description:"",name:"bounds",required:!1,type:{name:"[number, number, number, number] | BoundsAccessor"}},cameraPosition:{defaultValue:null,description:"",name:"cameraPosition",required:!1,type:{name:"ViewStateType"}},triggerHome:{defaultValue:null,description:"",name:"triggerHome",required:!1,type:{name:"number"}},views:{defaultValue:null,description:"",name:"views",required:!1,type:{name:"ViewsType"}},coords:{defaultValue:null,description:"",name:"coords",required:!1,type:{name:"{ visible?: boolean | null; multiPicking?: boolean | null; pickDepth?: number | null | undefined; } | undefined"}},scale:{defaultValue:null,description:"",name:"scale",required:!1,type:{name:"{ visible?: boolean | null; incrementValue?: number | null; widthPerUnit?: number | null | undefined; cssStyle?: Record<string, unknown> | null | undefined; } | undefined"}},coordinateUnit:{defaultValue:null,description:"",name:"coordinateUnit",required:!1,type:{name:"enum",value:[{value:'"m"'},{value:'"mm"'},{value:'"cm"'},{value:'"km"'},{value:'"in"'},{value:'"ft-us"'},{value:'"ft"'},{value:'"yd"'},{value:'"mi"'},{value:'"mm2"'},{value:'"cm2"'},{value:'"m2"'},{value:'"ha"'},{value:'"km2"'},{value:'"in2"'},{value:'"ft2"'},{value:'"ac"'},{value:'"mi2"'},{value:'"mcg"'},{value:'"mg"'},{value:'"g"'},{value:'"kg"'},{value:'"oz"'},{value:'"lb"'},{value:'"mt"'},{value:'"t"'},{value:'"mm3"'},{value:'"cm3"'},{value:'"ml"'},{value:'"l"'},{value:'"kl"'},{value:'"m3"'},{value:'"km3"'},{value:'"tsp"'},{value:'"Tbs"'},{value:'"in3"'},{value:'"fl-oz"'},{value:'"cup"'},{value:'"pnt"'},{value:'"qt"'},{value:'"gal"'},{value:'"ft3"'},{value:'"yd3"'},{value:'"mm3/s"'},{value:'"cm3/s"'},{value:'"ml/s"'},{value:'"cl/s"'},{value:'"dl/s"'},{value:'"l/s"'},{value:'"l/min"'},{value:'"l/h"'},{value:'"kl/s"'},{value:'"kl/min"'},{value:'"kl/h"'},{value:'"m3/s"'},{value:'"m3/min"'},{value:'"m3/h"'},{value:'"km3/s"'},{value:'"tsp/s"'},{value:'"Tbs/s"'},{value:'"in3/s"'},{value:'"in3/min"'},{value:'"in3/h"'},{value:'"fl-oz/s"'},{value:'"fl-oz/min"'},{value:'"fl-oz/h"'},{value:'"cup/s"'},{value:'"pnt/s"'},{value:'"pnt/min"'},{value:'"pnt/h"'},{value:'"qt/s"'},{value:'"gal/s"'},{value:'"gal/min"'},{value:'"gal/h"'},{value:'"ft3/s"'},{value:'"ft3/min"'},{value:'"ft3/h"'},{value:'"yd3/s"'},{value:'"yd3/min"'},{value:'"yd3/h"'},{value:'"C"'},{value:'"F"'},{value:'"K"'},{value:'"R"'},{value:'"ns"'},{value:'"mu"'},{value:'"ms"'},{value:'"s"'},{value:'"min"'},{value:'"h"'},{value:'"d"'},{value:'"week"'},{value:'"month"'},{value:'"year"'},{value:'"Hz"'},{value:'"mHz"'},{value:'"kHz"'},{value:'"MHz"'},{value:'"GHz"'},{value:'"THz"'},{value:'"rpm"'},{value:'"deg/s"'},{value:'"rad/s"'},{value:'"m/s"'},{value:'"km/h"'},{value:'"m/h"'},{value:'"knot"'},{value:'"ft/s"'},{value:'"s/m"'},{value:'"min/km"'},{value:'"s/ft"'},{value:'"min/mi"'},{value:'"Pa"'},{value:'"hPa"'},{value:'"kPa"'},{value:'"MPa"'},{value:'"bar"'},{value:'"torr"'},{value:'"psi"'},{value:'"ksi"'},{value:'"b"'},{value:'"Kb"'},{value:'"Mb"'},{value:'"Gb"'},{value:'"Tb"'},{value:'"B"'},{value:'"KB"'},{value:'"MB"'},{value:'"GB"'},{value:'"TB"'},{value:'"lx"'},{value:'"ft-cd"'},{value:'"ppm"'},{value:'"ppb"'},{value:'"ppt"'},{value:'"ppq"'},{value:'"V"'},{value:'"mV"'},{value:'"kV"'},{value:'"A"'},{value:'"mA"'},{value:'"kA"'},{value:'"W"'},{value:'"mW"'},{value:'"kW"'},{value:'"MW"'},{value:'"GW"'},{value:'"VA"'},{value:'"mVA"'},{value:'"kVA"'},{value:'"MVA"'},{value:'"GVA"'},{value:'"VAR"'},{value:'"mVAR"'},{value:'"kVAR"'},{value:'"MVAR"'},{value:'"GVAR"'},{value:'"Wh"'},{value:'"mWh"'},{value:'"kWh"'},{value:'"MWh"'},{value:'"GWh"'},{value:'"J"'},{value:'"kJ"'},{value:'"VARh"'},{value:'"mVARh"'},{value:'"kVARh"'},{value:'"MVARh"'},{value:'"GVARH"'},{value:'"deg"'},{value:'"rad"'},{value:'"grad"'},{value:'"arcmin"'},{value:'"arcsec"'}]}},colorTables:{defaultValue:null,description:"",name:"colorTables",required:!1,type:{name:"colorTablesArray"}},editedData:{defaultValue:null,description:"",name:"editedData",required:!1,type:{name:"Record<string, unknown>"}},setProps:{defaultValue:null,description:"",name:"setProps",required:!1,type:{name:"((data: Record<string, unknown>) => void)"}},checkDatafileSchema:{defaultValue:null,description:"Validate JSON datafile against schema",name:"checkDatafileSchema",required:!1,type:{name:"boolean"}},onMouseEvent:{defaultValue:null,description:"For get mouse events",name:"onMouseEvent",required:!1,type:{name:"((event: MapMouseEvent) => void)"}},getCameraPosition:{defaultValue:null,description:"",name:"getCameraPosition",required:!1,type:{name:"((input: ViewStateType) => void)"}},onRenderingProgress:{defaultValue:null,description:"Will be called while layers are processed to rendered data.\n@param progress vlaue between 0 and 100.",name:"onRenderingProgress",required:!1,type:{name:"((progress: number) => void)"}},onDragStart:{defaultValue:null,description:"",name:"onDragStart",required:!1,type:{name:"((info: PickingInfo, event: MjolnirGestureEvent) => void)"}},onDragEnd:{defaultValue:null,description:"",name:"onDragEnd",required:!1,type:{name:"((info: PickingInfo, event: MjolnirGestureEvent) => void)"}},triggerResetMultipleWells:{defaultValue:null,description:"",name:"triggerResetMultipleWells",required:!1,type:{name:"number"}},selection:{defaultValue:null,description:"Range selection of the current well",name:"selection",required:!1,type:{name:"{ well: string; selection: [number, number | undefined] | undefined; } | undefined"}},getTooltip:{defaultValue:null,description:"Override default tooltip with a callback.",name:"getTooltip",required:!1,type:{name:"TooltipCallback"}},lights:{defaultValue:null,description:"",name:"lights",required:!1,type:{name:"LightsType"}},typedArraySupport:{defaultValue:null,description:"If set to true allows to use typed arrays in layer description JS objects.",name:"typedArraySupport",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/sharedSettings.tsx#EditedDataTemplate"]={docgenInfo:EditedDataTemplate.__docgenInfo,name:"EditedDataTemplate",path:"packages/subsurface-viewer/src/storybook/sharedSettings.tsx#EditedDataTemplate"})}catch(__react_docgen_typescript_loader_error){}},"../example-data/deckgl-map.json":function(module){module.exports=JSON.parse('[{"id":"DeckGL-Map","coords":{"visible":true,"multiPicking":true,"pickDepth":10},"scale":{"visible":true,"incrementValue":100,"widthPerUnit":100,"cssStyle":{"left":10,"top":10}},"coordinateUnit":"m","resources":{"propertyMap":"propertyMap.png","depthMap":"propertyMap.png","wellsData":"volve_wells.json","logData":"volve_logs.json"},"bounds":[432205,6475078,437720,6481113],"layers":[{"@@type":"ColormapLayer","image":"@@#resources.propertyMap","rotDeg":0,"bounds":[432205,6475078,437720,6481113],"colorMapName":"Rainbow","valueRange":[2782,3513],"colorMapRange":[2782,3513]},{"@@type":"Hillshading2DLayer","bounds":[432205,6475078,437720,6481113],"valueRange":[2782,3513],"rotDeg":0,"image":"@@#resources.depthMap"},{"@@type":"WellsLayer","data":"@@#resources.wellsData","logData":"@@#resources.logData","logrunName":"BLOCKING","logName":"ZONELOG","logColor":"Stratigraphy"},{"@@type":"FaultPolygonsLayer","data":"fault_polygons.geojson"},{"@@type":"PieChartLayer","data":"piechart.json"},{"@@type":"NorthArrow3DLayer","visible":true},{"@@type":"DrawingLayer"}],"editedData":{},"views":{"layout":[1,1],"showLabel":false,"viewports":[{"id":"view_1","show3D":false,"layerIds":[]}]}}]')}}]);