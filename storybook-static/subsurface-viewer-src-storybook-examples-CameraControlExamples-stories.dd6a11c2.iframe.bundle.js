"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[2578],{"./packages/subsurface-viewer/src/storybook/examples/CameraControlExamples.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AddLayer:function(){return AddLayer},AutoZoomToBoxStory:function(){return AutoZoomToBoxStory},DisplayCameraState:function(){return DisplayCameraState},ResetCameraStory:function(){return ResetCameraStory},ScaleVertical3d:function(){return ScaleVertical3d},ScaleY:function(){return ScaleY},ScaleYWithCameraPosition:function(){return ScaleYWithCameraPosition},ScaleZ:function(){return ScaleZ},SyncedMultiView:function(){return SyncedMultiView},SyncedSubsurfaceViewers:function(){return SyncedSubsurfaceViewers},__namedExportsOrder:function(){return __namedExportsOrder},default:function(){return CameraControlExamples_stories}});var react=__webpack_require__("./node_modules/react/index.js"),simple_mesh_layer=__webpack_require__("./node_modules/@deck.gl/mesh-layers/dist/esm/simple-mesh-layer/simple-mesh-layer.js"),sphere_geometry=__webpack_require__("./node_modules/@luma.gl/engine/dist/esm/geometries/sphere-geometry.js"),Box=__webpack_require__("./node_modules/@mui/material/Box/Box.js"),Slider=__webpack_require__("./node_modules/@mui/material/Slider/Slider.js"),styled=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),SubsurfaceViewer=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),src_layers=__webpack_require__("./packages/subsurface-viewer/src/layers/index.ts"),geojson_layer=__webpack_require__("./node_modules/@deck.gl/layers/dist/esm/geojson-layer/geojson-layer.js"),sharedSettings=__webpack_require__("./packages/subsurface-viewer/src/storybook/sharedSettings.tsx"),view=__webpack_require__("./node_modules/@deck.gl/core/dist/esm/views/view.js");const DashSubsurfaceViewer=props=>{const{children:children,...rest}=props;return react.createElement(SubsurfaceViewer.Z,rest,function mapAnnotation(annotationContainers){return react.Children.map(annotationContainers,(annotationContainer=>{const viewId=annotationContainer.key;return react.createElement(view.Z,{key:viewId,id:viewId},annotationContainer)}))}(children))};DashSubsurfaceViewer.__docgenInfo={description:"",methods:[],displayName:"DashSubsurfaceViewer",props:{id:{required:!0,tsType:{name:"string"},description:""},resources:{required:!1,tsType:{name:"Record",elements:[{name:"string"},{name:"unknown"}],raw:"Record<string, unknown>"},description:""},layers:{required:!1,tsType:{name:"Array",elements:[{name:"union",raw:"| Record<string, unknown>\n| Layer\n| false\n| null\n| undefined",elements:[{name:"Record",elements:[{name:"string"},{name:"unknown"}],raw:"Record<string, unknown>"},{name:"Layer"},{name:"literal",value:"false"},{name:"null"},{name:"undefined"}]}],raw:"TLayerDefinition[]"},description:"Array of externally created layers or layer definition records or JSON strings.\nAdd '@@typedArraySupport' : true in a layer definition in order to\nuse typed arrays as inputs."},bounds:{required:!1,tsType:{name:"union",raw:"[number, number, number, number] | BoundsAccessor",elements:[{name:"tuple",raw:"[number, number, number, number]",elements:[{name:"number"},{name:"number"},{name:"number"},{name:"number"}]},{name:"signature",type:"function",raw:"() => BoundingBox2D",signature:{arguments:[],return:{name:"tuple",raw:"[number, number, number, number]",elements:[{name:"number"},{name:"number"},{name:"number"},{name:"number"}]}}}]},description:""},cameraPosition:{required:!1,tsType:{name:"union",raw:"ViewStateType | undefined",elements:[{name:"ViewStateType"},{name:"undefined"}]},description:""},triggerHome:{required:!1,tsType:{name:"number"},description:""},views:{required:!1,tsType:{name:"ViewsType"},description:""},coords:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    visible?: boolean | null;\n    multiPicking?: boolean | null;\n    pickDepth?: number | null;\n}",signature:{properties:[{key:"visible",value:{name:"union",raw:"boolean | null",elements:[{name:"boolean"},{name:"null"}],required:!1}},{key:"multiPicking",value:{name:"union",raw:"boolean | null",elements:[{name:"boolean"},{name:"null"}],required:!1}},{key:"pickDepth",value:{name:"union",raw:"number | null",elements:[{name:"number"},{name:"null"}],required:!1}}]}},description:""},scale:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    visible?: boolean | null;\n    incrementValue?: number | null;\n    widthPerUnit?: number | null;\n    cssStyle?: Record<string, unknown> | null;\n}",signature:{properties:[{key:"visible",value:{name:"union",raw:"boolean | null",elements:[{name:"boolean"},{name:"null"}],required:!1}},{key:"incrementValue",value:{name:"union",raw:"number | null",elements:[{name:"number"},{name:"null"}],required:!1}},{key:"widthPerUnit",value:{name:"union",raw:"number | null",elements:[{name:"number"},{name:"null"}],required:!1}},{key:"cssStyle",value:{name:"union",raw:"Record<string, unknown> | null",elements:[{name:"Record",elements:[{name:"string"},{name:"unknown"}],raw:"Record<string, unknown>"},{name:"null"}],required:!1}}]}},description:""},coordinateUnit:{required:!1,tsType:{name:"Unit"},description:""},colorTables:{required:!1,tsType:{name:"colorTablesArray"},description:""},editedData:{required:!1,tsType:{name:"Record",elements:[{name:"string"},{name:"unknown"}],raw:"Record<string, unknown>"},description:""},setProps:{required:!1,tsType:{name:"signature",type:"function",raw:"(data: Record<string, unknown>) => void",signature:{arguments:[{type:{name:"Record",elements:[{name:"string"},{name:"unknown"}],raw:"Record<string, unknown>"},name:"data"}],return:{name:"void"}}},description:""},checkDatafileSchema:{required:!1,tsType:{name:"boolean"},description:"Validate JSON datafile against schema"},onMouseEvent:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: MapMouseEvent) => void",signature:{arguments:[{type:{name:"MapMouseEvent"},name:"event"}],return:{name:"void"}}},description:"For get mouse events"},getCameraPosition:{required:!1,tsType:{name:"signature",type:"function",raw:"(input: ViewStateType) => void",signature:{arguments:[{type:{name:"ViewStateType"},name:"input"}],return:{name:"void"}}},description:""},onRenderingProgress:{required:!1,tsType:{name:"signature",type:"function",raw:"(progress: number) => void",signature:{arguments:[{type:{name:"number"},name:"progress"}],return:{name:"void"}}},description:"Will be called while layers are processed to rendered data.\n@param progress vlaue between 0 and 100."},onDragStart:{required:!1,tsType:{name:"signature",type:"function",raw:"(info: PickingInfo, event: MjolnirGestureEvent) => void",signature:{arguments:[{type:{name:"PickingInfo"},name:"info"},{type:{name:"MjolnirGestureEvent"},name:"event"}],return:{name:"void"}}},description:""},onDragEnd:{required:!1,tsType:{name:"signature",type:"function",raw:"(info: PickingInfo, event: MjolnirGestureEvent) => void",signature:{arguments:[{type:{name:"PickingInfo"},name:"info"},{type:{name:"MjolnirGestureEvent"},name:"event"}],return:{name:"void"}}},description:""},triggerResetMultipleWells:{required:!1,tsType:{name:"number"},description:""},selection:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    well: string | undefined;\n    selection: [number | undefined, number | undefined] | undefined;\n}",signature:{properties:[{key:"well",value:{name:"union",raw:"string | undefined",elements:[{name:"string"},{name:"undefined"}],required:!0}},{key:"selection",value:{name:"union",raw:"[number | undefined, number | undefined] | undefined",elements:[{name:"tuple",raw:"[number | undefined, number | undefined]",elements:[{name:"union",raw:"number | undefined",elements:[{name:"number"},{name:"undefined"}]},{name:"union",raw:"number | undefined",elements:[{name:"number"},{name:"undefined"}]}]},{name:"undefined"}],required:!0}}]}},description:"Range selection of the current well"},getTooltip:{required:!1,tsType:{name:"signature",type:"function",raw:"(\n    info: PickingInfo\n) => string | Record<string, unknown> | null",signature:{arguments:[{type:{name:"PickingInfo"},name:"info"}],return:{name:"union",raw:"string | Record<string, unknown> | null",elements:[{name:"string"},{name:"Record",elements:[{name:"string"},{name:"unknown"}],raw:"Record<string, unknown>"},{name:"null"}]}}},description:"Override default tooltip with a callback."},lights:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    headLight?: {\n        intensity: number;\n        color?: [number, number, number];\n    };\n    ambientLight?: {\n        intensity: number;\n        color?: [number, number, number];\n    };\n    pointLights?: [\n        {\n            intensity: number;\n            position: [number, number, number];\n            color?: [number, number, number];\n        },\n    ];\n\n    directionalLights?: [\n        {\n            intensity: number;\n            direction: [number, number, number];\n            color?: [number, number, number];\n        },\n    ];\n}",signature:{properties:[{key:"headLight",value:{name:"signature",type:"object",raw:"{\n    intensity: number;\n    color?: [number, number, number];\n}",signature:{properties:[{key:"intensity",value:{name:"number",required:!0}},{key:"color",value:{name:"tuple",raw:"[number, number, number]",elements:[{name:"number"},{name:"number"},{name:"number"}],required:!1}}]},required:!1}},{key:"ambientLight",value:{name:"signature",type:"object",raw:"{\n    intensity: number;\n    color?: [number, number, number];\n}",signature:{properties:[{key:"intensity",value:{name:"number",required:!0}},{key:"color",value:{name:"tuple",raw:"[number, number, number]",elements:[{name:"number"},{name:"number"},{name:"number"}],required:!1}}]},required:!1}},{key:"pointLights",value:{name:"tuple",raw:"[\n    {\n        intensity: number;\n        position: [number, number, number];\n        color?: [number, number, number];\n    },\n]",elements:[{name:"signature",type:"object",raw:"{\n    intensity: number;\n    position: [number, number, number];\n    color?: [number, number, number];\n}",signature:{properties:[{key:"intensity",value:{name:"number",required:!0}},{key:"position",value:{name:"tuple",raw:"[number, number, number]",elements:[{name:"number"},{name:"number"},{name:"number"}],required:!0}},{key:"color",value:{name:"tuple",raw:"[number, number, number]",elements:[{name:"number"},{name:"number"},{name:"number"}],required:!1}}]}}],required:!1}},{key:"directionalLights",value:{name:"tuple",raw:"[\n    {\n        intensity: number;\n        direction: [number, number, number];\n        color?: [number, number, number];\n    },\n]",elements:[{name:"signature",type:"object",raw:"{\n    intensity: number;\n    direction: [number, number, number];\n    color?: [number, number, number];\n}",signature:{properties:[{key:"intensity",value:{name:"number",required:!0}},{key:"direction",value:{name:"tuple",raw:"[number, number, number]",elements:[{name:"number"},{name:"number"},{name:"number"}],required:!0}},{key:"color",value:{name:"tuple",raw:"[number, number, number]",elements:[{name:"number"},{name:"number"},{name:"number"}],required:!1}}]}}],required:!1}}]}},description:""},children:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},verticalScale:{required:!1,tsType:{name:"number"},description:"A vertical scale factor, used to scale items in the view vertically"}}};var camera=__webpack_require__("./packages/subsurface-viewer/src/utils/camera.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}var CameraControlExamples_stories={component:SubsurfaceViewer.Z,title:"SubsurfaceViewer/Examples/Camera",args:{triggerHome:0}};const classes_mainWithButton="mian-with-button",Root=(0,styled.ZP)("div")({...sharedSettings.HV,[`& .${classes_mainWithButton}`]:{height:500,border:"1px solid black",background:"azure",position:"relative"}}),SIDE_CAMERA={rotationX:0,target:[],rotationOrbit:90,zoom:-3},SQUARE_GEOMETRY_LAYER=new geojson_layer.Z({...sharedSettings.DW,data:{type:"Feature",geometry:{type:"Polygon",coordinates:[[[-5,-5,0],[-5,5,0],[5,5,0],[5,-5,0],[-5,-5,0]]]}}}),AXES2D=new src_layers.Axes2DLayer({id:"axes",backgroundColor:[0,155,155]}),DisplayCameraPositionComponent=args=>{const[cameraState,setCameraState]=react.useState(args.cameraPosition),getCameraPosition=react.useCallback((input=>{setCameraState(input)}),[]);return react.createElement(react.Fragment,null,react.createElement(SubsurfaceViewer.Z,_extends({},args,{cameraPosition:args.cameraPosition,getCameraPosition:getCameraPosition})),react.createElement("div",{style:{position:"absolute",marginLeft:200}},react.createElement("div",null,"zoom: ",cameraState?.zoom),react.createElement("div",null,"rotationX: ",cameraState?.rotationX),react.createElement("div",null,"rotationOrbit: ",cameraState?.rotationOrbit),react.createElement("div",null,"targetX: ",cameraState?.target[0]),react.createElement("div",null,"targetY: ",cameraState?.target[1])))},cameraPosition={target:[435800,6478e3,-2e3],zoom:-3.5,rotationX:90,rotationOrbit:0},DisplayCameraState={args:{id:"volve-wells",bounds:sharedSettings.z,layers:[sharedSettings.ex],cameraPosition:cameraPosition},render:args=>react.createElement(DisplayCameraPositionComponent,args)},SyncedMultiViewComponent=args=>{const subsurfaceViewerArgs={id:"view_state_synchronization",layers:[sharedSettings.vz,sharedSettings.as,sharedSettings.ex],views:{layout:[2,2],viewports:[{id:"view_1",layerIds:[sharedSettings.as.id],show3D:args.show3d,isSync:args.sync.includes("view_1")},{id:"view_2",layerIds:[sharedSettings.vz.id],show3D:args.show3d,isSync:args.sync.includes("view_2")},{id:"view_3",layerIds:[sharedSettings.ex.id],show3D:args.show3d,isSync:args.sync.includes("view_3")},{id:"view_4",layerIds:[sharedSettings.ex.id,sharedSettings.as.id],show3D:args.show3d,isSync:args.sync.includes("view_4")}]}};return react.createElement(SubsurfaceViewer.Z,subsurfaceViewerArgs)},SyncedMultiView={args:{show3d:!1,sync:["view_1","view_2","view_3","view_4"]},argTypes:{sync:{options:["view_1","view_2","view_3","view_4"],control:"check"}},render:args=>react.createElement(SyncedMultiViewComponent,args)},SyncedCameraSettingsComponent=args=>{const[cameraPosition,setCameraPosition]=react.useState(args.cameraPosition),updateCamera=react.useCallback((camera=>{args.syncViewers&&setCameraPosition(camera)}),[args.syncViewers]);react.useEffect((()=>{args.cameraPosition&&setCameraPosition({...args.cameraPosition})}),[args.cameraPosition]);const props={...args,cameraPosition:cameraPosition,getCameraPosition:updateCamera};return react.createElement("div",{style:{height:"96vh",display:"grid",gridTemplateColumns:"1fr 1fr"}},react.createElement("div",{style:{position:"relative"}},react.createElement(SubsurfaceViewer.Z,_extends({},props,{id:"left"}))),react.createElement("div",{style:{position:"relative"}},react.createElement(SubsurfaceViewer.Z,_extends({},props,{id:"right"}))))},SyncedSubsurfaceViewers={args:{syncViewers:!0,id:"volve-wells",bounds:sharedSettings.z,layers:[sharedSettings.ex],cameraPosition:cameraPosition,views:sharedSettings.zs},render:args=>react.createElement(SyncedCameraSettingsComponent,args)},zoomBox3D=[-325,-450,-25,125,150,125],AutoZoomToBox=args=>{const[rotX,setRotX]=react.useState(0),[rotZ,setRotZ]=react.useState(0),cameraPosition={rotationX:rotX,rotationOrbit:rotZ,zoom:zoomBox3D,target:[]},props={...args,layers:[new src_layers.AxesLayer({id:"axes",bounds:zoomBox3D,ZIncreasingDownwards:!1}),new simple_mesh_layer.Z({id:"sphere",data:[{}],mesh:new sphere_geometry.Z({nlat:100,nlong:100,radius:30}),wireframe:!1,getPosition:[0,0,0],getColor:[255,255,255],material:!0})],cameraPosition:cameraPosition};return react.createElement(Root,null,react.createElement("div",{className:classes_mainWithButton},react.createElement(SubsurfaceViewer.Z,props)),react.createElement(Box.Z,{flexDirection:"column"},react.createElement("label",null,"Rotation X Axis "),react.createElement(Slider.ZP,{defaultValue:50,valueLabelDisplay:"auto",onChange:(_event,value)=>{setRotX(2*(value/100-.5)*90)}})),react.createElement(Box.Z,{flexDirection:"column"},react.createElement("label",null,"Rotation Z Axis "),react.createElement(Slider.ZP,{defaultValue:50,valueLabelDisplay:"auto",onChange:(_event,value)=>{setRotZ(2*(value/100-.5)*180)}})))},AutoZoomToBoxStory={args:{views:sharedSettings.Pl},parameters:{docs:{...sharedSettings.R4.docs,description:{story:""}}},render:args=>react.createElement(AutoZoomToBox,args)},ScaleZComponent=args=>{const[layers,setLayers]=react.useState([sharedSettings.QH,sharedSettings.e1,sharedSettings.D$]),props={...args,layers:layers};return react.createElement(Root,null,react.createElement("div",{className:classes_mainWithButton},react.createElement(SubsurfaceViewer.Z,props)),react.createElement("button",{onClick:()=>{setLayers([sharedSettings.QH,sharedSettings.e1,sharedSettings.On,sharedSettings.D$])}},"Add layer"))},ScaleZ={args:{id:"ScaleZ",layers:[sharedSettings.QH,sharedSettings.e1,sharedSettings.On,sharedSettings.D$],bounds:sharedSettings.z,views:{layout:[1,2],viewports:[{id:"view_1",layerIds:[sharedSettings.QH.id,sharedSettings.e1.id,sharedSettings.D$.id],show3D:!0,isSync:!0},{id:"view_2",layerIds:[sharedSettings.QH.id,sharedSettings.On.id,sharedSettings.D$.id],show3D:!0,isSync:!0}]}},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"Example scaling in z direction using arrow up/down buttons."}}},render:args=>react.createElement(ScaleZComponent,args)},ResetCameraPropertyDefaultCameraPosition={rotationOrbit:0,rotationX:45,target:[435775,6478650,-2750],zoom:-3.8},ResetCameraComponent=args=>{const[camera,setCamera]=react.useState((()=>args.cameraPosition??ResetCameraPropertyDefaultCameraPosition)),props={...args,cameraPosition:camera};return react.createElement(Root,null,react.createElement("div",{className:classes_mainWithButton},react.createElement(SubsurfaceViewer.Z,props)),react.createElement("button",{onClick:()=>{setCamera({...camera,rotationOrbit:camera.rotationOrbit+5})}}," Change Camera "))},ResetCameraStory={args:{id:"ResetCameraProperty",layers:[sharedSettings.QH,sharedSettings.e1,sharedSettings.D$],bounds:sharedSettings.z,cameraPosition:ResetCameraPropertyDefaultCameraPosition,views:sharedSettings.Pl},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"Pressing the button 'Change Camera' does rotate it."}}},render:args=>react.createElement(ResetCameraComponent,args)},AddLayerComponent=args=>{const[layers,setLayers]=react.useState([sharedSettings.QH,sharedSettings.e1,sharedSettings.D$]),props={...args,layers:layers};return react.createElement(Root,null,react.createElement("div",{className:classes_mainWithButton},react.createElement(SubsurfaceViewer.Z,props)),react.createElement("button",{onClick:()=>{setLayers([sharedSettings.e1,sharedSettings.QH,sharedSettings.On,sharedSettings.D$])}}," Add layer "))},AddLayer={args:{id:"map",cameraPosition:{rotationOrbit:45,rotationX:45,zoom:sharedSettings.yP,target:[]},views:sharedSettings.Pl},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"Example using button to add a layer."}}},render:args=>react.createElement(AddLayerComponent,args)},ScaleYComponent=({verticalScale:verticalScale})=>{const viewerProps={id:"ScaleY",bounds:[-10,-10,10,10],layers:[AXES2D,SQUARE_GEOMETRY_LAYER],views:{layout:[1,1],viewports:[{id:"section",verticalScale:verticalScale,zoom:2}]}};return react.createElement(SubsurfaceViewer.Z,viewerProps)},ScaleY={args:{verticalScale:1.5},argTypes:{verticalScale:{control:{type:"range",min:-1,max:10,step:.1}}},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"Vertical scaling example in Orthographic view."}}},render:args=>react.createElement(ScaleYComponent,args)},ScaleYWithCameraPositionComponent=({verticalScale:verticalScale})=>{const xyZoom=(0,camera.NF)(verticalScale,3),viewerProps={id:"ScaleY",layers:[AXES2D,SQUARE_GEOMETRY_LAYER],cameraPosition:{rotationOrbit:0,rotationX:0,zoom:xyZoom,target:[1,1,1]}};return react.createElement(SubsurfaceViewer.Z,viewerProps)},ScaleYWithCameraPosition={args:{verticalScale:2.5},argTypes:{verticalScale:{control:{type:"range",min:-1,max:10,step:.1}}},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"Orthographic vertical scaling with multiple camera definitions."}}},render:args=>react.createElement(ScaleYWithCameraPositionComponent,args)},ScaleVertical3dComponent=({verticalScale:verticalScale})=>{const viewerProps={id:"ScaleY",bounds:sharedSettings.z,layers:[sharedSettings.QH,sharedSettings.as],views:sharedSettings.Pl,cameraPosition:SIDE_CAMERA,verticalScale:verticalScale};return react.createElement(SubsurfaceViewer.Z,viewerProps)},ScaleVertical3d={args:{verticalScale:1.5},argTypes:{verticalScale:{control:{type:"range",min:-1,max:10,step:.1}}},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"Vertical scaling example in panoramic view."}}},render:args=>react.createElement(ScaleVertical3dComponent,args)};DisplayCameraState.parameters={...DisplayCameraState.parameters,docs:{...DisplayCameraState.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "volve-wells",\n    bounds: volveWellsBounds,\n    layers: [volveWellsLayer],\n    cameraPosition\n  },\n  render: args => <DisplayCameraPositionComponent {...args} />\n}',...DisplayCameraState.parameters?.docs?.source}}},SyncedMultiView.parameters={...SyncedMultiView.parameters,docs:{...SyncedMultiView.parameters?.docs,source:{originalSource:'{\n  args: {\n    show3d: false,\n    sync: ["view_1", "view_2", "view_3", "view_4"]\n  },\n  argTypes: {\n    sync: {\n      options: ["view_1", "view_2", "view_3", "view_4"],\n      control: "check"\n    }\n  },\n  render: args => <SyncedMultiViewComponent {...args} />\n}',...SyncedMultiView.parameters?.docs?.source}}},SyncedSubsurfaceViewers.parameters={...SyncedSubsurfaceViewers.parameters,docs:{...SyncedSubsurfaceViewers.parameters?.docs,source:{originalSource:'{\n  args: {\n    syncViewers: true,\n    id: "volve-wells",\n    bounds: volveWellsBounds,\n    layers: [volveWellsLayer],\n    cameraPosition,\n    views: default2DViews\n  },\n  render: args => <SyncedCameraSettingsComponent {...args} />\n}',...SyncedSubsurfaceViewers.parameters?.docs?.source}}},AutoZoomToBoxStory.parameters={...AutoZoomToBoxStory.parameters,docs:{...AutoZoomToBoxStory.parameters?.docs,source:{originalSource:'{\n  args: {\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: ""\n      }\n    }\n  },\n  render: args => <AutoZoomToBox {...args} />\n}',...AutoZoomToBoxStory.parameters?.docs?.source}}},ScaleZ.parameters={...ScaleZ.parameters,docs:{...ScaleZ.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "ScaleZ",\n    layers: [huginAxes3DLayer, hugin25mKhNetmapMapLayerPng, volveWellsWithLogsLayer, northArrowLayer],\n    bounds: volveWellsBounds,\n    views: {\n      layout: [1, 2],\n      viewports: [{\n        id: "view_1",\n        layerIds: [huginAxes3DLayer.id, hugin25mKhNetmapMapLayerPng.id, northArrowLayer.id],\n        show3D: true,\n        isSync: true\n      }, {\n        id: "view_2",\n        layerIds: [huginAxes3DLayer.id, volveWellsWithLogsLayer.id, northArrowLayer.id],\n        show3D: true,\n        isSync: true\n      }]\n    }\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example scaling in z direction using arrow up/down buttons."\n      }\n    }\n  },\n  render: args => <ScaleZComponent {...args} />\n}',...ScaleZ.parameters?.docs?.source}}},ResetCameraStory.parameters={...ResetCameraStory.parameters,docs:{...ResetCameraStory.parameters?.docs,source:{originalSource:"{\n  args: {\n    id: \"ResetCameraProperty\",\n    layers: [huginAxes3DLayer, hugin25mKhNetmapMapLayerPng, northArrowLayer],\n    bounds: volveWellsBounds,\n    cameraPosition: ResetCameraPropertyDefaultCameraPosition,\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: `Pressing the button 'Change Camera' does rotate it.`\n      }\n    }\n  },\n  render: args => <ResetCameraComponent {...args} />\n}",...ResetCameraStory.parameters?.docs?.source}}},AddLayer.parameters={...AddLayer.parameters,docs:{...AddLayer.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    //bounds: volveWellsBounds,  // Keep this line for future testing.\n    cameraPosition: {\n      rotationOrbit: 45,\n      rotationX: 45,\n      zoom: hugin3DBounds,\n      target: []\n    },\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: `Example using button to add a layer.`\n      }\n    }\n  },\n  render: args => <AddLayerComponent {...args} />\n}',...AddLayer.parameters?.docs?.source}}},ScaleY.parameters={...ScaleY.parameters,docs:{...ScaleY.parameters?.docs,source:{originalSource:'{\n  args: {\n    verticalScale: 1.5\n  },\n  argTypes: {\n    verticalScale: {\n      control: {\n        type: "range",\n        min: -1,\n        max: 10,\n        step: 0.1\n      }\n    }\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Vertical scaling example in Orthographic view."\n      }\n    }\n  },\n  render: args => <ScaleYComponent {...args} />\n}',...ScaleY.parameters?.docs?.source}}},ScaleYWithCameraPosition.parameters={...ScaleYWithCameraPosition.parameters,docs:{...ScaleYWithCameraPosition.parameters?.docs,source:{originalSource:'{\n  args: {\n    verticalScale: 2.5\n  },\n  argTypes: {\n    verticalScale: {\n      control: {\n        type: "range",\n        min: -1,\n        max: 10,\n        step: 0.1\n      }\n    }\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Orthographic vertical scaling with multiple camera definitions."\n      }\n    }\n  },\n  render: args => <ScaleYWithCameraPositionComponent {...args} />\n}',...ScaleYWithCameraPosition.parameters?.docs?.source}}},ScaleVertical3d.parameters={...ScaleVertical3d.parameters,docs:{...ScaleVertical3d.parameters?.docs,source:{originalSource:'{\n  args: {\n    verticalScale: 1.5\n  },\n  argTypes: {\n    verticalScale: {\n      control: {\n        type: "range",\n        min: -1,\n        max: 10,\n        step: 0.1\n      }\n    }\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Vertical scaling example in panoramic view."\n      }\n    }\n  },\n  render: args => <ScaleVertical3dComponent {...args} />\n}',...ScaleVertical3d.parameters?.docs?.source}}};const __namedExportsOrder=["DisplayCameraState","SyncedMultiView","SyncedSubsurfaceViewers","AutoZoomToBoxStory","ScaleZ","ResetCameraStory","AddLayer","ScaleY","ScaleYWithCameraPosition","ScaleVertical3d"]}}]);