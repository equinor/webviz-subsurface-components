"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[7813],{"./packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:function(){return Default},KhMapFlat:function(){return KhMapFlat},KhMapMesh:function(){return KhMapMesh},MapClampColor:function(){return MapClampColor},MapInContainer:function(){return MapInContainer},MapMaterial:function(){return MapMaterial},Minimal:function(){return Minimal},MultiView:function(){return MultiView},SelectableFeatureExample:function(){return SelectableFeatureExample},UserDefinedLayer1:function(){return UserDefinedLayer1},UserDefinedLayer2:function(){return UserDefinedLayer2},ViewMatrixMargin:function(){return ViewMatrixMargin},ViewTabs:function(){return ViewTabs},__namedExportsOrder:function(){return __namedExportsOrder},colorMapFunction:function(){return colorMapFunction}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../example-data/deckgl-map.json"),_mui_material_Tabs__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@mui/material/Tabs/Tabs.js"),_mui_material_Tab__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mui/material/Tab/Tab.js"),_mui_material_Box__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mui/material/Box/Box.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const classes={main:"Default-main",tab:"Default-tab"},Root=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__.ZP)("div")({[`& .${classes.main}`]:{width:750,height:500,top:"50%",left:"50%",transform:"translate(-50%, -50%)",border:"1px solid black",background:"azure",position:"absolute"}});__webpack_exports__.default={parameters:{storySource:{source:'function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from "react";\nimport { styled } from "@mui/material/styles";\nimport SubsurfaceViewer from "../SubsurfaceViewer";\nimport exampleData from "../../../../../example-data/deckgl-map.json";\nimport Tabs from "@mui/material/Tabs";\nimport Tab from "@mui/material/Tab";\nimport Box from "@mui/material/Box";\nconst PREFIX = "Default";\nconst classes = {\n  main: `${PREFIX}-main`,\n  tab: `${PREFIX}-tab`\n};\nconst Root = styled("div")({\n  [`& .${classes.main}`]: {\n    width: 750,\n    height: 500,\n    top: "50%",\n    left: "50%",\n    transform: "translate(-50%, -50%)",\n    border: "1px solid black",\n    background: "azure",\n    position: "absolute"\n  }\n});\nexport default {\n  component: SubsurfaceViewer,\n  title: "SubsurfaceViewer",\n  argTypes: {\n    id: {\n      description: "The ID of this component, used to identify dash components in callbacks. The ID needs to be unique across all of the components in an app."\n    },\n    resources: {\n      description: "Resource dictionary made available in the DeckGL specification as an enum. \\\n            The values can be accessed like this: `@@#resources.resourceId`, where \\\n            `resourceId` is the key in the `resources` dict. For more information, \\\n            see the DeckGL documentation on enums in the json spec: \\\n            https://deck.gl/docs/api-reference/json/conversion-reference#enumerations-and-using-the--prefix"\n    },\n    layers: {\n      description: "List of JSON object containing layer specific data. \\\n            Each JSON object will consist of layer type with key as `@@type` and layer specific data, if any."\n    },\n    cameraPosition: {\n      description: "Camera position to set the point of view."\n    },\n    bounds: {\n      description: "Coordinate boundary for the view defined as [left, bottom, right, top]."\n    },\n    triggerHome: {\n      description: "Forces resetting to initial home position",\n      control: {\n        type: "number"\n      }\n    },\n    views: {\n      description: "Views configuration for map. If not specified, all the layers will be displayed in a single 2D viewport.<br/>" + "Options:<br/>" + "layout: [number, number] — Layout for viewport in specified as [row, column],<br/>" + "viewports: [`ViewportType`] — Layers configuration for multiple viewport,<br/><br/>" + "`ViewportType` options: <br/>" + "id: string — Viewport id <br>" + "name: string — Viewport name <br>" + "show3D: boolean — Toggle 3D view <br>" + "layerIds: [string] — Layer ids to be displayed on viewport."\n    },\n    coords: {\n      description: "Options for readout panel.<br/>" + "visible: boolean — Show/hide readout,<br/>" + "multipicking: boolean — Enable or disable multi picking,<br/>" + "pickDepth: number — Number of objects to pick."\n    },\n    scale: {\n      description: "Options for distance scale component.<br/>" + "visible: boolean — Show/hide scale bar,<br/>" + "incrementValue: number — Increment value for the scale,<br/>" + "widthPerUnit: number — Scale bar width in pixels per unit value,<br/>" + "position: [number, number] — Scale bar position in pixels."\n    },\n    coordinateUnit: {\n      description: "Unit for the scale ruler"\n    },\n    legend: {\n      description: "Options for color legend.<br/>" + "visible: boolean — Show/hide color legend,<br/>" + "position: [number, number] — Legend position in pixels,<br/>" + "horizontal: boolean — Orientation of color legend."\n    },\n    colorTables: {\n      description: "Prop containing color table data." + "See colorTables repo for reference:<br/>" + "https://github.com/emerson-eps/color-tables/blob/main/react-app/dist/component/color-tables.json"\n    },\n    editedData: {\n      description: "Map data returned via editedData prop.<br/>" + "selectedWell: string — Selected well name,<br/>" + "selectedPie: object — Selected pie chart data,<br/>" + "selectedFeatureIndexes: [number] — Drawing layer data index,<br/>" + "data: object — Drawing layer data, indexed from selectedFeatureIndexes."\n    },\n    setProps: {\n      description: "For reacting to prop changes"\n    }\n  },\n  args: {\n    // Add a reset button for all the stories.\n    // Somehow, I do not manage to add the triggerHome to the general "unset" controls :/\n    triggerHome: 0\n  }\n};\n\n// Template for when edited data needs to be captured.\nconst EditDataTemplate = args => {\n  const [editedData, setEditedData] = React.useState(args.editedData);\n  React.useEffect(() => {\n    setEditedData(args.editedData);\n  }, [args.editedData]);\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({}, args, {\n    editedData: editedData,\n    setProps: updatedProps => {\n      setEditedData(updatedProps.editedData);\n    }\n  }));\n};\n\n// Blank template.\nconst MinimalTemplate = args => {\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\n\n// Data for custome geojson layer with polyline data\nconst customLayerWithPolylineData = {\n  "@@type": "GeoJsonLayer",\n  id: "geojson-line-layer",\n  name: "Line",\n  data: {\n    type: "FeatureCollection",\n    features: [{\n      type: "Feature",\n      properties: {},\n      geometry: {\n        type: "LineString",\n        coordinates: [[434000, 6477500], [435500, 6477500]]\n      }\n    }]\n  },\n  getLineWidth: 20,\n  lineWidthMinPixels: 2\n};\n\n// Data for custom geojson layer with polygon data\nconst customLayerWithPolygonData = {\n  "@@type": "GeoJsonLayer",\n  id: "geojson-layer",\n  name: "Polygon",\n  data: {\n    type: "Feature",\n    properties: {},\n    geometry: {\n      type: "Polygon",\n      coordinates: [[[434562, 6477595], [434562, 6478595], [435062, 6478595], [435062, 6477595], [434562, 6477595]]]\n    }\n  },\n  getLineWidth: 20,\n  lineWidthMinPixels: 2,\n  getLineColor: [0, 255, 255],\n  getFillColor: [0, 255, 0],\n  opacity: 0.3\n};\n\n// Data for custom text layer\nconst customLayerWithTextData = {\n  "@@type": "TextLayer",\n  id: "text-layer",\n  name: "Text",\n  data: [{\n    name: "Custom GeoJson layer",\n    coordinates: [434800, 6478695]\n  }],\n  pickable: true,\n  getPosition: d => d.coordinates,\n  getText: d => d.name,\n  getColor: [255, 0, 0],\n  getSize: 16,\n  getAngle: 0,\n  getTextAnchor: "middle",\n  getAlignmentBaseline: "center"\n};\n\n// Layers data for storybook example 1\nconst layersData1 = [customLayerWithPolylineData, customLayerWithPolygonData, customLayerWithTextData];\n\n// Layers data for storybook example 2\nconst colormapLayer = exampleData[0].layers[0];\nconst layersData2 = [colormapLayer, customLayerWithPolylineData, customLayerWithPolygonData, customLayerWithTextData];\nconst hillshadingLayer = exampleData[0].layers[1];\n\n// Storybook example 1\nexport const Default = EditDataTemplate.bind({});\nDefault.args = {\n  ...exampleData[0]\n};\n\n// Minimal map example.\nexport const Minimal = () => /*#__PURE__*/React.createElement(SubsurfaceViewer, {\n  id: "deckgl-map",\n  bounds: [0, 0, 1, 1]\n});\nMinimal.parameters = {\n  docs: {\n    description: {\n      story: "An example showing the minimal required arguments, which will give an empty map viewer."\n    }\n  }\n};\n\n// Volve kh netmap data, flat surface\nexport const KhMapFlat = MinimalTemplate.bind({});\nKhMapFlat.args = {\n  id: "kh-map-flat",\n  resources: {\n    propertyMap: "./volve_property_normalized.png",\n    depthMap: "./volve_hugin_depth_normalized.png"\n  },\n  bounds: [432150, 6475800, 439400, 6481500],\n  layers: [{\n    "@@type": "ColormapLayer",\n    id: "property_map",\n    valueRange: [-3071, 41048],\n    bounds: [432150, 6475800, 439400, 6481500],\n    image: "@@#resources.propertyMap"\n  }, {\n    ...hillshadingLayer,\n    valueRange: [2725, 3397],\n    bounds: [432150, 6475800, 439400, 6481500],\n    opacity: 0.6\n  }]\n};\nKhMapFlat.parameters = {\n  docs: {\n    description: {\n      story: "An example showing a kh property layer and a depth map hillshading layer."\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\n\n// Map3DLayer. Properties encoded in RGB.\nconst meshMapLayer = {\n  "@@type": "Map3DLayer",\n  id: "mesh-layer",\n  mesh: "hugin_depth_25_m_normalized_margin.png",\n  meshValueRange: [2782, 3513],\n  frame: {\n    origin: [432205, 6475078],\n    count: [229, 291],\n    increment: [25, 25],\n    rotDeg: 0\n  },\n  propertyTexture: "kh_netmap_25_m_normalized_margin.png",\n  propertyValueRange: [-3071, 41048],\n  contours: [0, 100.0],\n  isContoursDepth: true,\n  colorMapName: "Physics"\n};\nconst meshMapLayerPng = {\n  "@@type": "MapLayer",\n  id: "mesh-layer-png",\n  meshUrl: "hugin_depth_25_m.png",\n  frame: {\n    origin: [432150, 6475800],\n    count: [291, 229],\n    increment: [25, 25],\n    rotDeg: 0\n  },\n  propertiesUrl: "kh_netmap_25_m.png",\n  contours: [0, 100],\n  isContoursDepth: true,\n  gridLines: false,\n  material: true,\n  smoothShading: true,\n  colorMapName: "Physics"\n};\nconst axes2D = {\n  "@@type": "Axes2DLayer",\n  id: "axes-layer",\n  marginH: 80,\n  // Horizontal margin (in pixels)\n  marginV: 30,\n  // Vertical margin (in pixels)\n  isLeftRuler: true,\n  isRightRuler: false,\n  isBottomRuler: true,\n  isTopRuler: false,\n  backgroundColor: [155, 0, 0, 255]\n};\nexport const KhMapMesh = MinimalTemplate.bind({});\nKhMapMesh.args = {\n  id: "kh-mesh-map",\n  layers: [{\n    ...meshMapLayer\n  }],\n  toolbar: {\n    visible: false\n  },\n  bounds: [432150, 6475800, 439400, 6481500],\n  views: {\n    layout: [1, 1],\n    viewports: [{\n      id: "view_1",\n      show3D: true,\n      layerIds: []\n    }]\n  }\n};\n\n//Material property may take these values:\n//          true  = default material. See deck.gl documentation for what that is. This is default property value.\n//          false = no material.\n//          Full spec:\n//                {\n//                    ambient: 0.35,\n//                    diffuse: 0.6,\n//                    shininess: 32,\n//                    specularColor: [255, 255, 255],\n//                }\nconst material = {\n  ambient: 0.35,\n  diffuse: 0.6,\n  shininess: 32,\n  specularColor: [255, 255, 255]\n};\nexport const MapMaterial = MinimalTemplate.bind({});\nMapMaterial.args = {\n  id: "material",\n  layers: [{\n    ...meshMapLayer,\n    material\n  }],\n  bounds: [432150, 6475800, 439400, 6481500],\n  views: {\n    layout: [1, 1],\n    viewports: [{\n      id: "view_1",\n      show3D: false,\n      layerIds: []\n    }]\n  }\n};\nMapMaterial.parameters = {\n  docs: {\n    description: {\n      story: "An example showing example usage of Map3D material property."\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\n\n// Exapmple of using "colorMapClampColor" property.\n// Clamps colormap to this color at ends.\n// Given as array of three values (r,g,b) e.g: [255, 0, 0]\n// If not set (undefined) or set to true, it will clamp to color map min and max values.\n// If set to false the clamp color will be completely transparent.\nconst propertyValueRange = [2782, 3513];\nconst colorMapRange = [3000, 3513];\nconst colorMapClampColor = [0, 255, 0]; // a color e.g. [0, 255, 0],  false, true or undefined.\n\nexport const MapClampColor = MinimalTemplate.bind({});\nMapClampColor.args = {\n  id: "clampcolor",\n  layers: [{\n    ...meshMapLayer,\n    propertyValueRange,\n    colorMapRange,\n    colorMapClampColor\n  }],\n  bounds: [432150, 6475800, 439400, 6481500],\n  views: {\n    layout: [1, 1],\n    viewports: [{\n      id: "view_1",\n      show3D: false,\n      layerIds: []\n    }]\n  }\n};\nMapClampColor.parameters = {\n  docs: {\n    description: {\n      story: \'An example usage of map property `"colorMapClampColor"\'\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\n\n// Example using "colorMapFunction" property.\nconst layer = {\n  ...meshMapLayer,\n  isContoursDepth: true,\n  colorMapFunction: x => [255 - x * 100, 255 - x * 100, 255 * x] // If defined this function will override the colormap.\n};\nexport const colorMapFunction = MinimalTemplate.bind({});\ncolorMapFunction.args = {\n  id: "colorMapFunction",\n  layers: [\n  // map layer\n  layer,\n  // colormap layer\n  {\n    ...colormapLayer,\n    image: "https://raw.githubusercontent.com/equinor/webviz-subsurface-components/master/react/src/demo/example-data/propertyMap.png",\n    colorMapFunction: x => [255 - x * 100, 255 - x * 100, 255 * x] // If defined this function will override the colormap.\n  }],\n  bounds: [432150, 6475800, 439400, 6481500],\n  views: {\n    layout: [1, 1],\n    viewports: [{\n      id: "view_1",\n      show3D: true,\n      layerIds: []\n    }]\n  }\n};\n\n// custom layer example\nexport const UserDefinedLayer1 = EditDataTemplate.bind({});\nUserDefinedLayer1.args = {\n  id: exampleData[0].id,\n  bounds: exampleData[0].bounds,\n  layers: layersData1\n};\n\n// custom layer with colormap\nexport const UserDefinedLayer2 = EditDataTemplate.bind({});\nUserDefinedLayer2.args = {\n  id: exampleData[0].id,\n  resources: exampleData[0].resources,\n  bounds: exampleData[0].bounds,\n  layers: layersData2\n};\n\n// multiple synced view\nexport const MultiView = EditDataTemplate.bind({});\nMultiView.args = {\n  ...exampleData[0],\n  legend: {\n    visible: false\n  },\n  layers: [...exampleData[0].layers, customLayerWithPolylineData, customLayerWithPolygonData, customLayerWithTextData],\n  views: {\n    layout: [2, 2],\n    showLabel: true,\n    viewports: [{\n      id: "view_1",\n      name: "Colormap layer",\n      show3D: false,\n      layerIds: ["colormap-layer"],\n      zoom: -5,\n      isSync: true\n    }, {\n      id: "view_2",\n      name: "Hill-shading layer",\n      show3D: false,\n      layerIds: ["hillshading-layer"],\n      zoom: -5,\n      isSync: true\n    }, {\n      id: "view_3",\n      name: "All layers",\n      show3D: false,\n      layerIds: [],\n      zoom: -5,\n      isSync: false\n    }, {\n      id: "view_4",\n      name: "Custom layer",\n      show3D: false,\n      layerIds: ["geojson-line-layer", "geojson-layer", "text-layer"],\n      zoom: -5,\n      isSync: false\n    }]\n  }\n};\n\n// ---------Selectable GeoJson Layer example--------------- //\nexport const SelectableFeatureExample = args => {\n  const [editedData, setEditedData] = React.useState(args.editedData);\n  React.useEffect(() => {\n    setEditedData(args.editedData);\n  }, [args.editedData]);\n  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({}, args, {\n    editedData: editedData,\n    setProps: updatedProps => {\n      setEditedData(updatedProps.editedData);\n    }\n  })), /*#__PURE__*/React.createElement("pre", null, JSON.stringify(editedData, null, 2)));\n};\nSelectableFeatureExample.parameters = {\n  docs: {\n    description: {\n      story: "An example showing selectable feature example from the map."\n    }\n  }\n};\nconst polylineUsingSelectableGeoJsonLayer = {\n  ...customLayerWithPolylineData,\n  "@@type": "SelectableGeoJsonLayer"\n};\nconst polygonUsingSelectableGeoJsonLayer = {\n  ...customLayerWithPolygonData,\n  "@@type": "SelectableGeoJsonLayer"\n};\nSelectableFeatureExample.args = {\n  id: "DeckGL-Map",\n  bounds: [432205, 6475078, 437720, 6481113],\n  layers: [polylineUsingSelectableGeoJsonLayer, polygonUsingSelectableGeoJsonLayer]\n};\nexport const MapInContainer = args => {\n  return /*#__PURE__*/React.createElement(Root, {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, args));\n};\nMapInContainer.args = {\n  ...exampleData[0]\n};\nexport const ViewMatrixMargin = args => {\n  const props = {\n    ...args\n  };\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, props)));\n};\nViewMatrixMargin.args = {\n  id: "DeckGL-Map",\n  layers: [meshMapLayerPng, axes2D],\n  bounds: [432150, 6475800, 439400, 6481501],\n  views: {\n    layout: [2, 2],\n    marginPixels: 10,\n    showLabel: true,\n    viewports: [{\n      id: "view_1",\n      show3D: false,\n      layerIds: ["mesh-layer-png", "axes-layer"],\n      isSync: true\n    }, {\n      id: "view_2",\n      show3D: false,\n      layerIds: ["mesh-layer-png", "axes-layer"],\n      isSync: true\n    }, {\n      id: "view_3",\n      show3D: false,\n      layerIds: ["mesh-layer-png", "axes-layer"],\n      isSync: false\n    }, {\n      id: "view_4",\n      show3D: false,\n      layerIds: ["mesh-layer-png", "axes-layer"],\n      isSync: false\n    }]\n  }\n};\nconst CustomTabPanel = props => {\n  const {\n    children,\n    value,\n    index,\n    renderHiddenTabs,\n    ...other\n  } = props;\n  return /*#__PURE__*/React.createElement("div", _extends({\n    role: "tabpanel",\n    hidden: value !== index,\n    id: `simple-tabpanel-${index}`,\n    "aria-labelledby": `simple-tab-${index}`\n  }, other), (value === index || renderHiddenTabs) && /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      p: 3\n    }\n  }, children));\n};\nconst a11yProps = index => {\n  return {\n    id: `simple-tab-${index}`,\n    "aria-controls": `simple-tabpanel-${index}`\n  };\n};\nconst SubsurfaceWrapper = props => {\n  return /*#__PURE__*/React.createElement("div", {\n    style: {\n      height: "65vh",\n      //width: "50vw",\n      position: "relative"\n    }\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, props));\n};\nconst ViewerTabs = props => {\n  const [value, setValue] = React.useState(0);\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  return /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      width: "100%"\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      flexDirection: "column"\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      borderBottom: 1,\n      borderColor: "divider"\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    value: value,\n    onChange: handleChange,\n    "aria-label": "basic tabs example"\n  }, /*#__PURE__*/React.createElement(Tab, _extends({\n    label: "Tab One"\n  }, a11yProps(0))), /*#__PURE__*/React.createElement(Tab, _extends({\n    label: "Tab Two"\n  }, a11yProps(1))), /*#__PURE__*/React.createElement(Tab, _extends({\n    label: "Tab Three"\n  }, a11yProps(2))))), /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      height: "80%"\n    }\n  }, /*#__PURE__*/React.createElement(CustomTabPanel, {\n    value: value,\n    index: 0,\n    renderHiddenTabs: props.renderHiddenTabs\n  }, /*#__PURE__*/React.createElement(SubsurfaceWrapper, props)), /*#__PURE__*/React.createElement(CustomTabPanel, {\n    value: value,\n    index: 1,\n    renderHiddenTabs: props.renderHiddenTabs\n  }, /*#__PURE__*/React.createElement(SubsurfaceWrapper, props)), /*#__PURE__*/React.createElement(CustomTabPanel, {\n    value: value,\n    index: 2,\n    renderHiddenTabs: props.renderHiddenTabs\n  }, /*#__PURE__*/React.createElement(SubsurfaceWrapper, props)))));\n};\nexport const ViewTabs = args => {\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement(ViewerTabs, args));\n};\nViewTabs.args = {\n  renderHiddenTabs: true,\n  id: "DeckGL-Map",\n  layers: [meshMapLayerPng, axes2D],\n  bounds: [432150, 6475800, 439400, 6481501],\n  views: {\n    layout: [2, 2],\n    marginPixels: 10,\n    showLabel: true,\n    viewports: [{\n      id: "view_1",\n      show3D: false,\n      layerIds: ["mesh-layer-png", "axes-layer"],\n      isSync: true\n    }, {\n      id: "view_2",\n      show3D: false,\n      layerIds: ["mesh-layer-png", "axes-layer"],\n      isSync: true\n    }, {\n      id: "view_3",\n      show3D: false,\n      layerIds: ["mesh-layer-png", "axes-layer"],\n      isSync: false\n    }, {\n      id: "view_4",\n      show3D: false,\n      layerIds: ["mesh-layer-png", "axes-layer"],\n      isSync: false\n    }]\n  }\n};',locationsMap:{default:{startLoc:{col:25,line:89},endLoc:{col:1,line:100},startBody:{col:25,line:89},endBody:{col:1,line:100}},minimal:{startLoc:{col:23,line:181},endLoc:{col:2,line:184},startBody:{col:23,line:181},endBody:{col:2,line:184}},"kh-map-flat":{startLoc:{col:24,line:103},endLoc:{col:1,line:105},startBody:{col:24,line:103},endBody:{col:1,line:105}},"kh-map-mesh":{startLoc:{col:24,line:103},endLoc:{col:1,line:105},startBody:{col:24,line:103},endBody:{col:1,line:105}},"map-material":{startLoc:{col:24,line:103},endLoc:{col:1,line:105},startBody:{col:24,line:103},endBody:{col:1,line:105}},"map-clamp-color":{startLoc:{col:24,line:103},endLoc:{col:1,line:105},startBody:{col:24,line:103},endBody:{col:1,line:105}},"color-map-function":{startLoc:{col:24,line:103},endLoc:{col:1,line:105},startBody:{col:24,line:103},endBody:{col:1,line:105}},"user-defined-layer-1":{startLoc:{col:25,line:89},endLoc:{col:1,line:100},startBody:{col:25,line:89},endBody:{col:1,line:100}},"user-defined-layer-2":{startLoc:{col:25,line:89},endLoc:{col:1,line:100},startBody:{col:25,line:89},endBody:{col:1,line:100}},"multi-view":{startLoc:{col:25,line:89},endLoc:{col:1,line:100},startBody:{col:25,line:89},endBody:{col:1,line:100}},"selectable-feature-example":{startLoc:{col:40,line:465},endLoc:{col:1,line:476},startBody:{col:40,line:465},endBody:{col:1,line:476}},"map-in-container":{startLoc:{col:30,line:497},endLoc:{col:1,line:501},startBody:{col:30,line:497},endBody:{col:1,line:501}},"view-matrix-margin":{startLoc:{col:32,line:505},endLoc:{col:1,line:512},startBody:{col:32,line:505},endBody:{col:1,line:512}},"view-tabs":{startLoc:{col:24,line:624},endLoc:{col:1,line:626},startBody:{col:24,line:624},endBody:{col:1,line:626}}}}},component:_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,title:"SubsurfaceViewer",argTypes:{id:{description:"The ID of this component, used to identify dash components in callbacks. The ID needs to be unique across all of the components in an app."},resources:{description:"Resource dictionary made available in the DeckGL specification as an enum.             The values can be accessed like this: `@@#resources.resourceId`, where             `resourceId` is the key in the `resources` dict. For more information,             see the DeckGL documentation on enums in the json spec:             https://deck.gl/docs/api-reference/json/conversion-reference#enumerations-and-using-the--prefix"},layers:{description:"List of JSON object containing layer specific data.             Each JSON object will consist of layer type with key as `@@type` and layer specific data, if any."},cameraPosition:{description:"Camera position to set the point of view."},bounds:{description:"Coordinate boundary for the view defined as [left, bottom, right, top]."},triggerHome:{description:"Forces resetting to initial home position",control:{type:"number"}},views:{description:"Views configuration for map. If not specified, all the layers will be displayed in a single 2D viewport.<br/>Options:<br/>layout: [number, number] — Layout for viewport in specified as [row, column],<br/>viewports: [`ViewportType`] — Layers configuration for multiple viewport,<br/><br/>`ViewportType` options: <br/>id: string — Viewport id <br>name: string — Viewport name <br>show3D: boolean — Toggle 3D view <br>layerIds: [string] — Layer ids to be displayed on viewport."},coords:{description:"Options for readout panel.<br/>visible: boolean — Show/hide readout,<br/>multipicking: boolean — Enable or disable multi picking,<br/>pickDepth: number — Number of objects to pick."},scale:{description:"Options for distance scale component.<br/>visible: boolean — Show/hide scale bar,<br/>incrementValue: number — Increment value for the scale,<br/>widthPerUnit: number — Scale bar width in pixels per unit value,<br/>position: [number, number] — Scale bar position in pixels."},coordinateUnit:{description:"Unit for the scale ruler"},legend:{description:"Options for color legend.<br/>visible: boolean — Show/hide color legend,<br/>position: [number, number] — Legend position in pixels,<br/>horizontal: boolean — Orientation of color legend."},colorTables:{description:"Prop containing color table data.See colorTables repo for reference:<br/>https://github.com/emerson-eps/color-tables/blob/main/react-app/dist/component/color-tables.json"},editedData:{description:"Map data returned via editedData prop.<br/>selectedWell: string — Selected well name,<br/>selectedPie: object — Selected pie chart data,<br/>selectedFeatureIndexes: [number] — Drawing layer data index,<br/>data: object — Drawing layer data, indexed from selectedFeatureIndexes."},setProps:{description:"For reacting to prop changes"}},args:{triggerHome:0}};const EditDataTemplate=args=>{const[editedData,setEditedData]=react__WEBPACK_IMPORTED_MODULE_0__.useState(args.editedData);return react__WEBPACK_IMPORTED_MODULE_0__.useEffect((()=>{setEditedData(args.editedData)}),[args.editedData]),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,_extends({},args,{editedData:editedData,setProps:updatedProps=>{setEditedData(updatedProps.editedData)}}))},MinimalTemplate=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,args),customLayerWithPolylineData={"@@type":"GeoJsonLayer",id:"geojson-line-layer",name:"Line",data:{type:"FeatureCollection",features:[{type:"Feature",properties:{},geometry:{type:"LineString",coordinates:[[434e3,6477500],[435500,6477500]]}}]},getLineWidth:20,lineWidthMinPixels:2},customLayerWithPolygonData={"@@type":"GeoJsonLayer",id:"geojson-layer",name:"Polygon",data:{type:"Feature",properties:{},geometry:{type:"Polygon",coordinates:[[[434562,6477595],[434562,6478595],[435062,6478595],[435062,6477595],[434562,6477595]]]}},getLineWidth:20,lineWidthMinPixels:2,getLineColor:[0,255,255],getFillColor:[0,255,0],opacity:.3},customLayerWithTextData={"@@type":"TextLayer",id:"text-layer",name:"Text",data:[{name:"Custom GeoJson layer",coordinates:[434800,6478695]}],pickable:!0,getPosition:d=>d.coordinates,getText:d=>d.name,getColor:[255,0,0],getSize:16,getAngle:0,getTextAnchor:"middle",getAlignmentBaseline:"center"},layersData1=[customLayerWithPolylineData,customLayerWithPolygonData,customLayerWithTextData],colormapLayer=_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].layers[0],layersData2=[colormapLayer,customLayerWithPolylineData,customLayerWithPolygonData,customLayerWithTextData],hillshadingLayer=_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].layers[1],Default=EditDataTemplate.bind({});Default.args={..._example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0]};const Minimal=()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,{id:"deckgl-map",bounds:[0,0,1,1]});Minimal.parameters={docs:{description:{story:"An example showing the minimal required arguments, which will give an empty map viewer."}}};const KhMapFlat=MinimalTemplate.bind({});KhMapFlat.args={id:"kh-map-flat",resources:{propertyMap:"./volve_property_normalized.png",depthMap:"./volve_hugin_depth_normalized.png"},bounds:[432150,6475800,439400,6481500],layers:[{"@@type":"ColormapLayer",id:"property_map",valueRange:[-3071,41048],bounds:[432150,6475800,439400,6481500],image:"@@#resources.propertyMap"},{...hillshadingLayer,valueRange:[2725,3397],bounds:[432150,6475800,439400,6481500],opacity:.6}]},KhMapFlat.parameters={docs:{description:{story:"An example showing a kh property layer and a depth map hillshading layer."},inlineStories:!1,iframeHeight:500}};const meshMapLayer={"@@type":"Map3DLayer",id:"mesh-layer",mesh:"hugin_depth_25_m_normalized_margin.png",meshValueRange:[2782,3513],frame:{origin:[432205,6475078],count:[229,291],increment:[25,25],rotDeg:0},propertyTexture:"kh_netmap_25_m_normalized_margin.png",propertyValueRange:[-3071,41048],contours:[0,100],isContoursDepth:!0,colorMapName:"Physics"},meshMapLayerPng={"@@type":"MapLayer",id:"mesh-layer-png",meshUrl:"hugin_depth_25_m.png",frame:{origin:[432150,6475800],count:[291,229],increment:[25,25],rotDeg:0},propertiesUrl:"kh_netmap_25_m.png",contours:[0,100],isContoursDepth:!0,gridLines:!1,material:!0,smoothShading:!0,colorMapName:"Physics"},axes2D={"@@type":"Axes2DLayer",id:"axes-layer",marginH:80,marginV:30,isLeftRuler:!0,isRightRuler:!1,isBottomRuler:!0,isTopRuler:!1,backgroundColor:[155,0,0,255]},KhMapMesh=MinimalTemplate.bind({});KhMapMesh.args={id:"kh-mesh-map",layers:[{...meshMapLayer}],toolbar:{visible:!1},bounds:[432150,6475800,439400,6481500],views:{layout:[1,1],viewports:[{id:"view_1",show3D:!0,layerIds:[]}]}};const MapMaterial=MinimalTemplate.bind({});MapMaterial.args={id:"material",layers:[{...meshMapLayer,material:{ambient:.35,diffuse:.6,shininess:32,specularColor:[255,255,255]}}],bounds:[432150,6475800,439400,6481500],views:{layout:[1,1],viewports:[{id:"view_1",show3D:!1,layerIds:[]}]}},MapMaterial.parameters={docs:{description:{story:"An example showing example usage of Map3D material property."},inlineStories:!1,iframeHeight:500}};const MapClampColor=MinimalTemplate.bind({});MapClampColor.args={id:"clampcolor",layers:[{...meshMapLayer,propertyValueRange:[2782,3513],colorMapRange:[3e3,3513],colorMapClampColor:[0,255,0]}],bounds:[432150,6475800,439400,6481500],views:{layout:[1,1],viewports:[{id:"view_1",show3D:!1,layerIds:[]}]}},MapClampColor.parameters={docs:{description:{story:'An example usage of map property `"colorMapClampColor"'},inlineStories:!1,iframeHeight:500}};const layer={...meshMapLayer,isContoursDepth:!0,colorMapFunction:x=>[255-100*x,255-100*x,255*x]},colorMapFunction=MinimalTemplate.bind({});colorMapFunction.args={id:"colorMapFunction",layers:[layer,{...colormapLayer,image:"https://raw.githubusercontent.com/equinor/webviz-subsurface-components/master/react/src/demo/example-data/propertyMap.png",colorMapFunction:x=>[255-100*x,255-100*x,255*x]}],bounds:[432150,6475800,439400,6481500],views:{layout:[1,1],viewports:[{id:"view_1",show3D:!0,layerIds:[]}]}};const UserDefinedLayer1=EditDataTemplate.bind({});UserDefinedLayer1.args={id:_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].id,bounds:_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].bounds,layers:layersData1};const UserDefinedLayer2=EditDataTemplate.bind({});UserDefinedLayer2.args={id:_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].id,resources:_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].resources,bounds:_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].bounds,layers:layersData2};const MultiView=EditDataTemplate.bind({});MultiView.args={..._example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0],legend:{visible:!1},layers:[..._example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].layers,customLayerWithPolylineData,customLayerWithPolygonData,customLayerWithTextData],views:{layout:[2,2],showLabel:!0,viewports:[{id:"view_1",name:"Colormap layer",show3D:!1,layerIds:["colormap-layer"],zoom:-5,isSync:!0},{id:"view_2",name:"Hill-shading layer",show3D:!1,layerIds:["hillshading-layer"],zoom:-5,isSync:!0},{id:"view_3",name:"All layers",show3D:!1,layerIds:[],zoom:-5,isSync:!1},{id:"view_4",name:"Custom layer",show3D:!1,layerIds:["geojson-line-layer","geojson-layer","text-layer"],zoom:-5,isSync:!1}]}};const SelectableFeatureExample=args=>{const[editedData,setEditedData]=react__WEBPACK_IMPORTED_MODULE_0__.useState(args.editedData);return react__WEBPACK_IMPORTED_MODULE_0__.useEffect((()=>{setEditedData(args.editedData)}),[args.editedData]),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,_extends({},args,{editedData:editedData,setProps:updatedProps=>{setEditedData(updatedProps.editedData)}})),react__WEBPACK_IMPORTED_MODULE_0__.createElement("pre",null,JSON.stringify(editedData,null,2)))};SelectableFeatureExample.parameters={docs:{description:{story:"An example showing selectable feature example from the map."}}};const polylineUsingSelectableGeoJsonLayer={...customLayerWithPolylineData,"@@type":"SelectableGeoJsonLayer"},polygonUsingSelectableGeoJsonLayer={...customLayerWithPolygonData,"@@type":"SelectableGeoJsonLayer"};SelectableFeatureExample.args={id:"DeckGL-Map",bounds:[432205,6475078,437720,6481113],layers:[polylineUsingSelectableGeoJsonLayer,polygonUsingSelectableGeoJsonLayer]};const MapInContainer=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,{className:classes.main},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,args));MapInContainer.args={..._example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0]};const ViewMatrixMargin=args=>{const props={...args};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.main},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,props)))};ViewMatrixMargin.args={id:"DeckGL-Map",layers:[meshMapLayerPng,axes2D],bounds:[432150,6475800,439400,6481501],views:{layout:[2,2],marginPixels:10,showLabel:!0,viewports:[{id:"view_1",show3D:!1,layerIds:["mesh-layer-png","axes-layer"],isSync:!0},{id:"view_2",show3D:!1,layerIds:["mesh-layer-png","axes-layer"],isSync:!0},{id:"view_3",show3D:!1,layerIds:["mesh-layer-png","axes-layer"],isSync:!1},{id:"view_4",show3D:!1,layerIds:["mesh-layer-png","axes-layer"],isSync:!1}]}};const CustomTabPanel=props=>{const{children:children,value:value,index:index,renderHiddenTabs:renderHiddenTabs,...other}=props;return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",_extends({role:"tabpanel",hidden:value!==index,id:`simple-tabpanel-${index}`,"aria-labelledby":`simple-tab-${index}`},other),(value===index||renderHiddenTabs)&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_4__.Z,{sx:{p:3}},children))},a11yProps=index=>({id:`simple-tab-${index}`,"aria-controls":`simple-tabpanel-${index}`}),SubsurfaceWrapper=props=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{height:"65vh",position:"relative"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,props)),ViewerTabs=props=>{const[value,setValue]=react__WEBPACK_IMPORTED_MODULE_0__.useState(0);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_4__.Z,{sx:{width:"100%"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_4__.Z,{sx:{flexDirection:"column"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_4__.Z,{sx:{borderBottom:1,borderColor:"divider"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material_Tabs__WEBPACK_IMPORTED_MODULE_5__.Z,{value:value,onChange:(event,newValue)=>{setValue(newValue)},"aria-label":"basic tabs example"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material_Tab__WEBPACK_IMPORTED_MODULE_6__.Z,_extends({label:"Tab One"},a11yProps(0))),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material_Tab__WEBPACK_IMPORTED_MODULE_6__.Z,_extends({label:"Tab Two"},a11yProps(1))),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material_Tab__WEBPACK_IMPORTED_MODULE_6__.Z,_extends({label:"Tab Three"},a11yProps(2))))),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_4__.Z,{sx:{height:"80%"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(CustomTabPanel,{value:value,index:0,renderHiddenTabs:props.renderHiddenTabs},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SubsurfaceWrapper,props)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(CustomTabPanel,{value:value,index:1,renderHiddenTabs:props.renderHiddenTabs},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SubsurfaceWrapper,props)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(CustomTabPanel,{value:value,index:2,renderHiddenTabs:props.renderHiddenTabs},react__WEBPACK_IMPORTED_MODULE_0__.createElement(SubsurfaceWrapper,props)))))},ViewTabs=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(ViewerTabs,args));ViewTabs.args={renderHiddenTabs:!0,id:"DeckGL-Map",layers:[meshMapLayerPng,axes2D],bounds:[432150,6475800,439400,6481501],views:{layout:[2,2],marginPixels:10,showLabel:!0,viewports:[{id:"view_1",show3D:!1,layerIds:["mesh-layer-png","axes-layer"],isSync:!0},{id:"view_2",show3D:!1,layerIds:["mesh-layer-png","axes-layer"],isSync:!0},{id:"view_3",show3D:!1,layerIds:["mesh-layer-png","axes-layer"],isSync:!1},{id:"view_4",show3D:!1,layerIds:["mesh-layer-png","axes-layer"],isSync:!1}]}},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => {\n  const [editedData, setEditedData] = React.useState(args.editedData);\n  React.useEffect(() => {\n    setEditedData(args.editedData);\n  }, [args.editedData]);\n  return <SubsurfaceViewer {...args} editedData={editedData} setProps={updatedProps => {\n    setEditedData(updatedProps.editedData);\n  }} />;\n}",...Default.parameters?.docs?.source}}},Minimal.parameters={...Minimal.parameters,docs:{...Minimal.parameters?.docs,source:{originalSource:'() => <SubsurfaceViewer id={"deckgl-map"} bounds={[0, 0, 1, 1]} />',...Minimal.parameters?.docs?.source}}},KhMapFlat.parameters={...KhMapFlat.parameters,docs:{...KhMapFlat.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...KhMapFlat.parameters?.docs?.source}}},KhMapMesh.parameters={...KhMapMesh.parameters,docs:{...KhMapMesh.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...KhMapMesh.parameters?.docs?.source}}},MapMaterial.parameters={...MapMaterial.parameters,docs:{...MapMaterial.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...MapMaterial.parameters?.docs?.source}}},MapClampColor.parameters={...MapClampColor.parameters,docs:{...MapClampColor.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...MapClampColor.parameters?.docs?.source}}},colorMapFunction.parameters={...colorMapFunction.parameters,docs:{...colorMapFunction.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...colorMapFunction.parameters?.docs?.source}}},UserDefinedLayer1.parameters={...UserDefinedLayer1.parameters,docs:{...UserDefinedLayer1.parameters?.docs,source:{originalSource:"args => {\n  const [editedData, setEditedData] = React.useState(args.editedData);\n  React.useEffect(() => {\n    setEditedData(args.editedData);\n  }, [args.editedData]);\n  return <SubsurfaceViewer {...args} editedData={editedData} setProps={updatedProps => {\n    setEditedData(updatedProps.editedData);\n  }} />;\n}",...UserDefinedLayer1.parameters?.docs?.source}}},UserDefinedLayer2.parameters={...UserDefinedLayer2.parameters,docs:{...UserDefinedLayer2.parameters?.docs,source:{originalSource:"args => {\n  const [editedData, setEditedData] = React.useState(args.editedData);\n  React.useEffect(() => {\n    setEditedData(args.editedData);\n  }, [args.editedData]);\n  return <SubsurfaceViewer {...args} editedData={editedData} setProps={updatedProps => {\n    setEditedData(updatedProps.editedData);\n  }} />;\n}",...UserDefinedLayer2.parameters?.docs?.source}}},MultiView.parameters={...MultiView.parameters,docs:{...MultiView.parameters?.docs,source:{originalSource:"args => {\n  const [editedData, setEditedData] = React.useState(args.editedData);\n  React.useEffect(() => {\n    setEditedData(args.editedData);\n  }, [args.editedData]);\n  return <SubsurfaceViewer {...args} editedData={editedData} setProps={updatedProps => {\n    setEditedData(updatedProps.editedData);\n  }} />;\n}",...MultiView.parameters?.docs?.source}}},SelectableFeatureExample.parameters={...SelectableFeatureExample.parameters,docs:{...SelectableFeatureExample.parameters?.docs,source:{originalSource:"args => {\n  const [editedData, setEditedData] = React.useState(args.editedData);\n  React.useEffect(() => {\n    setEditedData(args.editedData);\n  }, [args.editedData]);\n  return <div>\n            <SubsurfaceViewer {...args} editedData={editedData} setProps={updatedProps => {\n      setEditedData(updatedProps.editedData);\n    }} />\n            <pre>{JSON.stringify(editedData, null, 2)}</pre>\n        </div>;\n}",...SelectableFeatureExample.parameters?.docs?.source}}},MapInContainer.parameters={...MapInContainer.parameters,docs:{...MapInContainer.parameters?.docs,source:{originalSource:"args => {\n  return <Root className={classes.main}>\n            <SubsurfaceViewer {...args} />\n        </Root>;\n}",...MapInContainer.parameters?.docs?.source}}},ViewMatrixMargin.parameters={...ViewMatrixMargin.parameters,docs:{...ViewMatrixMargin.parameters?.docs,source:{originalSource:"args => {\n  const props = {\n    ...args\n  };\n  return <Root>\n            <div className={classes.main}>\n                <SubsurfaceViewer {...props} />\n            </div>\n        </Root>;\n}",...ViewMatrixMargin.parameters?.docs?.source}}},ViewTabs.parameters={...ViewTabs.parameters,docs:{...ViewTabs.parameters?.docs,source:{originalSource:"args => {\n  return <Root>\n            <ViewerTabs {...args}></ViewerTabs>\n        </Root>;\n}",...ViewTabs.parameters?.docs?.source}}};const __namedExportsOrder=["Default","Minimal","KhMapFlat","KhMapMesh","MapMaterial","MapClampColor","colorMapFunction","UserDefinedLayer1","UserDefinedLayer2","MultiView","SelectableFeatureExample","MapInContainer","ViewMatrixMargin","ViewTabs"];try{Default.displayName="Default",Default.__docgenInfo={description:"",displayName:"Default",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#Default"]={docgenInfo:Default.__docgenInfo,name:"Default",path:"packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#Default"})}catch(__react_docgen_typescript_loader_error){}try{KhMapFlat.displayName="KhMapFlat",KhMapFlat.__docgenInfo={description:"",displayName:"KhMapFlat",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#KhMapFlat"]={docgenInfo:KhMapFlat.__docgenInfo,name:"KhMapFlat",path:"packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#KhMapFlat"})}catch(__react_docgen_typescript_loader_error){}try{KhMapMesh.displayName="KhMapMesh",KhMapMesh.__docgenInfo={description:"",displayName:"KhMapMesh",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#KhMapMesh"]={docgenInfo:KhMapMesh.__docgenInfo,name:"KhMapMesh",path:"packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#KhMapMesh"})}catch(__react_docgen_typescript_loader_error){}try{MapMaterial.displayName="MapMaterial",MapMaterial.__docgenInfo={description:"",displayName:"MapMaterial",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#MapMaterial"]={docgenInfo:MapMaterial.__docgenInfo,name:"MapMaterial",path:"packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#MapMaterial"})}catch(__react_docgen_typescript_loader_error){}try{MapClampColor.displayName="MapClampColor",MapClampColor.__docgenInfo={description:"",displayName:"MapClampColor",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#MapClampColor"]={docgenInfo:MapClampColor.__docgenInfo,name:"MapClampColor",path:"packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#MapClampColor"})}catch(__react_docgen_typescript_loader_error){}try{colorMapFunction.displayName="colorMapFunction",colorMapFunction.__docgenInfo={description:"",displayName:"colorMapFunction",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#colorMapFunction"]={docgenInfo:colorMapFunction.__docgenInfo,name:"colorMapFunction",path:"packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#colorMapFunction"})}catch(__react_docgen_typescript_loader_error){}try{UserDefinedLayer1.displayName="UserDefinedLayer1",UserDefinedLayer1.__docgenInfo={description:"",displayName:"UserDefinedLayer1",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#UserDefinedLayer1"]={docgenInfo:UserDefinedLayer1.__docgenInfo,name:"UserDefinedLayer1",path:"packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#UserDefinedLayer1"})}catch(__react_docgen_typescript_loader_error){}try{UserDefinedLayer2.displayName="UserDefinedLayer2",UserDefinedLayer2.__docgenInfo={description:"",displayName:"UserDefinedLayer2",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#UserDefinedLayer2"]={docgenInfo:UserDefinedLayer2.__docgenInfo,name:"UserDefinedLayer2",path:"packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#UserDefinedLayer2"})}catch(__react_docgen_typescript_loader_error){}try{MultiView.displayName="MultiView",MultiView.__docgenInfo={description:"",displayName:"MultiView",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#MultiView"]={docgenInfo:MultiView.__docgenInfo,name:"MultiView",path:"packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#MultiView"})}catch(__react_docgen_typescript_loader_error){}try{SelectableFeatureExample.displayName="SelectableFeatureExample",SelectableFeatureExample.__docgenInfo={description:"",displayName:"SelectableFeatureExample",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#SelectableFeatureExample"]={docgenInfo:SelectableFeatureExample.__docgenInfo,name:"SelectableFeatureExample",path:"packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#SelectableFeatureExample"})}catch(__react_docgen_typescript_loader_error){}try{MapInContainer.displayName="MapInContainer",MapInContainer.__docgenInfo={description:"",displayName:"MapInContainer",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#MapInContainer"]={docgenInfo:MapInContainer.__docgenInfo,name:"MapInContainer",path:"packages/subsurface-viewer/src/storybook/SubsurfaceViewer.stories.tsx#MapInContainer"})}catch(__react_docgen_typescript_loader_error){}},"../example-data/deckgl-map.json":function(module){module.exports=JSON.parse('[{"id":"DeckGL-Map","coords":{"visible":true,"multiPicking":true,"pickDepth":10},"scale":{"visible":true,"incrementValue":100,"widthPerUnit":100,"cssStyle":{"left":10,"top":10}},"legend":{"visible":true,"cssStyle":{"right":10,"top":10},"horizontal":false},"toolbar":{"visible":true},"coordinateUnit":"m","resources":{"propertyMap":"propertyMap.png","depthMap":"propertyMap.png","wellsData":"volve_wells.json","logData":"volve_logs.json"},"bounds":[432205,6475078,437720,6481113],"layers":[{"@@type":"ColormapLayer","image":"@@#resources.propertyMap","rotDeg":0,"bounds":[432205,6475078,437720,6481113],"colorMapName":"Rainbow","valueRange":[2782,3513],"colorMapRange":[2782,3513]},{"@@type":"Hillshading2DLayer","bounds":[432205,6475078,437720,6481113],"valueRange":[2782,3513],"rotDeg":0,"image":"@@#resources.depthMap"},{"@@type":"Map3DLayer","bounds":[432205,6475078,437720,6481113],"meshMaxError":5,"mesh":"hugin_depth_25_m_normalized_margin.png","meshValueRange":[2782,3513],"propertyTexture":"kh_netmap_25_m_normalized_margin.png","propertyValueRange":[2782,3513],"rotDeg":0,"contours":[0,50],"isContoursDepth":true,"colorMapName":"Physics","colorMapRange":[2782,3513],"visible":false},{"@@type":"WellsLayer","data":"@@#resources.wellsData","logData":"@@#resources.logData","logrunName":"BLOCKING","logName":"ZONELOG","logColor":"Stratigraphy"},{"@@type":"FaultPolygonsLayer","data":"fault_polygons.geojson"},{"@@type":"PieChartLayer","data":"piechart.json"},{"@@type":"NorthArrow3DLayer","visible":true},{"@@type":"DrawingLayer"}],"editedData":{},"views":{"layout":[1,1],"showLabel":false,"viewports":[{"id":"view_1","show3D":false,"layerIds":[]}]}}]')}}]);