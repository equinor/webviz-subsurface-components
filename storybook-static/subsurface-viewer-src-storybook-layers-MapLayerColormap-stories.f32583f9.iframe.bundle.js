"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[1418],{"./packages/subsurface-viewer/src/storybook/layers/MapLayerColormap.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BreakpointColorMap:function(){return BreakpointColorMap},ColorMapRange:function(){return ColorMapRange},ColorSelector:function(){return ColorSelector},ConstantColor:function(){return ConstantColor},DefaultColorScale:function(){return DefaultColorScale},GradientFunctionColorMap:function(){return GradientFunctionColorMap},StepFunctionColorMap:function(){return StepFunctionColorMap},__namedExportsOrder:function(){return __namedExportsOrder}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_mui_material__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@mui/material/Slider/Slider.js"),_mui_material_styles__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@deck.gl/core/dist/esm/views/view.js"),_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@emerson-eps/color-tables/dist/index.js"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),_sharedSettings__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./packages/subsurface-viewer/src/storybook/sharedSettings.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const stories={parameters:{storySource:{source:'function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from "react";\nimport { Slider } from "@mui/material";\nimport { styled } from "@mui/material/styles";\nimport { View } from "@deck.gl/core/typed";\nimport { ContinuousLegend, ColorLegend, createColorMapFunction } from "@emerson-eps/color-tables";\nimport SubsurfaceViewer from "../../SubsurfaceViewer";\nimport { default3DViews, defaultStoryParameters, hugin2DBounds, huginAxes3DLayer, hugin25mKhNetmapMapLayer, hugin25mKhNetmapMapLayerPng, northArrowLayer } from "../sharedSettings";\nconst stories = {\n  component: SubsurfaceViewer,\n  title: "SubsurfaceViewer / Map Layer / Colormap",\n  args: {\n    // Add a reset button for all the stories.\n    // Somehow, I do not manage to add the triggerHome to the general "unset" controls :/\n    triggerHome: 0\n  }\n};\nexport default stories;\nconst PREFIX = "MapLayer3dPng";\nconst classes = {\n  main: `${PREFIX}-main`,\n  legend: `${PREFIX}-legend`\n};\nconst Root = styled("div")({\n  [`& .${classes.main}`]: {\n    height: 500,\n    border: "1px solid black",\n    position: "relative"\n  },\n  [`& .${classes.legend}`]: {\n    width: 100,\n    position: "absolute",\n    top: "0",\n    right: "0"\n  }\n});\nconst valueRange = [-3071, 41048];\nfunction gradientColorMap(x) {\n  return [255 - x * 255, 255 - x * 100, 255 * x];\n}\nfunction nearestColorMap(x) {\n  if (x > 0.5) return [100, 255, 255];else if (x > 0.1) return [255, 100, 255];\n  return [255, 255, 100];\n}\nfunction breakpointColorMap(x, breakpoint) {\n  if (x > breakpoint) return [0, 50, 200];\n  return [255, 255, 0];\n}\nfunction createColorMap(breakpoint) {\n  return value => breakpointColorMap(value, breakpoint);\n}\nexport const ConstantColor = {\n  args: {\n    id: "map",\n    layers: [huginAxes3DLayer, {\n      ...hugin25mKhNetmapMapLayerPng,\n      colorMapFunction: [0, 255, 0] // Use constant color instead of function\n    }, northArrowLayer],\n    bounds: hugin2DBounds,\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: \'Example using the property "colorMapFunction" to color the surface in one color only\'\n      }\n    }\n  }\n};\nexport const GradientFunctionColorMap = {\n  args: {\n    id: "gradient-color-map",\n    bounds: hugin2DBounds,\n    layers: [{\n      ...hugin25mKhNetmapMapLayer,\n      material: false,\n      colorMapFunction: gradientColorMap\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example using gradient color mapping function."\n      }\n    }\n  }\n};\nexport const StepFunctionColorMap = {\n  args: {\n    id: "nearest-color-map",\n    bounds: hugin2DBounds,\n    layers: [{\n      ...hugin25mKhNetmapMapLayer,\n      material: true,\n      colorMapFunction: nearestColorMap\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example using step color mapping function."\n      }\n    }\n  }\n};\nexport const DefaultColorScale = {\n  args: {\n    id: "default-color-scale",\n    bounds: hugin2DBounds,\n    layers: [{\n      ...hugin25mKhNetmapMapLayer,\n      material: false\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Default color scale."\n      }\n    }\n  }\n};\nconst BreakpointColorMapComponent = props => {\n  const [breakpoint, setBreakpoint] = React.useState(0.5);\n  const colorMap = React.useCallback(value => {\n    return createColorMap(breakpoint)(value);\n  }, [breakpoint]);\n  const layer = {\n    ...props?.layers?.[0],\n    colorMapFunction: colorMap\n  };\n  const propsWithLayers = {\n    ...props,\n    layers: [layer]\n  };\n  const handleChange = React.useCallback((_event, value) => {\n    setBreakpoint(value / 100);\n  }, []);\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, propsWithLayers), /*#__PURE__*/React.createElement("div", {\n    className: classes.legend\n  }, /*#__PURE__*/React.createElement(ContinuousLegend, {\n    min: valueRange[0],\n    max: valueRange[1],\n    colorMapFunction: colorMap\n  }))), /*#__PURE__*/React.createElement(Slider, {\n    min: 0,\n    max: 100,\n    defaultValue: 50,\n    step: 1,\n    onChangeCommitted: handleChange\n  }));\n};\nexport const BreakpointColorMap = {\n  args: {\n    id: "breakpoint-color-map",\n    bounds: hugin2DBounds,\n    layers: [{\n      ...hugin25mKhNetmapMapLayer,\n      gridLines: false,\n      material: true\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example using a color scale with a breakpoint."\n      }\n    }\n  },\n  render: args => /*#__PURE__*/React.createElement(BreakpointColorMapComponent, args)\n};\nconst ColorMapRangeComponent = props => {\n  const [colorMapUpper, setColorMapUpper] = React.useState(41048);\n  const layer = {\n    ...props?.layers?.[0],\n    colorMapRange: [-3071, colorMapUpper]\n  };\n  const propsWithLayers = {\n    ...props,\n    layers: [layer]\n  };\n  const handleChange = React.useCallback((_event, value) => {\n    setColorMapUpper(value);\n  }, []);\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, propsWithLayers)), /*#__PURE__*/React.createElement(Slider, {\n    min: 10000,\n    max: 41048,\n    defaultValue: 41048,\n    step: 1000,\n    onChange: handleChange\n  }));\n};\nexport const ColorMapRange = {\n  args: {\n    id: "breakpoint-color-map",\n    bounds: hugin2DBounds,\n    layers: [{\n      ...hugin25mKhNetmapMapLayer,\n      colorMapName: "Seismic",\n      colorMapClampColor: false,\n      gridLines: false,\n      material: true\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: \'Example changing the "ColorMapRange" property using a slider.\'\n      }\n    }\n  },\n  render: args => /*#__PURE__*/React.createElement(ColorMapRangeComponent, args)\n};\n\n// Map layer with color colorselector\n\nconst MapLayerColorSelectorTemplate = props => {\n  const [colorName, setColorName] = React.useState("Rainbow");\n  const [colorRange, setRange] = React.useState();\n  const [isAuto, setAuto] = React.useState();\n  const [breakPoints, setBreakPoint] = React.useState([]);\n  const [isLog, setIsLog] = React.useState(false);\n  const [isNearest, setIsNearest] = React.useState(false);\n\n  // user defined breakpoint(domain)\n  const userDefinedBreakPoint = React.useCallback(data => {\n    if (data) {\n      setBreakPoint(data.breakpoint);\n    }\n  }, []);\n\n  // Get color name from color selector\n  const colorNameFromSelector = React.useCallback(data => {\n    setColorName(data);\n  }, []);\n\n  // user defined range\n  const userDefinedRange = React.useCallback(data => {\n    if (data.range) setRange(data.range);\n    setAuto(data.isAuto);\n  }, []);\n\n  // Get interpolation method from color selector to layer\n  const getInterpolateMethod = React.useCallback(data => {\n    setIsLog(data.isLog);\n    setIsNearest(data.isNearest);\n  }, []);\n\n  // color map function\n  const colorMapFunc = React.useCallback(() => {\n    return createColorMapFunction(colorName, isLog, isNearest, breakPoints);\n  }, [colorName, isLog, isNearest, breakPoints]);\n  const min = 100;\n  const max = 1000;\n  const updatedLayerData = [{\n    ...props.layers?.[0],\n    colorMapName: colorName,\n    colorMapRange: colorRange && isAuto == false ? colorRange : [min, max],\n    colorMapFunction: colorMapFunc()\n  }];\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({}, props, {\n    layers: updatedLayerData\n  }),\n  /*#__PURE__*/\n  \n  /* @ts-expect-error */\n  React.createElement(View, {\n    id: "view_1"\n  }, /*#__PURE__*/React.createElement("div", {\n    style: {\n      marginTop: 50\n    }\n  }, /*#__PURE__*/React.createElement(ColorLegend, {\n    min: min,\n    max: max,\n    colorNameFromSelector: colorNameFromSelector,\n    getColorRange: userDefinedRange,\n    getInterpolateMethod: getInterpolateMethod,\n    getBreakpointValue: userDefinedBreakPoint,\n    horizontal: true,\n    numberOfTicks: 2\n  }))));\n};\nexport const ColorSelector = {\n  args: {\n    id: "map_layer_color_selector",\n    bounds: hugin2DBounds,\n    layers: [{\n      ...hugin25mKhNetmapMapLayer,\n      material: false\n    }],\n    views: {\n      layout: [1, 1],\n      showLabel: true,\n      viewports: [{\n        id: "view_1",\n        zoom: -4\n      }]\n    }\n  },\n  render: args => /*#__PURE__*/React.createElement(MapLayerColorSelectorTemplate, args)\n};',locationsMap:{"constant-color":{startLoc:{col:29,line:52},endLoc:{col:1,line:70},startBody:{col:29,line:52},endBody:{col:1,line:70}},"gradient-function-color-map":{startLoc:{col:40,line:71},endLoc:{col:1,line:89},startBody:{col:40,line:71},endBody:{col:1,line:89}},"step-function-color-map":{startLoc:{col:36,line:90},endLoc:{col:1,line:108},startBody:{col:36,line:90},endBody:{col:1,line:108}},"default-color-scale":{startLoc:{col:33,line:109},endLoc:{col:1,line:126},startBody:{col:33,line:109},endBody:{col:1,line:126}},"breakpoint-color-map":{startLoc:{col:34,line:159},endLoc:{col:1,line:178},startBody:{col:34,line:159},endBody:{col:1,line:178}},"color-map-range":{startLoc:{col:29,line:202},endLoc:{col:1,line:223},startBody:{col:29,line:202},endBody:{col:1,line:223}},"color-selector":{startLoc:{col:29,line:294},endLoc:{col:1,line:312},startBody:{col:29,line:294},endBody:{col:1,line:312}}}}},component:_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,title:"SubsurfaceViewer / Map Layer / Colormap",args:{triggerHome:0}};__webpack_exports__.default=stories;const classes={main:"MapLayer3dPng-main",legend:"MapLayer3dPng-legend"},Root=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_4__.ZP)("div")({[`& .${classes.main}`]:{height:500,border:"1px solid black",position:"relative"},[`& .${classes.legend}`]:{width:100,position:"absolute",top:"0",right:"0"}}),valueRange=[-3071,41048];const ConstantColor={args:{id:"map",layers:[_sharedSettings__WEBPACK_IMPORTED_MODULE_3__.QH,{..._sharedSettings__WEBPACK_IMPORTED_MODULE_3__.e1,colorMapFunction:[0,255,0]},_sharedSettings__WEBPACK_IMPORTED_MODULE_3__.D$],bounds:_sharedSettings__WEBPACK_IMPORTED_MODULE_3__.Jl,views:_sharedSettings__WEBPACK_IMPORTED_MODULE_3__.Pl},parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_3__.R4.docs,description:{story:'Example using the property "colorMapFunction" to color the surface in one color only'}}}},GradientFunctionColorMap={args:{id:"gradient-color-map",bounds:_sharedSettings__WEBPACK_IMPORTED_MODULE_3__.Jl,layers:[{..._sharedSettings__WEBPACK_IMPORTED_MODULE_3__.vz,material:!1,colorMapFunction:function gradientColorMap(x){return[255-255*x,255-100*x,255*x]}}]},parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_3__.R4.docs,description:{story:"Example using gradient color mapping function."}}}},StepFunctionColorMap={args:{id:"nearest-color-map",bounds:_sharedSettings__WEBPACK_IMPORTED_MODULE_3__.Jl,layers:[{..._sharedSettings__WEBPACK_IMPORTED_MODULE_3__.vz,material:!0,colorMapFunction:function nearestColorMap(x){return x>.5?[100,255,255]:x>.1?[255,100,255]:[255,255,100]}}]},parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_3__.R4.docs,description:{story:"Example using step color mapping function."}}}},DefaultColorScale={args:{id:"default-color-scale",bounds:_sharedSettings__WEBPACK_IMPORTED_MODULE_3__.Jl,layers:[{..._sharedSettings__WEBPACK_IMPORTED_MODULE_3__.vz,material:!1}]},parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_3__.R4.docs,description:{story:"Default color scale."}}}},BreakpointColorMapComponent=props=>{const[breakpoint,setBreakpoint]=react__WEBPACK_IMPORTED_MODULE_0__.useState(.5),colorMap=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((value=>function createColorMap(breakpoint){return value=>function breakpointColorMap(x,breakpoint){return x>breakpoint?[0,50,200]:[255,255,0]}(value,breakpoint)}(breakpoint)(value)),[breakpoint]),layer={...props?.layers?.[0],colorMapFunction:colorMap},propsWithLayers={...props,layers:[layer]},handleChange=react__WEBPACK_IMPORTED_MODULE_0__.useCallback(((_event,value)=>{setBreakpoint(value/100)}),[]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.main},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,propsWithLayers),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.legend},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_1__.sG,{min:valueRange[0],max:valueRange[1],colorMapFunction:colorMap}))),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_5__.ZP,{min:0,max:100,defaultValue:50,step:1,onChangeCommitted:handleChange}))},BreakpointColorMap={args:{id:"breakpoint-color-map",bounds:_sharedSettings__WEBPACK_IMPORTED_MODULE_3__.Jl,layers:[{..._sharedSettings__WEBPACK_IMPORTED_MODULE_3__.vz,gridLines:!1,material:!0}]},parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_3__.R4.docs,description:{story:"Example using a color scale with a breakpoint."}}},render:args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(BreakpointColorMapComponent,args)},ColorMapRangeComponent=props=>{const[colorMapUpper,setColorMapUpper]=react__WEBPACK_IMPORTED_MODULE_0__.useState(41048),layer={...props?.layers?.[0],colorMapRange:[-3071,colorMapUpper]},propsWithLayers={...props,layers:[layer]},handleChange=react__WEBPACK_IMPORTED_MODULE_0__.useCallback(((_event,value)=>{setColorMapUpper(value)}),[]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.main},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,propsWithLayers)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_5__.ZP,{min:1e4,max:41048,defaultValue:41048,step:1e3,onChange:handleChange}))},ColorMapRange={args:{id:"breakpoint-color-map",bounds:_sharedSettings__WEBPACK_IMPORTED_MODULE_3__.Jl,layers:[{..._sharedSettings__WEBPACK_IMPORTED_MODULE_3__.vz,colorMapName:"Seismic",colorMapClampColor:!1,gridLines:!1,material:!0}]},parameters:{docs:{..._sharedSettings__WEBPACK_IMPORTED_MODULE_3__.R4.docs,description:{story:'Example changing the "ColorMapRange" property using a slider.'}}},render:args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(ColorMapRangeComponent,args)},MapLayerColorSelectorTemplate=props=>{const[colorName,setColorName]=react__WEBPACK_IMPORTED_MODULE_0__.useState("Rainbow"),[colorRange,setRange]=react__WEBPACK_IMPORTED_MODULE_0__.useState(),[isAuto,setAuto]=react__WEBPACK_IMPORTED_MODULE_0__.useState(),[breakPoints,setBreakPoint]=react__WEBPACK_IMPORTED_MODULE_0__.useState([]),[isLog,setIsLog]=react__WEBPACK_IMPORTED_MODULE_0__.useState(!1),[isNearest,setIsNearest]=react__WEBPACK_IMPORTED_MODULE_0__.useState(!1),userDefinedBreakPoint=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((data=>{data&&setBreakPoint(data.breakpoint)}),[]),colorNameFromSelector=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((data=>{setColorName(data)}),[]),userDefinedRange=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((data=>{data.range&&setRange(data.range),setAuto(data.isAuto)}),[]),getInterpolateMethod=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((data=>{setIsLog(data.isLog),setIsNearest(data.isNearest)}),[]),colorMapFunc=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((()=>(0,_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_1__.rX)(colorName,isLog,isNearest,breakPoints)),[colorName,isLog,isNearest,breakPoints]),updatedLayerData=[{...props.layers?.[0],colorMapName:colorName,colorMapRange:colorRange&&0==isAuto?colorRange:[100,1e3],colorMapFunction:colorMapFunc()}];return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,_extends({},props,{layers:updatedLayerData}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_6__.Z,{id:"view_1"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{marginTop:50}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_1__.n6,{min:100,max:1e3,colorNameFromSelector:colorNameFromSelector,getColorRange:userDefinedRange,getInterpolateMethod:getInterpolateMethod,getBreakpointValue:userDefinedBreakPoint,horizontal:!0,numberOfTicks:2}))))},ColorSelector={args:{id:"map_layer_color_selector",bounds:_sharedSettings__WEBPACK_IMPORTED_MODULE_3__.Jl,layers:[{..._sharedSettings__WEBPACK_IMPORTED_MODULE_3__.vz,material:!1}],views:{layout:[1,1],showLabel:!0,viewports:[{id:"view_1",zoom:-4}]}},render:args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(MapLayerColorSelectorTemplate,args)};ConstantColor.parameters={...ConstantColor.parameters,docs:{...ConstantColor.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [huginAxes3DLayer, {\n      ...hugin25mKhNetmapMapLayerPng,\n      colorMapFunction: [0, 255, 0] // Use constant color instead of function\n    }, northArrowLayer],\n    bounds: hugin2DBounds,\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: \'Example using the property "colorMapFunction" to color the surface in one color only\'\n      }\n    }\n  }\n}',...ConstantColor.parameters?.docs?.source}}},GradientFunctionColorMap.parameters={...GradientFunctionColorMap.parameters,docs:{...GradientFunctionColorMap.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "gradient-color-map",\n    bounds: hugin2DBounds,\n    layers: [{\n      ...hugin25mKhNetmapMapLayer,\n      material: false,\n      colorMapFunction: gradientColorMap\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example using gradient color mapping function."\n      }\n    }\n  }\n}',...GradientFunctionColorMap.parameters?.docs?.source}}},StepFunctionColorMap.parameters={...StepFunctionColorMap.parameters,docs:{...StepFunctionColorMap.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "nearest-color-map",\n    bounds: hugin2DBounds,\n    layers: [{\n      ...hugin25mKhNetmapMapLayer,\n      material: true,\n      colorMapFunction: nearestColorMap\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example using step color mapping function."\n      }\n    }\n  }\n}',...StepFunctionColorMap.parameters?.docs?.source}}},DefaultColorScale.parameters={...DefaultColorScale.parameters,docs:{...DefaultColorScale.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "default-color-scale",\n    bounds: hugin2DBounds,\n    layers: [{\n      ...hugin25mKhNetmapMapLayer,\n      material: false\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Default color scale."\n      }\n    }\n  }\n}',...DefaultColorScale.parameters?.docs?.source}}},BreakpointColorMap.parameters={...BreakpointColorMap.parameters,docs:{...BreakpointColorMap.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "breakpoint-color-map",\n    bounds: hugin2DBounds,\n    layers: [{\n      ...hugin25mKhNetmapMapLayer,\n      gridLines: false,\n      material: true\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Example using a color scale with a breakpoint."\n      }\n    }\n  },\n  render: args => <BreakpointColorMapComponent {...args} />\n}',...BreakpointColorMap.parameters?.docs?.source}}},ColorMapRange.parameters={...ColorMapRange.parameters,docs:{...ColorMapRange.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "breakpoint-color-map",\n    bounds: hugin2DBounds,\n    layers: [{\n      ...hugin25mKhNetmapMapLayer,\n      colorMapName: "Seismic",\n      colorMapClampColor: false,\n      gridLines: false,\n      material: true\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: \'Example changing the "ColorMapRange" property using a slider.\'\n      }\n    }\n  },\n  render: args => <ColorMapRangeComponent {...args} />\n}',...ColorMapRange.parameters?.docs?.source}}},ColorSelector.parameters={...ColorSelector.parameters,docs:{...ColorSelector.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map_layer_color_selector",\n    bounds: hugin2DBounds,\n    layers: [{\n      ...hugin25mKhNetmapMapLayer,\n      material: false\n    }],\n    views: {\n      layout: [1, 1],\n      showLabel: true,\n      viewports: [{\n        id: "view_1",\n        zoom: -4\n      }]\n    }\n  },\n  render: args => <MapLayerColorSelectorTemplate {...args} />\n}',...ColorSelector.parameters?.docs?.source}}};const __namedExportsOrder=["ConstantColor","GradientFunctionColorMap","StepFunctionColorMap","DefaultColorScale","BreakpointColorMap","ColorMapRange","ColorSelector"]},"./packages/subsurface-viewer/src/storybook/sharedSettings.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{BX:function(){return EditedDataTemplate},D$:function(){return northArrowLayer},DW:function(){return customLayerWithPolygonDataProps},Dh:function(){return hillshadingLayer},HV:function(){return mainStyle},Jl:function(){return hugin2DBounds},M1:function(){return customLayerWithPolylineData},M8:function(){return volveWellsResources},Ng:function(){return customLayerWithTextData},On:function(){return volveWellsWithLogsLayer},Pl:function(){return default3DViews},QH:function(){return huginAxes3DLayer},R4:function(){return defaultStoryParameters},Rd:function(){return customLayerWithPolygonData},Sh:function(){return classes},Wj:function(){return colormapLayer},as:function(){return hugin25mDepthMapLayer},cs:function(){return hugin5mKhNetmapMapLayer},e1:function(){return hugin25mKhNetmapMapLayerPng},ex:function(){return volveWellsLayer},fC:function(){return Root},iH:function(){return redAxes2DLayer},vj:function(){return subsufaceProps},vz:function(){return hugin25mKhNetmapMapLayer},y8:function(){return volveWellsFromResourcesLayer},yP:function(){return hugin3DBounds},z:function(){return volveWellsBounds},zs:function(){return default2DViews}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../example-data/deckgl-map.json");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const defaultStoryParameters={docs:{inlineStories:!1,iframeHeight:500}},classes={main:"default-main"},mainStyle={[`& .${classes.main}`]:{width:750,height:500,top:"50%",left:"50%",transform:"translate(-50%, -50%)",border:"1px solid black",background:"azure",position:"absolute"}},Root=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__.ZP)("div")(mainStyle),subsufaceProps=_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0],colormapLayer={..._example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].layers[0],id:"colormap-layer"},hillshadingLayer={..._example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].layers[1],id:"hillshading-layer"},redAxes2DLayer={"@@type":"Axes2DLayer",id:"axes-layer",marginH:80,marginV:30,isLeftRuler:!0,isRightRuler:!1,isBottomRuler:!0,isTopRuler:!1,backgroundColor:[155,0,0,255]},hugin2DOrigin=[432150,6475800],hugin2DBounds=[432150,6475800,439400,6481500],hugin3DBounds=[432150,6475800,-2e3,439400,6481500,-3500],huginAxes3DLayer={"@@type":"AxesLayer",id:"axes-layer2",bounds:[432150,6475800,2e3,439400,6481500,3500]},northArrowLayer={"@@type":"NorthArrow3DLayer",id:"north-arrow-layer"},volveWellsResources={resources:{wellsData:"./volve_wells.json"}},volveWellsFromResourcesLayer={"@@type":"WellsLayer",id:"volve-wells",data:"@@#resources.wellsData",ZIncreasingDownwards:!1},volveWellsLayer={"@@type":"WellsLayer",id:"volve-wells",data:"./volve_wells.json",ZIncreasingDownwards:!1},volveWellsBounds=[432150,6475800,439400,6481500],volveWellsWithLogsLayer={"@@type":"WellsLayer",id:"volve-wells-with-logs",data:"./volve_wells.json",logData:"./volve_logs.json",logrunName:"BLOCKING",logName:"ZONELOG",logColor:"Stratigraphy",ZIncreasingDownwards:!1},hugin25mDepthMapLayer={"@@type":"MapLayer",id:"hugin_depth",meshData:"hugin_depth_25_m.float32",frame:{origin:hugin2DOrigin,count:[291,229],increment:[25,25],rotDeg:0},propertiesData:"hugin_depth_25_m.float32",contours:[0,100],isContoursDepth:!0,gridLines:!1,smoothShading:!0,material:!0},hugin25mKhNetmapMapLayer={...hugin25mDepthMapLayer,id:"hugin_kh_netmap",propertiesData:"kh_netmap_25_m.float32",colorMapName:"Physics"},hugin25mKhNetmapMapLayerPng={...hugin25mDepthMapLayer,meshData:"hugin_depth_25_m.png",propertiesData:"kh_netmap_25_m.png",colorMapName:"Physics"},hugin5mKhNetmapMapLayer={"@@type":"MapLayer",id:"mesh-layer",meshUrl:"hugin_depth_5_m.float32",frame:{origin:hugin2DOrigin,count:[1451,1141],increment:[5,5],rotDeg:0},propertiesUrl:"kh_netmap_5_m.float32",contours:[0,100],colorMapName:"Physics"},default2DViews={layout:[1,1],viewports:[{id:"view_1",show3D:!1}]},default3DViews={layout:[1,1],viewports:[{id:"view_1",show3D:!0}]},customLayerWithPolylineData={"@@type":"GeoJsonLayer",id:"geojson-line-layer",name:"Line",data:{type:"FeatureCollection",features:[{type:"Feature",properties:{},geometry:{type:"LineString",coordinates:[[434e3,6477500],[435500,6477500]]}}]},getLineWidth:20,lineWidthMinPixels:2},customLayerWithPolygonDataProps={id:"geojson-layer",data:{type:"Feature",properties:{},geometry:{type:"Polygon",coordinates:[[[434562,6477595],[434562,6478595],[435062,6478595],[435062,6477595],[434562,6477595]]]}},getLineWidth:20,lineWidthMinPixels:2,getLineColor:[0,255,255],getFillColor:[0,255,0],opacity:.3},customLayerWithPolygonData={...customLayerWithPolygonDataProps,"@@type":"GeoJsonLayer"},customLayerWithTextData={"@@type":"TextLayer",id:"text-layer",name:"Text",data:[{name:"Custom GeoJson layer",coordinates:[434800,6478695]}],pickable:!0,getPosition:d=>d.coordinates,getText:d=>d.name,getColor:[255,0,0],getSize:16,getAngle:0,getTextAnchor:"middle",getAlignmentBaseline:"center"},EditedDataTemplate=args=>{const[editedData,setEditedData]=react__WEBPACK_IMPORTED_MODULE_0__.useState(args.editedData);return react__WEBPACK_IMPORTED_MODULE_0__.useEffect((()=>{setEditedData(args.editedData)}),[args.editedData]),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,_extends({},args,{editedData:editedData,setProps:updatedProps=>{setEditedData(updatedProps.editedData)}}))};try{Root.displayName="Root",Root.__docgenInfo={description:"",displayName:"Root",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/sharedSettings.tsx#Root"]={docgenInfo:Root.__docgenInfo,name:"Root",path:"packages/subsurface-viewer/src/storybook/sharedSettings.tsx#Root"})}catch(__react_docgen_typescript_loader_error){}try{EditedDataTemplate.displayName="EditedDataTemplate",EditedDataTemplate.__docgenInfo={description:"",displayName:"EditedDataTemplate",props:{id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},resources:{defaultValue:null,description:"",name:"resources",required:!1,type:{name:"Record<string, unknown>"}},layers:{defaultValue:null,description:"Array of externally created layers or layer definition records or JSON strings.\nAdd '@@typedArraySupport' : true in a layer definition in order to\nuse typed arrays as inputs.",name:"layers",required:!1,type:{name:"TLayerDefinition[]"}},bounds:{defaultValue:null,description:"",name:"bounds",required:!1,type:{name:"[number, number, number, number] | BoundsAccessor"}},cameraPosition:{defaultValue:null,description:"",name:"cameraPosition",required:!1,type:{name:"ViewStateType"}},triggerHome:{defaultValue:null,description:"",name:"triggerHome",required:!1,type:{name:"number"}},views:{defaultValue:null,description:"",name:"views",required:!1,type:{name:"ViewsType"}},coords:{defaultValue:null,description:"",name:"coords",required:!1,type:{name:"{ visible?: boolean | null; multiPicking?: boolean | null; pickDepth?: number | null | undefined; } | undefined"}},scale:{defaultValue:null,description:"",name:"scale",required:!1,type:{name:"{ visible?: boolean | null; incrementValue?: number | null; widthPerUnit?: number | null | undefined; cssStyle?: Record<string, unknown> | null | undefined; } | undefined"}},coordinateUnit:{defaultValue:null,description:"",name:"coordinateUnit",required:!1,type:{name:"enum",value:[{value:'"m"'},{value:'"mm"'},{value:'"cm"'},{value:'"km"'},{value:'"in"'},{value:'"ft-us"'},{value:'"ft"'},{value:'"yd"'},{value:'"mi"'},{value:'"mm2"'},{value:'"cm2"'},{value:'"m2"'},{value:'"ha"'},{value:'"km2"'},{value:'"in2"'},{value:'"ft2"'},{value:'"ac"'},{value:'"mi2"'},{value:'"mcg"'},{value:'"mg"'},{value:'"g"'},{value:'"kg"'},{value:'"oz"'},{value:'"lb"'},{value:'"mt"'},{value:'"t"'},{value:'"mm3"'},{value:'"cm3"'},{value:'"ml"'},{value:'"l"'},{value:'"kl"'},{value:'"m3"'},{value:'"km3"'},{value:'"tsp"'},{value:'"Tbs"'},{value:'"in3"'},{value:'"fl-oz"'},{value:'"cup"'},{value:'"pnt"'},{value:'"qt"'},{value:'"gal"'},{value:'"ft3"'},{value:'"yd3"'},{value:'"mm3/s"'},{value:'"cm3/s"'},{value:'"ml/s"'},{value:'"cl/s"'},{value:'"dl/s"'},{value:'"l/s"'},{value:'"l/min"'},{value:'"l/h"'},{value:'"kl/s"'},{value:'"kl/min"'},{value:'"kl/h"'},{value:'"m3/s"'},{value:'"m3/min"'},{value:'"m3/h"'},{value:'"km3/s"'},{value:'"tsp/s"'},{value:'"Tbs/s"'},{value:'"in3/s"'},{value:'"in3/min"'},{value:'"in3/h"'},{value:'"fl-oz/s"'},{value:'"fl-oz/min"'},{value:'"fl-oz/h"'},{value:'"cup/s"'},{value:'"pnt/s"'},{value:'"pnt/min"'},{value:'"pnt/h"'},{value:'"qt/s"'},{value:'"gal/s"'},{value:'"gal/min"'},{value:'"gal/h"'},{value:'"ft3/s"'},{value:'"ft3/min"'},{value:'"ft3/h"'},{value:'"yd3/s"'},{value:'"yd3/min"'},{value:'"yd3/h"'},{value:'"C"'},{value:'"F"'},{value:'"K"'},{value:'"R"'},{value:'"ns"'},{value:'"mu"'},{value:'"ms"'},{value:'"s"'},{value:'"min"'},{value:'"h"'},{value:'"d"'},{value:'"week"'},{value:'"month"'},{value:'"year"'},{value:'"Hz"'},{value:'"mHz"'},{value:'"kHz"'},{value:'"MHz"'},{value:'"GHz"'},{value:'"THz"'},{value:'"rpm"'},{value:'"deg/s"'},{value:'"rad/s"'},{value:'"m/s"'},{value:'"km/h"'},{value:'"m/h"'},{value:'"knot"'},{value:'"ft/s"'},{value:'"s/m"'},{value:'"min/km"'},{value:'"s/ft"'},{value:'"min/mi"'},{value:'"Pa"'},{value:'"hPa"'},{value:'"kPa"'},{value:'"MPa"'},{value:'"bar"'},{value:'"torr"'},{value:'"psi"'},{value:'"ksi"'},{value:'"b"'},{value:'"Kb"'},{value:'"Mb"'},{value:'"Gb"'},{value:'"Tb"'},{value:'"B"'},{value:'"KB"'},{value:'"MB"'},{value:'"GB"'},{value:'"TB"'},{value:'"lx"'},{value:'"ft-cd"'},{value:'"ppm"'},{value:'"ppb"'},{value:'"ppt"'},{value:'"ppq"'},{value:'"V"'},{value:'"mV"'},{value:'"kV"'},{value:'"A"'},{value:'"mA"'},{value:'"kA"'},{value:'"W"'},{value:'"mW"'},{value:'"kW"'},{value:'"MW"'},{value:'"GW"'},{value:'"VA"'},{value:'"mVA"'},{value:'"kVA"'},{value:'"MVA"'},{value:'"GVA"'},{value:'"VAR"'},{value:'"mVAR"'},{value:'"kVAR"'},{value:'"MVAR"'},{value:'"GVAR"'},{value:'"Wh"'},{value:'"mWh"'},{value:'"kWh"'},{value:'"MWh"'},{value:'"GWh"'},{value:'"J"'},{value:'"kJ"'},{value:'"VARh"'},{value:'"mVARh"'},{value:'"kVARh"'},{value:'"MVARh"'},{value:'"GVARH"'},{value:'"deg"'},{value:'"rad"'},{value:'"grad"'},{value:'"arcmin"'},{value:'"arcsec"'}]}},colorTables:{defaultValue:null,description:"",name:"colorTables",required:!1,type:{name:"colorTablesArray"}},editedData:{defaultValue:null,description:"",name:"editedData",required:!1,type:{name:"Record<string, unknown>"}},setProps:{defaultValue:null,description:"",name:"setProps",required:!1,type:{name:"((data: Record<string, unknown>) => void)"}},checkDatafileSchema:{defaultValue:null,description:"Validate JSON datafile against schema",name:"checkDatafileSchema",required:!1,type:{name:"boolean"}},onMouseEvent:{defaultValue:null,description:"For get mouse events",name:"onMouseEvent",required:!1,type:{name:"((event: MapMouseEvent) => void)"}},getCameraPosition:{defaultValue:null,description:"",name:"getCameraPosition",required:!1,type:{name:"((input: ViewStateType) => void)"}},onRenderingProgress:{defaultValue:null,description:"Will be called while layers are processed to rendered data.\n@param progress vlaue between 0 and 100.",name:"onRenderingProgress",required:!1,type:{name:"((progress: number) => void)"}},onDragStart:{defaultValue:null,description:"",name:"onDragStart",required:!1,type:{name:"((info: PickingInfo, event: MjolnirGestureEvent) => void)"}},onDragEnd:{defaultValue:null,description:"",name:"onDragEnd",required:!1,type:{name:"((info: PickingInfo, event: MjolnirGestureEvent) => void)"}},triggerResetMultipleWells:{defaultValue:null,description:"",name:"triggerResetMultipleWells",required:!1,type:{name:"number"}},selection:{defaultValue:null,description:"Range selection of the current well",name:"selection",required:!1,type:{name:"{ well: string; selection: [number, number | undefined] | undefined; } | undefined"}},getTooltip:{defaultValue:null,description:"Override default tooltip with a callback.",name:"getTooltip",required:!1,type:{name:"TooltipCallback"}},lights:{defaultValue:null,description:"",name:"lights",required:!1,type:{name:"LightsType"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/sharedSettings.tsx#EditedDataTemplate"]={docgenInfo:EditedDataTemplate.__docgenInfo,name:"EditedDataTemplate",path:"packages/subsurface-viewer/src/storybook/sharedSettings.tsx#EditedDataTemplate"})}catch(__react_docgen_typescript_loader_error){}},"../example-data/deckgl-map.json":function(module){module.exports=JSON.parse('[{"id":"DeckGL-Map","coords":{"visible":true,"multiPicking":true,"pickDepth":10},"scale":{"visible":true,"incrementValue":100,"widthPerUnit":100,"cssStyle":{"left":10,"top":10}},"coordinateUnit":"m","resources":{"propertyMap":"propertyMap.png","depthMap":"propertyMap.png","wellsData":"volve_wells.json","logData":"volve_logs.json"},"bounds":[432205,6475078,437720,6481113],"layers":[{"@@type":"ColormapLayer","image":"@@#resources.propertyMap","rotDeg":0,"bounds":[432205,6475078,437720,6481113],"colorMapName":"Rainbow","valueRange":[2782,3513],"colorMapRange":[2782,3513]},{"@@type":"Hillshading2DLayer","bounds":[432205,6475078,437720,6481113],"valueRange":[2782,3513],"rotDeg":0,"image":"@@#resources.depthMap"},{"@@type":"WellsLayer","data":"@@#resources.wellsData","logData":"@@#resources.logData","logrunName":"BLOCKING","logName":"ZONELOG","logColor":"Stratigraphy"},{"@@type":"FaultPolygonsLayer","data":"fault_polygons.geojson"},{"@@type":"PieChartLayer","data":"piechart.json"},{"@@type":"NorthArrow3DLayer","visible":true},{"@@type":"DrawingLayer"}],"editedData":{},"views":{"layout":[1,1],"showLabel":false,"viewports":[{"id":"view_1","show3D":false,"layerIds":[]}]}}]')}}]);