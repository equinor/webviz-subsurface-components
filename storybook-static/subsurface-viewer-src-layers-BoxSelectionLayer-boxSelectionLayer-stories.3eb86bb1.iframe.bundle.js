"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[6115],{"./packages/subsurface-viewer/src/layers/BoxSelectionLayer/boxSelectionLayer.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:function(){return __namedExportsOrder},boxSelection:function(){return boxSelection},boxSelectionWithCallback:function(){return boxSelectionWithCallback}});var _mui_material__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mui/material/FormControlLabel/FormControlLabel.js"),_mui_material__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mui/material/Switch/Switch.js"),_mui_material_styles__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const classes={main:"boxSelectionLayer-main",legend:"boxSelectionLayer-legend"},Root=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_2__.ZP)("div")({[`& .${classes.main}`]:{height:500,border:"1px solid black",position:"relative"},[`& .${classes.legend}`]:{width:100,position:"absolute",top:"0",right:"0"}});__webpack_exports__.default={parameters:{storySource:{source:'function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n // remove when ready to fix these.\n // remove when ready to fix these.\n\nimport { FormControlLabel, Switch } from "@mui/material";\nimport { styled } from "@mui/material/styles";\nimport React from "react";\nimport SubsurfaceViewer from "../../SubsurfaceViewer";\nconst PREFIX = "boxSelectionLayer";\n\n// This should be fixed at some point\n\nconst classes = {\n  main: `${PREFIX}-main`,\n  legend: `${PREFIX}-legend`\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled("div")({\n  [`& .${classes.main}`]: {\n    height: 500,\n    border: "1px solid black",\n    position: "relative"\n  },\n  [`& .${classes.legend}`]: {\n    width: 100,\n    position: "absolute",\n    top: "0",\n    right: "0"\n  }\n});\nexport default {\n  component: SubsurfaceViewer,\n  title: "SubsurfaceViewer / Box Selection Layer"\n};\nexport const boxSelection = () => {\n  const [argsState, setArgsState] = React.useState(enableLassoArgs);\n  const [state, setState] = React.useState(true);\n  const handleChange = React.useCallback(() => {\n    const boxSelectionLayer = enableLassoArgs.layers.filter(item => item["@@type"] === "BoxSelectionLayer");\n    if (boxSelectionLayer[0].visible !== undefined) {\n      boxSelectionLayer[0].visible = !boxSelectionLayer[0].visible;\n    }\n    if (boxSelectionLayer[0].visible) {\n      setArgsState(enableLassoArgs);\n    } else {\n      setArgsState(disableLassoArgs);\n    }\n    setState(!state);\n  }, [state]);\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({\n    id: "DeckGL-Map"\n  }, argsState))), /*#__PURE__*/React.createElement("div", {\n    style: {\n      textAlign: "center"\n    }\n  }, /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Switch, {\n      checked: state,\n      onChange: handleChange,\n      color: "primary",\n      name: "checkedB",\n      inputProps: {\n        "aria-label": "primary checkbox"\n      }\n    }),\n    label: "Display Lasso Selection"\n  })));\n};\nconst disableLassoArgs = {\n  id: "DeckGL-Map",\n  resources: {\n    wellsData: "./volve_wells.json"\n  },\n  bounds: [432205, 6475078, 437720, 6481113],\n  layers: [{\n    "@@type": "WellsLayer",\n    data: "@@#resources.wellsData"\n  }, {\n    "@@type": "BoxSelectionLayer",\n    visible: false\n  }],\n  editedData: {},\n  views: {\n    layout: [1, 1],\n    showLabel: false,\n    viewports: [{\n      id: "view_1",\n      show3D: false,\n      layerIds: []\n    }]\n  }\n};\nconst enableLassoArgs = {\n  ...disableLassoArgs,\n  layers: [{\n    "@@type": "WellsLayer",\n    data: "@@#resources.wellsData"\n  }, {\n    "@@type": "BoxSelectionLayer",\n    visible: true\n  }]\n};\nexport const boxSelectionWithCallback = () => {\n  const [data, setData] = React.useState([]);\n  const getSelectedWellsDataCallBack = React.useCallback(pickingInfos => {\n    const selectedWells = pickingInfos.map(item => item.object).filter(item => item.type === "Feature").map(item => item.properties["name"]);\n    setData(selectedWells);\n  }, []);\n  const lassoArgsWithSelectedWellsDataCallback = {\n    ...disableLassoArgs,\n    layers: [{\n      "@@type": "WellsLayer",\n      data: "@@#resources.wellsData"\n    }, {\n      "@@type": "BoxSelectionLayer",\n      visible: true,\n      handleSelection: getSelectedWellsDataCallBack\n    }]\n  };\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({\n    id: "DeckGL-Map"\n  }, lassoArgsWithSelectedWellsDataCallback))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", null, "Selected Wells:"), data.map(item => /*#__PURE__*/React.createElement("div", {\n    key: item\n  }, item))));\n};\nboxSelection.parameters = {\n  ...boxSelection.parameters,\n  docs: {\n    ...boxSelection.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  const [argsState, setArgsState] = React.useState<Record<string, unknown>>(enableLassoArgs);\\n  const [state, setState] = React.useState<boolean>(true);\\n  const handleChange = React.useCallback(() => {\\n    const boxSelectionLayer = enableLassoArgs.layers.filter(item => item[\\"@@type\\"] === \\"BoxSelectionLayer\\");\\n    if (boxSelectionLayer[0].visible !== undefined) {\\n      boxSelectionLayer[0].visible = !boxSelectionLayer[0].visible;\\n    }\\n    if (boxSelectionLayer[0].visible) {\\n      setArgsState(enableLassoArgs);\\n    } else {\\n      setArgsState(disableLassoArgs);\\n    }\\n    setState(!state);\\n  }, [state]);\\n  return <Root>\\n            <div className={classes.main}>\\n                <SubsurfaceViewer id={\\"DeckGL-Map\\"} {...argsState} />\\n            </div>\\n            <div style={{\\n      textAlign: \\"center\\"\\n    }}>\\n                <FormControlLabel control={<Switch checked={state} onChange={handleChange} color=\\"primary\\" name=\\"checkedB\\" inputProps={{\\n        \\"aria-label\\": \\"primary checkbox\\"\\n      }} />} label=\\"Display Lasso Selection\\" />\\n            </div>\\n        </Root>;\\n}",\n      ...boxSelection.parameters?.docs?.source\n    }\n  }\n};\nboxSelectionWithCallback.parameters = {\n  ...boxSelectionWithCallback.parameters,\n  docs: {\n    ...boxSelectionWithCallback.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  const [data, setData] = React.useState<string[]>([]);\\n  const getSelectedWellsDataCallBack = React.useCallback((pickingInfos: PickInfo[]) => {\\n    const selectedWells = (pickingInfos.map(item => item.object).filter(item => item.type === \\"Feature\\").map(item => item.properties[\\"name\\"]) as string[]);\\n    setData(selectedWells);\\n  }, []);\\n  const lassoArgsWithSelectedWellsDataCallback: Record<string, unknown> = {\\n    ...disableLassoArgs,\\n    layers: [{\\n      \\"@@type\\": \\"WellsLayer\\",\\n      data: \\"@@#resources.wellsData\\"\\n    }, {\\n      \\"@@type\\": \\"BoxSelectionLayer\\",\\n      visible: true,\\n      handleSelection: getSelectedWellsDataCallBack\\n    }]\\n  };\\n  return <Root>\\n            <div className={classes.main}>\\n                <SubsurfaceViewer id={\\"DeckGL-Map\\"} {...lassoArgsWithSelectedWellsDataCallback} />\\n            </div>\\n            <div>\\n                <div>Selected Wells:</div>\\n                {data.map(item => <div key={item}>{item}</div>)}\\n            </div>\\n        </Root>;\\n}",\n      ...boxSelectionWithCallback.parameters?.docs?.source\n    }\n  }\n};',locationsMap:{"box-selection":{startLoc:{col:28,line:36},endLoc:{col:1,line:71},startBody:{col:28,line:36},endBody:{col:1,line:71}},"box-selection-with-callback":{startLoc:{col:40,line:106},endLoc:{col:1,line:130},startBody:{col:40,line:106},endBody:{col:1,line:130}}}}},component:_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,title:"SubsurfaceViewer / Box Selection Layer"};const boxSelection=()=>{const[argsState,setArgsState]=react__WEBPACK_IMPORTED_MODULE_0__.useState(enableLassoArgs),[state,setState]=react__WEBPACK_IMPORTED_MODULE_0__.useState(!0),handleChange=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((()=>{const boxSelectionLayer=enableLassoArgs.layers.filter((item=>"BoxSelectionLayer"===item["@@type"]));void 0!==boxSelectionLayer[0].visible&&(boxSelectionLayer[0].visible=!boxSelectionLayer[0].visible),boxSelectionLayer[0].visible?setArgsState(enableLassoArgs):setArgsState(disableLassoArgs),setState(!state)}),[state]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.main},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,_extends({id:"DeckGL-Map"},argsState))),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{textAlign:"center"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_3__.Z,{control:react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_4__.Z,{checked:state,onChange:handleChange,color:"primary",name:"checkedB",inputProps:{"aria-label":"primary checkbox"}}),label:"Display Lasso Selection"})))},disableLassoArgs={id:"DeckGL-Map",resources:{wellsData:"./volve_wells.json"},bounds:[432205,6475078,437720,6481113],layers:[{"@@type":"WellsLayer",data:"@@#resources.wellsData"},{"@@type":"BoxSelectionLayer",visible:!1}],editedData:{},views:{layout:[1,1],showLabel:!1,viewports:[{id:"view_1",show3D:!1,layerIds:[]}]}},enableLassoArgs={...disableLassoArgs,layers:[{"@@type":"WellsLayer",data:"@@#resources.wellsData"},{"@@type":"BoxSelectionLayer",visible:!0}]},boxSelectionWithCallback=()=>{const[data,setData]=react__WEBPACK_IMPORTED_MODULE_0__.useState([]),getSelectedWellsDataCallBack=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((pickingInfos=>{const selectedWells=pickingInfos.map((item=>item.object)).filter((item=>"Feature"===item.type)).map((item=>item.properties.name));setData(selectedWells)}),[]),lassoArgsWithSelectedWellsDataCallback={...disableLassoArgs,layers:[{"@@type":"WellsLayer",data:"@@#resources.wellsData"},{"@@type":"BoxSelectionLayer",visible:!0,handleSelection:getSelectedWellsDataCallBack}]};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.main},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,_extends({id:"DeckGL-Map"},lassoArgsWithSelectedWellsDataCallback))),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"Selected Wells:"),data.map((item=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{key:item},item)))))};boxSelection.parameters={...boxSelection.parameters,docs:{...boxSelection.parameters?.docs,source:{originalSource:'() => {\n  const [argsState, setArgsState] = React.useState<Record<string, unknown>>(enableLassoArgs);\n  const [state, setState] = React.useState<boolean>(true);\n  const handleChange = React.useCallback(() => {\n    const boxSelectionLayer = enableLassoArgs.layers.filter(item => item["@@type"] === "BoxSelectionLayer");\n    if (boxSelectionLayer[0].visible !== undefined) {\n      boxSelectionLayer[0].visible = !boxSelectionLayer[0].visible;\n    }\n    if (boxSelectionLayer[0].visible) {\n      setArgsState(enableLassoArgs);\n    } else {\n      setArgsState(disableLassoArgs);\n    }\n    setState(!state);\n  }, [state]);\n  return <Root>\n            <div className={classes.main}>\n                <SubsurfaceViewer id={"DeckGL-Map"} {...argsState} />\n            </div>\n            <div style={{\n      textAlign: "center"\n    }}>\n                <FormControlLabel control={<Switch checked={state} onChange={handleChange} color="primary" name="checkedB" inputProps={{\n        "aria-label": "primary checkbox"\n      }} />} label="Display Lasso Selection" />\n            </div>\n        </Root>;\n}',...boxSelection.parameters?.docs?.source}}},boxSelectionWithCallback.parameters={...boxSelectionWithCallback.parameters,docs:{...boxSelectionWithCallback.parameters?.docs,source:{originalSource:'() => {\n  const [data, setData] = React.useState<string[]>([]);\n  const getSelectedWellsDataCallBack = React.useCallback((pickingInfos: PickInfo[]) => {\n    const selectedWells = (pickingInfos.map(item => item.object).filter(item => item.type === "Feature").map(item => item.properties["name"]) as string[]);\n    setData(selectedWells);\n  }, []);\n  const lassoArgsWithSelectedWellsDataCallback: Record<string, unknown> = {\n    ...disableLassoArgs,\n    layers: [{\n      "@@type": "WellsLayer",\n      data: "@@#resources.wellsData"\n    }, {\n      "@@type": "BoxSelectionLayer",\n      visible: true,\n      handleSelection: getSelectedWellsDataCallBack\n    }]\n  };\n  return <Root>\n            <div className={classes.main}>\n                <SubsurfaceViewer id={"DeckGL-Map"} {...lassoArgsWithSelectedWellsDataCallback} />\n            </div>\n            <div>\n                <div>Selected Wells:</div>\n                {data.map(item => <div key={item}>{item}</div>)}\n            </div>\n        </Root>;\n}',...boxSelectionWithCallback.parameters?.docs?.source}}};const __namedExportsOrder=["boxSelection","boxSelectionWithCallback"]}}]);