"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[8669],{"./packages/subsurface-viewer/src/storybook/examples/miscExamples.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:function(){return Default},MapClampColor:function(){return MapClampColor},MapInContainer:function(){return MapInContainer},MapMaterial:function(){return MapMaterial},Minimal:function(){return Minimal},MixedLayerDefinitions:function(){return MixedLayerDefinitions},SelectableFeatureExample:function(){return SelectableFeatureExample},UserDefinedLayer1:function(){return UserDefinedLayer1},UserDefinedLayer2:function(){return UserDefinedLayer2},__namedExportsOrder:function(){return __namedExportsOrder},colorMapFunction:function(){return colorMapFunction},default:function(){return miscExamples_stories}});var create=__webpack_require__("./node_modules/mathjs/lib/esm/core/create.js"),allFactoriesAny=__webpack_require__("./node_modules/mathjs/lib/esm/entry/allFactoriesAny.js"),react=__webpack_require__("./node_modules/react/index.js"),SubsurfaceViewer=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),grid3dLayer=__webpack_require__("./packages/subsurface-viewer/src/layers/grid3d/grid3dLayer.ts");var sharedSettings=__webpack_require__("./packages/subsurface-viewer/src/storybook/sharedSettings.tsx"),TruncatedSnubCube=__webpack_require__("./packages/subsurface-viewer/src/layers/grid3d/test_data/TruncatedSnubCube.ts"),PentagonalToroid=__webpack_require__("./packages/subsurface-viewer/src/layers/grid3d/test_data/PentagonalToroid.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}var miscExamples_stories={component:SubsurfaceViewer.A,title:"SubsurfaceViewer/Examples",argTypes:{id:{description:"The ID of this component, used to identify dash components in callbacks. The ID needs to be unique across all of the components in an app."},resources:{description:"Resource dictionary made available in the DeckGL specification as an enum.       The values can be accessed like this: `@@#resources.resourceId`, where       `resourceId` is the key in the `resources` dict. For more information,       see the DeckGL documentation on enums in the json spec:       https://deck.gl/docs/api-reference/json/conversion-reference#enumerations-and-using-the--prefix"},layers:{description:"List of JSON object containing layer specific data.       Each JSON object will consist of layer type with key as `@@type` and layer specific data, if any."},cameraPosition:{description:"Camera position to set the point of view."},bounds:{description:"Coordinate boundary for the view defined as [left, bottom, right, top]."},triggerHome:{description:"Forces resetting to initial home position."},views:{description:"Views configuration for map. If not specified, all the layers will be displayed in a single 2D viewport.<br/>Options:<br/>layout: [number, number] — Layout for viewport in specified as [row, column],<br/>viewports: [`ViewportType`] — Layers configuration for multiple viewport,<br/><br/>`ViewportType` options: <br/>id: string — Viewport id <br>name: string — Viewport name <br>show3D: boolean — Toggle 3D view <br>layerIds: [string] — Layer ids to be displayed on viewport."},coords:{description:"Options for readout panel.<br/>visible: boolean — Show/hide readout,<br/>multipicking: boolean — Enable or disable multi picking,<br/>pickDepth: number — Number of objects to pick."},scale:{description:"Options for distance scale component.<br/>visible: boolean — Show/hide scale bar,<br/>incrementValue: number — Increment value for the scale,<br/>widthPerUnit: number — Scale bar width in pixels per unit value,<br/>position: [number, number] — Scale bar position in pixels."},coordinateUnit:{description:"Unit for the scale ruler"},legend:{description:"Options for color legend.<br/>visible: boolean — Show/hide color legend,<br/>position: [number, number] — Legend position in pixels,<br/>horizontal: boolean — Orientation of color legend."},colorTables:{description:"Prop containing color table data.See colorTables repo for reference:<br/>https://github.com/emerson-eps/color-tables/blob/main/react-app/dist/component/color-tables.json"},editedData:{description:"Map data returned via editedData prop.<br/>selectedWell: string — Selected well name,<br/>selectedPie: object — Selected pie chart data,<br/>selectedFeatureIndexes: [number] — Drawing layer data index,<br/>data: object — Drawing layer data, indexed from selectedFeatureIndexes."},setProps:{description:"For reacting to prop changes"}},args:{triggerHome:0}};const layersData1=[sharedSettings.XC,sharedSettings.xR,sharedSettings.OU],layersData2=[sharedSettings.RT,sharedSettings.XC,sharedSettings.xR,sharedSettings.OU],Default={args:sharedSettings.oS},Minimal={parameters:{docs:{description:{story:"An example showing the minimal required arguments, which will give an empty map viewer."}}},render:()=>react.createElement(SubsurfaceViewer.A,{id:"deckgl-map",bounds:[0,0,1,1]})},MapMaterial={args:{id:"material",layers:[{...sharedSettings.wi,material:{ambient:.35,diffuse:.6,shininess:32,specularColor:[255,255,255]}}],bounds:sharedSettings.D8,views:sharedSettings.Hf},parameters:{docs:{...sharedSettings.dr.docs,description:{story:"An example showing example usage of Map3D material property."}}}},MapClampColor={args:{id:"clampcolor",layers:[{...sharedSettings.wi,propertyValueRange:[2782,3513],colorMapRange:[3e3,3513],colorMapClampColor:[0,255,0]}],bounds:sharedSettings.D8,views:sharedSettings.eD},parameters:{docs:{...sharedSettings.dr.docs,description:{story:'An example usage of map property `"colorMapClampColor"'}}}},colorMapFunction={args:{id:"colorMapFunction",layers:[{...sharedSettings.wi,isContoursDepth:!0,colorMapFunction:x=>[255-100*x,255-100*x,255*x]},{...sharedSettings.RT,image:"propertyMap.png",colorMapFunction:x=>[255-100*x,255-100*x,255*x]}],bounds:sharedSettings.D8,views:sharedSettings.Hf}},UserDefinedLayer1={args:{id:sharedSettings.oS.id,bounds:sharedSettings.oS.bounds,layers:layersData1}},UserDefinedLayer2={args:{id:sharedSettings.oS.id,resources:sharedSettings.oS.resources,bounds:sharedSettings.oS.bounds,layers:layersData2}},SelectableFeatureComponent=args=>{const[editedData,setEditedData]=react.useState(args.editedData);return react.useEffect((()=>{setEditedData(args.editedData)}),[args.editedData]),react.createElement("div",null,react.createElement(SubsurfaceViewer.A,_extends({},args,{editedData:editedData,setProps:updatedProps=>{setEditedData(updatedProps.editedData)}})),react.createElement("pre",null,JSON.stringify(editedData,null,2)))},SelectableFeatureExample={args:{id:"DeckGL-Map",bounds:[432205,6475078,437720,6481113],layers:[{...sharedSettings.XC,"@@type":"SelectableGeoJsonLayer"},{...sharedSettings.xR,"@@type":"SelectableGeoJsonLayer"}]},parameters:{docs:{description:{story:"An example showing selectable feature example from the map."}}},render:args=>react.createElement(SelectableFeatureComponent,args)},MapInContainer={args:sharedSettings.oS,render:args=>react.createElement(sharedSettings.bL,{className:sharedSettings.Ly.main},react.createElement(SubsurfaceViewer.A,args))},math=(0,create.v)(allFactoriesAny.Q,{randomSeed:"1984"}),randomFunc=math?.random?math.random:Math.random,snubCubePoints=TruncatedSnubCube.ON.map((v=>10*v)),snubCubeProperties=Array(TruncatedSnubCube.Sn).fill(0).map((()=>50*randomFunc())),toroidPoints=PentagonalToroid.ON.map((v=>10*v)).map(((v,index)=>index%3==0?v+30:v)),toroidProperties=Array(PentagonalToroid.Sn).fill(0).map((()=>10*randomFunc())),parameters={docs:{...sharedSettings.dr,description:{story:"Demonstrates mixed ways of layer creation."}}},MixedLayerDefinitions={args:{bounds:[-25,-25,50,30],views:{layout:[1,1],viewports:[{id:"view_1",show3D:!0}]},id:"grid-3d-polyhedral-cell-typed-input",layers:[void 0,{"@@type":"AxesLayer",id:"axes-layer2",bounds:[453150,5925800,-2e3,469400,5939500,0],ZIncreasingDownwards:!1,id:"polyhedral-cells-axes-typed-input",bounds:[-15,-15,-15,40,20,15]},null,{"@@type":"Grid3DLayer",id:"Grid3DLayer",gridLines:!0,material:!0,colorMapName:"Rainbow",ZIncreasingDownwards:!1,id:"polyhedral1-typed-input","@@typedArraySupport":!0,coloringMode:SubsurfaceViewer.e.Y,pickable:!0,pointsData:new Float32Array(snubCubePoints),polysData:new Uint32Array(TruncatedSnubCube.B6),propertiesData:new Float32Array(snubCubeProperties),colorMapRange:[-8,8],colorMapClampColor:[200,200,200],colorMapName:"Seismic"},!1,new grid3dLayer.A({gridLines:!0,material:!0,colorMapName:"Rainbow",ZIncreasingDownwards:!1,id:"polyhedral2-typed-input",pickable:!0,pointsData:new Float32Array(toroidPoints),polysData:new Uint32Array(PentagonalToroid.B6),propertiesData:new Float32Array(toroidProperties),coloringMode:SubsurfaceViewer.e.Property})]},parameters:parameters},__namedExportsOrder=["Default","Minimal","MapMaterial","MapClampColor","colorMapFunction","UserDefinedLayer1","UserDefinedLayer2","SelectableFeatureExample","MapInContainer","MixedLayerDefinitions"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: subsufaceProps\n}",...Default.parameters?.docs?.source}}},Minimal.parameters={...Minimal.parameters,docs:{...Minimal.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      description: {\n        story: "An example showing the minimal required arguments, which will give an empty map viewer."\n      }\n    }\n  },\n  render: () => <SubsurfaceViewer id={"deckgl-map"} bounds={[0, 0, 1, 1]} />\n}',...Minimal.parameters?.docs?.source}}},MapMaterial.parameters={...MapMaterial.parameters,docs:{...MapMaterial.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "material",\n    layers: [{\n      ...hugin25mKhNetmapMapLayerPng,\n      material\n    }],\n    bounds: hugin2DBounds,\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "An example showing example usage of Map3D material property."\n      }\n    }\n  }\n}',...MapMaterial.parameters?.docs?.source}}},MapClampColor.parameters={...MapClampColor.parameters,docs:{...MapClampColor.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "clampcolor",\n    layers: [{\n      ...hugin25mKhNetmapMapLayerPng,\n      propertyValueRange,\n      colorMapRange,\n      colorMapClampColor\n    }],\n    bounds: hugin2DBounds,\n    views: default2DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: \'An example usage of map property `"colorMapClampColor"\'\n      }\n    }\n  }\n}',...MapClampColor.parameters?.docs?.source}}},colorMapFunction.parameters={...colorMapFunction.parameters,docs:{...colorMapFunction.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "colorMapFunction",\n    layers: [\n    // map layer\n    layer,\n    // colormap layer\n    {\n      ...colormapLayer,\n      image: "propertyMap.png",\n      // @ts-expect-error TS7006\n      colorMapFunction: x => [255 - x * 100, 255 - x * 100, 255 * x] // If defined this function will override the colormap.\n    }],\n    bounds: hugin2DBounds,\n    views: default3DViews\n  }\n}',...colorMapFunction.parameters?.docs?.source}}},UserDefinedLayer1.parameters={...UserDefinedLayer1.parameters,docs:{...UserDefinedLayer1.parameters?.docs,source:{originalSource:"{\n  args: {\n    id: subsufaceProps.id,\n    bounds: subsufaceProps.bounds,\n    layers: layersData1\n  }\n}",...UserDefinedLayer1.parameters?.docs?.source}}},UserDefinedLayer2.parameters={...UserDefinedLayer2.parameters,docs:{...UserDefinedLayer2.parameters?.docs,source:{originalSource:"{\n  args: {\n    id: subsufaceProps.id,\n    resources: subsufaceProps.resources,\n    bounds: subsufaceProps.bounds,\n    layers: layersData2\n  }\n}",...UserDefinedLayer2.parameters?.docs?.source}}},SelectableFeatureExample.parameters={...SelectableFeatureExample.parameters,docs:{...SelectableFeatureExample.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "DeckGL-Map",\n    bounds: [432205, 6475078, 437720, 6481113],\n    layers: [polylineUsingSelectableGeoJsonLayer, polygonUsingSelectableGeoJsonLayer]\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "An example showing selectable feature example from the map."\n      }\n    }\n  },\n  render: args => <SelectableFeatureComponent {...args} />\n}',...SelectableFeatureExample.parameters?.docs?.source}}},MapInContainer.parameters={...MapInContainer.parameters,docs:{...MapInContainer.parameters?.docs,source:{originalSource:"{\n  args: subsufaceProps,\n  render: args => <Root className={classes.main}>\n            <SubsurfaceViewer {...args} />\n        </Root>\n}",...MapInContainer.parameters?.docs?.source}}},MixedLayerDefinitions.parameters={...MixedLayerDefinitions.parameters,docs:{...MixedLayerDefinitions.parameters?.docs,source:{originalSource:'{\n  args: {\n    bounds: [-25, -25, 50, 30],\n    views: {\n      layout: [1, 1] as [number, number],\n      viewports: [{\n        id: "view_1",\n        show3D: true\n      }]\n    },\n    id: "grid-3d-polyhedral-cell-typed-input",\n    layers: [undefined, {\n      ...axes,\n      id: "polyhedral-cells-axes-typed-input",\n      bounds: [-15, -15, -15, 40, 20, 15]\n    }, null, {\n      ...grid3dLayer,\n      id: "polyhedral1-typed-input",\n      "@@typedArraySupport": true,\n      coloringMode: TGrid3DColoringMode.Y,\n      pickable: true,\n      pointsData: new Float32Array(snubCubePoints),\n      polysData: new Uint32Array(SnubCubeFaces),\n      propertiesData: new Float32Array(snubCubeProperties),\n      colorMapRange: [-8, 8],\n      colorMapClampColor: [200, 200, 200],\n      colorMapName: "Seismic"\n    }, false, new Grid3DLayer({\n      gridLines: true,\n      material: true,\n      colorMapName: "Rainbow",\n      ZIncreasingDownwards: false,\n      id: "polyhedral2-typed-input",\n      pickable: true,\n      pointsData: new Float32Array(toroidPoints),\n      polysData: new Uint32Array(ToroidFaces),\n      propertiesData: new Float32Array(toroidProperties),\n      coloringMode: TGrid3DColoringMode.Property\n    }) as unknown as Layer]\n  },\n  parameters: parameters\n}',...MixedLayerDefinitions.parameters?.docs?.source}}}},"./packages/subsurface-viewer/src/layers/grid3d/test_data/PentagonalToroid.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{B6:function(){return Faces},ON:function(){return Points},Sn:function(){return VertexCount}});const C0=(3-Math.sqrt(5))/4,C1=(Math.sqrt(5)-1)/4,C2=(1+Math.sqrt(5))/4,Points=[.5,0,C2,.5,0,-C2,-.5,0,C2,-.5,0,-C2,0,C2,.5,0,C2,-.5,0,-C2,.5,0,-C2,-.5,C2,.5,0,-C2,-.5,0,0,C0,.5,0,C0,-.5,0,-C0,.5,0,-C0,-.5,C1,C1,C1,C1,C1,-C1,-C1,-C1,C1,-C1,-C1,-C1,C0,.5,0,-C0,-.5,0],Faces=[5,0,6,16,12,10,5,1,8,18,15,11,5,2,4,14,10,12,5,3,9,19,17,13,5,4,5,15,18,14,5,5,3,13,11,15,5,6,7,17,19,16,5,7,1,11,13,17,5,8,0,10,14,18,5,9,2,12,16,19,3,2,6,0,3,2,0,4,3,3,1,7,3,3,7,9,3,4,0,8,3,4,8,5,3,5,8,1,3,5,1,3,3,6,2,9,3,6,9,7],VertexCount=80},"./packages/subsurface-viewer/src/layers/grid3d/test_data/TruncatedSnubCube.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{B6:function(){return Faces},ON:function(){return Points},Sn:function(){return VertexCount}});const C0=.03022517647727011,C1=.03630716729159513,C2=.040977806224636225,C3=.04564293957876494,C4=.051724930393089966,C5=.08744289047276839,C6=.08897531081303763,C7=.09641163211454777,C8=.10383500001768008,C9=.10536742035794933,C10=.2450214662773631,C11=.25213479294506524,C12=.25578852648697925,C13=.2594078935254808,C14=.266521220193183,C15=.30296894256435697,C16=.3107539819206035,C17=.3137398958061564,C18=.3166836571239303,C19=.32446869648017684,C20=.3415821603133315,C21=.3421516282996725,C22=.3496389843387572,C23=.35707936458297945,C24=.35764883256932045,C25=.3919404789469772,C26=.40221538330780837,C27=.40271740948195195,C28=.40316532850196596,C29=.4134402328627971,C30=.4223523523667726,C31=.4257635648947752,C32=.43136191452063516,C33=.43690230845586675,C34=.44031352098386933,C35=.4714793574054987,C36=.47546003791984226,C37=.4804922200139097,C38=.4854598455082518,C39=.4894405260225954,C40=.6319974061364817,C41=.6358614860540425,C42=.6398421665683861,C43=.6410027320851348,C44=.6420771755897583,C45=.6439380803776656,C46=.647947477795688,C47=.6499219360216627,C49=.6855579590791095,C48=.6519281583100315,C50=.6889691716071121,C51=.6930683858709402,C52=.697074482834414,C53=.7004856953624166,C54=.7657290432607724,C55=.7691698956742122,C56=.7697393636605533,C57=.7720413833524075,C58=.7732108302879603,C59=.7742763923737797,C60=.7747913160528183,C61=.7797391712489629,C62=.7803086392353038,C63=.7805887324654148,C64=.9227051570193641,C65=.9237364928727411,C66=.9244082055612856,C67=.9268980705658701,C68=.9274353460160546,C69=.9278480157600277,C70=.9303378807646123,C71=.9310095934531567,C72=.9320409293065338,Points=[C72,-C25,-C2,-C72,C25,-C2,C25,C72,-C2,-C25,-C72,-C2,C71,-C15,C12,-C71,C15,C12,C15,C71,C12,-C15,-C71,C12,C10,C70,-C17,-C10,-C70,-C17,C70,-C10,-C17,-C70,C10,-C17,C0,C69,C27,-C0,-C69,C27,C69,-C0,C27,-C69,C0,C27,C28,-C1,-C68,-C28,C1,-C68,C1,C28,-C68,-C1,-C28,-C68,C26,C3,C68,-C26,-C3,C68,C3,-C26,C68,-C3,C26,C68,C18,-C11,C68,-C18,C11,C68,C11,C18,C68,-C11,-C18,C68,C16,C13,-C68,-C16,-C13,-C68,C13,-C16,-C68,-C13,C16,-C68,C4,-C67,-C27,-C4,C67,-C27,C67,C4,-C27,-C67,-C4,-C27,C14,-C66,C17,-C14,C66,C17,C66,C14,C17,-C66,-C14,C17,C65,C19,-C12,-C65,-C19,-C12,C19,-C65,-C12,-C19,C65,-C12,C64,C29,C2,-C64,-C29,C2,C29,-C64,C2,-C29,C64,C2,C63,-C40,-C7,-C63,C40,-C7,C40,C63,-C7,-C40,-C63,-C7,C62,-C35,C32,-C62,C35,C32,C35,C62,C32,-C35,-C62,C32,C30,C61,-C37,-C30,-C61,-C37,C61,-C30,-C37,-C61,C30,-C37,C38,-C31,C60,-C38,C31,C60,C31,C38,C60,-C31,-C38,C60,C36,C33,-C60,-C36,-C33,-C60,C33,-C36,-C60,-C33,C36,-C60,C5,C59,C43,-C5,-C59,C43,C59,-C5,C43,-C59,C5,C43,C44,-C6,-C58,-C44,C6,-C58,C6,C44,-C58,-C6,-C44,-C58,C42,C8,C58,-C42,-C8,C58,C8,-C42,C58,-C8,C42,C58,C9,-C57,-C43,-C9,C57,-C43,C57,C9,-C43,-C57,-C9,-C43,C34,-C56,C37,-C34,C56,C37,C56,C34,C37,-C56,-C34,C37,C55,C39,-C32,-C55,-C39,-C32,C39,-C55,-C32,-C39,C55,-C32,C54,C47,C7,-C54,-C47,C7,C47,-C54,C7,-C47,C54,C7,C53,-C41,-C22,-C53,C41,-C22,C41,C53,-C22,-C41,-C53,-C22,C20,C52,C45,-C20,-C52,C45,C52,-C20,C45,-C52,C20,C45,C46,-C21,-C51,-C46,C21,-C51,C21,C46,-C51,-C21,-C46,-C51,C42,C23,C51,-C42,-C23,C51,C23,-C42,C51,-C23,C42,C51,C24,-C50,-C45,-C24,C50,-C45,C50,C24,-C45,-C50,-C24,-C45,C49,C48,C22,-C49,-C48,C22,C48,-C49,C22,-C48,C49,C22],Faces=[8,0,10,34,40,44,38,14,4,8,1,11,35,41,45,39,15,5,8,2,8,33,43,47,37,12,6,8,3,9,32,42,46,36,13,7,8,16,30,19,29,17,31,18,28,8,20,26,23,25,21,27,22,24,6,52,102,60,110,84,118,6,53,103,61,111,85,119,6,54,100,62,108,86,116,6,55,101,63,109,87,117,6,56,98,88,114,64,106,6,57,99,89,115,65,107,6,58,96,90,112,66,104,6,59,97,91,113,67,105,6,0,4,52,118,94,48,6,1,5,53,119,95,49,6,2,6,54,116,92,50,6,3,7,55,117,93,51,6,8,56,106,74,81,33,6,9,57,107,75,80,32,6,10,58,104,72,82,34,6,11,59,105,73,83,35,6,12,37,85,111,79,68,6,13,36,84,110,78,69,6,14,38,86,108,76,70,6,15,39,87,109,77,71,6,16,28,64,114,82,72,6,17,29,65,115,83,73,6,18,31,67,113,81,74,6,19,30,66,112,80,75,6,20,24,60,102,70,76,6,21,25,61,103,71,77,6,22,27,63,101,69,78,6,23,26,62,100,68,79,6,40,88,98,50,92,44,6,41,89,99,51,93,45,6,42,90,96,48,94,46,6,43,91,97,49,95,47,5,0,48,96,58,10,5,1,49,97,59,11,5,2,50,98,56,8,5,3,51,99,57,9,5,4,14,70,102,52,5,5,15,71,103,53,5,6,12,68,100,54,5,7,13,69,101,55,5,16,72,104,66,30,5,17,73,105,67,31,5,18,74,106,64,28,5,19,75,107,65,29,5,20,76,108,62,26,5,21,77,109,63,27,5,22,78,110,60,24,5,23,79,111,61,25,5,32,80,112,90,42,5,33,81,113,91,43,5,34,82,114,88,40,5,35,83,115,89,41,5,36,46,94,118,84,5,37,47,95,119,85,5,38,44,92,116,86,5,39,45,93,117,87],VertexCount=354},"./packages/subsurface-viewer/src/storybook/sharedSettings.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{C9:function(){return hugin25mDepthMapLayer},Cp:function(){return hugin3DBounds},D8:function(){return hugin2DBounds},FS:function(){return volveWellsResources},HU:function(){return hugin25mKhNetmapMapLayer},Hf:function(){return default3DViews},Ly:function(){return classes},OU:function(){return customLayerWithTextData},Or:function(){return EditedDataTemplate},RT:function(){return colormapLayer},Uz:function(){return volveWellsWithLogsLayer},XC:function(){return customLayerWithPolylineData},bL:function(){return Root},c8:function(){return volveWellsFromResourcesLayer},d6:function(){return hugin5mKhNetmapMapLayer},dr:function(){return defaultStoryParameters},eD:function(){return default2DViews},j1:function(){return mainStyle},kn:function(){return redAxes2DLayer},lC:function(){return hillshadingLayer},oS:function(){return subsufaceProps},rz:function(){return volveWellsLayer},un:function(){return northArrowLayer},vq:function(){return huginAxes3DLayer},wi:function(){return hugin25mKhNetmapMapLayerPng},xR:function(){return customLayerWithPolygonData},z6:function(){return customLayerWithPolygonDataProps},zJ:function(){return volveWellsBounds}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../example-data/deckgl-map.json");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const defaultStoryParameters={docs:{inlineStories:!1,iframeHeight:500}},classes={main:"default-main"},mainStyle={[`& .${classes.main}`]:{width:750,height:500,top:"50%",left:"50%",transform:"translate(-50%, -50%)",border:"1px solid black",background:"azure",position:"absolute"}},Root=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__.Ay)("div")(mainStyle),subsufaceProps=_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0],colormapLayer={..._example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].layers[0],id:"colormap-layer"},hillshadingLayer={..._example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].layers[1],id:"hillshading-layer"},redAxes2DLayer={"@@type":"Axes2DLayer",id:"axes-layer",marginH:80,marginV:30,isLeftRuler:!0,isRightRuler:!1,isBottomRuler:!0,isTopRuler:!1,backgroundColor:[155,0,0,255]},hugin2DOrigin=[432150,6475800],hugin2DBounds=[432150,6475800,439400,6481500],hugin3DBounds=[432150,6475800,-2e3,439400,6481500,-3500],huginAxes3DLayer={"@@type":"AxesLayer",id:"axes-layer2",bounds:[432150,6475800,2e3,439400,6481500,3500]},northArrowLayer={"@@type":"NorthArrow3DLayer",id:"north-arrow-layer"},volveWellsResources={resources:{wellsData:"./volve_wells.json"}},volveWellsFromResourcesLayer={"@@type":"WellsLayer",id:"volve-wells",data:"@@#resources.wellsData",ZIncreasingDownwards:!1},volveWellsLayer={"@@type":"WellsLayer",id:"volve-wells",data:"./volve_wells.json",ZIncreasingDownwards:!1},volveWellsBounds=[432150,6475800,439400,6481500],volveWellsWithLogsLayer={"@@type":"WellsLayer",id:"volve-wells-with-logs",data:"./volve_wells.json",logData:"./volve_logs.json",logrunName:"BLOCKING",logName:"ZONELOG",logColor:"Stratigraphy",ZIncreasingDownwards:!1},hugin25mDepthMapLayer={"@@type":"MapLayer",id:"hugin_depth",meshData:"hugin_depth_25_m.float32",frame:{origin:hugin2DOrigin,count:[291,229],increment:[25,25],rotDeg:0},propertiesData:"hugin_depth_25_m.float32",contours:[0,100],isContoursDepth:!0,gridLines:!1,smoothShading:!0,material:!0},hugin25mKhNetmapMapLayer={...hugin25mDepthMapLayer,id:"hugin_kh_netmap",propertiesData:"kh_netmap_25_m.float32",colorMapName:"Physics"},hugin25mKhNetmapMapLayerPng={...hugin25mDepthMapLayer,meshData:"hugin_depth_25_m.png",propertiesData:"kh_netmap_25_m.png",colorMapName:"Physics"},hugin5mKhNetmapMapLayer={"@@type":"MapLayer",id:"mesh-layer",meshUrl:"hugin_depth_5_m.float32",frame:{origin:hugin2DOrigin,count:[1451,1141],increment:[5,5],rotDeg:0},propertiesUrl:"kh_netmap_5_m.float32",contours:[0,100],colorMapName:"Physics"},default2DViews={layout:[1,1],viewports:[{id:"view_1",show3D:!1}]},default3DViews={layout:[1,1],viewports:[{id:"view_1",show3D:!0}]},customLayerWithPolylineData={"@@type":"GeoJsonLayer",id:"geojson-line-layer",name:"Line",data:{type:"FeatureCollection",features:[{type:"Feature",properties:{},geometry:{type:"LineString",coordinates:[[434e3,6477500],[435500,6477500]]}}]},getLineWidth:20,lineWidthMinPixels:2},customLayerWithPolygonDataProps={id:"geojson-layer",data:{type:"Feature",properties:{},geometry:{type:"Polygon",coordinates:[[[434562,6477595],[434562,6478595],[435062,6478595],[435062,6477595],[434562,6477595]]]}},getLineWidth:1,lineWidthMinPixels:1,lineWidthMaxPixels:1,getLineColor:[0,0,0],getFillColor:[255,255,0],opacity:1},customLayerWithPolygonData={...customLayerWithPolygonDataProps,"@@type":"GeoJsonLayer"},customLayerWithTextData={"@@type":"TextLayer",id:"text-layer",name:"Text",data:[{name:"Custom GeoJson layer",coordinates:[434800,6478695]}],pickable:!0,getPosition:d=>d.coordinates,getText:d=>d.name,getColor:[255,0,0],getSize:16,getAngle:0,getTextAnchor:"middle",getAlignmentBaseline:"center"},EditedDataTemplate=args=>{const[editedData,setEditedData]=react__WEBPACK_IMPORTED_MODULE_0__.useState(args.editedData);return react__WEBPACK_IMPORTED_MODULE_0__.useEffect((()=>{setEditedData(args.editedData)}),[args.editedData]),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.A,_extends({},args,{editedData:editedData,setProps:updatedProps=>{setEditedData(updatedProps.editedData)}}))};EditedDataTemplate.__docgenInfo={description:"",methods:[],displayName:"EditedDataTemplate",props:{layers:{required:!1,tsType:{name:"Array",elements:[{name:"union",raw:"| Record<string, unknown>\n| Layer\n| false\n| null\n| undefined",elements:[{name:"Record",elements:[{name:"string"},{name:"unknown"}],raw:"Record<string, unknown>"},{name:"Layer"},{name:"literal",value:"false"},{name:"null"},{name:"undefined"}]}],raw:"TLayerDefinition[]"},description:"Array of externally created layers or layer definition records or JSON strings.\nAdd '@@typedArraySupport' : true in a layer definition in order to\nuse typed arrays as inputs."},setProps:{required:!1,tsType:{name:"signature",type:"function",raw:"(data: Record<string, unknown>) => void",signature:{arguments:[{type:{name:"Record",elements:[{name:"string"},{name:"unknown"}],raw:"Record<string, unknown>"},name:"data"}],return:{name:"void"}}},description:"@deprecated Used by layers to propagate state to component, eg. selected\nwells from the Wells layer. Use client code to handle layer state\ninstead."}},composes:["Omit"]}},"../example-data/deckgl-map.json":function(module){module.exports=JSON.parse('[{"id":"DeckGL-Map","coords":{"visible":true,"multiPicking":true,"pickDepth":10},"scale":{"visible":true,"incrementValue":100,"widthPerUnit":100,"cssStyle":{"left":10,"top":10}},"coordinateUnit":"m","resources":{"propertyMap":"propertyMap.png","depthMap":"propertyMap.png","wellsData":"volve_wells.json","logData":"volve_logs.json"},"bounds":[432205,6475078,437720,6481113],"layers":[{"@@type":"ColormapLayer","image":"@@#resources.propertyMap","rotDeg":0,"bounds":[432205,6475078,437720,6481113],"colorMapName":"Rainbow","valueRange":[2782,3513],"colorMapRange":[2782,3513]},{"@@type":"Hillshading2DLayer","bounds":[432205,6475078,437720,6481113],"valueRange":[2782,3513],"rotDeg":0,"image":"@@#resources.depthMap"},{"@@type":"WellsLayer","data":"@@#resources.wellsData","logData":"@@#resources.logData","logrunName":"BLOCKING","logName":"ZONELOG","logColor":"Stratigraphy"},{"@@type":"FaultPolygonsLayer","data":"fault_polygons.geojson"},{"@@type":"PieChartLayer","data":"piechart.json"},{"@@type":"NorthArrow3DLayer","visible":true},{"@@type":"DrawingLayer"}],"editedData":{},"views":{"layout":[1,1],"showLabel":false,"viewports":[{"id":"view_1","show3D":false,"layerIds":[]}]}}]')}}]);