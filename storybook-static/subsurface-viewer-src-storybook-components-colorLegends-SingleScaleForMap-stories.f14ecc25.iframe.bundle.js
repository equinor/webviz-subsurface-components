"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[4708],{"./packages/subsurface-viewer/src/storybook/components/colorLegends/SingleScaleForMap.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{SingleScaleForMap:function(){return SingleScaleForMap},__namedExportsOrder:function(){return __namedExportsOrder}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@emerson-eps/color-tables/dist/index.js"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}__webpack_exports__.default={parameters:{storySource:{source:'function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from "react";\nimport { ContinuousLegend, colorTables } from "@emerson-eps/color-tables";\nimport SubsurfaceViewer from "../../../SubsurfaceViewer";\nexport default {\n  component: SubsurfaceViewer,\n  title: "SubsurfaceViewer/Components/ColorLegends/SingleScaleForMap"\n};\nconst defaultProps = {\n  id: "SubsurfaceViewer",\n  resources: {\n    propertyMap: "https://raw.githubusercontent.com/equinor/webviz-subsurface-components/master/react/src/demo/example-data/propertyMap.png"\n  },\n  bounds: [432150, 6475800, 439400, 6481500]\n};\nconst layers = [{\n  "@@type": "ColormapLayer",\n  image: "@@#resources.propertyMap",\n  rotDeg: 0,\n  bounds: [432205, 6475078, 437720, 6481113],\n  valueRange: [2782, 3513],\n  colorMapRange: [2782, 3513]\n}];\n\n// prop for legend\nconst min = 0;\nconst max = 0.35;\nconst dataObjectName = "Legend";\nconst position = [16, 10];\nconst horizontal = true;\nconst reverseRange = false;\n\n// 4 maps with same color scale for all maps\nconst mapWithScaleTemplate = args => {\n  const updatedLayerData = [{\n    ...args.layers[0],\n    colorMapName: args.colorName\n  }];\n  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {\n    style: {\n      float: "right",\n      zIndex: 999,\n      opacity: 1,\n      position: "relative"\n    }\n  }, /*#__PURE__*/React.createElement(ContinuousLegend, args)), /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({}, args, {\n    layers: updatedLayerData\n  })));\n};\nexport const SingleScaleForMap = mapWithScaleTemplate.bind({});\nSingleScaleForMap.args = {\n  min,\n  max,\n  dataObjectName,\n  position,\n  horizontal,\n  colorTables,\n  colorName: "Rainbow",\n  layers,\n  ...defaultProps,\n  legend: {\n    visible: false\n  },\n  zoom: -5,\n  reverseRange,\n  views: {\n    layout: [2, 2],\n    showLabel: true,\n    viewports: [{\n      id: "view_1",\n      name: "Colormap layer 1",\n      show3D: false,\n      layerIds: ["colormap-layer"]\n    }, {\n      id: "view_2",\n      name: "Colormap layer 2",\n      show3D: false,\n      layerIds: ["colormap-layer"]\n    }, {\n      id: "view_3",\n      name: "Colormap layer 3",\n      show3D: false,\n      layerIds: ["colormap-layer"]\n    }, {\n      id: "view_4",\n      name: "Colormap layer 4",\n      show3D: false,\n      layerIds: ["colormap-layer"]\n    }]\n  }\n};\nSingleScaleForMap.parameters = {\n  docs: {\n    description: {\n      story: "Four maps with same color scale for all maps"\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};',locationsMap:{"single-scale-for-map":{startLoc:{col:29,line:34},endLoc:{col:1,line:49},startBody:{col:29,line:34},endBody:{col:1,line:49}}}}},component:_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,title:"SubsurfaceViewer/Components/ColorLegends/SingleScaleForMap"};const SingleScaleForMap=(args=>{const updatedLayerData=[{...args.layers[0],colorMapName:args.colorName}];return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{float:"right",zIndex:999,opacity:1,position:"relative"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_1__.sG,args)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,_extends({},args,{layers:updatedLayerData})))}).bind({});SingleScaleForMap.args={min:0,max:.35,dataObjectName:"Legend",position:[16,10],horizontal:!0,colorTables:_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_1__.Su,colorName:"Rainbow",layers:[{"@@type":"ColormapLayer",image:"@@#resources.propertyMap",rotDeg:0,bounds:[432205,6475078,437720,6481113],valueRange:[2782,3513],colorMapRange:[2782,3513]}],id:"SubsurfaceViewer",resources:{propertyMap:"https://raw.githubusercontent.com/equinor/webviz-subsurface-components/master/react/src/demo/example-data/propertyMap.png"},bounds:[432150,6475800,439400,6481500],legend:{visible:!1},zoom:-5,reverseRange:!1,views:{layout:[2,2],showLabel:!0,viewports:[{id:"view_1",name:"Colormap layer 1",show3D:!1,layerIds:["colormap-layer"]},{id:"view_2",name:"Colormap layer 2",show3D:!1,layerIds:["colormap-layer"]},{id:"view_3",name:"Colormap layer 3",show3D:!1,layerIds:["colormap-layer"]},{id:"view_4",name:"Colormap layer 4",show3D:!1,layerIds:["colormap-layer"]}]}},SingleScaleForMap.parameters={docs:{description:{story:"Four maps with same color scale for all maps"},inlineStories:!1,iframeHeight:500}},SingleScaleForMap.parameters={...SingleScaleForMap.parameters,docs:{...SingleScaleForMap.parameters?.docs,source:{originalSource:'args => {\n  const updatedLayerData = [{\n    ...args.layers[0],\n    colorMapName: args.colorName\n  }];\n  return <div>\n            <div style={{\n      float: "right",\n      zIndex: 999,\n      opacity: 1,\n      position: "relative"\n    }}>\n                <ContinuousLegend {...args} />\n            </div>\n            <SubsurfaceViewer {...args} layers={updatedLayerData} />\n        </div>;\n}',...SingleScaleForMap.parameters?.docs?.source}}};const __namedExportsOrder=["SingleScaleForMap"];try{SingleScaleForMap.displayName="SingleScaleForMap",SingleScaleForMap.__docgenInfo={description:"",displayName:"SingleScaleForMap",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/components/colorLegends/SingleScaleForMap.stories.tsx#SingleScaleForMap"]={docgenInfo:SingleScaleForMap.__docgenInfo,name:"SingleScaleForMap",path:"packages/subsurface-viewer/src/storybook/components/colorLegends/SingleScaleForMap.stories.tsx#SingleScaleForMap"})}catch(__react_docgen_typescript_loader_error){}}}]);