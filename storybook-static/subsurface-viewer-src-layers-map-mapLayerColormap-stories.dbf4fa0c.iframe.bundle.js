"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[7261],{"./packages/subsurface-viewer/src/layers/map/mapLayerColormap.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BreakpointColorMap:function(){return BreakpointColorMap},ColorMapRange:function(){return ColorMapRange},ColorSelector:function(){return ColorSelector},ConstantColor:function(){return ConstantColor},DefaultColorScale:function(){return DefaultColorScale},GradientFunctionColorMap:function(){return GradientFunctionColorMap},StepFunctionColorMap:function(){return StepFunctionColorMap},__namedExportsOrder:function(){return __namedExportsOrder}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),_mui_material__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mui/material/Slider/Slider.js"),_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@emerson-eps/color-tables/dist/index.js"),_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@deck.gl/core/dist/esm/views/view.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const classes={main:"MapLayer3dPng-main",legend:"MapLayer3dPng-legend"},Root=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__.ZP)("div")({[`& .${classes.main}`]:{height:500,border:"1px solid black",position:"relative"},[`& .${classes.legend}`]:{width:100,position:"absolute",top:"0",right:"0"}});__webpack_exports__.default={parameters:{storySource:{source:'function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from "react";\nimport { styled } from "@mui/material/styles";\nimport SubsurfaceViewer from "../../SubsurfaceViewer";\nimport { Slider } from "@mui/material";\nimport { ContinuousLegend, ColorLegend, createColorMapFunction } from "@emerson-eps/color-tables";\nimport { View } from "@deck.gl/core/typed";\nconst PREFIX = "MapLayer3dPng";\nconst classes = {\n  main: `${PREFIX}-main`,\n  legend: `${PREFIX}-legend`\n};\nconst Root = styled("div")({\n  [`& .${classes.main}`]: {\n    height: 500,\n    border: "1px solid black",\n    position: "relative"\n  },\n  [`& .${classes.legend}`]: {\n    width: 100,\n    position: "absolute",\n    top: "0",\n    right: "0"\n  }\n});\nexport default {\n  component: SubsurfaceViewer,\n  title: "SubsurfaceViewer / Map Layer / Colormap",\n  args: {\n    // Add a reset button for all the stories.\n    // Somehow, I do not manage to add the triggerHome to the general "unset" controls :/\n    triggerHome: 0\n  }\n};\nconst valueRange = [-3071, 41048];\n\n// Example using "Map" layer. Uses PNG float for mesh and properties.\nconst meshMapLayerPng = {\n  "@@type": "MapLayer",\n  id: "mesh-layer",\n  meshUrl: "hugin_depth_25_m.png",\n  frame: {\n    origin: [432150, 6475800],\n    count: [291, 229],\n    increment: [25, 25],\n    rotDeg: 0\n  },\n  propertiesUrl: "kh_netmap_25_m.png",\n  contours: [0, 100],\n  isContoursDepth: true,\n  gridLines: false,\n  material: true,\n  smoothShading: true,\n  colorMapName: "Physics",\n  ZIncreasingDownwards: true\n};\n\n// Example using "Map" layer. Uses float32 float for mesh and properties.\nconst meshMapLayerFloat32 = {\n  "@@type": "MapLayer",\n  id: "mesh-layer",\n  meshUrl: "hugin_depth_25_m.float32",\n  frame: {\n    origin: [432150, 6475800],\n    count: [291, 229],\n    increment: [25, 25],\n    rotDeg: 0\n  },\n  propertiesUrl: "kh_netmap_25_m.float32",\n  contours: [0, 100],\n  isContoursDepth: true,\n  gridLines: false,\n  material: false,\n  colorMapName: "Physics"\n};\nconst axes_hugin = {\n  "@@type": "AxesLayer",\n  id: "axes-layer2",\n  bounds: [432150, 6475800, 2000, 439400, 6481500, 3500]\n};\nconst north_arrow_layer = {\n  "@@type": "NorthArrow3DLayer",\n  id: "north-arrow-layer"\n};\nconst defaultArgs = {\n  bounds: [432150, 6475800, 439400, 6481500]\n};\nconst DEFAULT_VIEWS = {\n  layout: [1, 1],\n  viewports: [{\n    id: "view_1",\n    show3D: true\n  }]\n};\nconst defaultParameters = {\n  docs: {\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nfunction gradientColorMap(x) {\n  return [255 - x * 255, 255 - x * 100, 255 * x];\n}\nfunction nearestColorMap(x) {\n  if (x > 0.5) return [100, 255, 255];else if (x > 0.1) return [255, 100, 255];\n  return [255, 255, 100];\n}\nfunction breakpointColorMap(x, breakpoint) {\n  if (x > breakpoint) return [0, 50, 200];\n  return [255, 255, 0];\n}\nfunction createColorMap(breakpoint) {\n  return value => breakpointColorMap(value, breakpoint);\n}\nexport const ConstantColor = args => {\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nConstantColor.args = {\n  id: "map",\n  layers: [axes_hugin, {\n    ...meshMapLayerPng,\n    colorMapFunction: [0, 255, 0] // Use constant color instead of function\n  }, north_arrow_layer],\n  bounds: [432150, 6475800, 439400, 6481500],\n  views: DEFAULT_VIEWS\n};\nConstantColor.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: \'Example using the property "colorMapFunction" to color the surface in one color only\'\n    }\n  }\n};\nexport const GradientFunctionColorMap = () => {\n  const args = {\n    ...defaultArgs,\n    id: "gradient-color-map",\n    layers: [{\n      ...meshMapLayerFloat32,\n      colorMapFunction: gradientColorMap\n    }]\n  };\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nGradientFunctionColorMap.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Example using gradient color mapping function."\n    }\n  }\n};\nexport const StepFunctionColorMap = () => {\n  const args = {\n    ...defaultArgs,\n    id: "nearest-color-map",\n    layers: [{\n      ...meshMapLayerFloat32,\n      material: true,\n      colorMapFunction: nearestColorMap\n    }]\n  };\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nStepFunctionColorMap.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Example using step color mapping function."\n    }\n  }\n};\nexport const DefaultColorScale = () => {\n  const args = {\n    ...defaultArgs,\n    id: "default-color-scale",\n    layers: [{\n      ...meshMapLayerFloat32\n    }]\n  };\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nDefaultColorScale.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Default color scale."\n    }\n  }\n};\nexport const BreakpointColorMap = args => {\n  const [breakpoint, setBreakpoint] = React.useState(0.5);\n  const colorMap = React.useCallback(value => {\n    return createColorMap(breakpoint)(value);\n  }, [breakpoint]);\n  const layer = {\n    ...args?.layers?.[0],\n    colorMapFunction: colorMap\n  };\n  const props = {\n    ...args,\n    layers: [layer]\n  };\n  const handleChange = React.useCallback((_event, value) => {\n    setBreakpoint(value / 100);\n  }, []);\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, props), /*#__PURE__*/React.createElement("div", {\n    className: classes.legend\n  }, /*#__PURE__*/React.createElement(ContinuousLegend, {\n    min: valueRange[0],\n    max: valueRange[1],\n    colorMapFunction: colorMap\n  }))), /*#__PURE__*/React.createElement(Slider, {\n    min: 0,\n    max: 100,\n    defaultValue: 50,\n    step: 1,\n    onChangeCommitted: handleChange\n  }));\n};\nBreakpointColorMap.args = {\n  ...defaultArgs,\n  id: "breakpoint-color-map",\n  layers: [{\n    ...meshMapLayerFloat32,\n    gridLines: false,\n    material: true\n  }]\n};\nBreakpointColorMap.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Example using a color scale with a breakpoint."\n    }\n  }\n};\nexport const ColorMapRange = args => {\n  const [colorMapUpper, setColorMapUpper] = React.useState(41048);\n  const layer = {\n    ...args?.layers?.[0],\n    colorMapRange: [-3071, colorMapUpper]\n  };\n  const props = {\n    ...args,\n    layers: [layer]\n  };\n  const handleChange = React.useCallback((_event, value) => {\n    setColorMapUpper(value);\n  }, []);\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, props)), /*#__PURE__*/React.createElement(Slider, {\n    min: 10000,\n    max: 41048,\n    defaultValue: 41048,\n    step: 1000,\n    onChange: handleChange\n  }));\n};\nColorMapRange.args = {\n  ...defaultArgs,\n  id: "breakpoint-color-map",\n  layers: [{\n    ...meshMapLayerFloat32,\n    colorMapName: "Seismic",\n    colorMapClampColor: false,\n    gridLines: false,\n    material: true\n  }]\n};\nColorMapRange.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: \'Example changing the "ColorMapRange" property using a slider.\'\n    }\n  }\n};\n\n// Map layer with color colorselector\n\nconst MapLayerColorSelectorTemplate = args => {\n  const [colorName, setColorName] = React.useState("Rainbow");\n  const [colorRange, setRange] = React.useState();\n  const [isAuto, setAuto] = React.useState();\n  const [breakPoints, setBreakPoint] = React.useState();\n  const [isLog, setIsLog] = React.useState(false);\n  const [isNearest, setIsNearest] = React.useState(false);\n\n  // user defined breakpoint(domain)\n  const userDefinedBreakPoint = React.useCallback(data => {\n    if (data) setBreakPoint(data.colorArray);\n  }, []);\n\n  // Get color name from color selector\n  const colorNameFromSelector = React.useCallback(data => {\n    setColorName(data);\n  }, []);\n\n  // user defined range\n  const userDefinedRange = React.useCallback(data => {\n    if (data.range) setRange(data.range);\n    setAuto(data.isAuto);\n  }, []);\n\n  // Get interpolation method from color selector to layer\n  const getInterpolateMethod = React.useCallback(data => {\n    setIsLog(data.isLog);\n    setIsNearest(data.isNearest);\n  }, []);\n\n  // color map function\n  const colorMapFunc = React.useCallback(() => {\n    return createColorMapFunction(colorName, isLog, isNearest, breakPoints);\n  }, [colorName, isLog, isNearest, breakPoints]);\n  const min = 100;\n  const max = 1000;\n  const updatedLayerData = [{\n    ...meshMapLayerFloat32,\n    colorMapName: colorName,\n    colorMapRange: colorRange && isAuto == false ? colorRange : [min, max],\n    colorMapFunction: colorMapFunc()\n  }];\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({}, args, {\n    layers: updatedLayerData\n  }),\n  /*#__PURE__*/\n  \n  /* @ts-expect-error */\n  React.createElement(View, {\n    id: "view_1"\n  }, /*#__PURE__*/React.createElement("div", {\n    style: {\n      marginTop: 50\n    }\n  }, /*#__PURE__*/React.createElement(ColorLegend, {\n    min: min,\n    max: max,\n    colorNameFromSelector: colorNameFromSelector,\n    getColorRange: userDefinedRange,\n    getInterpolateMethod: getInterpolateMethod,\n    getBreakpointValue: userDefinedBreakPoint,\n    horizontal: true,\n    numberOfTicks: 2\n  }))));\n};\nexport const ColorSelector = MapLayerColorSelectorTemplate.bind({});\nColorSelector.args = {\n  ...defaultArgs,\n  id: "map_layer_color_selector",\n  legend: {\n    visible: true\n  },\n  layers: [{\n    ...meshMapLayerFloat32\n  }],\n  views: {\n    layout: [1, 1],\n    showLabel: true,\n    viewports: [{\n      id: "view_1",\n      zoom: -4\n    }]\n  }\n};',locationsMap:{"constant-color":{startLoc:{col:29,line:115},endLoc:{col:1,line:117},startBody:{col:29,line:115},endBody:{col:1,line:117}},"gradient-function-color-map":{startLoc:{col:40,line:135},endLoc:{col:1,line:145},startBody:{col:40,line:135},endBody:{col:1,line:145}},"step-function-color-map":{startLoc:{col:36,line:154},endLoc:{col:1,line:165},startBody:{col:36,line:154},endBody:{col:1,line:165}},"default-color-scale":{startLoc:{col:33,line:174},endLoc:{col:1,line:183},startBody:{col:33,line:174},endBody:{col:1,line:183}},"breakpoint-color-map":{startLoc:{col:34,line:192},endLoc:{col:1,line:223},startBody:{col:34,line:192},endBody:{col:1,line:223}},"color-map-range":{startLoc:{col:29,line:241},endLoc:{col:1,line:263},startBody:{col:29,line:241},endBody:{col:1,line:263}},"color-selector":{startLoc:{col:38,line:286},endLoc:{col:1,line:350},startBody:{col:38,line:286},endBody:{col:1,line:350}}}}},component:_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,title:"SubsurfaceViewer / Map Layer / Colormap",args:{triggerHome:0}};const valueRange=[-3071,41048],meshMapLayerFloat32={"@@type":"MapLayer",id:"mesh-layer",meshUrl:"hugin_depth_25_m.float32",frame:{origin:[432150,6475800],count:[291,229],increment:[25,25],rotDeg:0},propertiesUrl:"kh_netmap_25_m.float32",contours:[0,100],isContoursDepth:!0,gridLines:!1,material:!1,colorMapName:"Physics"},defaultArgs={bounds:[432150,6475800,439400,6481500]},defaultParameters_docs={inlineStories:!1,iframeHeight:500};function gradientColorMap(x){return[255-255*x,255-100*x,255*x]}function nearestColorMap(x){return x>.5?[100,255,255]:x>.1?[255,100,255]:[255,255,100]}const ConstantColor=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,args);ConstantColor.args={id:"map",layers:[{"@@type":"AxesLayer",id:"axes-layer2",bounds:[432150,6475800,2e3,439400,6481500,3500]},{"@@type":"MapLayer",id:"mesh-layer",meshUrl:"hugin_depth_25_m.png",frame:{origin:[432150,6475800],count:[291,229],increment:[25,25],rotDeg:0},propertiesUrl:"kh_netmap_25_m.png",contours:[0,100],isContoursDepth:!0,gridLines:!1,material:!0,smoothShading:!0,colorMapName:"Physics",ZIncreasingDownwards:!0,colorMapFunction:[0,255,0]},{"@@type":"NorthArrow3DLayer",id:"north-arrow-layer"}],bounds:[432150,6475800,439400,6481500],views:{layout:[1,1],viewports:[{id:"view_1",show3D:!0}]}},ConstantColor.parameters={docs:{...defaultParameters_docs,description:{story:'Example using the property "colorMapFunction" to color the surface in one color only'}}};const GradientFunctionColorMap=()=>{const args={...defaultArgs,id:"gradient-color-map",layers:[{...meshMapLayerFloat32,colorMapFunction:gradientColorMap}]};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,args)};GradientFunctionColorMap.parameters={docs:{...defaultParameters_docs,description:{story:"Example using gradient color mapping function."}}};const StepFunctionColorMap=()=>{const args={...defaultArgs,id:"nearest-color-map",layers:[{...meshMapLayerFloat32,material:!0,colorMapFunction:nearestColorMap}]};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,args)};StepFunctionColorMap.parameters={docs:{...defaultParameters_docs,description:{story:"Example using step color mapping function."}}};const DefaultColorScale=()=>{const args={...defaultArgs,id:"default-color-scale",layers:[{...meshMapLayerFloat32}]};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,args)};DefaultColorScale.parameters={docs:{...defaultParameters_docs,description:{story:"Default color scale."}}};const BreakpointColorMap=args=>{const[breakpoint,setBreakpoint]=react__WEBPACK_IMPORTED_MODULE_0__.useState(.5),colorMap=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((value=>function createColorMap(breakpoint){return value=>function breakpointColorMap(x,breakpoint){return x>breakpoint?[0,50,200]:[255,255,0]}(value,breakpoint)}(breakpoint)(value)),[breakpoint]),layer={...args?.layers?.[0],colorMapFunction:colorMap},props={...args,layers:[layer]},handleChange=react__WEBPACK_IMPORTED_MODULE_0__.useCallback(((_event,value)=>{setBreakpoint(value/100)}),[]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.main},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,props),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.legend},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_2__.sG,{min:valueRange[0],max:valueRange[1],colorMapFunction:colorMap}))),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_4__.ZP,{min:0,max:100,defaultValue:50,step:1,onChangeCommitted:handleChange}))};BreakpointColorMap.args={...defaultArgs,id:"breakpoint-color-map",layers:[{...meshMapLayerFloat32,gridLines:!1,material:!0}]},BreakpointColorMap.parameters={docs:{...defaultParameters_docs,description:{story:"Example using a color scale with a breakpoint."}}};const ColorMapRange=args=>{const[colorMapUpper,setColorMapUpper]=react__WEBPACK_IMPORTED_MODULE_0__.useState(41048),layer={...args?.layers?.[0],colorMapRange:[-3071,colorMapUpper]},props={...args,layers:[layer]},handleChange=react__WEBPACK_IMPORTED_MODULE_0__.useCallback(((_event,value)=>{setColorMapUpper(value)}),[]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.main},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,props)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_4__.ZP,{min:1e4,max:41048,defaultValue:41048,step:1e3,onChange:handleChange}))};ColorMapRange.args={...defaultArgs,id:"breakpoint-color-map",layers:[{...meshMapLayerFloat32,colorMapName:"Seismic",colorMapClampColor:!1,gridLines:!1,material:!0}]},ColorMapRange.parameters={docs:{...defaultParameters_docs,description:{story:'Example changing the "ColorMapRange" property using a slider.'}}};const ColorSelector=(args=>{const[colorName,setColorName]=react__WEBPACK_IMPORTED_MODULE_0__.useState("Rainbow"),[colorRange,setRange]=react__WEBPACK_IMPORTED_MODULE_0__.useState(),[isAuto,setAuto]=react__WEBPACK_IMPORTED_MODULE_0__.useState(),[breakPoints,setBreakPoint]=react__WEBPACK_IMPORTED_MODULE_0__.useState(),[isLog,setIsLog]=react__WEBPACK_IMPORTED_MODULE_0__.useState(!1),[isNearest,setIsNearest]=react__WEBPACK_IMPORTED_MODULE_0__.useState(!1),userDefinedBreakPoint=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((data=>{data&&setBreakPoint(data.colorArray)}),[]),colorNameFromSelector=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((data=>{setColorName(data)}),[]),userDefinedRange=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((data=>{data.range&&setRange(data.range),setAuto(data.isAuto)}),[]),getInterpolateMethod=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((data=>{setIsLog(data.isLog),setIsNearest(data.isNearest)}),[]),colorMapFunc=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((()=>(0,_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_2__.rX)(colorName,isLog,isNearest,breakPoints)),[colorName,isLog,isNearest,breakPoints]),updatedLayerData=[{...meshMapLayerFloat32,colorMapName:colorName,colorMapRange:colorRange&&0==isAuto?colorRange:[100,1e3],colorMapFunction:colorMapFunc()}];return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,_extends({},args,{layers:updatedLayerData}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_5__.Z,{id:"view_1"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{marginTop:50}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_2__.n6,{min:100,max:1e3,colorNameFromSelector:colorNameFromSelector,getColorRange:userDefinedRange,getInterpolateMethod:getInterpolateMethod,getBreakpointValue:userDefinedBreakPoint,horizontal:!0,numberOfTicks:2}))))}).bind({});ColorSelector.args={...defaultArgs,id:"map_layer_color_selector",legend:{visible:!0},layers:[{...meshMapLayerFloat32}],views:{layout:[1,1],showLabel:!0,viewports:[{id:"view_1",zoom:-4}]}},ConstantColor.parameters={...ConstantColor.parameters,docs:{...ConstantColor.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...ConstantColor.parameters?.docs?.source}}},GradientFunctionColorMap.parameters={...GradientFunctionColorMap.parameters,docs:{...GradientFunctionColorMap.parameters?.docs,source:{originalSource:'() => {\n  const args = {\n    ...defaultArgs,\n    id: "gradient-color-map",\n    layers: [{\n      ...meshMapLayerFloat32,\n      colorMapFunction: gradientColorMap\n    }]\n  };\n  return <SubsurfaceViewer {...args} />;\n}',...GradientFunctionColorMap.parameters?.docs?.source}}},StepFunctionColorMap.parameters={...StepFunctionColorMap.parameters,docs:{...StepFunctionColorMap.parameters?.docs,source:{originalSource:'() => {\n  const args = {\n    ...defaultArgs,\n    id: "nearest-color-map",\n    layers: [{\n      ...meshMapLayerFloat32,\n      material: true,\n      colorMapFunction: nearestColorMap\n    }]\n  };\n  return <SubsurfaceViewer {...args} />;\n}',...StepFunctionColorMap.parameters?.docs?.source}}},DefaultColorScale.parameters={...DefaultColorScale.parameters,docs:{...DefaultColorScale.parameters?.docs,source:{originalSource:'() => {\n  const args = {\n    ...defaultArgs,\n    id: "default-color-scale",\n    layers: [{\n      ...meshMapLayerFloat32\n    }]\n  };\n  return <SubsurfaceViewer {...args} />;\n}',...DefaultColorScale.parameters?.docs?.source}}},BreakpointColorMap.parameters={...BreakpointColorMap.parameters,docs:{...BreakpointColorMap.parameters?.docs,source:{originalSource:"args => {\n  const [breakpoint, setBreakpoint] = React.useState<number>(0.5);\n  const colorMap = React.useCallback((value: number) => {\n    return createColorMap(breakpoint)(value);\n  }, [breakpoint]);\n  const layer = {\n    ...args?.layers?.[0],\n    colorMapFunction: colorMap\n  };\n  const props = {\n    ...args,\n    layers: [layer]\n  };\n  const handleChange = React.useCallback((_event: Event | SyntheticEvent, value: number | number[]) => {\n    setBreakpoint((value as number) / 100);\n  }, []);\n  return <Root>\n            <div className={classes.main}>\n                <SubsurfaceViewer {...props} />\n                <div className={classes.legend}>\n                    <ContinuousLegend min={valueRange[0]} max={valueRange[1]} colorMapFunction={colorMap} />\n                </div>\n            </div>\n            <Slider min={0} max={100} defaultValue={50} step={1} onChangeCommitted={handleChange} />\n        </Root>;\n}",...BreakpointColorMap.parameters?.docs?.source}}},ColorMapRange.parameters={...ColorMapRange.parameters,docs:{...ColorMapRange.parameters?.docs,source:{originalSource:"args => {\n  const [colorMapUpper, setColorMapUpper] = React.useState<number>(41048);\n  const layer = {\n    ...args?.layers?.[0],\n    colorMapRange: [-3071, colorMapUpper]\n  };\n  const props = {\n    ...args,\n    layers: [layer]\n  };\n  const handleChange = React.useCallback((_event: unknown, value: number | number[]) => {\n    setColorMapUpper((value as number));\n  }, []);\n  return <Root>\n            <div className={classes.main}>\n                <SubsurfaceViewer {...props} />\n            </div>\n            <Slider min={10000} max={41048} defaultValue={41048} step={1000} onChange={handleChange} />\n        </Root>;\n}",...ColorMapRange.parameters?.docs?.source}}},ColorSelector.parameters={...ColorSelector.parameters,docs:{...ColorSelector.parameters?.docs,source:{originalSource:'args => {\n  const [colorName, setColorName] = React.useState("Rainbow");\n  const [colorRange, setRange] = React.useState();\n  const [isAuto, setAuto] = React.useState();\n  const [breakPoints, setBreakPoint] = React.useState();\n  const [isLog, setIsLog] = React.useState(false);\n  const [isNearest, setIsNearest] = React.useState(false);\n\n  // user defined breakpoint(domain)\n  const userDefinedBreakPoint = React.useCallback((data: {\n    colorArray: React.SetStateAction<undefined>;\n  }) => {\n    if (data) setBreakPoint(data.colorArray);\n  }, []);\n\n  // Get color name from color selector\n  const colorNameFromSelector = React.useCallback((data: React.SetStateAction<string>) => {\n    setColorName(data);\n  }, []);\n\n  // user defined range\n  const userDefinedRange = React.useCallback((data: {\n    range: React.SetStateAction<undefined>;\n    isAuto: React.SetStateAction<undefined>;\n  }) => {\n    if (data.range) setRange(data.range);\n    setAuto(data.isAuto);\n  }, []);\n\n  // Get interpolation method from color selector to layer\n  const getInterpolateMethod = React.useCallback((data: {\n    isLog: boolean | ((prevState: boolean) => boolean);\n    isNearest: boolean | ((prevState: boolean) => boolean);\n  }) => {\n    setIsLog(data.isLog);\n    setIsNearest(data.isNearest);\n  }, []);\n\n  // color map function\n  const colorMapFunc = React.useCallback(() => {\n    return createColorMapFunction(colorName, isLog, isNearest, breakPoints);\n  }, [colorName, isLog, isNearest, breakPoints]);\n  const min = 100;\n  const max = 1000;\n  const updatedLayerData = [{\n    ...meshMapLayerFloat32,\n    colorMapName: colorName,\n    colorMapRange: colorRange && isAuto == false ? colorRange : [min, max],\n    colorMapFunction: colorMapFunc()\n  }];\n  return <SubsurfaceViewer {...args} layers={updatedLayerData}>\n            {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    /* @ts-expect-error */\n    <View id="view_1">\n                    <div style={{\n        marginTop: 50\n      }}>\n                        <ColorLegend min={min} max={max} colorNameFromSelector={colorNameFromSelector} getColorRange={userDefinedRange} getInterpolateMethod={getInterpolateMethod} getBreakpointValue={userDefinedBreakPoint} horizontal={true} numberOfTicks={2} />\n                    </div>\n                </View>}\n        </SubsurfaceViewer>;\n}',...ColorSelector.parameters?.docs?.source}}};const __namedExportsOrder=["ConstantColor","GradientFunctionColorMap","StepFunctionColorMap","DefaultColorScale","BreakpointColorMap","ColorMapRange","ColorSelector"]}}]);