"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[7326],{"./packages/subsurface-viewer/src/storybook/extensions/SideProjectionExtension.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{SideProjection:function(){return SideProjection},__namedExportsOrder:function(){return __namedExportsOrder},default:function(){return SideProjectionExtension_stories}});var geojson_layer=__webpack_require__("./node_modules/@deck.gl/layers/dist/geojson-layer/geojson-layer.js"),SubsurfaceViewer=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),layer_extension=__webpack_require__("./node_modules/@deck.gl/core/dist/lib/layer-extension.js"),project=__webpack_require__("./node_modules/@deck.gl/core/dist/shaderlib/project/project.js"),project32=__webpack_require__("./node_modules/@deck.gl/core/dist/shaderlib/project32/project32.js");const glsl=x=>`${x}`,defaultProps={sideViewIds:[]},shaderModuleVs={name:"unfold-vs",vs:glsl`
uniform float side_view;

vec3 transform(vec3 clip_position) {
    if (side_view < 1.0) {
        return clip_position;
    }
    vec3 world_position = geometry.worldPosition.xyz;
    vec4 transformed = vec4(world_position.x, world_position.z, 0.0, 1.0);

    vec4 commonspace = project_position(transformed);

    vec4 clipspace = project_common_position_to_clipspace(commonspace);

    return clipspace.xyz;
}
`},injectionVs={"vs:#decl":glsl`
  vec3 new_position;
`,"vs:DECKGL_FILTER_GL_POSITION":glsl`
  new_position = transform(position.xyz);
  position.xyz = new_position;
`};class SideProjectionExtension extends layer_extension.A{static defaultProps=defaultProps;static extensionName="SideProjectionExtension";getShaders(){return{modules:[shaderModuleVs,project.A,project32.A],inject:injectionVs}}draw({uniforms:uniforms}){const{sideViewIds:sideViewIds}=this.props,isSideView=sideViewIds.includes(this.context.viewport.id);uniforms.side_view=isSideView?1:0}}var axesLayer=__webpack_require__("./packages/subsurface-viewer/src/layers/axes/axesLayer.ts");var SideProjectionExtension_stories={component:SubsurfaceViewer.A,title:"SubsurfaceViewer / Extensions / SideProjectionExtension"};const DEFAULT_LAYER_PROPS={id:"enhanced-path-layer",data:{type:"FeatureCollection",features:[{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"Polygon",coordinates:[[[500,1e3,-400],[800,1200,-400],[1e3,1100,-400],[1e3,1100,-600],[800,1200,-600],[500,1e3,-600],[500,1e3,-400]]]}]},properties:{name:"Fence",color:[235,107,52,255]}},{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"Point",coordinates:[500,1e3,-400]},{type:"LineString",coordinates:[[500,1e3,-400],[575,1050,-450],[650,1100,-450],[725,1150,-500],[800,1200,-500],[900,1150,-550],[950,1125,-550],[1e3,1100,-550]]}]},properties:{name:"Well",color:[52,125,235,255]}},{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"LineString",coordinates:[[500,1e3,-475],[800,1200,-475],[1e3,1100,-475]]}]},properties:{name:"Surface 1",color:[52,235,211,255]}},{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"LineString",coordinates:[[500,1e3,-525],[800,1200,-525],[1e3,1100,-525]]}]},properties:{name:"Surface 2",color:[32,252,3,255]}}]},lineWidthScale:1,lineBillboard:!0,pointBillboard:!0,stroked:!0,getPointRadius:3,getLineColor:d=>d.properties?.color,getFillColor:d=>d.properties?.color},SideProjection={args:{id:"SubsurfaceViewer",views:{layout:[1,1],showLabel:!0,viewports:[{id:"orbit_view",name:"3d view",show3D:!0,isSync:!1}]},bounds:[500,1e3,1200,1500],layers:[new axesLayer.A({id:"axes-layer",bounds:[300,800,400,1300,1600,600]}),new geojson_layer.A({...DEFAULT_LAYER_PROPS,extensions:[new SideProjectionExtension],sideViewIds:["intersection"]})],views:{layout:[1,2],viewports:[{id:"normal",show3D:!0},{id:"intersection",show3D:!1,target:[700,-450]}]}}},__namedExportsOrder=["SideProjection"];SideProjection.parameters={...SideProjection.parameters,docs:{...SideProjection.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    bounds: ([500, 1000, 1200, 1500] as [number, number, number, number]),\n    layers: [new AxesLayer({\n      id: "axes-layer",\n      bounds: [300, 800, 400, 1300, 1600, 600]\n    }),\n    // @ts-expect-error TS2345\n    new GeoJsonLayer({\n      ...DEFAULT_LAYER_PROPS,\n      extensions: [new SideProjectionExtension()],\n      sideViewIds: ["intersection"]\n    })],\n    views: {\n      layout: [1, 2],\n      viewports: [{\n        id: "normal",\n        show3D: true\n      }, {\n        id: "intersection",\n        show3D: false,\n        target: [700, -450]\n      }]\n    }\n  }\n}',...SideProjection.parameters?.docs?.source}}}}}]);
//# sourceMappingURL=subsurface-viewer-src-storybook-extensions-SideProjectionExtension-stories.44a1596a.iframe.bundle.js.map