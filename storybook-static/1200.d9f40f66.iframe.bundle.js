/*! For license information please see 1200.d9f40f66.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[1200],{"./packages/well-log-viewer/src/SyncLogViewer.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{wB:function(){return argTypesSyncLogViewerProp},Ay:function(){return src_SyncLogViewer}});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),WellLogView=__webpack_require__("./packages/well-log-viewer/src/components/WellLogView.tsx");function patternId(uid,index){return"pattern"+uid+"_"+index}function createPattern(uid,index,patternsTable){const patternSize=patternsTable.patternSize,patternImage=patternsTable.patternImages[index],id=patternId(uid,index);return react.createElement("pattern",{key:id,id:id,width:patternSize,height:patternSize,patternUnits:"userSpaceOnUse"},react.createElement("image",{width:patternSize,height:patternSize,href:patternImage}))}function createDefs(uid,patternsTable){return patternsTable?react.createElement("defs",{key:"defs"},patternsTable.patternImages.map(((_value,index)=>createPattern(uid,index,patternsTable)))):null}createPattern.__docgenInfo={description:"",methods:[],displayName:"createPattern"},createDefs.__docgenInfo={description:"",methods:[],displayName:"createDefs"};let count=0;class WellLogSpacer extends react.Component{container=void 0;uid=count++;constructor(props){super(props),this.defs=this.props.options?.wellpickPatternFill&&this.props.patterns&&createDefs(this.uid,this.props.patternsTable),this._isMount=!1}update(){this._isMount&&this.forceUpdate()}componentDidUpdate(prevProps){this.props.onCreateSpacer!==prevProps.onCreateSpacer&&this.props.onCreateSpacer?.(this),this.props.patternsTable===prevProps.patternsTable&&this.props.patterns===prevProps.patterns&&this.props.options?.wellpickPatternFill===prevProps.options?.wellpickPatternFill||(this.defs=this.props.options?.wellpickPatternFill&&this.props.patterns&&createDefs(this.uid,this.props.patternsTable),this.forceUpdate())}shouldComponentUpdate(nextProps){return this.props.colorMapFunctions!==nextProps.colorMapFunctions||(this.props.controllers!==nextProps.controllers||(this.props.wellpicks!==nextProps.wellpicks||(this.props.width!==nextProps.width||(this.props.options?.wellpickColorFill!==nextProps.options?.wellpickColorFill||this.props.options?.wellpickPatternFill!==nextProps.options?.wellpickPatternFill))))}componentDidMount(){this._isMount=!0}componentWillUnmount(){this._isMount=!1}render(){const horizontal=this.props.horizontal;let ymax=0;const picks=[];let offsetTop=3e3,offsetLeft=3e3,height=1,width=this.props.width??1;const controller=this.props.controllers[0],logViewer=controller?.logController,controller2=this.props.controllers[1],logViewer2=controller2?.logController,wps=controller?(0,WellLogView.N7)(controller):null,wps2=controller2?(0,WellLogView.N7)(controller2):null;if(wps&&wps2&&logViewer){const overlay=logViewer?.overlay,source=overlay?.elm.node();source&&(offsetTop=source.offsetTop,offsetLeft=source.offsetLeft,source.offsetParent&&(horizontal?offsetLeft+=source.offsetParent.offsetLeft:offsetTop+=source.offsetParent.offsetTop),height=source.clientHeight,width=source.clientWidth),horizontal?height=this.container?this.container.clientHeight:10:width=this.container?this.container.clientWidth:10;const patterns=this.props.options?.wellpickPatternFill&&this.props.patternsTable&&this.props.patterns;for(const wp of wps){const horizon=wp.horizon,vPrimary=wp.vPrimary,color=wp.color,rgba="rgba("+color[0]+","+color[1]+","+color[2]+",0.8)";let pattern="";if(patterns){const p=patterns.find((val=>val[0]===horizon));p&&(pattern="url(#"+patternId(this.uid,p[1])+")")}const vCur=vPrimary;if(void 0===vCur)continue;const v=logViewer?.scale(vCur);if(Number.isFinite(v)&&void 0!==v)for(const wp2 of wps2){const horizon2=wp2.horizon;if(horizon===horizon2){const vCur2=wp2.vPrimary;if(void 0===vCur2)continue;const v2=logViewer2?.scale(vCur2);if(!Number.isFinite(v2)||void 0===v2)continue;ymax<v&&(ymax=v),ymax<v2&&(ymax=v2),picks.push({from:v,to:v2,color:rgba,pattern:pattern});break}}}}const _selection=controller?.getContentSelection(),_selection2=controller2?.getContentSelection(),selection=[{from:void 0===_selection?.[0]?void 0:logViewer?.scale(_selection?.[0]),to:void 0===_selection2?.[0]?void 0:logViewer2?.scale(_selection2?.[0])},{from:void 0===_selection?.[1]?void 0:logViewer?.scale(_selection?.[1]),to:void 0===_selection2?.[1]?void 0:logViewer2?.scale(_selection2?.[1])}];if(void 0!==selection[0].from&&void 0!==selection[1].from&&void 0!==selection[0].to&&void 0!==selection[1].to&&selection[0].from<selection[1].from!=selection[0].to<selection[1].to){const tmp=selection[0].to;selection[0].to=selection[1].to,selection[1].to=tmp}const from0=selection[0]?.from?.toFixed(1),to0=selection[0]?.to?.toFixed(1),from1=selection[1]?.from?.toFixed(1),to1=selection[1]?.to?.toFixed(1),hasSelection0=void 0!==from0&&void 0!==to0,hasSelection1=void 0!==from1&&void 0!==to1,hasSelection=hasSelection0&&hasSelection1;let selectionPoints="",d1="",d0="";hasSelection0&&(d0=horizontal?"M "+from0+" 0 L "+to0+" "+height:"M 0 "+from0+" L "+width+" "+to0),hasSelection1&&(d1=horizontal?"M "+from1+" 0 L "+to1+" "+height:"M 0 "+from1+" L "+width+" "+to1),hasSelection&&(selectionPoints=horizontal?from0+" 0 "+to0+" "+height+" "+to1+" "+height+" "+from1+" 0":"0 "+from0+" "+width+" "+to0+" "+width+" "+to1+" 0 "+from1);const fillPoints=[];picks.map(((value,index)=>{if(index+1>=picks.length)return;const value1=picks[index+1];fillPoints.push(horizontal?value.from.toFixed(1)+" 0 "+value.to.toFixed(1)+" "+height+" "+value1.to.toFixed(1)+" "+height+" "+value1.from.toFixed(1)+" 0":"0 "+value.from.toFixed(1)+" "+width+" "+value.to.toFixed(1)+" "+width+" "+value1.to.toFixed(1)+" 0 "+value1.from.toFixed(1))}));const distance=this.props.distance;return react.createElement("div",{className:"welllogspacer",style:{flexDirection:horizontal?"row":"column"},ref:el=>this.container=el},react.createElement("div",{className:horizontal?"welllogspacer-distance-horizontal":"",style:horizontal?{width:offsetLeft+"px",height:height+"px"}:{height:offsetTop+"px",width:width+"px"}},controller?.props.options?.hideTrackTitle?null:react.createElement("br",null),controller?.props.options?.hideTrackLegend||void 0===distance||void 0===distance.value?null:react.createElement("div",{className:"distance"},"←"+distance.value.toFixed(0)+distance.units+"→")),react.createElement("div",{className:"wellpick",style:horizontal?{height:height+"px"}:{width:width+"px"}},react.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 "+width+" "+height,width:width,height:height,stroke:"currentColor",strokeWidth:3},this.defs,picks.map(((value,index)=>index+1<picks.length&&[this.props.options?.wellpickColorFill&&value.color&&react.createElement("polygon",{key:index,fill:value.color,className:"wellpick-fill",stroke:"none",points:fillPoints[index]}),value.pattern&&react.createElement("polygon",{key:"p"+index,fill:value.pattern,className:"wellpick-pattern",stroke:"none",points:fillPoints[index]})])),picks.map(((value,index)=>react.createElement("path",{key:index,fill:"none",stroke:value.color,d:horizontal?"M "+value.from.toFixed(1)+"0 L "+value.to.toFixed(1)+" "+height:"M 0 "+value.from.toFixed(1)+" L "+width+" "+value.to.toFixed(1)}))),hasSelection&&react.createElement("polygon",{fill:"rgba(0, 0, 0, 0.1)",stroke:"none",points:selectionPoints}),hasSelection0&&react.createElement("path",{fill:"none",stroke:"rgba(255, 0, 0, 0.1)",d:d0}),hasSelection1&&react.createElement("path",{fill:"none",stroke:"rgba(0, 255, 0, 0.1)",d:d1}))))}}var components_WellLogSpacer=WellLogSpacer;WellLogSpacer.__docgenInfo={description:"",methods:[{name:"update",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}}],displayName:"WellLogSpacer",props:{width:{required:!1,tsType:{name:"number"},description:""},controllers:{required:!0,tsType:{name:"Array",elements:[{name:"unknown"}],raw:"(WellLogController | null)[]"},description:""},colorMapFunctions:{required:!0,tsType:{name:"Array",elements:[{name:"union",raw:"colorTablesObj | ColorFunction",elements:[{name:"colorTablesObj"},{name:"signature",type:"object",raw:"{\n    name: string;\n    func: (v: number) => [number, number, number]; // input number is between 0.0 and 1.0; returned numbers are between 0 and 255\n}",signature:{properties:[{key:"name",value:{name:"string",required:!0}},{key:"func",value:{name:"signature",type:"function",raw:"(v: number) => [number, number, number]",signature:{arguments:[{type:{name:"number"},name:"v"}],return:{name:"tuple",raw:"[number, number, number]",elements:[{name:"number"},{name:"number"},{name:"number"}]}},required:!0}}]}}]}],raw:"ColorMapFunction[]"},description:"Prop containing color function/table data."},wellpicks:{required:!1,tsType:{name:"Array",elements:[{name:"WellPickProps"}],raw:"WellPickProps[]"},description:"Well Picks data"},patternsTable:{required:!1,tsType:{name:"PatternsTable"},description:"Patterns table"},patterns:{required:!1,tsType:{name:"Array",elements:[{name:"tuple",raw:"[string, number]",elements:[{name:"string"},{name:"number"}]}],raw:"Pattern[]"},description:"Horizon to pattern index map"},distance:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    units: string;\n    value: number | undefined;\n}",signature:{properties:[{key:"units",value:{name:"string",required:!0}},{key:"value",value:{name:"union",raw:"number | undefined",elements:[{name:"number"},{name:"undefined"}],required:!0}}]}},description:"Distanse between wells to show on the spacer"},horizontal:{required:!1,tsType:{name:"boolean"},description:"Orientation of the track plots on the screen."},options:{required:!1,tsType:{name:"WellLogSpacerOptions"},description:"Additional options"},onCreateSpacer:{required:!1,tsType:{name:"signature",type:"function",raw:"(spacer: WellLogSpacer) => void",signature:{arguments:[{type:{name:"WellLogSpacer"},name:"spacer"}],return:{name:"void"}}},description:""}}};var WellLogViewWithScroller=__webpack_require__("./packages/well-log-viewer/src/components/WellLogViewWithScroller.tsx"),CallbackManager=__webpack_require__("./packages/well-log-viewer/src/components/CallbackManager.tsx"),WellLogLayout=__webpack_require__("./packages/well-log-viewer/src/components/WellLogLayout.tsx"),WellLogAxesPanel=__webpack_require__("./packages/well-log-viewer/src/components/WellLogAxesPanel.tsx"),WellLogInfoPanel=__webpack_require__("./packages/well-log-viewer/src/components/WellLogInfoPanel.tsx"),WellLogZoomSlider=__webpack_require__("./packages/well-log-viewer/src/components/WellLogZoomSlider.tsx");function defaultSidePanel(parent){return react.createElement("div",{className:"side-panel"},react.createElement(WellLogAxesPanel.A,{header:"Primary scale",axisTitles:parent.props.axisTitles,axisMnemos:parent.props.axisMnemos,primaryAxis:parent.getPrimaryAxis(),onChangePrimaryAxis:parent.onChangePrimaryAxis,callbackManager:parent.callbackManagers[0]}),parent.wellLogCollections?.map(((wellLogSets,iWellLog)=>react.createElement(WellLogInfoPanel.A,{key:iWellLog,header:"Readout "+wellLogSets[0]?.header.well,readoutOptions:parent.props.readoutOptions,callbackManager:parent.callbackManagers[iWellLog]}))),react.createElement(WellLogZoomSlider.A,{label:"Zoom:",max:parent.props.welllogOptions?.maxContentZoom,callbackManager:parent.callbackManagers[0]}))}var DefaultSyncLogViewerLayout={right:defaultSidePanel};defaultSidePanel.__docgenInfo={description:"",methods:[],displayName:"defaultSidePanel"};var CommonPropTypes=__webpack_require__("./packages/well-log-viewer/src/components/CommonPropTypes.ts"),arrays=__webpack_require__("./packages/well-log-viewer/src/utils/arrays.ts"),well_log=__webpack_require__("./packages/well-log-viewer/src/utils/well-log.ts"),minmax=__webpack_require__("./packages/well-log-viewer/src/utils/minmax.ts"),edit_track=__webpack_require__("./packages/well-log-viewer/src/utils/edit-track.tsx"),fill_info=__webpack_require__("./packages/well-log-viewer/src/utils/fill-info.ts");const WellDistancesType=prop_types_default().shape({units:prop_types_default().string.isRequired,distances:prop_types_default().array.isRequired}),argTypesSyncLogViewerProp={welllogs:{description:"Array of JSON objects describing well log data.\n<i>Depreacted — Use <b>wellLogCollections</b> instead.</i>"},wellLogCollections:{description:"An array of collections of well log sets. A synced well log is created per entry"},templates:{description:"Array of track template data."},colorMapFunctions:{description:"Prop containing color function/table data."},wellpicks:{description:"Well Picks data array"},patternsTable:{description:"Patterns table"},patterns:{description:"Horizon to pattern index map"},spacers:{description:"Set to true or to spacers width or to array of spacer widths if WellLogSpacers should be used"},wellDistances:{description:"Distanses between wells to show on the spacers"},horizontal:{description:"Orientation of the track plots on the screen."},syncTrackPos:{description:"Synchronize first visible track"},syncContentDomain:{description:"Synchronize visible content domain (pan and zoom)"},syncContentSelection:{description:"Synchronize content selection"},syncTemplate:{description:"Synchronize templates in the views"},welllogOptions:{description:"Options for well log views:<br/>maxContentZoom: The maximum zoom value (default 256)<br/>maxVisibleTrackNum: The maximum number of visible tracks<br/>checkDatafileSchema: Validate JSON datafile against schema<br/>hideTrackTitle: Hide titles on the tracks<br/>hideLegend: Hide legends on the tracks."},spacerOptions:{description:"Options for well log spacer"},readoutOptions:{description:"Options for readout panel.<br/>allTracks: boolean — Show not only visible tracks,<br/>grouping: string — How group values."},domain:{description:"Initial visible interval of the log data."},selection:{description:"Initial selected interval of the log data."},viewTitles:{description:"Set to true for default titles or to array of individual well log titles"},layout:{description:"Side panels layout (default is layout with default right panel"}};class SyncLogViewer extends react.Component{constructor(props){super(props),this.wellLogCollections=getWellLogCollectionsFromProps(props),this.spacers=[],this.callbacks=[],this.callbackManagers=[],this.collapsedTrackIds=[],this.controllers=[],this._isMounted=!1,this._inInfoGroupClick=0,this.state={primaryAxis:this.getDefaultPrimaryAxis()},this.onChangePrimaryAxis=this.onChangePrimaryAxis.bind(this),this.beforeRender(this.props)}componentDidMount(){this._isMounted=!0,this.wellLogCollections.length&&(this.syncTrackScrollPos(0),this.syncContentScrollPos(0)),this.setControllersZoom(),this.wellLogCollections.length&&this.syncContentSelection(0)}componentWillUnmount(){for(const callbackManager of this.callbackManagers)callbackManager.unregisterAll();this._isMounted=!1}shouldComponentUpdate(nextProps,nextState){const ret=!Object.is(this.props,nextProps)||!Object.is(this.state,nextState);return ret&&this.beforeRender(nextProps),ret}beforeRender(nextProps){this.wellLogCollections=getWellLogCollectionsFromProps(nextProps),this.callbackManagers.length!==this.wellLogCollections.length&&(this.spacers.length=this.wellLogCollections.length,this.fillViewsCallbacks(this.wellLogCollections.length))}componentDidUpdate(prevProps){const logCollectionKey=this.props.wellLogCollections?"wellLogCollections":"welllogs";if(this.props[logCollectionKey]!==prevProps[logCollectionKey]||this.props.templates!==prevProps.templates||this.props.axisMnemos!==prevProps.axisMnemos||this.props.primaryAxis!==prevProps.primaryAxis){const value=this.getDefaultPrimaryAxis();this.onChangePrimaryAxis(value)}this.props.syncContentDomain===prevProps.syncContentDomain&&(0,arrays.hC)(this.props.domain,prevProps.domain)||this.setControllersZoom(),this.props.syncContentDomain===prevProps.syncContentDomain&&this.props.wellpicks===prevProps.wellpicks&&(0,arrays.j1)(this.props.wellpickFlatting,prevProps.wellpickFlatting)&&this.props[logCollectionKey]?.length===prevProps[logCollectionKey]?.length||this.props[logCollectionKey]?.length&&this.syncContentScrollPos(0),(0,arrays.hC)(this.props.selection,prevProps.selection)||this.setControllersSelection(),this.props.syncContentSelection===prevProps.syncContentSelection&&this.props[logCollectionKey]?.length===prevProps[logCollectionKey]?.length||this.props[logCollectionKey]?.length&&this.syncContentSelection(0)}fillViewCallbacks(iView){this.collapsedTrackIds.push([]);const callbackManager=new CallbackManager.T((()=>this.wellLogCollections[iView]));this.callbackManagers.push(callbackManager);const onInfoGroupClickBind=this.onInfoGroupClick.bind(this,iView);callbackManager.registerCallback("onInfoGroupClick",onInfoGroupClickBind,!0);const onInfoFilled=infos=>{this.props.onInfoFilled?.(iView,infos)};this.props.onInfoFilled&&callbackManager.registerCallback("onInfoFilled",onInfoFilled),this.callbacks.push({onInfoBind:this.onInfo.bind(this,iView),onCreateControllerBind:this.onCreateController.bind(this,iView),onTrackScrollBind:this.onTrackScroll.bind(this,iView),onTrackSelectionBind:this.onTrackSelection.bind(this,iView),onContentRescaleBind:this.onContentRescale.bind(this,iView),onContentSelectionBind:this.onContentSelection.bind(this,iView),onTemplateChangedBind:this.onTemplateChanged.bind(this,iView)})}fillViewsCallbacks(nViews){for(let iView=this.callbacks.length;iView<nViews;iView++)this.fillViewCallbacks(iView);this.callbacks.length=nViews,this.callbackManagers.length=nViews;for(let iView=nViews;iView<this.controllers.length;iView++)console.assert(this.controllers[iView]),this.onDeleteController(iView,this.controllers[iView]);this.controllers.length=nViews}getPrimaryAxis(){return this.state.primaryAxis}getDefaultPrimaryAxis(){if(this.props.primaryAxis)return this.props.primaryAxis;const _axes=this.wellLogCollections?.map((collection=>(0,well_log.Dy)(collection,this.props.axisMnemos))),axes=_axes?.[0];let primaryAxis=axes?.[0];const template=this.props.templates?.[0];if(template){const scale=template.scale;if(scale){let primary=scale.primary;primary||(primary="tvd"),primary&&axes&&axes.indexOf(primary)>=0&&(primaryAxis=primary)}}return primaryAxis}onInfoGroupClick(iWellLog,info){if(this._inInfoGroupClick)return;this._inInfoGroupClick++;let i=0;for(const callbackManager of this.callbackManagers)i!=iWellLog&&callbackManager.callCallbacks("onInfoGroupClick",info),i++;const collapsedTrackIds=this.collapsedTrackIds[iWellLog];(0,arrays.Sw)(collapsedTrackIds,info.trackId),this.callbackManagers[iWellLog].updateInfo(),this._inInfoGroupClick--}onInfo(iWellLog,x,logController,iFrom,iTo){this.callbackManagers[iWellLog].onInfo(x,logController,iFrom,iTo),this.props.onInfo?.(iWellLog,x,logController,iFrom,iTo),this.fillInfo(iWellLog,x,logController,iFrom,iTo)}fillInfo(iWellLog,x,logController,iFrom,iTo){if(this.callbackManagers[iWellLog].onInfoFilledCallbacks.length<1)return;const interpolatedData=(0,fill_info.r)(x,logController,iFrom,iTo,this.collapsedTrackIds[iWellLog],this.props.readoutOptions);this.callbackManagers[iWellLog].onInfoFilled(interpolatedData)}onCreateController(iWellLog,controller){this.callbackManagers[iWellLog]?.onCreateController(controller),this.props.onCreateController?.(iWellLog,controller),this.setControllersZoom(),this.syncTrackScrollPos(iWellLog),this.syncContentScrollPos(iWellLog),this.syncContentSelection(iWellLog),this.controllers[iWellLog]=controller}onDeleteController(iWellLog,controller){this.props.onDeleteController?.(iWellLog,controller)}onTrackScroll(iWellLog){this.syncTrackScrollPos(iWellLog)}onTrackSelection(iWellLog){this.syncTrackSelection(iWellLog)}onContentRescale(iWellLog){this.callbackManagers[iWellLog]?.onContentRescale(),this.syncTrackScrollPos(iWellLog),this.syncContentScrollPos(iWellLog),this.syncContentSelection(iWellLog),this.props.onContentRescale?.(iWellLog)}onContentSelection(iWellLog){this.callbackManagers[iWellLog]?.onContentSelection(),this.syncContentSelection(iWellLog),this.props.onContentSelection?.(iWellLog)}onTemplateChanged(iWellLog){this.callbackManagers[iWellLog]?.onTemplateChanged(),this.syncTemplate(iWellLog),this.props.onTemplateChanged?.(iWellLog)}onChangePrimaryAxis(value){for(const callbackManager of this.callbackManagers)callbackManager.onChangePrimaryAxis(value);this._isMounted&&this.setState({primaryAxis:value})}syncTrackScrollPos(iWellLog){const controller=this.callbackManagers[iWellLog]?.controller;if(!controller)return;const trackPos=controller.getTrackScrollPos();for(const callbackManager of this.callbackManagers){const _controller=callbackManager?.controller;_controller&&_controller!==controller&&(this.props.syncTrackPos&&_controller.scrollTrackTo(trackPos))}}syncTrackSelection(iWellLog){const controller=this.callbackManagers[iWellLog]?.controller;if(!controller)return;const trackSelection=controller.getSelectedTrackIndices();for(const callbackManager of this.callbackManagers){const _controller=callbackManager?.controller;_controller&&_controller!==controller&&(this.props.syncTemplate&&_controller.setSelectedTrackIndices(trackSelection))}}getCommonContentBaseDomain(){const commonBaseDomain=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY];for(const callbackManager of this.callbackManagers){const controller=callbackManager?.controller;controller&&(0,minmax.nt)(commonBaseDomain,controller.getContentBaseDomain())}return commonBaseDomain}syncContentBaseDomain(){let updated=!1;if((!this.props.wellpickFlatting||!this.props.wellpicks)&&this.props.syncContentDomain){const commonBaseDomain=this.getCommonContentBaseDomain();for(const callbackManager of this.callbackManagers){const controller=callbackManager?.controller;if(!controller)continue;const baseDomain=controller.getContentBaseDomain();(0,arrays.q_)(baseDomain,commonBaseDomain)||controller.setContentBaseDomain(commonBaseDomain)&&(updated=!0)}}return updated}makeFlattingCoeffs(){const wellpickFlatting=this.props.wellpickFlatting;if(!wellpickFlatting)return{A:[],B:[],newBaseDomain:[]};const flattingA=[],flattingB=[],nView=this.callbackManagers.length,newBaseDomain=[];for(let i=0;i<nView;i++)newBaseDomain.push([Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY]);for(const callbackManager of this.callbackManagers){const controller=callbackManager.controller,wellLogView=controller,wps=wellLogView?(0,WellLogView.N7)(wellLogView):[];let wp1,wp2;for(const wp of wps)wellpickFlatting[0]===wp.horizon&&(wp1=wp.vPrimary),wellpickFlatting[1]===wp.horizon&&(wp2=wp.vPrimary);const _flattingA=[],_flattingB=[];let j=-1;for(const callbackManager of this.callbackManagers){const _controller=callbackManager.controller;if(j++,!_controller||!controller){_flattingA.push(0),_flattingB.push(0);continue}const _wellLogView=_controller,_wps=(0,WellLogView.N7)(_wellLogView);let _wp1,_wp2;for(const _wp of _wps)wellpickFlatting[0]===_wp.horizon&&(_wp1=_wp.vPrimary),wellpickFlatting[1]===_wp.horizon&&(_wp2=_wp.vPrimary);if(Number.isFinite(wp1)&&Number.isFinite(_wp1)&&void 0!==wp1&&void 0!==_wp1){let a;if(Number.isFinite(wp2)&&Number.isFinite(_wp2)&&void 0!==wp2&&void 0!==_wp2&&wp2-wp1)a=(_wp2-_wp1)/(wp2-wp1);else if(this.props.syncContentDomain)a=1;else{const domain=controller.getContentDomain(),_domain=_controller.getContentDomain();a=_domain[1]-_domain[0]&&domain[1]-domain[0]?(_domain[1]-_domain[0])/(domain[1]-domain[0]):1}const b=_wp1-a*wp1;_flattingA.push(a),_flattingB.push(b);const baseDomain=controller.getContentBaseDomain(),baseDomainNew=[a*baseDomain[0]+b,a*baseDomain[1]+b];(0,minmax.nt)(newBaseDomain[j],baseDomainNew)}else _flattingA.push(controller===_controller?1:0),_flattingB.push(0)}flattingA.push(_flattingA),flattingB.push(_flattingB)}return{A:flattingA,B:flattingB,newBaseDomain:newBaseDomain}}skipSiblings=[];syncContentScrollPos(iWellLog){const controller=this.callbackManagers[iWellLog]?.controller;if(!controller)return;const domain=controller.getContentDomain();if(0===domain[0]&&0===domain[1])return;let updated=!1;const wellpickFlatting=this.props.wellpickFlatting,syncContentDomain=this.props.syncContentDomain;let coeff=null;this.props.wellpicks&&wellpickFlatting&&(coeff=this.makeFlattingCoeffs()),updated=this.syncContentBaseDomain();let j=-1;const index=this.skipSiblings.findIndex((val=>val===iWellLog));if(index>=0)this.skipSiblings.splice(index,1);else for(const callbackManager of this.callbackManagers){const _controller=callbackManager?.controller;if(j++,_controller&&_controller!==controller)if(coeff){const a=coeff.A[iWellLog][j],b=coeff.B[iWellLog][j],domainNew=[a*domain[0]+b,a*domain[1]+b],_domain=_controller.getContentDomain();if(Number.isFinite(domainNew[0])&&Number.isFinite(domainNew[1])){(0,arrays.q_)(_domain,domainNew)||_controller.zoomContentTo(domainNew)&&(this.skipSiblings.push(j),updated=!0);const baseDomain=_controller.getContentBaseDomain(),newBaseDomain=[domainNew[0],domainNew[1]];baseDomain[0]<newBaseDomain[0]&&(newBaseDomain[0]=baseDomain[0]),baseDomain[1]>newBaseDomain[1]&&(newBaseDomain[1]=baseDomain[1]),Number.isFinite(newBaseDomain[0])&&Number.isFinite(newBaseDomain[1])&&(0,arrays.q_)(baseDomain,newBaseDomain)}}else if(syncContentDomain){const _domain=_controller.getContentDomain();(0,arrays.q_)(_domain,domain)||_controller.zoomContentTo(domain)&&(this.skipSiblings.push(j),updated=!0)}}if(updated)for(let i=iWellLog-1;i<=iWellLog;i++){{const _domain=controller.getContentDomain();(0,arrays.q_)(_domain,domain)||controller.zoomContentTo(domain)}const spacer=this.spacers[i];spacer&&spacer.update()}}syncContentSelection(iWellLog){const controller=this.callbackManagers[iWellLog]?.controller;if(!controller)return;const selection=controller.getContentSelection();for(const callbackManager of this.callbackManagers){const _controller=callbackManager?.controller;if(_controller&&_controller!==controller&&this.props.syncContentSelection){const _selection=_controller.getContentSelection();(0,arrays.hC)(_selection,selection)||_controller.selectContent(selection)}}for(const spacer of this.spacers)spacer&&spacer.update()}syncTemplate(iWellLog){const controller=this.callbackManagers[iWellLog]?.controller;if(!controller)return;if(!this.props.syncTemplate)return;const template=controller.getTemplate();for(const callbackManager of this.callbackManagers){const _controller=callbackManager?.controller;_controller&&_controller!==controller&&_controller.setTemplate(template,!0)}}setControllersZoom(){for(const callbackManager of this.callbackManagers){const controller=callbackManager?.controller;if(controller&&(this.props.domain&&(controller.zoomContentTo(this.props.domain),this.props.syncContentDomain)))break}}setControllersSelection(){if(this.props.selection){for(const callbackManager of this.callbackManagers){const controller=callbackManager?.controller;controller&&controller.selectContent(this.props.selection)}for(const spacer of this.spacers)spacer&&spacer.update()}}createView(index){const callbacks=this.callbacks[index],wellLog=this.wellLogCollections[index],templates=this.props.templates,template=templates[index]?templates[index]:templates[0],viewTitles=this.props.viewTitles,viewTitle=viewTitles&&(!0===viewTitles||viewTitles[index]),options={...this.props.welllogOptions,maxVisibleTrackNum:this.props.welllogOptions?.maxVisibleTrackNum||(this.props.horizontal?2:3)};return react.createElement(WellLogViewWithScroller.A,{iWellLogView:index,key:index,welllog:wellLog,viewTitle:viewTitle,template:template,colorMapFunctions:this.props.colorMapFunctions,wellpick:this.props.wellpicks?.[index],patternsTable:this.props.patternsTable,patterns:this.props.patterns,horizontal:this.props.horizontal,axisTitles:this.props.axisTitles,axisMnemos:this.props.axisMnemos,domain:this.props.domain,selection:this.props.selection,primaryAxis:this.state.primaryAxis,options:options,onInfo:callbacks.onInfoBind,onCreateController:callbacks.onCreateControllerBind,onTrackMouseEvent:this.props.onTrackMouseEvent||edit_track.D,onTrackMouseLeaveEvent:this.props.onTrackMouseLeaveEvent,onTrackScroll:callbacks.onTrackScrollBind,onTrackSelection:callbacks.onTrackSelectionBind,onContentRescale:callbacks.onContentRescaleBind,onContentSelection:callbacks.onContentSelectionBind,onTemplateChanged:callbacks.onTemplateChangedBind})}createSpacer(index){if(!this.props.spacers)return null;const prev=index-1;let width=75;return"boolean"!=typeof this.props.spacers&&(width="number"==typeof this.props.spacers?this.props.spacers:this.props.spacers[prev]),void 0===width&&(width=75),width?react.createElement("div",{style:this.props.horizontal?{height:width+"px"}:{width:width+"px"},key:"s"+index},react.createElement(components_WellLogSpacer,{controllers:[this.callbackManagers[prev].controller,this.callbackManagers[index].controller],distance:{units:this.props.wellDistances?this.props.wellDistances.units:"",value:this.props.wellDistances?.distances[prev]},colorMapFunctions:this.props.colorMapFunctions,wellpicks:this.props.wellpicks?[this.props.wellpicks[prev],this.props.wellpicks[index]]:[],width:width,patternsTable:this.props.patternsTable,patterns:this.props.patterns,options:this.props.spacerOptions,horizontal:this.props.horizontal,onCreateSpacer:spacer=>{this.spacers[index]=spacer}})):null}render(){return react.createElement(WellLogLayout.A,{parent:this,center:react.createElement("div",{style:{height:"0%",flex:"1",display:"flex",flexDirection:this.props.horizontal?"column":"row"}},this.wellLogCollections.map(((_collection,index)=>[index?this.createSpacer(index):null,this.createView(index)]))),layout:this.props.layout||DefaultSyncLogViewerLayout})}}function getWellLogCollectionsFromProps(props){return(props.wellLogCollections??props.welllogs??[]).map((setOrCollection=>Array.isArray(setOrCollection)?setOrCollection:[setOrCollection]))}const WellLogViewOptionsTypes=prop_types_default().shape({maxContentZoom:prop_types_default().number,maxVisibleTrackNum:prop_types_default().number,checkDatafileSchema:prop_types_default().bool,hideTrackTitle:prop_types_default().bool,hideTrackLegend:prop_types_default().bool,hideCurrentPosition:prop_types_default().bool,hideSelectionInterval:prop_types_default().bool}),InfoOptionsTypes=prop_types_default().shape({allTracks:prop_types_default().bool,grouping:prop_types_default().string});SyncLogViewer.propTypes={welllogs:prop_types_default().array,wellLogCollections:prop_types_default().arrayOf(prop_types_default().arrayOf(prop_types_default().object)),templates:prop_types_default().array.isRequired,colorMapFunctions:prop_types_default().arrayOf(CommonPropTypes.YH).isRequired,wellpicks:prop_types_default().arrayOf(WellLogView.MO),patternsTable:CommonPropTypes._7,patterns:prop_types_default().arrayOf(CommonPropTypes.QO),wellpickFlatting:prop_types_default().arrayOf(prop_types_default().string),spacers:prop_types_default().oneOfType([prop_types_default().bool,prop_types_default().number,prop_types_default().arrayOf(prop_types_default().number)]),wellDistances:WellDistancesType,horizontal:prop_types_default().bool,primaryAxis:prop_types_default().string,axisTitles:prop_types_default().object,axisMnemos:prop_types_default().object,maxContentZoom:prop_types_default().number,domain:prop_types_default().arrayOf(prop_types_default().number),selection:prop_types_default().arrayOf(prop_types_default().number),viewTitles:prop_types_default().oneOfType([prop_types_default().bool,prop_types_default().arrayOf(prop_types_default().oneOfType([prop_types_default().bool,prop_types_default().string,prop_types_default().object]))]),welllogOptions:WellLogViewOptionsTypes,readoutOptions:InfoOptionsTypes,syncTrackPos:prop_types_default().bool,syncContentDomain:prop_types_default().bool,syncContentSelection:prop_types_default().bool,syncTemplate:prop_types_default().bool};var src_SyncLogViewer=SyncLogViewer;SyncLogViewer.__docgenInfo={description:"",methods:[{name:"beforeRender",docblock:null,modifiers:[],params:[{name:"nextProps",optional:!1,type:{name:"SyncLogViewerProps",alias:"SyncLogViewerProps"}}],returns:{type:{name:"void"}}},{name:"fillViewCallbacks",docblock:null,modifiers:[],params:[{name:"iView",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"fillViewsCallbacks",docblock:null,modifiers:[],params:[{name:"nViews",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"getPrimaryAxis",docblock:null,modifiers:[],params:[],returns:{type:{name:"string"}}},{name:"getDefaultPrimaryAxis",docblock:null,modifiers:[],params:[],returns:{type:{name:"string"}}},{name:"onInfoGroupClick",docblock:null,modifiers:[],params:[{name:"iWellLog",optional:!1,type:{name:"number"}},{name:"info",optional:!1,type:{name:"Info",alias:"Info"}}],returns:{type:{name:"void"}}},{name:"onInfo",docblock:null,modifiers:[],params:[{name:"iWellLog",optional:!1,type:{name:"number"}},{name:"x",optional:!1,type:{name:"number"}},{name:"logController",optional:!1,type:{name:"LogViewer",alias:"LogViewer"}},{name:"iFrom",optional:!1,type:{name:"number"}},{name:"iTo",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"fillInfo",docblock:null,modifiers:[],params:[{name:"iWellLog",optional:!1,type:{name:"number"}},{name:"x",optional:!1,type:{name:"number"}},{name:"logController",optional:!1,type:{name:"LogViewer",alias:"LogViewer"}},{name:"iFrom",optional:!1,type:{name:"number"}},{name:"iTo",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"onCreateController",docblock:null,modifiers:[],params:[{name:"iWellLog",optional:!1,type:{name:"number"}},{name:"controller",optional:!1,type:{name:"WellLogController",alias:"WellLogController"}}],returns:{type:{name:"void"}}},{name:"onDeleteController",docblock:null,modifiers:[],params:[{name:"iWellLog",optional:!1,type:{name:"number"}},{name:"controller",optional:!1,type:{name:"WellLogController",alias:"WellLogController"}}],returns:{type:{name:"void"}}},{name:"onTrackScroll",docblock:null,modifiers:[],params:[{name:"iWellLog",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"onTrackSelection",docblock:null,modifiers:[],params:[{name:"iWellLog",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"onContentRescale",docblock:null,modifiers:[],params:[{name:"iWellLog",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"onContentSelection",docblock:null,modifiers:[],params:[{name:"iWellLog",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"onTemplateChanged",docblock:null,modifiers:[],params:[{name:"iWellLog",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"onChangePrimaryAxis",docblock:null,modifiers:[],params:[{name:"value",optional:!1,type:{name:"string"}}],returns:{type:{name:"void"}}},{name:"syncTrackScrollPos",docblock:null,modifiers:[],params:[{name:"iWellLog",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"syncTrackSelection",docblock:null,modifiers:[],params:[{name:"iWellLog",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"getCommonContentBaseDomain",docblock:null,modifiers:[],params:[],returns:{type:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]}}},{name:"syncContentBaseDomain",docblock:null,modifiers:[],params:[],returns:{type:{name:"boolean"}}},{name:"makeFlattingCoeffs",docblock:null,modifiers:[],params:[],returns:{type:{name:"signature",type:"object",raw:"{\n    A: number[][];\n    B: number[][];\n    newBaseDomain: [number, number][]; // not used\n}",signature:{properties:[{key:"A",value:{name:"Array",elements:[{name:"Array",elements:[{name:"number"}],raw:"number[]"}],raw:"number[][]",required:!0}},{key:"B",value:{name:"Array",elements:[{name:"Array",elements:[{name:"number"}],raw:"number[]"}],raw:"number[][]",required:!0}},{key:"newBaseDomain",value:{name:"Array",elements:[{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]}],raw:"[number, number][]",required:!0}}]}}}},{name:"syncContentScrollPos",docblock:null,modifiers:[],params:[{name:"iWellLog",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"syncContentSelection",docblock:null,modifiers:[],params:[{name:"iWellLog",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"syncTemplate",docblock:null,modifiers:[],params:[{name:"iWellLog",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"setControllersZoom",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"setControllersSelection",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"createView",docblock:null,modifiers:[],params:[{name:"index",optional:!1,type:{name:"number"}}],returns:{type:{name:"ReactNode"}}},{name:"createSpacer",docblock:null,modifiers:[],params:[{name:"index",optional:!1,type:{name:"number"}}],returns:{type:{name:"ReactNode"}}}],displayName:"SyncLogViewer",props:{welllogs:{required:!1,tsType:{name:"Array",elements:[{name:"unknown"}],raw:"(WellLogSet | WellLogSet[])[]"},description:"An array of JSON well log objects. A synced well log is created per entry.\n@deprecated use wellLogCollections instead",type:{name:"array"}},wellLogCollections:{required:!1,tsType:{name:"Array",elements:[{name:"Array",elements:[{name:"signature",type:"object",raw:"{\n    header: WellLogHeader;\n    curves: WellLogCurve[];\n    data: WellLogDataRow[];\n\n    metadata_discrete?: Record<string, WellLogMetadataDiscrete>;\n}",signature:{properties:[{key:"header",value:{name:"signature",type:"object",raw:"{\n    name?: string; // Log name\n    description?: string; // Log description\n    externalIds?: Record<string, string>; // IDs within external storage, key being the storage name, and value being the ID.\n    well?: string; // Well name\n    wellbore?: string; // Wellbore name\n    filed?: string; // Field name\n    country?: string; // Country of operation\n    date?: datetime; // Logging date\n    operator?: string; // Operator company name\n    serviceCompany?: string; // Service company name\n    runNumber?: string; // Run number\n    elevation?: float; // Vertical distance between measured depth 0.0 and mean sea level in SI unit (meters)\n    source?: string; // Source system or process of this log\n    startIndex?: number /*According to index value type*/; // Value of the first index. Unit according to index curve.\n    endIndex?: number /*According to index value type*/; // Value of the last index. Unit according to index curve.\n    step?: number /*According to index value type*/; // Distance between indices if regularly sampled. Unit according to index curve. If log is time based, milliseconds assumed.\n    dataUri?: string; //\tPoint to data source in case this is kept separate. Can be absolute or relative according to the URI specification.\n    //...\n}",signature:{properties:[{key:"name",value:{name:"string",required:!1}},{key:"description",value:{name:"string",required:!1}},{key:"externalIds",value:{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>",required:!1}},{key:"well",value:{name:"string",required:!1}},{key:"wellbore",value:{name:"string",required:!1}},{key:"filed",value:{name:"string",required:!1}},{key:"country",value:{name:"string",required:!1}},{key:"date",value:{name:"string",required:!1}},{key:"operator",value:{name:"string",required:!1}},{key:"serviceCompany",value:{name:"string",required:!1}},{key:"runNumber",value:{name:"string",required:!1}},{key:"elevation",value:{name:"number",required:!1}},{key:"source",value:{name:"string",required:!1}},{key:"startIndex",value:{name:"number",required:!1}},{key:"endIndex",value:{name:"number",required:!1}},{key:"step",value:{name:"number",required:!1}},{key:"dataUri",value:{name:"string",required:!1}}]},required:!0}},{key:"curves",value:{name:"Array",elements:[{name:"signature",type:"object",raw:"{\n    name: string; // Curve name or mnemonic. Mandatory. Non-null.\n    description?: string | null; // Curve description. Optional.\n    quantity?: string | null; // Curve quantity such as length, pressure, force etc. Optional.\n    unit?: string | null; // Unit of measurement such as m, ft, bar, etc. Optional.\n    valueType?: string | null; // Curve value type: float, integer, string, datetime or boolean. Non-null. Optional. float assumed if not present.\n    dimensions?: integer; //  \tNumber of dimensions. [1,>. Non-null. Optional. 1 assumed if not present.\n    // Not supported yet:\n    //axis?: \tarray of curve definition; \t// A detailed description of the multi-dimensional structure of the curve in case this spans multiple axes. One element per axis. The combined product of the axis diemsnsions elements must equal the dimensions of the curve. Optional.\n    //maxSize?: integer; \t// Maximum storage size (number of bytes) for UTF-8 string data. Used with binary storage in order to align the curve data. [0,>. Optional. 20 assumed if not present. Ignored for curves where valueType is other than string.\n}",signature:{properties:[{key:"name",value:{name:"string",required:!0}},{key:"description",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"quantity",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"unit",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"valueType",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"dimensions",value:{name:"number",required:!1}}]}}],raw:"WellLogCurve[]",required:!0}},{key:"data",value:{name:"Array",elements:[{name:"Array",elements:[{name:"unknown"}],raw:"(number | string | null)[]"}],raw:"WellLogDataRow[]",required:!0}},{key:"metadata_discrete",value:{name:"Record",elements:[{name:"string"},{name:"signature",type:"object",raw:'{\n    attributes: string[] /* ["color", "code" ] */;\n    objects: WellLogMetadataDiscreteObjects;\n}',signature:{properties:[{key:"attributes",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!0}},{key:"objects",value:{name:"Record",elements:[{name:"string"},{name:"Array",elements:[{name:"unknown"}],raw:"(number[] | number)[]"}],raw:"Record<\n    string,\n    (number[] | number)[]\n>",required:!0}}]}}],raw:"Record<string, WellLogMetadataDiscrete>",required:!1}}]}}],raw:"WellLogSet[]"}],raw:"WellLogSet[][]"},description:"An array of collections of well log sets. A synced well log is created per entry",type:{name:"arrayOf",value:{name:"arrayOf",value:{name:"object"}}}},templates:{required:!0,tsType:{name:"Array",elements:[{name:"Template"}],raw:"Template[]"},description:"Prop containing track templates data.",type:{name:"array"}},colorMapFunctions:{required:!0,tsType:{name:"Array",elements:[{name:"union",raw:"colorTablesObj | ColorFunction",elements:[{name:"colorTablesObj"},{name:"signature",type:"object",raw:"{\n    name: string;\n    func: (v: number) => [number, number, number]; // input number is between 0.0 and 1.0; returned numbers are between 0 and 255\n}",signature:{properties:[{key:"name",value:{name:"string",required:!0}},{key:"func",value:{name:"signature",type:"function",raw:"(v: number) => [number, number, number]",signature:{arguments:[{type:{name:"number"},name:"v"}],return:{name:"tuple",raw:"[number, number, number]",elements:[{name:"number"},{name:"number"},{name:"number"}]}},required:!0}}]}}]}],raw:"ColorMapFunction[]"},description:"Prop containing color function/table array.",type:{name:"arrayOf",value:{name:"custom",raw:"ColorFunctionType"}}},viewTitles:{required:!1,tsType:{name:"union",raw:"boolean | (boolean | string | JSX.Element)[]",elements:[{name:"boolean"},{name:"Array",elements:[{name:"unknown"}],raw:"(boolean | string | JSX.Element)[]"}]},description:"Set to true for default titles or to array of individual well log titles",type:{name:"union",value:[{name:"bool"},{name:"arrayOf",value:{name:"union",value:[{name:"bool"},{name:"string"},{name:"object"}]}}]}},wellpicks:{required:!1,tsType:{name:"Array",elements:[{name:"WellPickProps"}],raw:"WellPickProps[]"},description:"Well Picks data array",type:{name:"arrayOf",value:{name:"custom",raw:"WellPickPropsType"}}},patternsTable:{required:!1,tsType:{name:"PatternsTable"},description:"Patterns table",type:{name:"shape",value:{patternSize:{name:"number",required:!0},patternImages:{name:"arrayOf",value:{name:"string"},required:!0},patternNames:{name:"arrayOf",value:{name:"string"},required:!1}}}},patterns:{required:!1,tsType:{name:"Array",elements:[{name:"tuple",raw:"[string, number]",elements:[{name:"string"},{name:"number"}]}],raw:"Pattern[]"},description:"Horizon to pattern index map",type:{name:"arrayOf",value:{name:"custom",raw:"PatternsType"}}},wellpickFlatting:{required:!1,tsType:{name:"Array",elements:[{name:"string"}],raw:"string[]"},description:"Horizon names for wellpick flatting (pan and zoom)",type:{name:"arrayOf",value:{name:"string"}}},spacers:{required:!1,tsType:{name:"union",raw:"boolean | number | number[]",elements:[{name:"boolean"},{name:"number"},{name:"Array",elements:[{name:"number"}],raw:"number[]"}]},description:"Set to true or to spacer width or to array of widths if WellLogSpacers should be used",type:{name:"union",value:[{name:"bool"},{name:"number"},{name:"arrayOf",value:{name:"number"}}]}},wellDistances:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    units: string;\n    distances: (number | undefined)[];\n}",signature:{properties:[{key:"units",value:{name:"string",required:!0}},{key:"distances",value:{name:"Array",elements:[{name:"unknown"}],raw:"(number | undefined)[]",required:!0}}]}},description:"Distanses between wells to show on the spacers",type:{name:"shape",value:{units:{name:"string",required:!0},distances:{name:"array",required:!0}}}},horizontal:{required:!1,tsType:{name:"boolean"},description:"Orientation of the track plots on the screen.",type:{name:"bool"}},syncTrackPos:{required:!1,tsType:{name:"boolean"},description:"Synchronize the first visible track number in views",type:{name:"bool"}},syncContentDomain:{required:!1,tsType:{name:"boolean"},description:"Synchronize the visible area in views",type:{name:"bool"}},syncContentSelection:{required:!1,tsType:{name:"boolean"},description:"Synchronize the selection (current mouse hover) in views",type:{name:"bool"}},syncTemplate:{required:!1,tsType:{name:"boolean"},description:"Synchronize templates in views",type:{name:"bool"}},primaryAxis:{required:!1,tsType:{name:"string"},description:'Primary axis id: "md", "tvd", "time"... Default is the first available from axisMnemos',type:{name:"string"}},axisTitles:{required:!1,tsType:{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"},description:"Log mnemonics for axes",type:{name:"object"}},axisMnemos:{required:!1,tsType:{name:"Record",elements:[{name:"string"},{name:"Array",elements:[{name:"string"}],raw:"string[]"}],raw:"Record<string, string[]>"},description:"Names for axes",type:{name:"object"}},domain:{required:!1,tsType:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]},description:"Initial visible range",type:{name:"arrayOf",value:{name:"number"}}},selection:{required:!1,tsType:{name:"tuple",raw:"[number | undefined, number | undefined]",elements:[{name:"union",raw:"number | undefined",elements:[{name:"number"},{name:"undefined"}]},{name:"union",raw:"number | undefined",elements:[{name:"number"},{name:"undefined"}]}]},description:"Initial selected range",type:{name:"arrayOf",value:{name:"number"}}},welllogOptions:{required:!1,tsType:{name:"WellLogViewOptions"},description:"Options for well log views",type:{name:"shape",value:{maxContentZoom:{name:"number",description:"The maximum zoom value",required:!1},maxVisibleTrackNum:{name:"number",description:"The maximum number of visible tracks",required:!1},checkDatafileSchema:{name:"bool",description:"Validate JSON datafile against schema",required:!1},hideTrackTitle:{name:"bool",description:"Hide titles of the track. Default is false",required:!1},hideTrackLegend:{name:"bool",description:"Hide legends of the track. Default is false",required:!1},hideCurrentPosition:{name:"bool",description:"Hide current position. Default is false",required:!1},hideSelectionInterval:{name:"bool",description:"Hide selection interval. Default is false",required:!1}}}},spacerOptions:{required:!1,tsType:{name:"WellLogSpacerOptions"},description:"Options for well log spacers"},readoutOptions:{required:!1,tsType:{name:"InfoOptions"},description:"Options for readout",type:{name:"shape",value:{allTracks:{name:"bool",description:"Show not only visible tracks",required:!1},grouping:{name:"string",description:'how group values. "" | "track"',required:!1}}}},layout:{required:!1,tsType:{name:"ViewerLayout",elements:[{name:"SyncLogViewer"}],raw:"ViewerLayout<SyncLogViewer>"},description:"Side panels layout (default is layout with default right panel)"},onInfo:{required:!1,tsType:{name:"signature",type:"function",raw:"(\n    iWellLog: number,\n    x: number,\n    logController: LogViewer,\n    iFrom: number,\n    iTo: number\n) => void",signature:{arguments:[{type:{name:"number"},name:"iWellLog"},{type:{name:"number"},name:"x"},{type:{name:"LogViewer"},name:"logController"},{type:{name:"number"},name:"iFrom"},{type:{name:"number"},name:"iTo"}],return:{name:"void"}}},description:""},onInfoFilled:{required:!1,tsType:{name:"signature",type:"function",raw:"(iWellLog: number, infos: Info[]) => void",signature:{arguments:[{type:{name:"number"},name:"iWellLog"},{type:{name:"Array",elements:[{name:"Info"}],raw:"Info[]"},name:"infos"}],return:{name:"void"}}},description:""},onContentRescale:{required:!1,tsType:{name:"signature",type:"function",raw:"(iWellLog: number) => void",signature:{arguments:[{type:{name:"number"},name:"iWellLog"}],return:{name:"void"}}},description:""},onContentSelection:{required:!1,tsType:{name:"signature",type:"function",raw:"(iWellLog: number) => void",signature:{arguments:[{type:{name:"number"},name:"iWellLog"}],return:{name:"void"}}},description:""},onTemplateChanged:{required:!1,tsType:{name:"signature",type:"function",raw:"(iWellLog: number) => void",signature:{arguments:[{type:{name:"number"},name:"iWellLog"}],return:{name:"void"}}},description:""},onTrackMouseEvent:{required:!1,tsType:{name:"signature",type:"function",raw:"(wellLogView: WellLogView, ev: TrackMouseEvent) => void",signature:{arguments:[{type:{name:"WellLogView"},name:"wellLogView"},{type:{name:"TrackMouseEvent"},name:"ev"}],return:{name:"void"}}},description:""},onTrackMouseLeaveEvent:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""},onCreateController:{required:!1,tsType:{name:"signature",type:"function",raw:"(\n    iWellLog: number,\n    controller: WellLogController\n) => void",signature:{arguments:[{type:{name:"number"},name:"iWellLog"},{type:{name:"WellLogController"},name:"controller"}],return:{name:"void"}}},description:""},onDeleteController:{required:!1,tsType:{name:"signature",type:"function",raw:"(\n    iWellLog: number,\n    controller: WellLogController\n) => void",signature:{arguments:[{type:{name:"number"},name:"iWellLog"},{type:{name:"WellLogController"},name:"controller"}],return:{name:"void"}}},description:""},maxContentZoom:{description:"The maximum zoom value",type:{name:"number"},required:!1}}}}}]);