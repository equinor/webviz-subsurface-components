"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[540],{"./packages/subsurface-viewer/src/SubsurfaceViewer.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DepthTest:function(){return DepthTest},MouseEvent:function(){return MouseEvent},MultiViewAnnotation:function(){return MultiViewAnnotation},TooltipApi:function(){return TooltipApi},TooltipStyle:function(){return TooltipStyle},ViewObjectInitializedAsEmpty:function(){return ViewObjectInitializedAsEmpty},ViewStateSynchronization:function(){return ViewStateSynchronization},__namedExportsOrder:function(){return __namedExportsOrder},customizedCameraPosition:function(){return customizedCameraPosition},default:function(){return SubsurfaceViewer_stories}});var react=__webpack_require__("./node_modules/react/index.js");function formatDecimalParts(x,p){if((i=(x=p?x.toExponential(p-1):x.toExponential()).indexOf("e"))<0)return null;var i,coefficient=x.slice(0,i);return[coefficient.length>1?coefficient[0]+coefficient.slice(2):coefficient,+x.slice(i+1)]}var prefixExponent,re=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function formatSpecifier(specifier){if(!(match=re.exec(specifier)))throw new Error("invalid format: "+specifier);var match;return new FormatSpecifier({fill:match[1],align:match[2],sign:match[3],symbol:match[4],zero:match[5],width:match[6],comma:match[7],precision:match[8]&&match[8].slice(1),trim:match[9],type:match[10]})}function FormatSpecifier(specifier){this.fill=void 0===specifier.fill?" ":specifier.fill+"",this.align=void 0===specifier.align?">":specifier.align+"",this.sign=void 0===specifier.sign?"-":specifier.sign+"",this.symbol=void 0===specifier.symbol?"":specifier.symbol+"",this.zero=!!specifier.zero,this.width=void 0===specifier.width?void 0:+specifier.width,this.comma=!!specifier.comma,this.precision=void 0===specifier.precision?void 0:+specifier.precision,this.trim=!!specifier.trim,this.type=void 0===specifier.type?"":specifier.type+""}function formatRounded(x,p){var d=formatDecimalParts(x,p);if(!d)return x+"";var coefficient=d[0],exponent=d[1];return exponent<0?"0."+new Array(-exponent).join("0")+coefficient:coefficient.length>exponent+1?coefficient.slice(0,exponent+1)+"."+coefficient.slice(exponent+1):coefficient+new Array(exponent-coefficient.length+2).join("0")}formatSpecifier.prototype=FormatSpecifier.prototype,FormatSpecifier.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var formatTypes={"%":function(x,p){return(100*x).toFixed(p)},b:function(x){return Math.round(x).toString(2)},c:function(x){return x+""},d:function formatDecimal(x){return Math.abs(x=Math.round(x))>=1e21?x.toLocaleString("en").replace(/,/g,""):x.toString(10)},e:function(x,p){return x.toExponential(p)},f:function(x,p){return x.toFixed(p)},g:function(x,p){return x.toPrecision(p)},o:function(x){return Math.round(x).toString(8)},p:function(x,p){return formatRounded(100*x,p)},r:formatRounded,s:function formatPrefixAuto(x,p){var d=formatDecimalParts(x,p);if(!d)return x+"";var coefficient=d[0],exponent=d[1],i=exponent-(prefixExponent=3*Math.max(-8,Math.min(8,Math.floor(exponent/3))))+1,n=coefficient.length;return i===n?coefficient:i>n?coefficient+new Array(i-n+1).join("0"):i>0?coefficient.slice(0,i)+"."+coefficient.slice(i):"0."+new Array(1-i).join("0")+formatDecimalParts(x,Math.max(0,p+i-1))[0]},X:function(x){return Math.round(x).toString(16).toUpperCase()},x:function(x){return Math.round(x).toString(16)}};function identity(x){return x}var defaultLocale_locale,format,map=Array.prototype.map,prefixes=["y","z","a","f","p","n","Âµ","m","","k","M","G","T","P","E","Z","Y"];function locale(locale){var group=void 0===locale.grouping||void 0===locale.thousands?identity:function formatGroup(grouping,thousands){return function(value,width){for(var i=value.length,t=[],j=0,g=grouping[0],length=0;i>0&&g>0&&(length+g+1>width&&(g=Math.max(1,width-length)),t.push(value.substring(i-=g,i+g)),!((length+=g+1)>width));)g=grouping[j=(j+1)%grouping.length];return t.reverse().join(thousands)}}(map.call(locale.grouping,Number),locale.thousands+""),currencyPrefix=void 0===locale.currency?"":locale.currency[0]+"",currencySuffix=void 0===locale.currency?"":locale.currency[1]+"",decimal=void 0===locale.decimal?".":locale.decimal+"",numerals=void 0===locale.numerals?identity:function formatNumerals(numerals){return function(value){return value.replace(/[0-9]/g,(function(i){return numerals[+i]}))}}(map.call(locale.numerals,String)),percent=void 0===locale.percent?"%":locale.percent+"",minus=void 0===locale.minus?"-":locale.minus+"",nan=void 0===locale.nan?"NaN":locale.nan+"";function newFormat(specifier){var fill=(specifier=formatSpecifier(specifier)).fill,align=specifier.align,sign=specifier.sign,symbol=specifier.symbol,zero=specifier.zero,width=specifier.width,comma=specifier.comma,precision=specifier.precision,trim=specifier.trim,type=specifier.type;"n"===type?(comma=!0,type="g"):formatTypes[type]||(void 0===precision&&(precision=12),trim=!0,type="g"),(zero||"0"===fill&&"="===align)&&(zero=!0,fill="0",align="=");var prefix="$"===symbol?currencyPrefix:"#"===symbol&&/[boxX]/.test(type)?"0"+type.toLowerCase():"",suffix="$"===symbol?currencySuffix:/[%p]/.test(type)?percent:"",formatType=formatTypes[type],maybeSuffix=/[defgprs%]/.test(type);function format(value){var i,n,c,valuePrefix=prefix,valueSuffix=suffix;if("c"===type)valueSuffix=formatType(value)+valueSuffix,value="";else{var valueNegative=(value=+value)<0||1/value<0;if(value=isNaN(value)?nan:formatType(Math.abs(value),precision),trim&&(value=function formatTrim(s){out:for(var i1,n=s.length,i=1,i0=-1;i<n;++i)switch(s[i]){case".":i0=i1=i;break;case"0":0===i0&&(i0=i),i1=i;break;default:if(!+s[i])break out;i0>0&&(i0=0)}return i0>0?s.slice(0,i0)+s.slice(i1+1):s}(value)),valueNegative&&0==+value&&"+"!==sign&&(valueNegative=!1),valuePrefix=(valueNegative?"("===sign?sign:minus:"-"===sign||"("===sign?"":sign)+valuePrefix,valueSuffix=("s"===type?prefixes[8+prefixExponent/3]:"")+valueSuffix+(valueNegative&&"("===sign?")":""),maybeSuffix)for(i=-1,n=value.length;++i<n;)if(48>(c=value.charCodeAt(i))||c>57){valueSuffix=(46===c?decimal+value.slice(i+1):value.slice(i))+valueSuffix,value=value.slice(0,i);break}}comma&&!zero&&(value=group(value,1/0));var length=valuePrefix.length+value.length+valueSuffix.length,padding=length<width?new Array(width-length+1).join(fill):"";switch(comma&&zero&&(value=group(padding+value,padding.length?width-valueSuffix.length:1/0),padding=""),align){case"<":value=valuePrefix+value+valueSuffix+padding;break;case"=":value=valuePrefix+padding+value+valueSuffix;break;case"^":value=padding.slice(0,length=padding.length>>1)+valuePrefix+value+valueSuffix+padding.slice(length);break;default:value=padding+valuePrefix+value+valueSuffix}return numerals(value)}return precision=void 0===precision?6:/[gprs]/.test(type)?Math.max(1,Math.min(21,precision)):Math.max(0,Math.min(20,precision)),format.toString=function(){return specifier+""},format}return{format:newFormat,formatPrefix:function formatPrefix(specifier,value){var f=newFormat(((specifier=formatSpecifier(specifier)).type="f",specifier)),e=3*Math.max(-8,Math.min(8,Math.floor(function exponent(x){return(x=formatDecimalParts(Math.abs(x)))?x[1]:NaN}(value)/3))),k=Math.pow(10,-e),prefix=prefixes[8+e/3];return function(value){return f(k*value)+prefix}}}}!function defaultLocale(definition){return defaultLocale_locale=locale(definition),format=defaultLocale_locale.format,defaultLocale_locale.formatPrefix,defaultLocale_locale}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"});var view=__webpack_require__("./node_modules/@deck.gl/core/dist/esm/views/view.js"),dist=__webpack_require__("./node_modules/@emerson-eps/color-tables/dist/index.js"),SubsurfaceViewer=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),src_layers=__webpack_require__("./packages/subsurface-viewer/src/layers/index.ts"),InfoCard=__webpack_require__("./packages/subsurface-viewer/src/components/InfoCard.tsx"),ViewFooter=__webpack_require__("./packages/subsurface-viewer/src/components/ViewFooter.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}var SubsurfaceViewer_stories={parameters:{storySource:{source:'function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React, { useCallback, useMemo, useState } from "react";\nimport { format } from "d3-format";\nimport { View } from "@deck.gl/core/typed";\nimport { ContinuousLegend } from "@emerson-eps/color-tables";\nimport SubsurfaceViewer from "./SubsurfaceViewer";\nimport { WellsLayer, MapLayer } from "./layers";\nimport InfoCard from "./components/InfoCard";\nimport { ViewFooter } from "./components/ViewFooter";\nexport default {\n  component: SubsurfaceViewer,\n  title: "SubsurfaceViewer"\n};\nconst defaultWellsProps = {\n  id: "volve-wells",\n  data: "./volve_wells.json"\n};\nconst defaultWellsLayer = new WellsLayer({\n  ...defaultWellsProps\n});\nconst defaultProps = {\n  id: "volve-wells",\n  bounds: [432150, 6475800, 439400, 6481500],\n  layers: [defaultWellsLayer]\n};\nconst wellsLayerWithlogs = new WellsLayer({\n  ...defaultWellsProps,\n  logData: "./volve_logs.json",\n  logrunName: "BLOCKING",\n  logName: "PORO",\n  logColor: "Physics"\n});\nconst Template = args => /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\nfunction mdTooltip(info) {\n  if (!info.picked) return null;\n  const value = info?.properties?.[0].value;\n  if (!value) return null;\n  const f = format(".2f");\n  const niceValue = f(+value);\n  return "MD: " + niceValue;\n}\nexport const TooltipApi = Template.bind({});\nTooltipApi.args = {\n  ...defaultProps,\n  layers: [new WellsLayer({\n    ...defaultWellsProps,\n    lineStyle: {\n      width: 7\n    }\n  })],\n  getTooltip: mdTooltip,\n  bounds: [433000, 6476000, 439000, 6480000]\n};\nTooltipApi.parameters = {\n  docs: {\n    description: {\n      story: "Example of overriding the default tooltip, showing measured depth (MD) instead of the default bahaviour, which is to show the well name."\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nexport const TooltipStyle = Template.bind({});\nconst processPropInfo = (properties, filter) => {\n  if (!properties) {\n    return "";\n  }\n  let outputString = "";\n  if (typeof filter == "boolean") {\n    if (filter) {\n      properties.forEach(ppobj => {\n        outputString += `\\n${ppobj["name"]} : ${ppobj["value"]}`;\n      });\n    }\n  } else {\n    // filter is not boolean - thus it is a string array and we should check each property\n    properties.forEach(ppobj => {\n      if (filter.includes(ppobj["name"])) {\n        outputString += `\\n${ppobj["name"]} : ${ppobj["value"]}`;\n      }\n    });\n  }\n  return outputString;\n};\nconst tooltipImpFunc = info => {\n  if (!info.picked || !info.layer) {\n    return null;\n  }\n  const outputObject = {};\n  const layerName = info.layer.constructor.name;\n  let outputString = "";\n  if (layerName === "Map3DLayer") {\n    const layerProps = info.layer.props;\n    const layerName = layerProps.name;\n    const properties = info.properties;\n    outputString += `Property: ${layerName}`;\n    outputString += processPropInfo(properties, true);\n  } else if (layerName === "WellsLayer") {\n    const wellsPickInfo = info;\n    const wellsPickInfoObject = info.object;\n    const wellProperties = wellsPickInfoObject.properties;\n    const name = wellProperties.name;\n    outputString += `Well: ${name || ""}`;\n    if (wellsPickInfo.featureType !== "points") {\n      outputString += processPropInfo(wellsPickInfo.properties, true);\n    }\n  }\n  outputObject["text"] = outputString;\n  outputObject["style"] = {\n    color: "yellow"\n  };\n  return outputObject;\n};\nTooltipStyle.args = {\n  ...defaultProps,\n  layers: [new WellsLayer({\n    ...defaultWellsProps,\n    lineStyle: {\n      width: 7\n    }\n  })],\n  getTooltip: tooltipImpFunc,\n  bounds: [433000, 6476000, 439000, 6480000]\n};\nTooltipStyle.parameters = {\n  docs: {\n    description: {\n      story: "Example of overriding tooltip style."\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nconst CustomTemplate = args => {\n  const [state, setState] = React.useState(args.cameraPosition);\n  const getCameraPosition = React.useCallback(input => {\n    setState(input);\n    return input;\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({}, args, {\n    cameraPosition: args.cameraPosition,\n    getCameraPosition: getCameraPosition\n  })), /*#__PURE__*/React.createElement("div", {\n    style: {\n      position: "absolute",\n      marginLeft: 200\n    }\n  }, /*#__PURE__*/React.createElement("div", null, "zoom: ", state?.zoom), /*#__PURE__*/React.createElement("div", null, "rotationX: ", state?.rotationX), /*#__PURE__*/React.createElement("div", null, "rotationOrbit: ", state?.rotationOrbit), /*#__PURE__*/React.createElement("div", null, "targetX: ", state?.target[0]), /*#__PURE__*/React.createElement("div", null, "targetY: ", state?.target[1])));\n};\nexport const customizedCameraPosition = CustomTemplate.bind({});\nconst cameraPosition = {\n  target: [437500, 6475000],\n  zoom: -5.0,\n  rotationX: 90,\n  rotationOrbit: 0\n};\ncustomizedCameraPosition.args = {\n  ...defaultProps,\n  cameraPosition\n};\nconst mapProps = {\n  id: "kh_netmap",\n  meshData: "hugin_depth_25_m.float32",\n  frame: {\n    origin: [432150, 6475800],\n    count: [291, 229],\n    increment: [25, 25],\n    rotDeg: 0\n  },\n  propertiesData: "kh_netmap_25_m.float32",\n  contours: [0, 100],\n  material: false\n};\nconst netmapLayer = new MapLayer({\n  ...mapProps\n});\nconst huginLayer = new MapLayer({\n  ...mapProps,\n  id: "hugin",\n  propertiesData: "hugin_depth_25_m.float32"\n});\nconst MultiViewAnnotationTemplate = args => /*#__PURE__*/React.createElement(SubsurfaceViewer, args, /*#__PURE__*/React.createElement(View, {\n  id: "view_1"\n}, /*#__PURE__*/React.createElement(ContinuousLegend, {\n  min: -3071,\n  max: 41048\n}), /*#__PURE__*/React.createElement(ViewFooter, null, "kH netmap")), /*#__PURE__*/React.createElement(View, {\n  id: "view_2"\n}, /*#__PURE__*/React.createElement(ContinuousLegend, {\n  min: 2725,\n  max: 3396\n}), /*#__PURE__*/React.createElement(ViewFooter, null, "Hugin")));\nexport const MultiViewAnnotation = MultiViewAnnotationTemplate.bind({});\nMultiViewAnnotation.args = {\n  id: "multi_view_annotation",\n  layers: [netmapLayer, huginLayer],\n  views: {\n    layout: [1, 2],\n    showLabel: true,\n    viewports: [{\n      id: "view_1",\n      layerIds: ["hugin"]\n    }, {\n      id: "view_2",\n      layerIds: ["kh_netmap"]\n    }]\n  }\n};\nexport const ViewObjectInitializedAsEmpty = MultiViewAnnotationTemplate.bind({});\nViewObjectInitializedAsEmpty.args = {\n  id: "view_initialized_as_empty",\n  layers: [netmapLayer, huginLayer],\n  views: {}\n};\nconst wellsLayerNoDepthTest = new WellsLayer({\n  ...defaultWellsProps,\n  id: "wells-layer-no-depth-test",\n  depthTest: false\n});\nexport const DepthTest = args => {\n  const props = {\n    ...args,\n    layers: [netmapLayer, defaultWellsLayer, wellsLayerNoDepthTest]\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(SubsurfaceViewer, props)), /*#__PURE__*/React.createElement("h4", null, "View on the right depthTest for the wells layer property is set to false and wells layer is given last so that it will be painted on top. On the left parts of the wells are hidden beneath the surface."));\n};\nDepthTest.args = {\n  id: "DepthTest",\n  views: {\n    layout: [1, 2],\n    viewports: [{\n      id: "view_1",\n      layerIds: ["hugin", "wells-layer"],\n      show3D: false,\n      isSync: true\n    }, {\n      id: "view_2",\n      layerIds: ["hugin", "wells-layer-no-depth-test"],\n      show3D: false,\n      isSync: true\n    }]\n  }\n};\nDepthTest.parameters = {\n  docs: {\n    description: {\n      story: "Example using the depthTest property. If this is set to false it will disable depth testing for the layer"\n    }\n  }\n};\nfunction getReadout(event) {\n  const pickInfo = event.infos;\n  return /*#__PURE__*/React.createElement(InfoCard, {\n    pickInfos: pickInfo\n  });\n}\nconst MouseEventStory = args => {\n  const [event, setEvent] = useState({\n    type: "click",\n    infos: []\n  });\n  const handleEvent = useCallback(event => {\n    setEvent(event);\n  }, [setEvent]);\n  const useProps = useMemo(() => {\n    const props = {\n      ...defaultProps,\n      layers: [wellsLayerWithlogs, netmapLayer],\n      onMouseEvent: handleEvent,\n      views: {\n        layout: [1, 1],\n        viewports: [{\n          id: "test",\n          show3D: args.show3d\n        }]\n      },\n      coords: {\n        visible: false\n      }\n    };\n    return props;\n  }, [handleEvent, args.show3d]);\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, useProps, /*#__PURE__*/React.createElement(View, {\n    id: "test"\n  }, getReadout(event), /*#__PURE__*/React.createElement(ViewFooter, null, "Mouse event example")));\n};\nexport const MouseEvent = args => {\n  return /*#__PURE__*/React.createElement(MouseEventStory, args);\n};\nMouseEvent.args = {\n  show3d: true\n};\nconst ViewStateSynchronizationStory = args => {\n  const subsurfaceViewerArgs = {\n    id: "view_state_synchronization",\n    layers: [netmapLayer, huginLayer, defaultWellsLayer],\n    views: {\n      layout: [2, 2],\n      viewports: [{\n        id: "view_1",\n        layerIds: ["hugin"],\n        show3D: args.show3d,\n        isSync: args.sync.includes("view_1")\n      }, {\n        id: "view_2",\n        layerIds: ["kh_netmap"],\n        show3D: args.show3d,\n        isSync: args.sync.includes("view_2")\n      }, {\n        id: "view_3",\n        layerIds: ["volve-wells"],\n        show3D: args.show3d,\n        isSync: args.sync.includes("view_3")\n      }, {\n        id: "view_4",\n        layerIds: ["volve-wells", "hugin"],\n        show3D: args.show3d,\n        isSync: args.sync.includes("view_4")\n      }]\n    }\n  };\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, subsurfaceViewerArgs);\n};\nexport const ViewStateSynchronization = args => {\n  return /*#__PURE__*/React.createElement(ViewStateSynchronizationStory, args);\n};\nViewStateSynchronization.args = {\n  show3d: false,\n  sync: ["view_1", "view_2", "view_3", "view_4"]\n};\nViewStateSynchronization.argTypes = {\n  sync: {\n    options: ["view_1", "view_2", "view_3", "view_4"],\n    control: "check"\n  }\n};\nTooltipApi.parameters = {\n  ...TooltipApi.parameters,\n  docs: {\n    ...TooltipApi.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args} />",\n      ...TooltipApi.parameters?.docs?.source\n    }\n  }\n};\nTooltipStyle.parameters = {\n  ...TooltipStyle.parameters,\n  docs: {\n    ...TooltipStyle.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args} />",\n      ...TooltipStyle.parameters?.docs?.source\n    }\n  }\n};\ncustomizedCameraPosition.parameters = {\n  ...customizedCameraPosition.parameters,\n  docs: {\n    ...customizedCameraPosition.parameters?.docs,\n    source: {\n      originalSource: "args => {\\n  const [state, setState] = React.useState(args.cameraPosition);\\n  const getCameraPosition = React.useCallback((input: ViewStateType) => {\\n    setState(input);\\n    return input;\\n  }, []);\\n  return <>\\n            <SubsurfaceViewer {...args} cameraPosition={args.cameraPosition} getCameraPosition={getCameraPosition} />\\n            <div style={{\\n      position: \\"absolute\\",\\n      marginLeft: 200\\n    }}>\\n                <div>zoom: {state?.zoom}</div>\\n                <div>rotationX: {state?.rotationX}</div>\\n                <div>rotationOrbit: {state?.rotationOrbit}</div>\\n                <div>targetX: {state?.target[0]}</div>\\n                <div>targetY: {state?.target[1]}</div>\\n            </div>\\n        </>;\\n}",\n      ...customizedCameraPosition.parameters?.docs?.source\n    }\n  }\n};\nMultiViewAnnotation.parameters = {\n  ...MultiViewAnnotation.parameters,\n  docs: {\n    ...MultiViewAnnotation.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args}>\\n        {<View id=\\"view_1\\">\\n                <ContinuousLegend min={-3071} max={41048} />\\n                <ViewFooter>kH netmap</ViewFooter>\\n            </View>}\\n        {<View id=\\"view_2\\">\\n                <ContinuousLegend min={2725} max={3396} />\\n                <ViewFooter>Hugin</ViewFooter>\\n            </View>}\\n    </SubsurfaceViewer>",\n      ...MultiViewAnnotation.parameters?.docs?.source\n    }\n  }\n};\nViewObjectInitializedAsEmpty.parameters = {\n  ...ViewObjectInitializedAsEmpty.parameters,\n  docs: {\n    ...ViewObjectInitializedAsEmpty.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args}>\\n        {<View id=\\"view_1\\">\\n                <ContinuousLegend min={-3071} max={41048} />\\n                <ViewFooter>kH netmap</ViewFooter>\\n            </View>}\\n        {<View id=\\"view_2\\">\\n                <ContinuousLegend min={2725} max={3396} />\\n                <ViewFooter>Hugin</ViewFooter>\\n            </View>}\\n    </SubsurfaceViewer>",\n      ...ViewObjectInitializedAsEmpty.parameters?.docs?.source\n    }\n  }\n};\nDepthTest.parameters = {\n  ...DepthTest.parameters,\n  docs: {\n    ...DepthTest.parameters?.docs,\n    source: {\n      originalSource: "args => {\\n  const props = {\\n    ...args,\\n    layers: [netmapLayer, defaultWellsLayer, wellsLayerNoDepthTest]\\n  };\\n  return <>\\n            <div>\\n                <SubsurfaceViewer {...props} />\\n            </div>\\n            <h4>\\n                View on the right depthTest for the wells layer property is set\\n                to false and wells layer is given last so that it will be\\n                painted on top. On the left parts of the wells are hidden\\n                beneath the surface.\\n            </h4>\\n        </>;\\n}",\n      ...DepthTest.parameters?.docs?.source\n    }\n  }\n};\nMouseEvent.parameters = {\n  ...MouseEvent.parameters,\n  docs: {\n    ...MouseEvent.parameters?.docs,\n    source: {\n      originalSource: "args => {\\n  return <MouseEventStory {...args} />;\\n}",\n      ...MouseEvent.parameters?.docs?.source\n    }\n  }\n};\nViewStateSynchronization.parameters = {\n  ...ViewStateSynchronization.parameters,\n  docs: {\n    ...ViewStateSynchronization.parameters?.docs,\n    source: {\n      originalSource: "args => {\\n  return <ViewStateSynchronizationStory {...args} />;\\n}",\n      ...ViewStateSynchronization.parameters?.docs?.source\n    }\n  }\n};',locationsMap:{"tooltip-api":{startLoc:{col:17,line:33},endLoc:{col:81,line:33},startBody:{col:17,line:33},endBody:{col:81,line:33}},"tooltip-style":{startLoc:{col:17,line:33},endLoc:{col:81,line:33},startBody:{col:17,line:33},endBody:{col:81,line:33}},"customized-camera-position":{startLoc:{col:23,line:134},endLoc:{col:1,line:149},startBody:{col:23,line:134},endBody:{col:1,line:149}},"multi-view-annotation":{startLoc:{col:36,line:182},endLoc:{col:65,line:192},startBody:{col:36,line:182},endBody:{col:65,line:192}},"view-object-initialized-as-empty":{startLoc:{col:36,line:182},endLoc:{col:65,line:192},startBody:{col:36,line:182},endBody:{col:65,line:192}},"depth-test":{startLoc:{col:25,line:220},endLoc:{col:1,line:226},startBody:{col:25,line:220},endBody:{col:1,line:226}},"mouse-event":{startLoc:{col:26,line:287},endLoc:{col:1,line:289},startBody:{col:26,line:287},endBody:{col:1,line:289}},"view-state-synchronization":{startLoc:{col:40,line:324},endLoc:{col:1,line:326},startBody:{col:40,line:324},endBody:{col:1,line:326}}}}},component:SubsurfaceViewer.Z,title:"SubsurfaceViewer"};const defaultWellsProps={id:"volve-wells",data:"./volve_wells.json"},defaultWellsLayer=new src_layers.WellsLayer({...defaultWellsProps}),defaultProps={id:"volve-wells",bounds:[432150,6475800,439400,6481500],layers:[defaultWellsLayer]},wellsLayerWithlogs=new src_layers.WellsLayer({...defaultWellsProps,logData:"./volve_logs.json",logrunName:"BLOCKING",logName:"PORO",logColor:"Physics"}),Template=args=>react.createElement(SubsurfaceViewer.Z,args);const TooltipApi=Template.bind({});TooltipApi.args={...defaultProps,layers:[new src_layers.WellsLayer({...defaultWellsProps,lineStyle:{width:7}})],getTooltip:function mdTooltip(info){if(!info.picked)return null;const value=info?.properties?.[0].value;return value?"MD: "+format(".2f")(+value):null},bounds:[433e3,6476e3,439e3,648e4]},TooltipApi.parameters={docs:{description:{story:"Example of overriding the default tooltip, showing measured depth (MD) instead of the default bahaviour, which is to show the well name."},inlineStories:!1,iframeHeight:500}};const TooltipStyle=Template.bind({}),processPropInfo=(properties,filter)=>{if(!properties)return"";let outputString="";return"boolean"==typeof filter?filter&&properties.forEach((ppobj=>{outputString+=`\n${ppobj.name} : ${ppobj.value}`})):properties.forEach((ppobj=>{filter.includes(ppobj.name)&&(outputString+=`\n${ppobj.name} : ${ppobj.value}`)})),outputString};TooltipStyle.args={...defaultProps,layers:[new src_layers.WellsLayer({...defaultWellsProps,lineStyle:{width:7}})],getTooltip:info=>{if(!info.picked||!info.layer)return null;const outputObject={},layerName=info.layer.constructor.name;let outputString="";if("Map3DLayer"===layerName){const layerName=info.layer.props.name,properties=info.properties;outputString+=`Property: ${layerName}`,outputString+=processPropInfo(properties,!0)}else if("WellsLayer"===layerName){const wellsPickInfo=info;outputString+=`Well: ${info.object.properties.name||""}`,"points"!==wellsPickInfo.featureType&&(outputString+=processPropInfo(wellsPickInfo.properties,!0))}return outputObject.text=outputString,outputObject.style={color:"yellow"},outputObject},bounds:[433e3,6476e3,439e3,648e4]},TooltipStyle.parameters={docs:{description:{story:"Example of overriding tooltip style."},inlineStories:!1,iframeHeight:500}};const customizedCameraPosition=(args=>{const[state,setState]=react.useState(args.cameraPosition),getCameraPosition=react.useCallback((input=>(setState(input),input)),[]);return react.createElement(react.Fragment,null,react.createElement(SubsurfaceViewer.Z,_extends({},args,{cameraPosition:args.cameraPosition,getCameraPosition:getCameraPosition})),react.createElement("div",{style:{position:"absolute",marginLeft:200}},react.createElement("div",null,"zoom: ",state?.zoom),react.createElement("div",null,"rotationX: ",state?.rotationX),react.createElement("div",null,"rotationOrbit: ",state?.rotationOrbit),react.createElement("div",null,"targetX: ",state?.target[0]),react.createElement("div",null,"targetY: ",state?.target[1])))}).bind({});customizedCameraPosition.args={...defaultProps,cameraPosition:{target:[437500,6475e3],zoom:-5,rotationX:90,rotationOrbit:0}};const mapProps={id:"kh_netmap",meshData:"hugin_depth_25_m.float32",frame:{origin:[432150,6475800],count:[291,229],increment:[25,25],rotDeg:0},propertiesData:"kh_netmap_25_m.float32",contours:[0,100],material:!1},netmapLayer=new src_layers.MapLayer({...mapProps}),huginLayer=new src_layers.MapLayer({...mapProps,id:"hugin",propertiesData:"hugin_depth_25_m.float32"}),MultiViewAnnotationTemplate=args=>react.createElement(SubsurfaceViewer.Z,args,react.createElement(view.Z,{id:"view_1"},react.createElement(dist.sG,{min:-3071,max:41048}),react.createElement(ViewFooter.n,null,"kH netmap")),react.createElement(view.Z,{id:"view_2"},react.createElement(dist.sG,{min:2725,max:3396}),react.createElement(ViewFooter.n,null,"Hugin"))),MultiViewAnnotation=MultiViewAnnotationTemplate.bind({});MultiViewAnnotation.args={id:"multi_view_annotation",layers:[netmapLayer,huginLayer],views:{layout:[1,2],showLabel:!0,viewports:[{id:"view_1",layerIds:["hugin"]},{id:"view_2",layerIds:["kh_netmap"]}]}};const ViewObjectInitializedAsEmpty=MultiViewAnnotationTemplate.bind({});ViewObjectInitializedAsEmpty.args={id:"view_initialized_as_empty",layers:[netmapLayer,huginLayer],views:{}};const wellsLayerNoDepthTest=new src_layers.WellsLayer({...defaultWellsProps,id:"wells-layer-no-depth-test",depthTest:!1}),DepthTest=args=>{const props={...args,layers:[netmapLayer,defaultWellsLayer,wellsLayerNoDepthTest]};return react.createElement(react.Fragment,null,react.createElement("div",null,react.createElement(SubsurfaceViewer.Z,props)),react.createElement("h4",null,"View on the right depthTest for the wells layer property is set to false and wells layer is given last so that it will be painted on top. On the left parts of the wells are hidden beneath the surface."))};DepthTest.args={id:"DepthTest",views:{layout:[1,2],viewports:[{id:"view_1",layerIds:["hugin","wells-layer"],show3D:!1,isSync:!0},{id:"view_2",layerIds:["hugin","wells-layer-no-depth-test"],show3D:!1,isSync:!0}]}},DepthTest.parameters={docs:{description:{story:"Example using the depthTest property. If this is set to false it will disable depth testing for the layer"}}};const MouseEventStory=args=>{const[event,setEvent]=(0,react.useState)({type:"click",infos:[]}),handleEvent=(0,react.useCallback)((event=>{setEvent(event)}),[setEvent]),useProps=(0,react.useMemo)((()=>({...defaultProps,layers:[wellsLayerWithlogs,netmapLayer],onMouseEvent:handleEvent,views:{layout:[1,1],viewports:[{id:"test",show3D:args.show3d}]},coords:{visible:!1}})),[handleEvent,args.show3d]);return react.createElement(SubsurfaceViewer.Z,useProps,react.createElement(view.Z,{id:"test"},function getReadout(event){const pickInfo=event.infos;return react.createElement(InfoCard.Z,{pickInfos:pickInfo})}(event),react.createElement(ViewFooter.n,null,"Mouse event example")))},MouseEvent=args=>react.createElement(MouseEventStory,args);MouseEvent.args={show3d:!0};const ViewStateSynchronizationStory=args=>{const subsurfaceViewerArgs={id:"view_state_synchronization",layers:[netmapLayer,huginLayer,defaultWellsLayer],views:{layout:[2,2],viewports:[{id:"view_1",layerIds:["hugin"],show3D:args.show3d,isSync:args.sync.includes("view_1")},{id:"view_2",layerIds:["kh_netmap"],show3D:args.show3d,isSync:args.sync.includes("view_2")},{id:"view_3",layerIds:["volve-wells"],show3D:args.show3d,isSync:args.sync.includes("view_3")},{id:"view_4",layerIds:["volve-wells","hugin"],show3D:args.show3d,isSync:args.sync.includes("view_4")}]}};return react.createElement(SubsurfaceViewer.Z,subsurfaceViewerArgs)},ViewStateSynchronization=args=>react.createElement(ViewStateSynchronizationStory,args);ViewStateSynchronization.args={show3d:!1,sync:["view_1","view_2","view_3","view_4"]},ViewStateSynchronization.argTypes={sync:{options:["view_1","view_2","view_3","view_4"],control:"check"}},TooltipApi.parameters={...TooltipApi.parameters,docs:{...TooltipApi.parameters?.docs,source:{originalSource:"args => <SubsurfaceViewer {...args} />",...TooltipApi.parameters?.docs?.source}}},TooltipStyle.parameters={...TooltipStyle.parameters,docs:{...TooltipStyle.parameters?.docs,source:{originalSource:"args => <SubsurfaceViewer {...args} />",...TooltipStyle.parameters?.docs?.source}}},customizedCameraPosition.parameters={...customizedCameraPosition.parameters,docs:{...customizedCameraPosition.parameters?.docs,source:{originalSource:'args => {\n  const [state, setState] = React.useState(args.cameraPosition);\n  const getCameraPosition = React.useCallback((input: ViewStateType) => {\n    setState(input);\n    return input;\n  }, []);\n  return <>\n            <SubsurfaceViewer {...args} cameraPosition={args.cameraPosition} getCameraPosition={getCameraPosition} />\n            <div style={{\n      position: "absolute",\n      marginLeft: 200\n    }}>\n                <div>zoom: {state?.zoom}</div>\n                <div>rotationX: {state?.rotationX}</div>\n                <div>rotationOrbit: {state?.rotationOrbit}</div>\n                <div>targetX: {state?.target[0]}</div>\n                <div>targetY: {state?.target[1]}</div>\n            </div>\n        </>;\n}',...customizedCameraPosition.parameters?.docs?.source}}},MultiViewAnnotation.parameters={...MultiViewAnnotation.parameters,docs:{...MultiViewAnnotation.parameters?.docs,source:{originalSource:'args => <SubsurfaceViewer {...args}>\n        {<View id="view_1">\n                <ContinuousLegend min={-3071} max={41048} />\n                <ViewFooter>kH netmap</ViewFooter>\n            </View>}\n        {<View id="view_2">\n                <ContinuousLegend min={2725} max={3396} />\n                <ViewFooter>Hugin</ViewFooter>\n            </View>}\n    </SubsurfaceViewer>',...MultiViewAnnotation.parameters?.docs?.source}}},ViewObjectInitializedAsEmpty.parameters={...ViewObjectInitializedAsEmpty.parameters,docs:{...ViewObjectInitializedAsEmpty.parameters?.docs,source:{originalSource:'args => <SubsurfaceViewer {...args}>\n        {<View id="view_1">\n                <ContinuousLegend min={-3071} max={41048} />\n                <ViewFooter>kH netmap</ViewFooter>\n            </View>}\n        {<View id="view_2">\n                <ContinuousLegend min={2725} max={3396} />\n                <ViewFooter>Hugin</ViewFooter>\n            </View>}\n    </SubsurfaceViewer>',...ViewObjectInitializedAsEmpty.parameters?.docs?.source}}},DepthTest.parameters={...DepthTest.parameters,docs:{...DepthTest.parameters?.docs,source:{originalSource:"args => {\n  const props = {\n    ...args,\n    layers: [netmapLayer, defaultWellsLayer, wellsLayerNoDepthTest]\n  };\n  return <>\n            <div>\n                <SubsurfaceViewer {...props} />\n            </div>\n            <h4>\n                View on the right depthTest for the wells layer property is set\n                to false and wells layer is given last so that it will be\n                painted on top. On the left parts of the wells are hidden\n                beneath the surface.\n            </h4>\n        </>;\n}",...DepthTest.parameters?.docs?.source}}},MouseEvent.parameters={...MouseEvent.parameters,docs:{...MouseEvent.parameters?.docs,source:{originalSource:"args => {\n  return <MouseEventStory {...args} />;\n}",...MouseEvent.parameters?.docs?.source}}},ViewStateSynchronization.parameters={...ViewStateSynchronization.parameters,docs:{...ViewStateSynchronization.parameters?.docs,source:{originalSource:"args => {\n  return <ViewStateSynchronizationStory {...args} />;\n}",...ViewStateSynchronization.parameters?.docs?.source}}};const __namedExportsOrder=["TooltipApi","TooltipStyle","customizedCameraPosition","MultiViewAnnotation","ViewObjectInitializedAsEmpty","DepthTest","MouseEvent","ViewStateSynchronization"]},"./packages/subsurface-viewer/src/components/ViewFooter.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{n:function(){return ViewFooter}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);const StyledViewFooter=(0,__webpack_require__("./node_modules/@mui/system/esm/styled.js").Z)("div")((({theme:theme})=>({position:"absolute",bottom:theme.spacing(0),right:theme.spacing(2),zIndex:999999,float:"right",backgroundColor:"#ffffffcc",color:"#000000ff",paddingLeft:"3px",display:"tableRow"}))),ViewFooter=({children:children})=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(StyledViewFooter,null,children);ViewFooter.propTypes={children:prop_types__WEBPACK_IMPORTED_MODULE_2___default().any};try{ViewFooter.displayName="ViewFooter",ViewFooter.__docgenInfo={description:"",displayName:"ViewFooter",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/components/ViewFooter.tsx#ViewFooter"]={docgenInfo:ViewFooter.__docgenInfo,name:"ViewFooter",path:"packages/subsurface-viewer/src/components/ViewFooter.tsx#ViewFooter"})}catch(__react_docgen_typescript_loader_error){}}}]);