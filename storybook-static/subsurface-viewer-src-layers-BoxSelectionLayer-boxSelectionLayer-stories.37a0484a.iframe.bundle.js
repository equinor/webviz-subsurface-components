"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[6115],{"./packages/subsurface-viewer/src/layers/BoxSelectionLayer/boxSelectionLayer.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:function(){return __namedExportsOrder},boxSelection:function(){return boxSelection},boxSelectionWithCallback:function(){return boxSelectionWithCallback}});var _mui_material_styles__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),_wells_wellsLayer__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/subsurface-viewer/src/layers/wells/wellsLayer.ts"),_boxSelectionLayer__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./packages/subsurface-viewer/src/layers/BoxSelectionLayer/boxSelectionLayer.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const classes={main:"boxSelectionLayer-main",legend:"boxSelectionLayer-legend"},Root=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_4__.ZP)("div")({[`& .${classes.main}`]:{height:500,border:"1px solid black",position:"relative"},[`& .${classes.legend}`]:{width:100,position:"absolute",top:"0",right:"0"}}),boxSelectionLayer=new _boxSelectionLayer__WEBPACK_IMPORTED_MODULE_3__.Z({visible:!0,layerIds:["wells"]}),wellsLayer=new _wells_wellsLayer__WEBPACK_IMPORTED_MODULE_2__.ZP({id:"wells",data:"./volve_wells.json"}),DECK_PROPS={id:"DeckGL-Map",bounds:[432205,6475078,437720,6481113],layers:[wellsLayer,boxSelectionLayer]};__webpack_exports__.default={parameters:{storySource:{source:'function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n // remove when ready to fix these.\n // remove when ready to fix these.\n\nimport { styled } from "@mui/material/styles";\nimport React from "react";\nimport SubsurfaceViewer from "../../SubsurfaceViewer";\nimport WellsLayer from "../wells/wellsLayer";\nimport BoxSelectionLayer from "./boxSelectionLayer";\nconst PREFIX = "boxSelectionLayer";\nconst classes = {\n  main: `${PREFIX}-main`,\n  legend: `${PREFIX}-legend`\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled("div")({\n  [`& .${classes.main}`]: {\n    height: 500,\n    border: "1px solid black",\n    position: "relative"\n  },\n  [`& .${classes.legend}`]: {\n    width: 100,\n    position: "absolute",\n    top: "0",\n    right: "0"\n  }\n});\nconst boxSelectionLayer = new BoxSelectionLayer({\n  visible: true,\n  layerIds: ["wells"]\n});\nconst wellsLayer = new WellsLayer({\n  id: "wells",\n  data: "./volve_wells.json"\n});\nconst DECK_PROPS = {\n  id: "DeckGL-Map",\n  bounds: [432205, 6475078, 437720, 6481113],\n  layers: [wellsLayer, boxSelectionLayer]\n};\nexport default {\n  component: SubsurfaceViewer,\n  title: "SubsurfaceViewer / Box Selection Layer"\n};\nexport const boxSelection = ({\n  enableSelection\n}) => {\n  const deckProps = React.useMemo(() => ({\n    ...DECK_PROPS,\n    layers: [wellsLayer, new BoxSelectionLayer({\n      layerIds: ["wells"],\n      visible: enableSelection\n    })]\n  }), [enableSelection]);\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, deckProps)));\n};\nboxSelection.args = {\n  enableSelection: true\n};\nexport const boxSelectionWithCallback = () => {\n  const [data, setData] = React.useState([]);\n  const getSelectedWellsDataCallBack = React.useCallback(pickingInfos => {\n    const selectedWells = pickingInfos.map(item => item.object).filter(item => item.type === "Feature").map(item => item.properties["name"]);\n    setData(selectedWells);\n  }, []);\n  const lassoArgsWithSelectedWellsDataCallback = {\n    ...DECK_PROPS,\n    layers: [wellsLayer, new BoxSelectionLayer({\n      visible: true,\n      handleSelection: getSelectedWellsDataCallBack,\n      layerIds: ["wells"]\n    })]\n  };\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({\n    id: "DeckGL-Map"\n  }, lassoArgsWithSelectedWellsDataCallback))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", null, "Selected Wells:"), /*#__PURE__*/React.createElement("ol", null, data.map(item => /*#__PURE__*/React.createElement("li", {\n    key: item\n  }, item)))));\n};\nboxSelection.parameters = {\n  ...boxSelection.parameters,\n  docs: {\n    ...boxSelection.parameters?.docs,\n    source: {\n      originalSource: "({\\n  enableSelection\\n}: {\\n  enableSelection: boolean;\\n}) => {\\n  const deckProps = React.useMemo(() => ({\\n    ...DECK_PROPS,\\n    layers: [wellsLayer, new BoxSelectionLayer({\\n      layerIds: [\\"wells\\"],\\n      visible: enableSelection\\n    })]\\n  }), [enableSelection]);\\n  return <Root>\\n            <div className={classes.main}>\\n                <SubsurfaceViewer {...deckProps} />\\n            </div>\\n        </Root>;\\n}",\n      ...boxSelection.parameters?.docs?.source\n    }\n  }\n};\nboxSelectionWithCallback.parameters = {\n  ...boxSelectionWithCallback.parameters,\n  docs: {\n    ...boxSelectionWithCallback.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  const [data, setData] = React.useState<string[]>([]);\\n  const getSelectedWellsDataCallBack = React.useCallback((pickingInfos: PickingInfo[]) => {\\n    const selectedWells = (pickingInfos.map(item => item.object).filter(item => item.type === \\"Feature\\").map(item => item.properties[\\"name\\"]) as string[]);\\n    setData(selectedWells);\\n  }, []);\\n  const lassoArgsWithSelectedWellsDataCallback: Record<string, unknown> = {\\n    ...DECK_PROPS,\\n    layers: [wellsLayer, new BoxSelectionLayer({\\n      visible: true,\\n      handleSelection: getSelectedWellsDataCallBack,\\n      layerIds: [\\"wells\\"]\\n    })]\\n  };\\n  return <Root>\\n            <div className={classes.main}>\\n                <SubsurfaceViewer id={\\"DeckGL-Map\\"} {...lassoArgsWithSelectedWellsDataCallback} />\\n            </div>\\n            <div>\\n                <div>Selected Wells:</div>\\n                <ol>\\n                    {data.map(item => <li key={item}>{item}</li>)}\\n                </ol>\\n            </div>\\n        </Root>;\\n}",\n      ...boxSelectionWithCallback.parameters?.docs?.source\n    }\n  }\n};',locationsMap:{"box-selection":{startLoc:{col:28,line:47},endLoc:{col:1,line:60},startBody:{col:28,line:47},endBody:{col:1,line:60}},"box-selection-with-callback":{startLoc:{col:40,line:64},endLoc:{col:1,line:85},startBody:{col:40,line:64},endBody:{col:1,line:85}}}}},component:_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,title:"SubsurfaceViewer / Box Selection Layer"};const boxSelection=({enableSelection:enableSelection})=>{const deckProps=react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>({...DECK_PROPS,layers:[wellsLayer,new _boxSelectionLayer__WEBPACK_IMPORTED_MODULE_3__.Z({layerIds:["wells"],visible:enableSelection})]})),[enableSelection]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.main},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,deckProps)))};boxSelection.args={enableSelection:!0};const boxSelectionWithCallback=()=>{const[data,setData]=react__WEBPACK_IMPORTED_MODULE_0__.useState([]),getSelectedWellsDataCallBack=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((pickingInfos=>{const selectedWells=pickingInfos.map((item=>item.object)).filter((item=>"Feature"===item.type)).map((item=>item.properties.name));setData(selectedWells)}),[]),lassoArgsWithSelectedWellsDataCallback={...DECK_PROPS,layers:[wellsLayer,new _boxSelectionLayer__WEBPACK_IMPORTED_MODULE_3__.Z({visible:!0,handleSelection:getSelectedWellsDataCallBack,layerIds:["wells"]})]};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.main},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,_extends({id:"DeckGL-Map"},lassoArgsWithSelectedWellsDataCallback))),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"Selected Wells:"),react__WEBPACK_IMPORTED_MODULE_0__.createElement("ol",null,data.map((item=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("li",{key:item},item))))))};boxSelection.parameters={...boxSelection.parameters,docs:{...boxSelection.parameters?.docs,source:{originalSource:'({\n  enableSelection\n}: {\n  enableSelection: boolean;\n}) => {\n  const deckProps = React.useMemo(() => ({\n    ...DECK_PROPS,\n    layers: [wellsLayer, new BoxSelectionLayer({\n      layerIds: ["wells"],\n      visible: enableSelection\n    })]\n  }), [enableSelection]);\n  return <Root>\n            <div className={classes.main}>\n                <SubsurfaceViewer {...deckProps} />\n            </div>\n        </Root>;\n}',...boxSelection.parameters?.docs?.source}}},boxSelectionWithCallback.parameters={...boxSelectionWithCallback.parameters,docs:{...boxSelectionWithCallback.parameters?.docs,source:{originalSource:'() => {\n  const [data, setData] = React.useState<string[]>([]);\n  const getSelectedWellsDataCallBack = React.useCallback((pickingInfos: PickingInfo[]) => {\n    const selectedWells = (pickingInfos.map(item => item.object).filter(item => item.type === "Feature").map(item => item.properties["name"]) as string[]);\n    setData(selectedWells);\n  }, []);\n  const lassoArgsWithSelectedWellsDataCallback: Record<string, unknown> = {\n    ...DECK_PROPS,\n    layers: [wellsLayer, new BoxSelectionLayer({\n      visible: true,\n      handleSelection: getSelectedWellsDataCallBack,\n      layerIds: ["wells"]\n    })]\n  };\n  return <Root>\n            <div className={classes.main}>\n                <SubsurfaceViewer id={"DeckGL-Map"} {...lassoArgsWithSelectedWellsDataCallback} />\n            </div>\n            <div>\n                <div>Selected Wells:</div>\n                <ol>\n                    {data.map(item => <li key={item}>{item}</li>)}\n                </ol>\n            </div>\n        </Root>;\n}',...boxSelectionWithCallback.parameters?.docs?.source}}};const __namedExportsOrder=["boxSelection","boxSelectionWithCallback"];try{boxSelection.displayName="boxSelection",boxSelection.__docgenInfo={description:"",displayName:"boxSelection",props:{enableSelection:{defaultValue:null,description:"",name:"enableSelection",required:!0,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/layers/BoxSelectionLayer/boxSelectionLayer.stories.tsx#boxSelection"]={docgenInfo:boxSelection.__docgenInfo,name:"boxSelection",path:"packages/subsurface-viewer/src/layers/BoxSelectionLayer/boxSelectionLayer.stories.tsx#boxSelection"})}catch(__react_docgen_typescript_loader_error){}}}]);