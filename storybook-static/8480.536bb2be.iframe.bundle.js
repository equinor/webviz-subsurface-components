/*! For license information please see 8480.536bb2be.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[8480],{"./packages/well-log-viewer/src/components/Scroller.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");class Scroller extends react__WEBPACK_IMPORTED_MODULE_0__.Component{constructor(props){super(props),this.scroller=null,this.scrollable=null,this.content=null,this.resizeObserver=new ResizeObserver((entries=>{const entry=entries[0];if(entry&&entry.target){const Width=entry.target.offsetWidth,Height=entry.target.offsetHeight;if(this.content){const{vertical:vertical,horizontal:horizontal}=function getScrollbarSizes(){const outer=document.createElement("div");outer.style.visibility="hidden",outer.style.overflow="scroll",document.body.appendChild(outer);const vertical=outer.offsetWidth-outer.clientWidth,horizontal=outer.offsetHeight-outer.clientHeight;return document.body.removeChild(outer),{vertical:vertical,horizontal:horizontal}}();this.content.style.width=Width-vertical+"px",this.content.style.height=Height-horizontal+"px"}}})),this.onScroll=this.onScroll.bind(this)}componentDidMount(){this.scroller&&this.resizeObserver.observe(this.scroller)}componentWillUnmount(){this.scroller&&this.resizeObserver.unobserve(this.scroller)}getScrollX(){const elOuter=this.scroller;if(!elOuter)return 0;const scrollWidth=elOuter.scrollWidth-elOuter.clientWidth;return scrollWidth?elOuter.scrollLeft/scrollWidth:0}getScrollY(){const elOuter=this.scroller;if(!elOuter)return 0;const scrollHeight=elOuter.scrollHeight-elOuter.clientHeight;return scrollHeight?elOuter.scrollTop/scrollHeight:0}getScrollPos(vertical){return vertical?this.getScrollY():this.getScrollX()}onScroll(){this.scroller&&this.props.onScroll?.(this.getScrollX(),this.getScrollY())}scrollTo(x,y){x<0?x=0:x>1&&(x=1),y<0?y=0:y>1&&(y=1);const elOuter=this.scroller;if(!elOuter)return!1;const scrollLeft=Math.round(x*(elOuter.scrollWidth-elOuter.clientWidth)),scrollTop=Math.round(y*(elOuter.scrollHeight-elOuter.clientHeight));return(elOuter.scrollLeft!==scrollLeft||elOuter.scrollTop!==scrollTop)&&(elOuter.scrollTo(scrollLeft,scrollTop),!0)}zoom(xZoom,yZoom){const elOuter=this.scroller;if(!elOuter)return!1;const elInner=this.scrollable;if(!elInner)return!1;const widthInner=Math.round(elOuter.clientWidth*xZoom)+"px",heightInner=Math.round(elOuter.clientHeight*yZoom)+"px";return(elInner.style.width!==widthInner||elInner.style.height!==heightInner)&&(elInner.style.width=widthInner,elInner.style.height=heightInner,!0)}render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{ref:el=>this.scroller=el,style:{overflow:"scroll",width:"100%",height:"100%"},onScroll:this.onScroll},react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{ref:el=>this.scrollable=el},react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{ref:el=>this.content=el,style:{position:"absolute"}},this.props.children)))}}__webpack_exports__.A=Scroller,Scroller.__docgenInfo={description:"",methods:[{name:"getScrollX",docblock:null,modifiers:[],params:[],returns:{type:{name:"number"}}},{name:"getScrollY",docblock:null,modifiers:[],params:[],returns:{type:{name:"number"}}},{name:"getScrollPos",docblock:null,modifiers:[],params:[{name:"vertical",optional:!1,type:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]}}],returns:{type:{name:"number"}}},{name:"onScroll",docblock:"callback from HTML element",modifiers:[],params:[],returns:{type:{name:"void"}},description:"callback from HTML element"},{name:"scrollTo",docblock:"@param x value to set the horizontal beginning of visible part of content (fraction)\n@param y value to set the vertical beginning of visible part of content (fraction)\n@returns true if visible part is changed",modifiers:[],params:[{name:"x",description:"value to set the horizontal beginning of visible part of content (fraction)",optional:!1,type:{name:"number"}},{name:"y",description:"value to set the vertical beginning of visible part of content (fraction)",optional:!1,type:{name:"number"}}],returns:{description:"true if visible part is changed",type:{name:"boolean"}},description:null},{name:"zoom",docblock:"@param xZoom set X zoom factor of visible part of content\n@param yZoom set Y zoom factor of visible part of content\n@returns true if visible part is changed",modifiers:[],params:[{name:"xZoom",description:"set X zoom factor of visible part of content",optional:!1,type:{name:"number"}},{name:"yZoom",description:"set Y zoom factor of visible part of content",optional:!1,type:{name:"number"}}],returns:{description:"true if visible part is changed",type:{name:"boolean"}},description:null}],displayName:"Scroller",props:{onScroll:{required:!1,tsType:{name:"signature",type:"function",raw:"(x: number, y: number) => void",signature:{arguments:[{type:{name:"number"},name:"x"},{type:{name:"number"},name:"y"}],return:{name:"void"}}},description:"callback with new scroll positions"},children:{required:!1,tsType:{name:"ReactNode"},description:""}}}},"./packages/well-log-viewer/src/components/WellLogViewWithScroller.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{u:function(){return argTypesWellLogViewScrollerProp}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_WellLogView__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/well-log-viewer/src/components/WellLogView.tsx"),_Scroller__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/well-log-viewer/src/components/Scroller.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const argTypesWellLogViewScrollerProp=_WellLogView__WEBPACK_IMPORTED_MODULE_1__.uB;class WellLogViewWithScroller extends react__WEBPACK_IMPORTED_MODULE_0__.Component{constructor(props){super(props),this.controller=null,this.scroller=null,this.onCreateController=this.onCreateController.bind(this),this.onScrollerScroll=this.onScrollerScroll.bind(this),this.onTrackScroll=this.onTrackScroll.bind(this),this.onTrackSelection=this.onTrackSelection.bind(this),this.onContentRescale=this.onContentRescale.bind(this),this.onContentSelection=this.onContentSelection.bind(this)}componentDidMount(){this.setScrollerPosAndZoom()}shouldComponentUpdate(nextProps){return!Object.is(this.props,nextProps)}updateReadoutPanel(){const controller=this.controller;controller&&controller.updateInfo()}onCreateController(controller){this.controller=controller,this.props.onCreateController?.(controller)}onTrackScroll(){this.setScrollerPosAndZoom(),this.props.onTrackScroll?.()}onTrackSelection(){this.props.onTrackSelection?.()}onContentRescale(){this.setScrollerPosAndZoom(),this.props.onContentRescale?.()}onContentSelection(){this.props.onContentSelection?.()}skipScrollNotification=0;onScrollerScroll(x,y){if(this.skipScrollNotification)return void this.skipScrollNotification--;const controller=this.controller;if(!controller)return;const fContent=this.props.horizontal?x:y;controller.scrollContentTo(fContent);const posTrack=this.calcPosTrack(this.props.horizontal?y:x);controller.scrollTrackTo(posTrack)}calcPosTrack(f){const controller=this.controller;if(!controller)return 0;const posTrack=f*controller.getTrackScrollPosMax();return Math.round(posTrack)}getContentPosFraction(){const controller=this.controller;if(!controller)return 0;const baseDomain=controller.getContentBaseDomain(),domain=controller.getContentDomain(),w=baseDomain[1]-baseDomain[0]-(domain[1]-domain[0]);return w?(domain[0]-baseDomain[0])/w:0}getTrackPosFraction(){const controller=this.controller;return controller&&controller.getTrackScrollPosMax()?controller.getTrackScrollPos()/controller.getTrackScrollPosMax():0}setScrollerPosAndZoom(){let x,y,xZoom,yZoom;const scroller=this.scroller;if(!scroller)return;const controller=this.controller;if(controller){const contentZoom=controller.getContentZoom(),trackZoom=controller.getTrackZoom();xZoom=this.props.horizontal?contentZoom:trackZoom,yZoom=this.props.horizontal?trackZoom:contentZoom;const fContent=this.getContentPosFraction(),fTrack=this.getTrackPosFraction();x=this.props.horizontal?fContent:fTrack,y=this.props.horizontal?fTrack:fContent}else x=y=0,xZoom=yZoom=1;scroller.zoom(xZoom,yZoom);let shouldUpdateScroller=2;{const _x=scroller.getScrollX(),_y=scroller.getScrollY(),_posTrack=this.calcPosTrack(this.props.horizontal?_y:_x);this.calcPosTrack(this.props.horizontal?y:x)===_posTrack&&(shouldUpdateScroller--,this.props.horizontal?y=_y:x=_x);const _fContent=this.props.horizontal?_x:_y,fContent=this.props.horizontal?x:y;Math.abs(fContent-_fContent)<.001&&(shouldUpdateScroller--,this.props.horizontal?x=_x:y=_y)}shouldUpdateScroller&&scroller.scrollTo(x,y)&&this.skipScrollNotification++}render(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Scroller__WEBPACK_IMPORTED_MODULE_2__.A,{ref:el=>this.scroller=el,onScroll:this.onScrollerScroll},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_WellLogView__WEBPACK_IMPORTED_MODULE_1__.Ay,_extends({},this.props,{onCreateController:this.onCreateController,onTrackScroll:this.onTrackScroll,onTrackSelection:this.onTrackSelection,onContentRescale:this.onContentRescale,onContentSelection:this.onContentSelection})))}}WellLogViewWithScroller.propTypes=(0,_WellLogView__WEBPACK_IMPORTED_MODULE_1__.Hw)(),__webpack_exports__.A=WellLogViewWithScroller,WellLogViewWithScroller.__docgenInfo={description:"",methods:[{name:"updateReadoutPanel",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"onCreateController",docblock:null,modifiers:[],params:[{name:"controller",optional:!1,type:{name:"WellLogController",alias:"WellLogController"}}],returns:{type:{name:"void"}}},{name:"onTrackScroll",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"onTrackSelection",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"onContentRescale",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"onContentSelection",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"onScrollerScroll",docblock:null,modifiers:[],params:[{name:"x",optional:!1,type:{name:"number"}},{name:"y",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"calcPosTrack",docblock:null,modifiers:[],params:[{name:"f",optional:!1,type:{name:"number"}}],returns:{type:{name:"number"}}},{name:"getContentPosFraction",docblock:null,modifiers:[],params:[],returns:{type:{name:"number"}}},{name:"getTrackPosFraction",docblock:null,modifiers:[],params:[],returns:{type:{name:"number"}}},{name:"setScrollerPosAndZoom",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}}],displayName:"WellLogViewWithScroller",props:{welllog:{required:!1,tsType:{name:"union",raw:"WellLogSet[] | WellLogSet",elements:[{name:"Array",elements:[{name:"signature",type:"object",raw:"{\n    header: WellLogHeader;\n    curves: WellLogCurve[];\n    data: WellLogDataRow[];\n\n    metadata_discrete?: Record<string, WellLogMetadataDiscrete>;\n}",signature:{properties:[{key:"header",value:{name:"signature",type:"object",raw:"{\n    name?: string; // Log name\n    description?: string; // Log description\n    externalIds?: Record<string, string>; // IDs within external storage, key being the storage name, and value being the ID.\n    well?: string; // Well name\n    wellbore?: string; // Wellbore name\n    filed?: string; // Field name\n    country?: string; // Country of operation\n    date?: datetime; // Logging date\n    operator?: string; // Operator company name\n    serviceCompany?: string; // Service company name\n    runNumber?: string; // Run number\n    elevation?: float; // Vertical distance between measured depth 0.0 and mean sea level in SI unit (meters)\n    source?: string; // Source system or process of this log\n    startIndex?: number /*According to index value type*/; // Value of the first index. Unit according to index curve.\n    endIndex?: number /*According to index value type*/; // Value of the last index. Unit according to index curve.\n    step?: number /*According to index value type*/; // Distance between indices if regularly sampled. Unit according to index curve. If log is time based, milliseconds assumed.\n    dataUri?: string; //\tPoint to data source in case this is kept separate. Can be absolute or relative according to the URI specification.\n    //...\n}",signature:{properties:[{key:"name",value:{name:"string",required:!1}},{key:"description",value:{name:"string",required:!1}},{key:"externalIds",value:{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>",required:!1}},{key:"well",value:{name:"string",required:!1}},{key:"wellbore",value:{name:"string",required:!1}},{key:"filed",value:{name:"string",required:!1}},{key:"country",value:{name:"string",required:!1}},{key:"date",value:{name:"string",required:!1}},{key:"operator",value:{name:"string",required:!1}},{key:"serviceCompany",value:{name:"string",required:!1}},{key:"runNumber",value:{name:"string",required:!1}},{key:"elevation",value:{name:"number",required:!1}},{key:"source",value:{name:"string",required:!1}},{key:"startIndex",value:{name:"number",required:!1}},{key:"endIndex",value:{name:"number",required:!1}},{key:"step",value:{name:"number",required:!1}},{key:"dataUri",value:{name:"string",required:!1}}]},required:!0}},{key:"curves",value:{name:"Array",elements:[{name:"signature",type:"object",raw:"{\n    name: string; // Curve name or mnemonic. Mandatory. Non-null.\n    description?: string | null; // Curve description. Optional.\n    quantity?: string | null; // Curve quantity such as length, pressure, force etc. Optional.\n    unit?: string | null; // Unit of measurement such as m, ft, bar, etc. Optional.\n    valueType?: string | null; // Curve value type: float, integer, string, datetime or boolean. Non-null. Optional. float assumed if not present.\n    dimensions?: integer; //  \tNumber of dimensions. [1,>. Non-null. Optional. 1 assumed if not present.\n    // Not supported yet:\n    //axis?: \tarray of curve definition; \t// A detailed description of the multi-dimensional structure of the curve in case this spans multiple axes. One element per axis. The combined product of the axis diemsnsions elements must equal the dimensions of the curve. Optional.\n    //maxSize?: integer; \t// Maximum storage size (number of bytes) for UTF-8 string data. Used with binary storage in order to align the curve data. [0,>. Optional. 20 assumed if not present. Ignored for curves where valueType is other than string.\n}",signature:{properties:[{key:"name",value:{name:"string",required:!0}},{key:"description",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"quantity",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"unit",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"valueType",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"dimensions",value:{name:"number",required:!1}}]}}],raw:"WellLogCurve[]",required:!0}},{key:"data",value:{name:"Array",elements:[{name:"Array",elements:[{name:"unknown"}],raw:"(number | string | null)[]"}],raw:"WellLogDataRow[]",required:!0}},{key:"metadata_discrete",value:{name:"Record",elements:[{name:"string"},{name:"signature",type:"object",raw:'{\n    attributes: string[] /* ["color", "code" ] */;\n    objects: WellLogMetadataDiscreteObjects;\n}',signature:{properties:[{key:"attributes",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!0}},{key:"objects",value:{name:"Record",elements:[{name:"string"},{name:"Array",elements:[{name:"unknown"}],raw:"(number[] | number)[]"}],raw:"Record<\n    string,\n    (number[] | number)[]\n>",required:!0}}]}}],raw:"Record<string, WellLogMetadataDiscrete>",required:!1}}]}}],raw:"WellLogSet[]"},{name:"signature",type:"object",raw:"{\n    header: WellLogHeader;\n    curves: WellLogCurve[];\n    data: WellLogDataRow[];\n\n    metadata_discrete?: Record<string, WellLogMetadataDiscrete>;\n}",signature:{properties:[{key:"header",value:{name:"signature",type:"object",raw:"{\n    name?: string; // Log name\n    description?: string; // Log description\n    externalIds?: Record<string, string>; // IDs within external storage, key being the storage name, and value being the ID.\n    well?: string; // Well name\n    wellbore?: string; // Wellbore name\n    filed?: string; // Field name\n    country?: string; // Country of operation\n    date?: datetime; // Logging date\n    operator?: string; // Operator company name\n    serviceCompany?: string; // Service company name\n    runNumber?: string; // Run number\n    elevation?: float; // Vertical distance between measured depth 0.0 and mean sea level in SI unit (meters)\n    source?: string; // Source system or process of this log\n    startIndex?: number /*According to index value type*/; // Value of the first index. Unit according to index curve.\n    endIndex?: number /*According to index value type*/; // Value of the last index. Unit according to index curve.\n    step?: number /*According to index value type*/; // Distance between indices if regularly sampled. Unit according to index curve. If log is time based, milliseconds assumed.\n    dataUri?: string; //\tPoint to data source in case this is kept separate. Can be absolute or relative according to the URI specification.\n    //...\n}",signature:{properties:[{key:"name",value:{name:"string",required:!1}},{key:"description",value:{name:"string",required:!1}},{key:"externalIds",value:{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>",required:!1}},{key:"well",value:{name:"string",required:!1}},{key:"wellbore",value:{name:"string",required:!1}},{key:"filed",value:{name:"string",required:!1}},{key:"country",value:{name:"string",required:!1}},{key:"date",value:{name:"string",required:!1}},{key:"operator",value:{name:"string",required:!1}},{key:"serviceCompany",value:{name:"string",required:!1}},{key:"runNumber",value:{name:"string",required:!1}},{key:"elevation",value:{name:"number",required:!1}},{key:"source",value:{name:"string",required:!1}},{key:"startIndex",value:{name:"number",required:!1}},{key:"endIndex",value:{name:"number",required:!1}},{key:"step",value:{name:"number",required:!1}},{key:"dataUri",value:{name:"string",required:!1}}]},required:!0}},{key:"curves",value:{name:"Array",elements:[{name:"signature",type:"object",raw:"{\n    name: string; // Curve name or mnemonic. Mandatory. Non-null.\n    description?: string | null; // Curve description. Optional.\n    quantity?: string | null; // Curve quantity such as length, pressure, force etc. Optional.\n    unit?: string | null; // Unit of measurement such as m, ft, bar, etc. Optional.\n    valueType?: string | null; // Curve value type: float, integer, string, datetime or boolean. Non-null. Optional. float assumed if not present.\n    dimensions?: integer; //  \tNumber of dimensions. [1,>. Non-null. Optional. 1 assumed if not present.\n    // Not supported yet:\n    //axis?: \tarray of curve definition; \t// A detailed description of the multi-dimensional structure of the curve in case this spans multiple axes. One element per axis. The combined product of the axis diemsnsions elements must equal the dimensions of the curve. Optional.\n    //maxSize?: integer; \t// Maximum storage size (number of bytes) for UTF-8 string data. Used with binary storage in order to align the curve data. [0,>. Optional. 20 assumed if not present. Ignored for curves where valueType is other than string.\n}",signature:{properties:[{key:"name",value:{name:"string",required:!0}},{key:"description",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"quantity",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"unit",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"valueType",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"dimensions",value:{name:"number",required:!1}}]}}],raw:"WellLogCurve[]",required:!0}},{key:"data",value:{name:"Array",elements:[{name:"Array",elements:[{name:"unknown"}],raw:"(number | string | null)[]"}],raw:"WellLogDataRow[]",required:!0}},{key:"metadata_discrete",value:{name:"Record",elements:[{name:"string"},{name:"signature",type:"object",raw:'{\n    attributes: string[] /* ["color", "code" ] */;\n    objects: WellLogMetadataDiscreteObjects;\n}',signature:{properties:[{key:"attributes",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!0}},{key:"objects",value:{name:"Record",elements:[{name:"string"},{name:"Array",elements:[{name:"unknown"}],raw:"(number[] | number)[]"}],raw:"Record<\n    string,\n    (number[] | number)[]\n>",required:!0}}]}}],raw:"Record<string, WellLogMetadataDiscrete>",required:!1}}]}}]},description:"Object from JSON file describing one or more sets of well log data.\n@deprecated Use `wellLogSets` instead"},wellLogSets:{required:!1,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:"{\n    header: WellLogHeader;\n    curves: WellLogCurve[];\n    data: WellLogDataRow[];\n\n    metadata_discrete?: Record<string, WellLogMetadataDiscrete>;\n}",signature:{properties:[{key:"header",value:{name:"signature",type:"object",raw:"{\n    name?: string; // Log name\n    description?: string; // Log description\n    externalIds?: Record<string, string>; // IDs within external storage, key being the storage name, and value being the ID.\n    well?: string; // Well name\n    wellbore?: string; // Wellbore name\n    filed?: string; // Field name\n    country?: string; // Country of operation\n    date?: datetime; // Logging date\n    operator?: string; // Operator company name\n    serviceCompany?: string; // Service company name\n    runNumber?: string; // Run number\n    elevation?: float; // Vertical distance between measured depth 0.0 and mean sea level in SI unit (meters)\n    source?: string; // Source system or process of this log\n    startIndex?: number /*According to index value type*/; // Value of the first index. Unit according to index curve.\n    endIndex?: number /*According to index value type*/; // Value of the last index. Unit according to index curve.\n    step?: number /*According to index value type*/; // Distance between indices if regularly sampled. Unit according to index curve. If log is time based, milliseconds assumed.\n    dataUri?: string; //\tPoint to data source in case this is kept separate. Can be absolute or relative according to the URI specification.\n    //...\n}",signature:{properties:[{key:"name",value:{name:"string",required:!1}},{key:"description",value:{name:"string",required:!1}},{key:"externalIds",value:{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>",required:!1}},{key:"well",value:{name:"string",required:!1}},{key:"wellbore",value:{name:"string",required:!1}},{key:"filed",value:{name:"string",required:!1}},{key:"country",value:{name:"string",required:!1}},{key:"date",value:{name:"string",required:!1}},{key:"operator",value:{name:"string",required:!1}},{key:"serviceCompany",value:{name:"string",required:!1}},{key:"runNumber",value:{name:"string",required:!1}},{key:"elevation",value:{name:"number",required:!1}},{key:"source",value:{name:"string",required:!1}},{key:"startIndex",value:{name:"number",required:!1}},{key:"endIndex",value:{name:"number",required:!1}},{key:"step",value:{name:"number",required:!1}},{key:"dataUri",value:{name:"string",required:!1}}]},required:!0}},{key:"curves",value:{name:"Array",elements:[{name:"signature",type:"object",raw:"{\n    name: string; // Curve name or mnemonic. Mandatory. Non-null.\n    description?: string | null; // Curve description. Optional.\n    quantity?: string | null; // Curve quantity such as length, pressure, force etc. Optional.\n    unit?: string | null; // Unit of measurement such as m, ft, bar, etc. Optional.\n    valueType?: string | null; // Curve value type: float, integer, string, datetime or boolean. Non-null. Optional. float assumed if not present.\n    dimensions?: integer; //  \tNumber of dimensions. [1,>. Non-null. Optional. 1 assumed if not present.\n    // Not supported yet:\n    //axis?: \tarray of curve definition; \t// A detailed description of the multi-dimensional structure of the curve in case this spans multiple axes. One element per axis. The combined product of the axis diemsnsions elements must equal the dimensions of the curve. Optional.\n    //maxSize?: integer; \t// Maximum storage size (number of bytes) for UTF-8 string data. Used with binary storage in order to align the curve data. [0,>. Optional. 20 assumed if not present. Ignored for curves where valueType is other than string.\n}",signature:{properties:[{key:"name",value:{name:"string",required:!0}},{key:"description",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"quantity",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"unit",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"valueType",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"dimensions",value:{name:"number",required:!1}}]}}],raw:"WellLogCurve[]",required:!0}},{key:"data",value:{name:"Array",elements:[{name:"Array",elements:[{name:"unknown"}],raw:"(number | string | null)[]"}],raw:"WellLogDataRow[]",required:!0}},{key:"metadata_discrete",value:{name:"Record",elements:[{name:"string"},{name:"signature",type:"object",raw:'{\n    attributes: string[] /* ["color", "code" ] */;\n    objects: WellLogMetadataDiscreteObjects;\n}',signature:{properties:[{key:"attributes",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!0}},{key:"objects",value:{name:"Record",elements:[{name:"string"},{name:"Array",elements:[{name:"unknown"}],raw:"(number[] | number)[]"}],raw:"Record<\n    string,\n    (number[] | number)[]\n>",required:!0}}]}}],raw:"Record<string, WellLogMetadataDiscrete>",required:!1}}]}}],raw:"WellLogSet[]"},description:"Array from JSON file; describes a series of well log data sets.\nAssumes each set is for the same well. (For differing wells, use SyncLogViewer instead)"},template:{required:!0,tsType:{name:"Template"},description:"Prop containing track template data."},colorMapFunctions:{required:!0,tsType:{name:"Array",elements:[{name:"union",raw:"colorTablesObj | ColorFunction",elements:[{name:"colorTablesObj"},{name:"signature",type:"object",raw:"{\n    name: string;\n    func: (v: number) => [number, number, number]; // input number is between 0.0 and 1.0; returned numbers are between 0 and 255\n}",signature:{properties:[{key:"name",value:{name:"string",required:!0}},{key:"func",value:{name:"signature",type:"function",raw:"(v: number) => [number, number, number]",signature:{arguments:[{type:{name:"number"},name:"v"}],return:{name:"tuple",raw:"[number, number, number]",elements:[{name:"number"},{name:"number"},{name:"number"}]}},required:!0}}]}}]}],raw:"ColorMapFunction[]"},description:"Prop containing color table or color functions array for discrete well logs"},wellpick:{required:!1,tsType:{name:"WellPickProps"},description:"Well Picks data"},patternsTable:{required:!1,tsType:{name:"PatternsTable"},description:"Patterns table"},patterns:{required:!1,tsType:{name:"Array",elements:[{name:"tuple",raw:"[string, number]",elements:[{name:"string"},{name:"number"}]}],raw:"Pattern[]"},description:"Horizon to pattern index map"},horizontal:{required:!1,tsType:{name:"boolean"},description:"Orientation of the track plots on the screen."},primaryAxis:{required:!1,tsType:{name:"string"},description:'Primary axis id: "md", "tvd", "time"... Default is the first available from axisMnemos'},axisTitles:{required:!0,tsType:{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"},description:"Log mnemonics for axes"},axisMnemos:{required:!0,tsType:{name:"Record",elements:[{name:"string"},{name:"Array",elements:[{name:"string"}],raw:"string[]"}],raw:"Record<string, string[]>"},description:"Names for axes"},viewTitle:{required:!1,tsType:{name:"union",raw:"boolean | string | JSX.Element",elements:[{name:"boolean"},{name:"string"},{name:"JSX.Element"}]},description:"The view title. Set desired string or react element or true for default value from well log file"},domain:{required:!1,tsType:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]},description:"Initial visible range"},selection:{required:!1,tsType:{name:"tuple",raw:"[number | undefined, number | undefined]",elements:[{name:"union",raw:"number | undefined",elements:[{name:"number"},{name:"undefined"}]},{name:"union",raw:"number | undefined",elements:[{name:"number"},{name:"undefined"}]}]},description:"Initial selected range"},options:{required:!1,tsType:{name:"WellLogViewOptions"},description:"Additional options"},onCreateController:{required:!1,tsType:{name:"signature",type:"function",raw:"(controller: WellLogController) => void",signature:{arguments:[{type:{name:"WellLogController"},name:"controller"}],return:{name:"void"}}},description:""},onInfo:{required:!1,tsType:{name:"signature",type:"function",raw:"(\n    x: number,\n    logController: LogViewer,\n    iFrom: number,\n    iTo: number\n) => void",signature:{arguments:[{type:{name:"number"},name:"x"},{type:{name:"LogViewer"},name:"logController"},{type:{name:"number"},name:"iFrom"},{type:{name:"number"},name:"iTo"}],return:{name:"void"}}},description:""},onTrackScroll:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"called when track scrolling is changed"},onTrackSelection:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"called when track selection is changed"},onContentRescale:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"called when content zoom and scrolling are changed"},onContentSelection:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"called when content zoom and scrolling are changed"},onTrackMouseEvent:{required:!1,tsType:{name:"signature",type:"function",raw:"(wellLogView: WellLogView, ev: TrackMouseEvent) => void",signature:{arguments:[{type:{name:"WellLogView"},name:"wellLogView"},{type:{name:"TrackMouseEvent"},name:"ev"}],return:{name:"void"}}},description:"called when mouse click on a track"},onTrackMouseLeaveEvent:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"called when mouse cursor leaves track area;"},onTemplateChanged:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"called when template is changed"}}}}}]);