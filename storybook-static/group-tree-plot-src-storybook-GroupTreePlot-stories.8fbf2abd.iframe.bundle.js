"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[5338],{"./node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./packages/group-tree-plot/src/group_tree.css":function(module,__webpack_exports__,__webpack_require__){var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js"),_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,'.link {\r\n    fill: none;\r\n    stroke: #5c5c5c;\r\n    opacity: 1;\r\n}\r\n\r\n.grouptree_link {\r\n    opacity: 0.3;\r\n}\r\n\r\n.grouptree_link__oilrate {\r\n    stroke: #60be6c;\r\n}\r\n\r\n.grouptree_link__waterrate {\r\n    stroke: #0d1b9e;\r\n}\r\n\r\n.grouptree_link__gasrate {\r\n    stroke: #c5221c;\r\n}\r\n\r\n.grouptree_link__waterinjrate {\r\n    stroke: #00c3ff;\r\n}\r\n\r\n.grouptree_link__gasinjrate {\r\n    stroke: #d6397a;\r\n}\r\n\r\n.grouptree__node {\r\n    fill: #fff;\r\n    stroke: #60be6c;\r\n    stroke-width: 1px;\r\n    cursor: default;\r\n}\r\n\r\n.grouptree__nodelabel {\r\n    font-size: 10px;\r\n    font-family: sans-serif;\r\n}\r\n\r\n.grouptree__pressurelabel {\r\n    font-size: 10px;\r\n    font-family: "Statoil Sans Light", Lucida, Arial, Helvetica, sans-serif;\r\n}\r\n\r\n.grouptree__pressureunit {\r\n    font-size: 9px;\r\n}\r\n\r\n.grouptree__grupnet_text {\r\n    font-size: 12px;\r\n}\r\n\r\n.grouptree__node--withchildren {\r\n    stroke-width: 2.5px;\r\n    cursor: pointer;\r\n}\r\n',"",{version:3,sources:["webpack://./packages/group-tree-plot/src/group_tree.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,eAAe;IACf,UAAU;AACd;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,UAAU;IACV,eAAe;IACf,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,uBAAuB;AAC3B;;AAEA;IACI,eAAe;IACf,uEAAuE;AAC3E;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,mBAAmB;IACnB,eAAe;AACnB",sourcesContent:['.link {\r\n    fill: none;\r\n    stroke: #5c5c5c;\r\n    opacity: 1;\r\n}\r\n\r\n.grouptree_link {\r\n    opacity: 0.3;\r\n}\r\n\r\n.grouptree_link__oilrate {\r\n    stroke: #60be6c;\r\n}\r\n\r\n.grouptree_link__waterrate {\r\n    stroke: #0d1b9e;\r\n}\r\n\r\n.grouptree_link__gasrate {\r\n    stroke: #c5221c;\r\n}\r\n\r\n.grouptree_link__waterinjrate {\r\n    stroke: #00c3ff;\r\n}\r\n\r\n.grouptree_link__gasinjrate {\r\n    stroke: #d6397a;\r\n}\r\n\r\n.grouptree__node {\r\n    fill: #fff;\r\n    stroke: #60be6c;\r\n    stroke-width: 1px;\r\n    cursor: default;\r\n}\r\n\r\n.grouptree__nodelabel {\r\n    font-size: 10px;\r\n    font-family: sans-serif;\r\n}\r\n\r\n.grouptree__pressurelabel {\r\n    font-size: 10px;\r\n    font-family: "Statoil Sans Light", Lucida, Arial, Helvetica, sans-serif;\r\n}\r\n\r\n.grouptree__pressureunit {\r\n    font-size: 9px;\r\n}\r\n\r\n.grouptree__grupnet_text {\r\n    font-size: 12px;\r\n}\r\n\r\n.grouptree__node--withchildren {\r\n    stroke-width: 2.5px;\r\n    cursor: pointer;\r\n}\r\n'],sourceRoot:""}]),__webpack_exports__.A=___CSS_LOADER_EXPORT___},"./packages/group-tree-plot/src/storybook/GroupTreePlot.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:function(){return Default},Resizable:function(){return Resizable},__namedExportsOrder:function(){return __namedExportsOrder},default:function(){return GroupTreePlot_stories}});var react=__webpack_require__("./node_modules/react/index.js"),lodash=__webpack_require__("./node_modules/lodash/lodash.js"),lodash_default=__webpack_require__.n(lodash),injectStylesIntoStyleTag=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),injectStylesIntoStyleTag_default=__webpack_require__.n(injectStylesIntoStyleTag),styleDomAPI=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js"),styleDomAPI_default=__webpack_require__.n(styleDomAPI),insertBySelector=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js"),insertBySelector_default=__webpack_require__.n(insertBySelector),setAttributesWithoutAttributes=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),setAttributesWithoutAttributes_default=__webpack_require__.n(setAttributesWithoutAttributes),insertStyleElement=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js"),insertStyleElement_default=__webpack_require__.n(insertStyleElement),styleTagTransform=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js"),styleTagTransform_default=__webpack_require__.n(styleTagTransform),group_tree=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./packages/group-tree-plot/src/group_tree.css"),options={};options.styleTagTransform=styleTagTransform_default(),options.setAttributes=setAttributesWithoutAttributes_default(),options.insert=insertBySelector_default().bind(null,"head"),options.domAPI=styleDomAPI_default(),options.insertStyleElement=insertStyleElement_default();injectStylesIntoStyleTag_default()(group_tree.A,options),group_tree.A&&group_tree.A.locals&&group_tree.A.locals;var src=__webpack_require__("./node_modules/d3/src/index.js"),AnimatePresence=__webpack_require__("./node_modules/motion/dist/es/framer-motion/dist/es/components/AnimatePresence/index.mjs");function makeNodeId(node){return`${node.data.node_type}__${node.data.node_label}`}function makeLinkId(link){return`path ${makeNodeId(link.target)}`}function printTreeValue(value){return null===value?"N/A":value.toFixed(0)}function findClosestVisibleInNewTree(targetNode,newTreeRoot){let pathToNode=[targetNode],traversingNode=targetNode;for(;traversingNode.parent;)traversingNode=traversingNode.parent,pathToNode=[traversingNode,...pathToNode];let visibleParent=newTreeRoot,childrenInTree=visibleParent.children??[];for(let i=1;i<pathToNode.length;i++){const nodeId=makeNodeId(pathToNode[i]),foundChild=childrenInTree.find((node=>makeNodeId(node)===nodeId));if(!foundChild)return visibleParent;visibleParent=foundChild,childrenInTree=foundChild.children??[]}return visibleParent}function diagonalPath(link){const{source:source,target:target}=link,avgY=(target.y+source.y)/2;return`\n        M ${source.y} ${source.x}         C             ${avgY} ${source.x},             ${avgY} ${target.x},             ${target.y} ${target.x}\n        `}var proxy=__webpack_require__("./node_modules/motion/dist/es/framer-motion/dist/es/render/components/motion/proxy.mjs");const TREE_MOTION_TRANSITION={type:"spring",bounce:0,duration:.5};function useCollapseMotionProps(node,oldTreeRoot,animationTarget,buildCollapseTargets){return{initial:"expand",animate:"expanded",exit:"collapse",transition:TREE_MOTION_TRANSITION,variants:{expand(){const collapseInto=findClosestVisibleInNewTree(node,oldTreeRoot);return buildCollapseTargets(collapseInto)},expanded(){return animationTarget},collapse(futureTree){if(!futureTree)return{};const collapseInto=findClosestVisibleInNewTree(node,futureTree);return buildCollapseTargets(collapseInto)}}}}function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}function TransitionTreeEdge(props){const linkPath=diagonalPath(props.link),mainTreeNode=props.link.target.data,edgeData=mainTreeNode.edge_data,linkId=react.useId(),groupPropertyStrokeClass=`grouptree_link__${props.primaryEdgeProperty}`,edgeTooltip=props.dataAssembler.getTooltip(edgeData),normalizedValue=props.dataAssembler.normalizeValue(edgeData,props.primaryEdgeProperty),strokeWidth=Math.max(normalizedValue,2),motionProps=useCollapseMotionProps(props.link.target,props.oldNodeTree,{strokeOpacity:1,strokeWidth:strokeWidth,d:linkPath},(collapseTarget=>({strokeOpacity:0,strokeWidth:strokeWidth/4,d:diagonalPath({source:collapseTarget,target:collapseTarget})})));return react.createElement(proxy.P.g,null,react.createElement(proxy.P.path,_extends({},motionProps,{id:linkId,className:`link grouptree_link ${groupPropertyStrokeClass}`,strokeDasharray:normalizedValue>0?"none":"5,5"}),react.createElement("title",null,edgeTooltip)),react.createElement(proxy.P.text,{transition:motionProps.transition,initial:{fillOpacity:0},animate:{fillOpacity:1},exit:{fillOpacity:0},dominantBaseline:"central",textAnchor:"middle"},react.createElement("textPath",{className:"edge_info_text",startOffset:"50%",href:"#"+linkId},mainTreeNode.edge_label)))}function HiddenChildren(props){let msg="+ "+props.hiddenChildren.length;return props.hiddenChildren.length>1?msg+=" children":msg+=" child",react.createElement("g",null,react.createElement("text",{x:21,textAnchor:"start",dominantBaseline:"middle",fontSize:10,fontFamily:"sans-serif"},msg))}function TransitionTreeNode_extends(){return TransitionTreeNode_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},TransitionTreeNode_extends.apply(null,arguments)}function TransitionTreeNode(props){const recursiveTreeNode=props.node.data,nodeData=recursiveTreeNode.node_data,isLeaf=!recursiveTreeNode.children?.length,canBeExpanded=!props.node.children?.length&&!isLeaf,nodeLabel=recursiveTreeNode.node_label;let circleClass="grouptree__node";isLeaf||(circleClass+="  grouptree__node--withchildren");const[,primaryUnit]=props.dataAssembler.getPropertyInfo(props.primaryNodeProperty),toolTip=props.dataAssembler.getTooltip(nodeData),primaryNodeValue=props.dataAssembler.getPropertyValue(nodeData,props.primaryNodeProperty),motionProps=useCollapseMotionProps(props.node,props.oldNodeTree,{opacity:1,x:props.node.y,y:props.node.x},(collapseTarget=>({opacity:0,x:collapseTarget.y,y:collapseTarget.x})));return react.createElement(proxy.P.g,TransitionTreeNode_extends({},motionProps,{className:"node",cursor:isLeaf?void 0:"pointer",onClick:evt=>props.onNodeClick?.(props.node,evt)}),react.createElement("circle",{className:circleClass,r:15}),react.createElement("text",{className:"grouptree__nodelabel",dominantBaseline:"middle",x:isLeaf?21:-21,textAnchor:isLeaf?"start":"end"},nodeLabel),react.createElement("text",{className:"grouptree__pressurelabel",textAnchor:"middle",y:"-.05em"},printTreeValue(primaryNodeValue)),react.createElement("text",{className:"grouptree__pressureunit",y:".04em",dominantBaseline:"text-before-edge",textAnchor:"middle"},primaryUnit),react.createElement("title",null,toolTip),canBeExpanded&&react.createElement(HiddenChildren,{hiddenChildren:recursiveTreeNode.children??[]}))}TransitionTreeEdge.__docgenInfo={description:"",methods:[],displayName:"TransitionTreeEdge",props:{link:{required:!0,tsType:{name:"HierarchyPointLink",elements:[{name:"RecursiveTreeNode"}],raw:"HierarchyPointLink<RecursiveTreeNode>"},description:""},dataAssembler:{required:!0,tsType:{name:"DataAssembler"},description:""},primaryEdgeProperty:{required:!0,tsType:{name:"string"},description:""},oldNodeTree:{required:!0,tsType:{name:"HierarchyPointNode",elements:[{name:"RecursiveTreeNode"}],raw:"HierarchyPointNode<RecursiveTreeNode>"},description:""}}},HiddenChildren.__docgenInfo={description:"",methods:[],displayName:"HiddenChildren",props:{hiddenChildren:{required:!0,tsType:{name:"Array",elements:[{name:"RecursiveTreeNode"}],raw:"RecursiveTreeNode[]"},description:""}}},TransitionTreeNode.__docgenInfo={description:"",methods:[],displayName:"TransitionTreeNode",props:{primaryNodeProperty:{required:!0,tsType:{name:"string"},description:""},dataAssembler:{required:!0,tsType:{name:"DataAssembler"},description:""},node:{required:!0,tsType:{name:"HierarchyPointNode",elements:[{name:"RecursiveTreeNode"}],raw:"HierarchyPointNode<RecursiveTreeNode>"},description:""},oldNodeTree:{required:!0,tsType:{name:"HierarchyPointNode",elements:[{name:"RecursiveTreeNode"}],raw:"HierarchyPointNode<RecursiveTreeNode>"},description:""},onNodeClick:{required:!1,tsType:{name:"signature",type:"function",raw:'(\n    node: TransitionTreeNodeProps["node"],\n    evt: React.MouseEvent<SVGGElement, MouseEvent>\n) => void',signature:{arguments:[{type:{name:"HierarchyPointNode",raw:'TransitionTreeNodeProps["node"]'},name:"node"},{type:{name:"ReactMouseEvent",raw:"React.MouseEvent<SVGGElement, MouseEvent>",elements:[{name:"SVGGElement"},{name:"MouseEvent"}]},name:"evt"}],return:{name:"void"}}},description:""}}};const PLOT_MARGINS_top=10,PLOT_MARGINS_right=120,PLOT_MARGINS_bottom=10,PLOT_MARGINS_left=70;function TreePlotRenderer(props){const rootTreeNode=props.dataAssembler.getActiveTree().tree,[nodeCollapseFlags,setNodeCollapseFlags]=react.useState({}),heightPadding=PLOT_MARGINS_top+PLOT_MARGINS_bottom,widthPadding=PLOT_MARGINS_left+PLOT_MARGINS_right,layoutHeight=props.height-heightPadding,layoutWidth=props.width-widthPadding,treeLayout=react.useMemo((function computeLayout(){return src.B22().size([layoutHeight,layoutWidth])}),[layoutHeight,layoutWidth]),nodeTree=react.useMemo((function computeTree(){const hierarchy=src.Sk5(rootTreeNode).each((node=>{const collapseFlag=nodeCollapseFlags[makeNodeId(node)],visibleDepth=props.initialVisibleDepth??Number.MAX_SAFE_INTEGER;!1!==collapseFlag&&(node.depth>=visibleDepth||!0===collapseFlag)&&(node.children=void 0)}));return treeLayout(hierarchy)}),[treeLayout,rootTreeNode,nodeCollapseFlags,props.initialVisibleDepth]),oldNodeTree=function usePreviousTree(treeRootNode){const initRoot=lodash_default().clone(treeRootNode);initRoot.children=void 0;const oldNodeTree=react.useRef(initRoot);return react.useEffect((()=>{oldNodeTree.current=treeRootNode}),[treeRootNode]),oldNodeTree.current}(nodeTree);function toggleNodeCollapse(node){const nodeIdent=makeNodeId(node),collapsed=Boolean(node.children?.length);setNodeCollapseFlags((prev=>{const existingVal=prev[nodeIdent],newVal=collapsed&&!existingVal,newFlags={...prev,[nodeIdent]:newVal};return newVal&&node.descendants().slice(1).forEach((child=>delete newFlags[makeNodeId(child)])),newFlags}))}return react.createElement("g",{transform:`translate(${PLOT_MARGINS_left},${PLOT_MARGINS_top})`},react.createElement(AnimatePresence.N,{custom:nodeTree},nodeTree.links().map((link=>react.createElement(TransitionTreeEdge,{key:makeLinkId(link),link:link,dataAssembler:props.dataAssembler,primaryEdgeProperty:props.primaryEdgeProperty,oldNodeTree:oldNodeTree}))),nodeTree.descendants().map((node=>react.createElement(TransitionTreeNode,{key:makeNodeId(node),primaryNodeProperty:props.primaryNodeProperty,dataAssembler:props.dataAssembler,node:node,oldNodeTree:oldNodeTree,onNodeClick:toggleNodeCollapse})))))}function PlotErrorOverlay(props){return react.createElement(react.Fragment,null,react.createElement("rect",{className:"error-overlay-background",width:"100%",height:"100%",fill:"rgba(255, 255, 255, 0.8)"}),react.createElement("text",{x:"50%",y:"50%",fill:"red",textAnchor:"middle",dominantBaseline:"middle",fontSize:16},props.message))}TreePlotRenderer.__docgenInfo={description:"",methods:[],displayName:"TreePlotRenderer",props:{dataAssembler:{required:!0,tsType:{name:"DataAssembler"},description:""},primaryEdgeProperty:{required:!0,tsType:{name:"string"},description:""},primaryNodeProperty:{required:!0,tsType:{name:"string"},description:""},height:{required:!0,tsType:{name:"number"},description:""},width:{required:!0,tsType:{name:"number"},description:""},initialVisibleDepth:{required:!1,tsType:{name:"number"},description:""}}},PlotErrorOverlay.__docgenInfo={description:"",methods:[],displayName:"PlotErrorOverlay",props:{message:{required:!0,tsType:{name:"string"},description:""}}};class DataAssembler{_currentTreeIndex=0;_currentDateIndex=0;constructor(datedTrees,edgeMetadataList,nodeMetadataList){if(!datedTrees.length)throw new Error("Tree-list is empty");this.datedTrees=datedTrees,this.edgeMetadataList=edgeMetadataList,this.nodeMetadataList=nodeMetadataList,this._propertyToLabelMap=new Map,[...edgeMetadataList,...nodeMetadataList].forEach((elm=>{this._propertyToLabelMap.set(elm.key,[elm.label,elm.unit])})),this._propertyMaxVals=new Map,this.datedTrees.forEach((({tree:tree})=>{src.Sk5(tree,(d=>d.children)).each((node=>{const{edge_data:edge_data}=node.data;Object.entries(edge_data).forEach((([key,vals])=>{const existingMax=this._propertyMaxVals.get(key)??Number.MIN_VALUE,newMax=Math.max(...vals,existingMax);this._propertyMaxVals.set(key,newMax)}))}))}))}setActiveDate(newDate){const[newTreeIdx,newDateIdx]=function findTreeAndDateIndex(targetDate,datedTrees){for(let treeIdx=0;treeIdx<datedTrees.length;treeIdx++){const dateIdx=datedTrees[treeIdx].dates.findIndex((date=>date===targetDate));if(-1!==dateIdx)return[treeIdx,dateIdx]}return[-1,-1]}(newDate,this.datedTrees);if(-1===newTreeIdx||-1===newDateIdx)throw new Error("Invalid date for data assembler");this._currentTreeIndex=newTreeIdx,this._currentDateIndex=newDateIdx}getActiveTree(){return this.datedTrees[this._currentTreeIndex]}getTooltip(data){if(-1===this._currentDateIndex)return"";let text="";for(const propName in data){const[label,unit]=this.getPropertyInfo(propName);text+=`${label}: ${printTreeValue(this.getPropertyValue(data,propName))} ${unit}\n`}return text.trimEnd()}getPropertyValue(data,property){if(-1===this._currentDateIndex)return null;const value=data[property]?.[this._currentDateIndex];return value??null}getPropertyInfo(propertyKey){const[label,unit]=this._propertyToLabelMap.get(propertyKey)??[];return[lodash_default().upperFirst(label??""),unit??"?"]}normalizeValue(data,property){const value=this.getPropertyValue(data,property)??0,maxVal=this._propertyMaxVals.get(property);return maxVal&&0!==value?src.m4Y().domain([0,maxVal]).range([2,100])(value):0}}function GroupTreePlot(props){const svgRootRef=react.useRef(null),[svgHeight,setSvgHeight]=react.useState(0),[svgWidth,setSvgWidth]=react.useState(0),[dataAssembler,initError]=function useDataAssembler(datedTrees,edgeMetadataList,nodeMetadataList){let errorMsg="";const lastValidDataAssembler=react.useRef(null),dataAssembler=react.useMemo((()=>0===datedTrees.length?null:new DataAssembler(datedTrees,edgeMetadataList,nodeMetadataList)),[datedTrees,edgeMetadataList,nodeMetadataList]);return null===dataAssembler?errorMsg="Invalid data for assembler":dataAssembler!==lastValidDataAssembler.current&&(lastValidDataAssembler.current=dataAssembler),[lastValidDataAssembler.current,errorMsg]}(props.datedTrees,props.edgeMetadataList,props.nodeMetadataList),dateUpdateError=function useUpdateAssemblerDate(dataAssembler,targetDate){const[prevDate,setPrevDate]=react.useState(null);if(dataAssembler&&targetDate!==prevDate)try{dataAssembler.setActiveDate(targetDate),setPrevDate(targetDate)}catch(error){return error.message}}(dataAssembler,props.selectedDateTime),errorToPrint=initError??dateUpdateError;return react.useEffect((function setupResizeObserver(){if(!svgRootRef.current)throw new Error("Expected root ref to be set");const svgElement=svgRootRef.current,debouncedResizeObserverCheck=lodash_default().debounce((function debouncedResizeObserverCheck(entries){if(!Array.isArray(entries))return;if(!entries.length)return;const entry=entries[0];setSvgWidth(entry.contentRect.width),setSvgHeight(entry.contentRect.height)}),100);setSvgHeight(svgElement.getBoundingClientRect().height),setSvgWidth(svgElement.getBoundingClientRect().width);const resizeObserver=new ResizeObserver(debouncedResizeObserverCheck);return resizeObserver.observe(svgElement),()=>{debouncedResizeObserverCheck.cancel(),resizeObserver.disconnect()}}),[]),react.createElement("svg",{ref:svgRootRef,height:"100%",width:"100%"},dataAssembler&&svgHeight&&svgWidth&&react.createElement(TreePlotRenderer,{dataAssembler:dataAssembler,primaryEdgeProperty:props.selectedEdgeKey,primaryNodeProperty:props.selectedNodeKey,width:svgWidth,height:svgHeight,initialVisibleDepth:props.initialVisibleDepth}),errorToPrint&&react.createElement(PlotErrorOverlay,{message:errorToPrint}))}GroupTreePlot.displayName="GroupTreePlot",GroupTreePlot.__docgenInfo={description:"",methods:[],displayName:"GroupTreePlot",props:{id:{required:!0,tsType:{name:"string"},description:""},edgeMetadataList:{required:!0,tsType:{name:"Array",elements:[{name:"EdgeMetadata"}],raw:"EdgeMetadata[]"},description:""},nodeMetadataList:{required:!0,tsType:{name:"Array",elements:[{name:"NodeMetadata"}],raw:"NodeMetadata[]"},description:""},datedTrees:{required:!0,tsType:{name:"Array",elements:[{name:"DatedTree"}],raw:"DatedTree[]"},description:""},selectedEdgeKey:{required:!0,tsType:{name:"string"},description:""},selectedNodeKey:{required:!0,tsType:{name:"string"},description:""},selectedDateTime:{required:!0,tsType:{name:"string"},description:""},initialVisibleDepth:{required:!1,tsType:{name:"number"},description:""}}};const exampleDates=["2018-02-01","2018-03-01","2019-02-01","2019-03-01"],exampleDatedTrees=[{dates:["2018-02-01","2018-03-01"],tree:{node_label:"TRE_1",node_type:"Group",node_data:{pressure:[5,10]},edge_label:"VFP10",edge_data:{waterrate:[10,10],oilrate:[10,10],gasrate:[10,10],waterinjrate:[10,10],gasinjrate:[10,10]},children:[{node_label:"TRE_1_1",node_type:"Well",node_data:{pressure:[20,30],bhp:[11,10],wmctl:[12,10]},edge_label:"VFP11",edge_data:{waterrate:[20,30],oilrate:[30,40],gasrate:[40,50],waterinjrate:[50,60],gasinjrate:[60,70]},children:void 0},{node_label:"TRE_1_2",node_type:"Well",node_data:{pressure:[22,30],wmctl:[10,10]},edge_label:"VFP12",edge_data:{waterrate:[25,35],oilrate:[35,45],gasrate:[45,55],waterinjrate:[55,65],gasinjrate:[65,75]},children:void 0}]}},{dates:["2019-02-01","2019-03-01"],tree:{node_label:"TRE_1",node_type:"Group",node_data:{pressure:[5,10]},edge_label:"VFP10",edge_data:{waterrate:[10,10],oilrate:[10,10],gasrate:[10,10],waterinjrate:[10,10],gasinjrate:[10,10]},children:[{node_label:"TRE_1_1",node_type:"Well",node_data:{pressure:[20,30],bhp:[10,10],wmctl:[10,10]},edge_label:"VFP11",edge_data:{waterrate:[20,30],oilrate:[30,40],gasrate:[40,50],waterinjrate:[50,60],gasinjrate:[60,70]},children:[{node_label:"TRE_1_1_1",node_type:"Well",node_data:{pressure:[20,30],bhp:[10,10],wmctl:[10,10]},edge_label:"VFP12",edge_data:{waterrate:[20,30],oilrate:[30,40],gasrate:[40,50],waterinjrate:[50,60],gasinjrate:[60,70]}},{node_label:"TRE_1_1_2",node_type:"Well",node_data:{pressure:[20,30],bhp:[10,10],wmctl:[10,10]},edge_label:"VFP13",edge_data:{waterrate:[20,30],oilrate:[30,40],gasrate:[40,50],waterinjrate:[50,60],gasinjrate:[60,70]}}]},{node_label:"TRE_1_2",node_type:"Well",node_data:{pressure:[20,30],bhp:[10,10],wmctl:[10,10]},edge_label:"VFP14",edge_data:{waterrate:[20,0],oilrate:[30,40],gasrate:[40,50],waterinjrate:[50,60],gasinjrate:[60,70]}}]}}];var GroupTreePlot_stories={component:GroupTreePlot,title:"GroupTreePlot/Demo",argTypes:{selectedDateTime:{description:"The selected `string` must be a date time present in one of the `dates` arrays in an element of the`datedTrees`-prop.\n\n",options:exampleDates,control:{type:"select"}},selectedEdgeKey:{description:"The selection `string` must be an edge key present in one of the `edge_data` objects in the `tree`-prop of an element in `datedTrees`-prop.\n\n"},selectedNodeKey:{description:"The selected `string` must be a node key present in one of the `node_data` objects in the `tree`-prop of an element in `datedTrees`-prop.\n\n"},initialVisibleDepth:{description:"When initially rendering the tree, automatically collapse all nodes at or below this depth"}}};const Template=args=>react.createElement(GroupTreePlot,{id:args.id,datedTrees:args.datedTrees,edgeMetadataList:args.edgeMetadataList,nodeMetadataList:args.nodeMetadataList,selectedDateTime:args.selectedDateTime,selectedEdgeKey:args.selectedEdgeKey,selectedNodeKey:args.selectedNodeKey,initialVisibleDepth:args.initialVisibleDepth}),edgeMetadataList=[{key:"waterrate",label:"Water Rate",unit:"m3/s"},{key:"oilrate",label:"Oil Rate",unit:"m3/s"},{key:"gasrate",label:"Gas Rate",unit:"m3/s"},{key:"waterinjrate",label:"Water Injection Rate",unit:"m3/s"},{key:"gasinjrate",label:"Gas Injection Rate",unit:"m3/s"}],nodeMetadataList=[{key:"pressure",label:"Pressure",unit:"Bar"},{key:"bhp",label:"Bottom Hole Pressure",unit:"N/m2"},{key:"wmctl",label:""}],Default={args:{id:"grouptreeplot",datedTrees:exampleDatedTrees,edgeMetadataList:edgeMetadataList,nodeMetadataList:nodeMetadataList,selectedDateTime:exampleDates[0],selectedEdgeKey:edgeMetadataList[0].key,selectedNodeKey:nodeMetadataList[0].key},render:args=>react.createElement("div",{style:{width:938,height:700}},react.createElement(Template,args))},Resizable={parameters:{docs:{description:{story:"The component dynamically resizes itself to fit it's parent container"}}},args:{id:"grouptreeplot",datedTrees:exampleDatedTrees,edgeMetadataList:edgeMetadataList,nodeMetadataList:nodeMetadataList,selectedDateTime:exampleDates[0],selectedEdgeKey:edgeMetadataList[0].key,selectedNodeKey:nodeMetadataList[0].key},render:args=>{function RandomSizeDiv(props){const[targetHeight,setTargetHeight]=react.useState(400),[targetWidth,setTargetWidth]=react.useState(400),rerollSize=react.useCallback((()=>{setTargetHeight(lodash_default().random(400,700)),setTargetWidth(lodash_default().random(400,700))}),[]);return react.createElement("div",{style:{height:700,width:700}},react.createElement("button",{onClick:rerollSize},"Randomize size"),react.createElement("div",{style:{marginTop:"0.25rem",background:"rgb(0,0,255,0.2)",height:targetHeight,width:targetWidth,transition:"height, width",transitionDuration:"200ms"}},props.children))}return react.createElement(RandomSizeDiv,null,react.createElement(Template,args))}},__namedExportsOrder=["Default","Resizable"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "grouptreeplot",\n    datedTrees: exampleDatedTrees,\n    edgeMetadataList: edgeMetadataList,\n    nodeMetadataList: nodeMetadataList,\n    selectedDateTime: exampleDates[0],\n    selectedEdgeKey: edgeMetadataList[0].key,\n    selectedNodeKey: nodeMetadataList[0].key\n  },\n  render: args => {\n    const CONTAINER_HEIGHT = 700;\n    const CONTAINER_WIDTH = 938;\n    return <div style={{\n      width: CONTAINER_WIDTH,\n      height: CONTAINER_HEIGHT\n    }}>\n                <Template {...args} />\n            </div>;\n  }\n}',...Default.parameters?.docs?.source}}},Resizable.parameters={...Resizable.parameters,docs:{...Resizable.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      description: {\n        story: "The component dynamically resizes itself to fit it\'s parent container"\n      }\n    }\n  },\n  args: {\n    id: "grouptreeplot",\n    datedTrees: exampleDatedTrees,\n    edgeMetadataList: edgeMetadataList,\n    nodeMetadataList: nodeMetadataList,\n    selectedDateTime: exampleDates[0],\n    selectedEdgeKey: edgeMetadataList[0].key,\n    selectedNodeKey: nodeMetadataList[0].key\n  },\n  render: args => {\n    // Wrapping comp to showcase resizing\n    function RandomSizeDiv(props: {\n      children: React.ReactNode;\n    }): React.ReactNode {\n      const [targetHeight, setTargetHeight] = React.useState(400);\n      const [targetWidth, setTargetWidth] = React.useState(400);\n      const rerollSize = React.useCallback(() => {\n        setTargetHeight(_.random(400, 700));\n        setTargetWidth(_.random(400, 700));\n      }, []);\n      return <div style={{\n        height: 700,\n        width: 700\n      }}>\n                    <button onClick={rerollSize}>Randomize size</button>\n                    <div style={{\n          marginTop: "0.25rem",\n          background: "rgb(0,0,255,0.2)",\n          height: targetHeight,\n          width: targetWidth,\n          transition: "height, width",\n          transitionDuration: "200ms"\n        }}>\n                        {props.children}\n                    </div>\n                </div>;\n    }\n    return <RandomSizeDiv>\n                <Template {...args} />\n            </RandomSizeDiv>;\n  }\n}',...Resizable.parameters?.docs?.source}}}}}]);