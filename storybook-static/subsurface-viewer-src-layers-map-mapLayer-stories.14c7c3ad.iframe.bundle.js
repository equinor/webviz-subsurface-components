"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[2741],{"./packages/subsurface-viewer/src/layers/map/mapLayer.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BigMap:function(){return BigMap},BigMap3d:function(){return BigMap3d},BigMapWithHole:function(){return BigMapWithHole},CellCenteredPropMap:function(){return CellCenteredPropMap},ContourLines:function(){return ContourLines},Extensions:function(){return Extensions},MapLayer2d:function(){return MapLayer2d},MapLayer2dDarkMode:function(){return MapLayer2dDarkMode},MapLayer3dPng:function(){return MapLayer3dPng},MapLayer3dPngNoBounds:function(){return MapLayer3dPngNoBounds},NodeCenteredPropMap:function(){return NodeCenteredPropMap},NodeCenteredPropMapWithArrayInput:function(){return NodeCenteredPropMapWithArrayInput},Readout:function(){return Readout},Rotated:function(){return Rotated},SmallMap:function(){return SmallMap},TypedArrayInput:function(){return TypedArrayInput},__namedExportsOrder:function(){return __namedExportsOrder}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_components_Map__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/subsurface-viewer/src/components/Map.tsx"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),_components_InfoCard__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./packages/subsurface-viewer/src/components/InfoCard.tsx"),_axes_axesLayer__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./packages/subsurface-viewer/src/layers/axes/axesLayer.ts"),_mapLayer__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./packages/subsurface-viewer/src/layers/map/mapLayer.ts"),_components_ViewFooter__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./packages/subsurface-viewer/src/components/ViewFooter.tsx"),_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@deck.gl/core/dist/esm/views/view.js"),_northarrow_northArrow3DLayer__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./packages/subsurface-viewer/src/layers/northarrow/northArrow3DLayer.ts"),_deck_gl_extensions_typed__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@deck.gl/extensions/dist/esm/clip/clip-extension.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const stories={parameters:{storySource:{source:'function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from "react";\nimport { useHoverInfo } from "../../components/Map";\nimport SubsurfaceViewer from "../../SubsurfaceViewer";\nimport InfoCard from "../../components/InfoCard";\nimport AxesLayer from "../axes/axesLayer";\nimport MapLayer from "./mapLayer";\nimport { ViewFooter } from "../../components/ViewFooter";\nimport { View } from "@deck.gl/core/typed";\nimport NorthArrow3DLayer from "../northarrow/northArrow3DLayer";\nimport { ClipExtension } from "@deck.gl/extensions/typed";\nconst stories = {\n  component: SubsurfaceViewer,\n  title: "SubsurfaceViewer / Map Layer",\n  args: {\n    // Add a reset button for all the stories.\n    // Somehow, I do not manage to add the triggerHome to the general "unset" controls :/\n    triggerHome: 0\n  }\n};\nexport default stories;\nconst defaultMapLayerProps = {\n  "@@type": "MapLayer",\n  id: "default_map",\n  meshData: "hugin_depth_25_m.float32",\n  frame: {\n    origin: [432150, 6475800],\n    count: [291, 229],\n    increment: [25, 25],\n    rotDeg: 0\n  },\n  propertiesData: "kh_netmap_25_m.float32",\n  ZIncreasingDownwards: true\n};\nconst defaultMapLayer = {\n  ...defaultMapLayerProps\n};\n\n// Example using "Map" layer. Uses float32 mesh and properties binary arrays. Not PNG.\nconst meshMapLayerBig = {\n  "@@type": "MapLayer",\n  id: "mesh-layer",\n  meshUrl: "hugin_depth_5_m.float32",\n  frame: {\n    origin: [432150, 6475800],\n    count: [1451, 1141],\n    increment: [5, 5],\n    rotDeg: 0\n  },\n  propertiesUrl: "kh_netmap_5_m.float32",\n  contours: [0, 100],\n  isContoursDepth: true,\n  gridLines: false,\n  material: true,\n  colorMapName: "Physics"\n};\n\n// Small test map. 4 by 5 cells. One inactive node => 4 inactive cells.\n// property values and depth values both from 0 to 29.\n// Useful for debugging.\nconst smallLayer = {\n  "@@type": "MapLayer",\n  id: "mesh-layer",\n  meshUrl: "small_depths.float32",\n  frame: {\n    origin: [459840.7, 5929826.1],\n    count: [5, 6],\n    increment: [175, 150],\n    rotDeg: 0\n  },\n  propertiesUrl: "small_properties.float32",\n  gridLines: true,\n  material: false,\n  // black to white colors.\n  colorMapFunction: value => [value * 255, value * 255, value * 255],\n  colorMapRange: [0, 29],\n  colorMapClampColor: [255, 0, 0]\n};\n\n// This layer has as many property values as depth values hence each cell will be interpolated in color.\nconst nodeCenteredPropertiesLayer = {\n  "@@type": "MapLayer",\n  id: "node-centered-layer",\n  meshUrl: "data:text/plain;base64,zczMP5qZ2T9mZuY/MzPzP5qZmT9mZqY/MzOzPwAAwD/NzEw/ZmZmPwAAgD/NzIw/zczMPgAAAD+amRk/MzMzPwAAAIDNzMw9zcxMPpqZmT4=",\n  frame: {\n    origin: [0, 0],\n    count: [4, 5],\n    increment: [1, 1],\n    rotDeg: 0\n  },\n  propertiesUrl: "data:text/plain;base64,ZmYmQM3MLEAzMzNAmpk5QM3MDEAzMxNAmpkZQAAAIEBmZuY/MzPzPwAAAEBmZgZAMzOzPwAAwD/NzMw/mpnZPwAAgD/NzIw/mpmZP2Zmpj8=",\n  gridLines: true,\n  material: true,\n  // black to white colors.\n  colorMapFunction: value => [value * 255, value * 255, value * 255]\n};\nconst nodeCenteredPropertiesLayerWithArrayInput = {\n  "@@type": "MapLayer",\n  id: "node-centered-layer",\n  frame: {\n    origin: [0, 0],\n    count: [4, 5],\n    increment: [1, 1],\n    rotDeg: 0\n  },\n  meshData: Array.from(Array(20)).map(() => Math.random()),\n  // Array of 20 random numbers\n  propertiesData: Array.from(Array(20)).map(() => Math.random()),\n  gridLines: true,\n  material: true,\n  // black to white colors.\n  colorMapFunction: value => [value * 255, value * 255, value * 255]\n};\n\n// This layer has as (nx-1)*(ny-1) property values and depth values are nx*ny hence each cell will be fixed in color.\nconst cellCenteredPropertiesLayer = {\n  "@@type": "MapLayer",\n  id: "cell-centered-layer",\n  \n  // One depth pr node\n  meshData: [1.6, 1.7, 1.8, 1.9, 1.2, 1.3, 1.4, 1.5, 0.8, 0.9, 1.0, 1.1, 0.4, 0.5, 0.6, 0.7, 0.0, 0.1, 0.2, 0.3],\n  // One property pr cell.\n  propertiesData: [0.9, 1.0, 1.1, 0.6, undefined, 0.8, 0.3, 0.4, 0.5, 0.0, 0.1, 0.2],\n  \n\n  frame: {\n    origin: [0, 0],\n    count: [4, 5],\n    increment: [1, 1],\n    rotDeg: 0\n  },\n  gridLines: true,\n  material: true,\n  // black to white colors.\n  colorMapFunction: value => [value * 255, value * 255, value * 255],\n  smoothShading: true\n};\n\n// Example using "Map" layer. Uses PNG float for mesh and properties.\nconst meshMapLayerPng = {\n  "@@type": "MapLayer",\n  id: "mesh-layer",\n  meshUrl: "hugin_depth_25_m.png",\n  frame: {\n    origin: [432150, 6475800],\n    count: [291, 229],\n    increment: [25, 25],\n    rotDeg: 0\n  },\n  propertiesUrl: "kh_netmap_25_m.png",\n  contours: [0, 100],\n  isContoursDepth: true,\n  gridLines: false,\n  material: true,\n  smoothShading: true,\n  colorMapName: "Physics",\n  ZIncreasingDownwards: true\n};\n\n// Example using "Map" layer. Uses float32 float for mesh and properties.\nconst meshMapLayerFloat32 = {\n  "@@type": "MapLayer",\n  id: "mesh-layer",\n  meshUrl: "hugin_depth_25_m.float32",\n  frame: {\n    origin: [432150, 6475800],\n    count: [291, 229],\n    increment: [25, 25],\n    rotDeg: 0\n  },\n  propertiesUrl: "kh_netmap_25_m.float32",\n  contours: [0, 100],\n  isContoursDepth: true,\n  gridLines: false,\n  material: false,\n  colorMapName: "Physics"\n};\n\n// Example rotated layer\nconst meshMapLayerRotated = {\n  "@@type": "MapLayer",\n  id: "mesh-layer",\n  meshUrl: "hugin_depth_25_m.float32",\n  frame: {\n    origin: [432150, 6475800],\n    count: [291, 229],\n    increment: [25, 25],\n    rotDeg: 30\n    //rotPoint: [436000, 6478000],\n  },\n  propertiesUrl: "kh_netmap_25_m.float32",\n  contours: [0, 100],\n  isContoursDepth: true,\n  material: false,\n  colorMapName: "Physics"\n};\nconst axes_hugin_layer = {\n  "@@type": "AxesLayer",\n  id: "axes-layer2",\n  bounds: [432150, 6475800, 2000, 439400, 6481500, 3500]\n};\nconst north_arrow_layer = {\n  "@@type": "NorthArrow3DLayer",\n  id: "north-arrow-layer"\n};\nconst defaultArgs = {\n  bounds: [432150, 6475800, 439400, 6481500]\n};\nconst DEFAULT_VIEWS = {\n  layout: [1, 1],\n  viewports: [{\n    id: "view_1",\n    show3D: true\n  }]\n};\nconst defaultParameters = {\n  docs: {\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nexport const MapLayer3dPng = {\n  args: {\n    id: "map",\n    layers: [axes_hugin_layer, meshMapLayerPng, north_arrow_layer],\n    bounds: [432150, 6475800, 439400, 6481500],\n    views: DEFAULT_VIEWS\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "Example using png as mesh and properties data."\n      }\n    }\n  }\n};\nexport const MapLayer3dPngNoBounds = {\n  args: {\n    id: "map",\n    layers: [axes_hugin_layer, meshMapLayerPng, north_arrow_layer],\n    views: DEFAULT_VIEWS\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "If no bounds are specified will results in automatically calcultated camera. Will look at center of bounding box of the data"\n      }\n    }\n  }\n};\nconst axesLayer2D = {\n  "@@type": "Axes2DLayer",\n  id: "axesLayer2D",\n  backgroundColor: [0, 255, 255]\n};\nconst mapLayer = {\n  "@@type": "MapLayer",\n  id: "MapLayer",\n  meshUrl: "hugin_depth_25_m.float32",\n  frame: {\n    origin: [432150, 6475800],\n    count: [291, 229],\n    increment: [25, 25],\n    rotDeg: 0\n  },\n  propertiesUrl: "kh_netmap_25_m.float32",\n  contours: [0, 100],\n  isContoursDepth: true,\n  gridLines: false,\n  material: true,\n  colorMapName: "Physics"\n};\nexport const MapLayer2d = {\n  args: {\n    id: "map",\n    layers: [mapLayer, axesLayer2D],\n    bounds: [432150, 6475800, 439400, 6481500],\n    views: {\n      layout: [1, 1],\n      viewports: [{\n        id: "view_1",\n        show3D: false\n      }]\n    }\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "Example using png as mesh and properties data."\n      }\n    }\n  }\n};\nconst white = [255, 255, 255, 255];\nexport const MapLayer2dDarkMode = {\n  args: {\n    id: "map",\n    layers: [{\n      ...axes_hugin_layer,\n      labelColor: white,\n      axisColor: white\n    }, {\n      ...meshMapLayerFloat32,\n      material: false,\n      gridLines: false\n    }, {\n      ...north_arrow_layer,\n      color: white\n    }],\n    bounds: [432150, 6475800, 439400, 6481500],\n    scale: {\n      visible: true,\n      cssStyle: {\n        color: "white"\n      }\n    },\n    views: {\n      layout: [1, 1],\n      viewports: [{\n        id: "view_1",\n        show3D: false\n      }]\n    }\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "Example using png as mesh and properties data."\n      }\n    },\n    backgrounds: {\n      default: "dark"\n    }\n  }\n};\nexport const Rotated = {\n  args: {\n    id: "map",\n    layers: [axes_hugin_layer, meshMapLayerRotated, north_arrow_layer],\n    bounds: [432150, 6475800, 439400, 6481500],\n    views: {\n      layout: [1, 1],\n      viewports: [{\n        id: "view_1",\n        show3D: false\n      }]\n    }\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "Example using png as mesh and properties data."\n      }\n    }\n  }\n};\nexport const BigMap = {\n  args: {\n    id: "map",\n    layers: [axes_hugin_layer, meshMapLayerBig, north_arrow_layer],\n    bounds: [432150, 6475800, 439400, 6481500]\n  }\n};\nexport const BigMap3d = {\n  args: {\n    id: "map",\n    layers: [axes_hugin_layer, meshMapLayerBig, north_arrow_layer],\n    bounds: [432150, 6475800, 439400, 6481500],\n    views: DEFAULT_VIEWS\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "Example using large map with approx. 1400x1400 cells."\n      }\n    }\n  }\n};\nconst axes_small = {\n  "@@type": "AxesLayer",\n  id: "axes_small",\n  bounds: [459790, 5929776, 0, 460590, 5930626, 30]\n};\nexport const SmallMap = {\n  args: {\n    id: "map",\n    layers: [axes_small, smallLayer, north_arrow_layer],\n    bounds: [459840.7, 5929826.1, 460540.7, 5930576.1],\n    views: DEFAULT_VIEWS\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "4x5 cells."\n      }\n    }\n  }\n};\nconst axes_lite = {\n  "@@type": "AxesLayer",\n  id: "axes_small",\n  bounds: [-1, -1, 0, 4, 5, 3]\n};\n\n//-- CellCenteredPropMap --\nexport const CellCenteredPropMap = {\n  args: {\n    id: "map",\n    layers: [axes_lite, cellCenteredPropertiesLayer, north_arrow_layer],\n    bounds: [-1, -1, 4, 5],\n    views: DEFAULT_VIEWS\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "A small map with properties given at cell centers. Each cell will be constant colored"\n      }\n    }\n  }\n};\n\n//-- NodeCenteredPropMap --\nexport const NodeCenteredPropMap = {\n  args: {\n    id: "map",\n    layers: [axes_lite, nodeCenteredPropertiesLayer, north_arrow_layer],\n    bounds: [-1, -1, 4, 5],\n    views: DEFAULT_VIEWS\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "A small map with properties given at nodes. Each cell will be interpolated in color."\n      }\n    }\n  }\n};\n\n//-- NodeCenteredPropMap  with native javascript arrays as input --\nexport const NodeCenteredPropMapWithArrayInput = {\n  args: {\n    id: "map",\n    layers: [axes_lite, nodeCenteredPropertiesLayerWithArrayInput, north_arrow_layer],\n    bounds: [-1, -1, 4, 5],\n    views: DEFAULT_VIEWS\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "Both mesh and property data given as native javascript arrays (as opposed to URL)."\n      }\n    }\n  }\n};\nfunction makeGaussian(amplitude, x0, y0, stdX, stdY) {\n  return function (amplitude, x0, y0, stdX, stdY, x, y) {\n    const exponent = -(Math.pow(x - x0, 2) / (2 * Math.pow(stdX, 2)) + Math.pow(y - y0, 2) / (2 * Math.pow(stdY, 2)));\n    return amplitude * Math.pow(Math.E, exponent);\n  }.bind(null, amplitude, x0, y0, stdX, stdY);\n}\nfunction makeData(n, amplitude) {\n  const X0 = 0;\n  const Y0 = 0;\n  const stdX = 75;\n  const stdY = 50;\n  const f = makeGaussian(amplitude, X0, Y0, stdX, stdY);\n  const data = new Float32Array(n * n).map((val, index) => {\n    const x = index % n - n / 2;\n    const y = Math.floor(index / n) - n / 2;\n    return f(x, y); // keep + 0.3 * Math.random();\n  });\n  return data;\n}\nfunction nearestColorMap(x) {\n  if (x > 0.5) return [100, 255, 255];else if (x > 0.1) return [255, 100, 255];\n  return [255, 255, 100];\n}\n\n//-- MapLayer with native javascript arrays as input --\nconst TypedArrayInputComponent = args => {\n  const subsurfaceViewerArgs = {\n    id: "map",\n    layers: [\n    // Can not use Record<string, unknown> because makeData() is not supported\n    new MapLayer({\n      frame: {\n        origin: [-args.dimension / 2, -args.dimension / 2],\n        count: [args.dimension, args.dimension],\n        increment: [1, 1],\n        rotDeg: 0\n      },\n      meshData: makeData(args.dimension, 99),\n      propertiesData: makeData(args.dimension, 1),\n      gridLines: false,\n      material: true,\n      ZIncreasingDownwards: false,\n      contours: [0, 5],\n      colorMapFunction: nearestColorMap\n    }), new AxesLayer({\n      ZIncreasingDownwards: false,\n      bounds: [-args.dimension / 2, -args.dimension / 2, -10, args.dimension / 2, args.dimension / 2, 60]\n    })],\n    cameraPosition: {\n      rotationOrbit: 45,\n      rotationX: 45,\n      zoom: [-100, -100, -10, 100, 100, 60],\n      target: [0, 0, 0]\n    },\n    views: DEFAULT_VIEWS,\n    triggerHome: args.triggerHome\n  };\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, subsurfaceViewerArgs);\n};\nexport const TypedArrayInput = {\n  args: {\n    dimension: 300\n  },\n  argTypes: {\n    dimension: {\n      control: {\n        type: "range",\n        min: 150,\n        max: 300,\n        step: 1\n      }\n    }\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "Both mesh and property data given as typed arrays arrays (as opposed to URL)."\n      }\n    }\n  },\n  render: args => /*#__PURE__*/React.createElement(TypedArrayInputComponent, args)\n};\nconst ReadoutComponent = () => {\n  const [hoverInfo, hoverCallback] = useHoverInfo();\n  const args = React.useMemo(() => {\n    return {\n      ...defaultArgs,\n      id: "readout",\n      layers: [{\n        ...meshMapLayerFloat32\n      }],\n      coords: {\n        visible: false\n      },\n      onMouseEvent: hoverCallback\n    };\n  }, [hoverCallback]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SubsurfaceViewer, args), hoverInfo && /*#__PURE__*/React.createElement(InfoCard, {\n    pickInfos: hoverInfo\n  }));\n};\nexport const Readout = {\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "Readout example."\n      }\n    }\n  },\n  render: () => /*#__PURE__*/React.createElement(ReadoutComponent, null)\n};\nconst BigMapWithHoleComponent = () => {\n  const [hoverInfo, hoverCallback] = useHoverInfo();\n  const args = React.useMemo(() => {\n    return {\n      ...defaultArgs,\n      id: "readout",\n      layers: [{\n        ...meshMapLayerBig,\n        meshUrl: "hugin_depth_5_m_w_hole.float32",\n        gridLines: false,\n        material: false\n      }],\n      coords: {\n        visible: false\n      },\n      onMouseEvent: hoverCallback\n    };\n  }, [hoverCallback]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SubsurfaceViewer, args), hoverInfo && /*#__PURE__*/React.createElement(InfoCard, {\n    pickInfos: hoverInfo\n  }));\n};\nexport const BigMapWithHole = {\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "Example of map with a hole."\n      }\n    }\n  },\n  render: () => /*#__PURE__*/React.createElement(BigMapWithHoleComponent, null)\n};\nconst ContourLinesComponent = props => {\n  const contourMapLayer = new MapLayer({\n    ...defaultMapLayerProps,\n    id: "contours",\n    contours: [props.contourOffset, props.zContourInterval]\n  });\n  const propertyContourMapLayer = new MapLayer({\n    ...defaultMapLayerProps,\n    id: "property_contours",\n    contours: [props.contourOffset, props.propertyContourInterval],\n    isContoursDepth: false\n  });\n  const flatPropertyContourMapLayer = new MapLayer({\n    ...defaultMapLayerProps,\n    id: "flat",\n    meshData: undefined,\n    contours: [props.contourOffset, props.propertyContourInterval]\n  });\n  const views = {\n    layout: [2, 2],\n    showLabel: true,\n    viewports: [{\n      id: "view_1",\n      show3D: props.show3d,\n      layerIds: [defaultMapLayerProps.id],\n      isSync: props.syncViewports\n    }, {\n      id: "view_2",\n      show3D: props.show3d,\n      layerIds: [contourMapLayer.id],\n      isSync: props.syncViewports\n    }, {\n      id: "view_3",\n      show3D: props.show3d,\n      layerIds: [propertyContourMapLayer.id],\n      isSync: props.syncViewports\n    }, {\n      id: "view_4",\n      show3D: props.show3d,\n      layerIds: [flatPropertyContourMapLayer.id],\n      isSync: props.syncViewports\n    }]\n  };\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, {\n    id: "test",\n    layers: [new MapLayer(defaultMapLayer), contourMapLayer, propertyContourMapLayer, flatPropertyContourMapLayer],\n    views: views\n  },\n  /*#__PURE__*/\n  \n  /* @ts-expect-error */\n  React.createElement(View, {\n    id: "view_1"\n  }, /*#__PURE__*/React.createElement(ViewFooter, null, "Default - no contour lines")),\n  /*#__PURE__*/\n  \n  /* @ts-expect-error */\n  React.createElement(View, {\n    id: "view_2"\n  }, /*#__PURE__*/React.createElement(ViewFooter, null, "Contour lines enabled - default is Z value")),\n  /*#__PURE__*/\n  \n  /* @ts-expect-error */\n  React.createElement(View, {\n    id: "view_3"\n  }, /*#__PURE__*/React.createElement(ViewFooter, null, "Contour lines on property value")),\n  /*#__PURE__*/\n  \n  /* @ts-expect-error */\n  React.createElement(View, {\n    id: "view_4"\n  }, /*#__PURE__*/React.createElement(ViewFooter, null, "Contour lines on flat map - default is property value")));\n};\nexport const ContourLines = {\n  args: {\n    syncViewports: true,\n    show3d: true,\n    contourOffset: 0,\n    zContourInterval: 100,\n    propertyContourInterval: 5000,\n    marginPixels: 0\n  },\n  render: args => /*#__PURE__*/React.createElement(ContourLinesComponent, args)\n};\nconst ExtensionsComponent = args => {\n  const rightClipBounds = [args.bounds?.[0] + args.clipX, args.bounds?.[1], args.bounds?.[2], args.bounds?.[3]];\n  const leftClipBounds = [args.bounds?.[0], args.bounds?.[1], args.bounds?.[0] + args.clipX, args.bounds?.[3]];\n  // Can not use Record<string, unknown> because extensions will not be supported\n  const leftMap = new MapLayer({\n    ...defaultMapLayerProps,\n    id: "left",\n    extensions: [new ClipExtension()],\n    clipBounds: leftClipBounds,\n    clipByInstance: true\n  });\n  const rightMap = new MapLayer({\n    ...defaultMapLayerProps,\n    id: "right",\n    colorMapName: "Physics reverse",\n    extensions: [new ClipExtension()],\n    clipBounds: rightClipBounds,\n    clipByInstance: true\n  });\n  const layers = [new AxesLayer({\n    ...axes_hugin_layer\n  }), leftMap, rightMap, new NorthArrow3DLayer()];\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({}, args, {\n    layers: layers\n  }));\n};\nexport const Extensions = {\n  args: {\n    id: "map",\n    ...defaultArgs,\n    views: DEFAULT_VIEWS,\n    clipX: 1000\n  },\n  argTypes: {\n    clipX: {\n      control: {\n        type: "range",\n        min: 0,\n        max: 8000,\n        step: 10\n      }\n    }\n  },\n  render: args => /*#__PURE__*/React.createElement(ExtensionsComponent, args)\n};',locationsMap:{"map-layer-3-d-png":{startLoc:{col:29,line:222},endLoc:{col:1,line:237},startBody:{col:29,line:222},endBody:{col:1,line:237}},"map-layer-3-d-png-no-bounds":{startLoc:{col:37,line:238},endLoc:{col:1,line:252},startBody:{col:37,line:238},endBody:{col:1,line:252}},"map-layer-2-d":{startLoc:{col:26,line:275},endLoc:{col:1,line:296},startBody:{col:26,line:275},endBody:{col:1,line:296}},"map-layer-2-d-dark-mode":{startLoc:{col:34,line:298},endLoc:{col:1,line:339},startBody:{col:34,line:298},endBody:{col:1,line:339}},rotated:{startLoc:{col:23,line:340},endLoc:{col:1,line:361},startBody:{col:23,line:340},endBody:{col:1,line:361}},"big-map":{startLoc:{col:22,line:362},endLoc:{col:1,line:368},startBody:{col:22,line:362},endBody:{col:1,line:368}},"big-map-3-d":{startLoc:{col:24,line:369},endLoc:{col:1,line:384},startBody:{col:24,line:369},endBody:{col:1,line:384}},"small-map":{startLoc:{col:24,line:390},endLoc:{col:1,line:405},startBody:{col:24,line:390},endBody:{col:1,line:405}},"cell-centered-prop-map":{startLoc:{col:35,line:413},endLoc:{col:1,line:428},startBody:{col:35,line:413},endBody:{col:1,line:428}},"node-centered-prop-map":{startLoc:{col:35,line:431},endLoc:{col:1,line:446},startBody:{col:35,line:431},endBody:{col:1,line:446}},"node-centered-prop-map-with-array-input":{startLoc:{col:49,line:449},endLoc:{col:1,line:464},startBody:{col:49,line:449},endBody:{col:1,line:464}},"typed-array-input":{startLoc:{col:31,line:524},endLoc:{col:1,line:547},startBody:{col:31,line:524},endBody:{col:1,line:547}},readout:{startLoc:{col:23,line:567},endLoc:{col:1,line:577},startBody:{col:23,line:567},endBody:{col:1,line:577}},"big-map-with-hole":{startLoc:{col:30,line:600},endLoc:{col:1,line:610},startBody:{col:30,line:600},endBody:{col:1,line:610}},"contour-lines":{startLoc:{col:28,line:684},endLoc:{col:1,line:694},startBody:{col:28,line:684},endBody:{col:1,line:694}},extensions:{startLoc:{col:26,line:721},endLoc:{col:1,line:739},startBody:{col:26,line:721},endBody:{col:1,line:739}}}}},component:_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,title:"SubsurfaceViewer / Map Layer",args:{triggerHome:0}};__webpack_exports__.default=stories;const defaultMapLayerProps={"@@type":"MapLayer",id:"default_map",meshData:"hugin_depth_25_m.float32",frame:{origin:[432150,6475800],count:[291,229],increment:[25,25],rotDeg:0},propertiesData:"kh_netmap_25_m.float32",ZIncreasingDownwards:!0},defaultMapLayer={...defaultMapLayerProps},meshMapLayerBig={"@@type":"MapLayer",id:"mesh-layer",meshUrl:"hugin_depth_5_m.float32",frame:{origin:[432150,6475800],count:[1451,1141],increment:[5,5],rotDeg:0},propertiesUrl:"kh_netmap_5_m.float32",contours:[0,100],isContoursDepth:!0,gridLines:!1,material:!0,colorMapName:"Physics"},nodeCenteredPropertiesLayerWithArrayInput={"@@type":"MapLayer",id:"node-centered-layer",frame:{origin:[0,0],count:[4,5],increment:[1,1],rotDeg:0},meshData:Array.from(Array(20)).map((()=>Math.random())),propertiesData:Array.from(Array(20)).map((()=>Math.random())),gridLines:!0,material:!0,colorMapFunction:value=>[255*value,255*value,255*value]},cellCenteredPropertiesLayer={"@@type":"MapLayer",id:"cell-centered-layer",meshData:[1.6,1.7,1.8,1.9,1.2,1.3,1.4,1.5,.8,.9,1,1.1,.4,.5,.6,.7,0,.1,.2,.3],propertiesData:[.9,1,1.1,.6,void 0,.8,.3,.4,.5,0,.1,.2],frame:{origin:[0,0],count:[4,5],increment:[1,1],rotDeg:0},gridLines:!0,material:!0,colorMapFunction:value=>[255*value,255*value,255*value],smoothShading:!0},meshMapLayerPng={"@@type":"MapLayer",id:"mesh-layer",meshUrl:"hugin_depth_25_m.png",frame:{origin:[432150,6475800],count:[291,229],increment:[25,25],rotDeg:0},propertiesUrl:"kh_netmap_25_m.png",contours:[0,100],isContoursDepth:!0,gridLines:!1,material:!0,smoothShading:!0,colorMapName:"Physics",ZIncreasingDownwards:!0},meshMapLayerFloat32={"@@type":"MapLayer",id:"mesh-layer",meshUrl:"hugin_depth_25_m.float32",frame:{origin:[432150,6475800],count:[291,229],increment:[25,25],rotDeg:0},propertiesUrl:"kh_netmap_25_m.float32",contours:[0,100],isContoursDepth:!0,gridLines:!1,material:!1,colorMapName:"Physics"},axes_hugin_layer={"@@type":"AxesLayer",id:"axes-layer2",bounds:[432150,6475800,2e3,439400,6481500,3500]},north_arrow_layer={"@@type":"NorthArrow3DLayer",id:"north-arrow-layer"},defaultArgs={bounds:[432150,6475800,439400,6481500]},DEFAULT_VIEWS={layout:[1,1],viewports:[{id:"view_1",show3D:!0}]},defaultParameters_docs={inlineStories:!1,iframeHeight:500},MapLayer3dPng={args:{id:"map",layers:[axes_hugin_layer,meshMapLayerPng,north_arrow_layer],bounds:[432150,6475800,439400,6481500],views:DEFAULT_VIEWS},parameters:{docs:{...defaultParameters_docs,description:{story:"Example using png as mesh and properties data."}}}},MapLayer3dPngNoBounds={args:{id:"map",layers:[axes_hugin_layer,meshMapLayerPng,north_arrow_layer],views:DEFAULT_VIEWS},parameters:{docs:{...defaultParameters_docs,description:{story:"If no bounds are specified will results in automatically calcultated camera. Will look at center of bounding box of the data"}}}},MapLayer2d={args:{id:"map",layers:[{"@@type":"MapLayer",id:"MapLayer",meshUrl:"hugin_depth_25_m.float32",frame:{origin:[432150,6475800],count:[291,229],increment:[25,25],rotDeg:0},propertiesUrl:"kh_netmap_25_m.float32",contours:[0,100],isContoursDepth:!0,gridLines:!1,material:!0,colorMapName:"Physics"},{"@@type":"Axes2DLayer",id:"axesLayer2D",backgroundColor:[0,255,255]}],bounds:[432150,6475800,439400,6481500],views:{layout:[1,1],viewports:[{id:"view_1",show3D:!1}]}},parameters:{docs:{...defaultParameters_docs,description:{story:"Example using png as mesh and properties data."}}}},white=[255,255,255,255],MapLayer2dDarkMode={args:{id:"map",layers:[{...axes_hugin_layer,labelColor:white,axisColor:white},{...meshMapLayerFloat32,material:!1,gridLines:!1},{...north_arrow_layer,color:white}],bounds:[432150,6475800,439400,6481500],scale:{visible:!0,cssStyle:{color:"white"}},views:{layout:[1,1],viewports:[{id:"view_1",show3D:!1}]}},parameters:{docs:{...defaultParameters_docs,description:{story:"Example using png as mesh and properties data."}},backgrounds:{default:"dark"}}},Rotated={args:{id:"map",layers:[axes_hugin_layer,{"@@type":"MapLayer",id:"mesh-layer",meshUrl:"hugin_depth_25_m.float32",frame:{origin:[432150,6475800],count:[291,229],increment:[25,25],rotDeg:30},propertiesUrl:"kh_netmap_25_m.float32",contours:[0,100],isContoursDepth:!0,material:!1,colorMapName:"Physics"},north_arrow_layer],bounds:[432150,6475800,439400,6481500],views:{layout:[1,1],viewports:[{id:"view_1",show3D:!1}]}},parameters:{docs:{...defaultParameters_docs,description:{story:"Example using png as mesh and properties data."}}}},BigMap={args:{id:"map",layers:[axes_hugin_layer,meshMapLayerBig,north_arrow_layer],bounds:[432150,6475800,439400,6481500]}},BigMap3d={args:{id:"map",layers:[axes_hugin_layer,meshMapLayerBig,north_arrow_layer],bounds:[432150,6475800,439400,6481500],views:DEFAULT_VIEWS},parameters:{docs:{...defaultParameters_docs,description:{story:"Example using large map with approx. 1400x1400 cells."}}}},SmallMap={args:{id:"map",layers:[{"@@type":"AxesLayer",id:"axes_small",bounds:[459790,5929776,0,460590,5930626,30]},{"@@type":"MapLayer",id:"mesh-layer",meshUrl:"small_depths.float32",frame:{origin:[459840.7,5929826.1],count:[5,6],increment:[175,150],rotDeg:0},propertiesUrl:"small_properties.float32",gridLines:!0,material:!1,colorMapFunction:value=>[255*value,255*value,255*value],colorMapRange:[0,29],colorMapClampColor:[255,0,0]},north_arrow_layer],bounds:[459840.7,5929826.1,460540.7,5930576.1],views:DEFAULT_VIEWS},parameters:{docs:{...defaultParameters_docs,description:{story:"4x5 cells."}}}},axes_lite={"@@type":"AxesLayer",id:"axes_small",bounds:[-1,-1,0,4,5,3]},CellCenteredPropMap={args:{id:"map",layers:[axes_lite,cellCenteredPropertiesLayer,north_arrow_layer],bounds:[-1,-1,4,5],views:DEFAULT_VIEWS},parameters:{docs:{...defaultParameters_docs,description:{story:"A small map with properties given at cell centers. Each cell will be constant colored"}}}},NodeCenteredPropMap={args:{id:"map",layers:[axes_lite,{"@@type":"MapLayer",id:"node-centered-layer",meshUrl:"data:text/plain;base64,zczMP5qZ2T9mZuY/MzPzP5qZmT9mZqY/MzOzPwAAwD/NzEw/ZmZmPwAAgD/NzIw/zczMPgAAAD+amRk/MzMzPwAAAIDNzMw9zcxMPpqZmT4=",frame:{origin:[0,0],count:[4,5],increment:[1,1],rotDeg:0},propertiesUrl:"data:text/plain;base64,ZmYmQM3MLEAzMzNAmpk5QM3MDEAzMxNAmpkZQAAAIEBmZuY/MzPzPwAAAEBmZgZAMzOzPwAAwD/NzMw/mpnZPwAAgD/NzIw/mpmZP2Zmpj8=",gridLines:!0,material:!0,colorMapFunction:value=>[255*value,255*value,255*value]},north_arrow_layer],bounds:[-1,-1,4,5],views:DEFAULT_VIEWS},parameters:{docs:{...defaultParameters_docs,description:{story:"A small map with properties given at nodes. Each cell will be interpolated in color."}}}},NodeCenteredPropMapWithArrayInput={args:{id:"map",layers:[axes_lite,nodeCenteredPropertiesLayerWithArrayInput,north_arrow_layer],bounds:[-1,-1,4,5],views:DEFAULT_VIEWS},parameters:{docs:{...defaultParameters_docs,description:{story:"Both mesh and property data given as native javascript arrays (as opposed to URL)."}}}};function makeData(n,amplitude){const f=function makeGaussian(amplitude,x0,y0,stdX,stdY){return function(amplitude,x0,y0,stdX,stdY,x,y){const exponent=-(Math.pow(x-x0,2)/(2*Math.pow(stdX,2))+Math.pow(y-y0,2)/(2*Math.pow(stdY,2)));return amplitude*Math.pow(Math.E,exponent)}.bind(null,amplitude,x0,y0,stdX,stdY)}(amplitude,0,0,75,50);return new Float32Array(n*n).map(((val,index)=>{const x=index%n-n/2,y=Math.floor(index/n)-n/2;return f(x,y)}))}function nearestColorMap(x){return x>.5?[100,255,255]:x>.1?[255,100,255]:[255,255,100]}const TypedArrayInputComponent=args=>{const subsurfaceViewerArgs={id:"map",layers:[new _mapLayer__WEBPACK_IMPORTED_MODULE_5__.Z({frame:{origin:[-args.dimension/2,-args.dimension/2],count:[args.dimension,args.dimension],increment:[1,1],rotDeg:0},meshData:makeData(args.dimension,99),propertiesData:makeData(args.dimension,1),gridLines:!1,material:!0,ZIncreasingDownwards:!1,contours:[0,5],colorMapFunction:nearestColorMap}),new _axes_axesLayer__WEBPACK_IMPORTED_MODULE_4__.Z({ZIncreasingDownwards:!1,bounds:[-args.dimension/2,-args.dimension/2,-10,args.dimension/2,args.dimension/2,60]})],cameraPosition:{rotationOrbit:45,rotationX:45,zoom:[-100,-100,-10,100,100,60],target:[0,0,0]},views:DEFAULT_VIEWS,triggerHome:args.triggerHome};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,subsurfaceViewerArgs)},TypedArrayInput={args:{dimension:300},argTypes:{dimension:{control:{type:"range",min:150,max:300,step:1}}},parameters:{docs:{...defaultParameters_docs,description:{story:"Both mesh and property data given as typed arrays arrays (as opposed to URL)."}}},render:args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(TypedArrayInputComponent,args)},ReadoutComponent=()=>{const[hoverInfo,hoverCallback]=(0,_components_Map__WEBPACK_IMPORTED_MODULE_1__.oO)(),args=react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>({...defaultArgs,id:"readout",layers:[{...meshMapLayerFloat32}],coords:{visible:!1},onMouseEvent:hoverCallback})),[hoverCallback]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args),hoverInfo&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_InfoCard__WEBPACK_IMPORTED_MODULE_3__.Z,{pickInfos:hoverInfo}))},Readout={parameters:{docs:{...defaultParameters_docs,description:{story:"Readout example."}}},render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(ReadoutComponent,null)},BigMapWithHoleComponent=()=>{const[hoverInfo,hoverCallback]=(0,_components_Map__WEBPACK_IMPORTED_MODULE_1__.oO)(),args=react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>({...defaultArgs,id:"readout",layers:[{...meshMapLayerBig,meshUrl:"hugin_depth_5_m_w_hole.float32",gridLines:!1,material:!1}],coords:{visible:!1},onMouseEvent:hoverCallback})),[hoverCallback]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args),hoverInfo&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_InfoCard__WEBPACK_IMPORTED_MODULE_3__.Z,{pickInfos:hoverInfo}))},BigMapWithHole={parameters:{docs:{...defaultParameters_docs,description:{story:"Example of map with a hole."}}},render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(BigMapWithHoleComponent,null)},ContourLinesComponent=props=>{const contourMapLayer=new _mapLayer__WEBPACK_IMPORTED_MODULE_5__.Z({...defaultMapLayerProps,id:"contours",contours:[props.contourOffset,props.zContourInterval]}),propertyContourMapLayer=new _mapLayer__WEBPACK_IMPORTED_MODULE_5__.Z({...defaultMapLayerProps,id:"property_contours",contours:[props.contourOffset,props.propertyContourInterval],isContoursDepth:!1}),flatPropertyContourMapLayer=new _mapLayer__WEBPACK_IMPORTED_MODULE_5__.Z({...defaultMapLayerProps,id:"flat",meshData:void 0,contours:[props.contourOffset,props.propertyContourInterval]}),views={layout:[2,2],showLabel:!0,viewports:[{id:"view_1",show3D:props.show3d,layerIds:[defaultMapLayerProps.id],isSync:props.syncViewports},{id:"view_2",show3D:props.show3d,layerIds:[contourMapLayer.id],isSync:props.syncViewports},{id:"view_3",show3D:props.show3d,layerIds:[propertyContourMapLayer.id],isSync:props.syncViewports},{id:"view_4",show3D:props.show3d,layerIds:[flatPropertyContourMapLayer.id],isSync:props.syncViewports}]};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,{id:"test",layers:[new _mapLayer__WEBPACK_IMPORTED_MODULE_5__.Z(defaultMapLayer),contourMapLayer,propertyContourMapLayer,flatPropertyContourMapLayer],views:views},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_8__.Z,{id:"view_1"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_ViewFooter__WEBPACK_IMPORTED_MODULE_6__.n,null,"Default - no contour lines")),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_8__.Z,{id:"view_2"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_ViewFooter__WEBPACK_IMPORTED_MODULE_6__.n,null,"Contour lines enabled - default is Z value")),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_8__.Z,{id:"view_3"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_ViewFooter__WEBPACK_IMPORTED_MODULE_6__.n,null,"Contour lines on property value")),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_8__.Z,{id:"view_4"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_ViewFooter__WEBPACK_IMPORTED_MODULE_6__.n,null,"Contour lines on flat map - default is property value")))},ContourLines={args:{syncViewports:!0,show3d:!0,contourOffset:0,zContourInterval:100,propertyContourInterval:5e3,marginPixels:0},render:args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(ContourLinesComponent,args)},ExtensionsComponent=args=>{const rightClipBounds=[args.bounds?.[0]+args.clipX,args.bounds?.[1],args.bounds?.[2],args.bounds?.[3]],leftClipBounds=[args.bounds?.[0],args.bounds?.[1],args.bounds?.[0]+args.clipX,args.bounds?.[3]],leftMap=new _mapLayer__WEBPACK_IMPORTED_MODULE_5__.Z({...defaultMapLayerProps,id:"left",extensions:[new _deck_gl_extensions_typed__WEBPACK_IMPORTED_MODULE_9__.Z],clipBounds:leftClipBounds,clipByInstance:!0}),rightMap=new _mapLayer__WEBPACK_IMPORTED_MODULE_5__.Z({...defaultMapLayerProps,id:"right",colorMapName:"Physics reverse",extensions:[new _deck_gl_extensions_typed__WEBPACK_IMPORTED_MODULE_9__.Z],clipBounds:rightClipBounds,clipByInstance:!0}),layers=[new _axes_axesLayer__WEBPACK_IMPORTED_MODULE_4__.Z({...axes_hugin_layer}),leftMap,rightMap,new _northarrow_northArrow3DLayer__WEBPACK_IMPORTED_MODULE_7__.Z];return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,_extends({},args,{layers:layers}))},Extensions={args:{id:"map",...defaultArgs,views:DEFAULT_VIEWS,clipX:1e3},argTypes:{clipX:{control:{type:"range",min:0,max:8e3,step:10}}},render:args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(ExtensionsComponent,args)};MapLayer3dPng.parameters={...MapLayer3dPng.parameters,docs:{...MapLayer3dPng.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [axes_hugin_layer, meshMapLayerPng, north_arrow_layer],\n    bounds: ([432150, 6475800, 439400, 6481500] as BoundingBox2D),\n    views: DEFAULT_VIEWS\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "Example using png as mesh and properties data."\n      }\n    }\n  }\n}',...MapLayer3dPng.parameters?.docs?.source}}},MapLayer3dPngNoBounds.parameters={...MapLayer3dPngNoBounds.parameters,docs:{...MapLayer3dPngNoBounds.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [axes_hugin_layer, meshMapLayerPng, north_arrow_layer],\n    views: DEFAULT_VIEWS\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "If no bounds are specified will results in automatically calcultated camera. Will look at center of bounding box of the data"\n      }\n    }\n  }\n}',...MapLayer3dPngNoBounds.parameters?.docs?.source}}},MapLayer2d.parameters={...MapLayer2d.parameters,docs:{...MapLayer2d.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [mapLayer, axesLayer2D],\n    bounds: ([432150, 6475800, 439400, 6481500] as BoundingBox2D),\n    views: {\n      layout: [1, 1],\n      viewports: [{\n        id: "view_1",\n        show3D: false\n      }]\n    }\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "Example using png as mesh and properties data."\n      }\n    }\n  }\n}',...MapLayer2d.parameters?.docs?.source}}},MapLayer2dDarkMode.parameters={...MapLayer2dDarkMode.parameters,docs:{...MapLayer2dDarkMode.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [{\n      ...axes_hugin_layer,\n      labelColor: white,\n      axisColor: white\n    }, {\n      ...meshMapLayerFloat32,\n      material: false,\n      gridLines: false\n    }, {\n      ...north_arrow_layer,\n      color: white\n    }],\n    bounds: ([432150, 6475800, 439400, 6481500] as BoundingBox2D),\n    scale: {\n      visible: true,\n      cssStyle: {\n        color: "white"\n      }\n    },\n    views: {\n      layout: [1, 1],\n      viewports: [{\n        id: "view_1",\n        show3D: false\n      }]\n    }\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "Example using png as mesh and properties data."\n      }\n    },\n    backgrounds: {\n      default: "dark"\n    }\n  }\n}',...MapLayer2dDarkMode.parameters?.docs?.source}}},Rotated.parameters={...Rotated.parameters,docs:{...Rotated.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [axes_hugin_layer, meshMapLayerRotated, north_arrow_layer],\n    bounds: ([432150, 6475800, 439400, 6481500] as BoundingBox2D),\n    views: {\n      layout: [1, 1],\n      viewports: [{\n        id: "view_1",\n        show3D: false\n      }]\n    }\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "Example using png as mesh and properties data."\n      }\n    }\n  }\n}',...Rotated.parameters?.docs?.source}}},BigMap.parameters={...BigMap.parameters,docs:{...BigMap.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [axes_hugin_layer, meshMapLayerBig, north_arrow_layer],\n    bounds: ([432150, 6475800, 439400, 6481500] as BoundingBox2D)\n  }\n}',...BigMap.parameters?.docs?.source}}},BigMap3d.parameters={...BigMap3d.parameters,docs:{...BigMap3d.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [axes_hugin_layer, meshMapLayerBig, north_arrow_layer],\n    bounds: ([432150, 6475800, 439400, 6481500] as BoundingBox2D),\n    views: DEFAULT_VIEWS\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "Example using large map with approx. 1400x1400 cells."\n      }\n    }\n  }\n}',...BigMap3d.parameters?.docs?.source}}},SmallMap.parameters={...SmallMap.parameters,docs:{...SmallMap.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [axes_small, smallLayer, north_arrow_layer],\n    bounds: ([459840.7, 5929826.1, 460540.7, 5930576.1] as BoundingBox2D),\n    views: DEFAULT_VIEWS\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "4x5 cells."\n      }\n    }\n  }\n}',...SmallMap.parameters?.docs?.source}}},CellCenteredPropMap.parameters={...CellCenteredPropMap.parameters,docs:{...CellCenteredPropMap.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [axes_lite, cellCenteredPropertiesLayer, north_arrow_layer],\n    bounds: ([-1, -1, 4, 5] as BoundingBox2D),\n    views: DEFAULT_VIEWS\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "A small map with properties given at cell centers. Each cell will be constant colored"\n      }\n    }\n  }\n}',...CellCenteredPropMap.parameters?.docs?.source}}},NodeCenteredPropMap.parameters={...NodeCenteredPropMap.parameters,docs:{...NodeCenteredPropMap.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [axes_lite, nodeCenteredPropertiesLayer, north_arrow_layer],\n    bounds: ([-1, -1, 4, 5] as BoundingBox2D),\n    views: DEFAULT_VIEWS\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "A small map with properties given at nodes. Each cell will be interpolated in color."\n      }\n    }\n  }\n}',...NodeCenteredPropMap.parameters?.docs?.source}}},NodeCenteredPropMapWithArrayInput.parameters={...NodeCenteredPropMapWithArrayInput.parameters,docs:{...NodeCenteredPropMapWithArrayInput.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    layers: [axes_lite, nodeCenteredPropertiesLayerWithArrayInput, north_arrow_layer],\n    bounds: ([-1, -1, 4, 5] as BoundingBox2D),\n    views: DEFAULT_VIEWS\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "Both mesh and property data given as native javascript arrays (as opposed to URL)."\n      }\n    }\n  }\n}',...NodeCenteredPropMapWithArrayInput.parameters?.docs?.source}}},TypedArrayInput.parameters={...TypedArrayInput.parameters,docs:{...TypedArrayInput.parameters?.docs,source:{originalSource:'{\n  args: {\n    dimension: 300\n  },\n  argTypes: {\n    dimension: {\n      control: {\n        type: "range",\n        min: 150,\n        max: 300,\n        step: 1\n      }\n    }\n  },\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "Both mesh and property data given as typed arrays arrays (as opposed to URL)."\n      }\n    }\n  },\n  render: args => <TypedArrayInputComponent {...args} />\n}',...TypedArrayInput.parameters?.docs?.source}}},Readout.parameters={...Readout.parameters,docs:{...Readout.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "Readout example."\n      }\n    }\n  },\n  render: () => <ReadoutComponent />\n}',...Readout.parameters?.docs?.source}}},BigMapWithHole.parameters={...BigMapWithHole.parameters,docs:{...BigMapWithHole.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      ...defaultParameters.docs,\n      description: {\n        story: "Example of map with a hole."\n      }\n    }\n  },\n  render: () => <BigMapWithHoleComponent />\n}',...BigMapWithHole.parameters?.docs?.source}}},ContourLines.parameters={...ContourLines.parameters,docs:{...ContourLines.parameters?.docs,source:{originalSource:"{\n  args: {\n    syncViewports: true,\n    show3d: true,\n    contourOffset: 0,\n    zContourInterval: 100,\n    propertyContourInterval: 5000,\n    marginPixels: 0\n  },\n  render: args => <ContourLinesComponent {...args} />\n}",...ContourLines.parameters?.docs?.source}}},Extensions.parameters={...Extensions.parameters,docs:{...Extensions.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "map",\n    ...defaultArgs,\n    views: DEFAULT_VIEWS,\n    clipX: 1000\n  },\n  argTypes: {\n    clipX: {\n      control: {\n        type: "range",\n        min: 0,\n        max: 8000,\n        step: 10\n      }\n    }\n  },\n  render: args => <ExtensionsComponent {...args} />\n}',...Extensions.parameters?.docs?.source}}};const __namedExportsOrder=["MapLayer3dPng","MapLayer3dPngNoBounds","MapLayer2d","MapLayer2dDarkMode","Rotated","BigMap","BigMap3d","SmallMap","CellCenteredPropMap","NodeCenteredPropMap","NodeCenteredPropMapWithArrayInput","TypedArrayInput","Readout","BigMapWithHole","ContourLines","Extensions"]},"./packages/subsurface-viewer/src/components/ViewFooter.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{n:function(){return ViewFooter}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);const StyledViewFooter=(0,__webpack_require__("./node_modules/@mui/system/esm/styled.js").Z)("div")((({theme:theme})=>({position:"absolute",bottom:theme.spacing(0),right:theme.spacing(2),zIndex:999999,float:"right",backgroundColor:"#ffffffcc",color:"#000000ff",paddingLeft:"3px",display:"tableRow"}))),ViewFooter=({children:children})=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(StyledViewFooter,null,children);ViewFooter.propTypes={children:prop_types__WEBPACK_IMPORTED_MODULE_2___default().any};try{ViewFooter.displayName="ViewFooter",ViewFooter.__docgenInfo={description:"",displayName:"ViewFooter",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/components/ViewFooter.tsx#ViewFooter"]={docgenInfo:ViewFooter.__docgenInfo,name:"ViewFooter",path:"packages/subsurface-viewer/src/components/ViewFooter.tsx#ViewFooter"})}catch(__react_docgen_typescript_loader_error){}}}]);