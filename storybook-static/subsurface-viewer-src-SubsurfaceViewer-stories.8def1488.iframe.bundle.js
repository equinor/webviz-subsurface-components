"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[540],{"./packages/subsurface-viewer/src/SubsurfaceViewer.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DepthTest:function(){return DepthTest},IsLoadedCallback:function(){return IsLoadedCallback},MouseEvent:function(){return MouseEvent},MultiViewAnnotation:function(){return MultiViewAnnotation},TooltipApi:function(){return TooltipApi},TooltipStyle:function(){return TooltipStyle},ViewObjectInitializedAsEmpty:function(){return ViewObjectInitializedAsEmpty},ViewStateSynchronization:function(){return ViewStateSynchronization},__namedExportsOrder:function(){return __namedExportsOrder},customizedCameraPosition:function(){return customizedCameraPosition}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),d3_format__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./packages/subsurface-viewer/node_modules/d3-format/src/defaultLocale.js"),_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@deck.gl/core/dist/esm/views/view.js"),_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@emerson-eps/color-tables/dist/index.js"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),_layers__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./packages/subsurface-viewer/src/layers/index.ts"),_components_InfoCard__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./packages/subsurface-viewer/src/components/InfoCard.tsx"),_components_ViewFooter__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./packages/subsurface-viewer/src/components/ViewFooter.tsx"),_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),_mui_material_Switch__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@mui/material/Switch/Switch.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}__webpack_exports__.default={parameters:{storySource:{source:'function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React, { useCallback, useMemo, useState } from "react";\nimport { format } from "d3-format";\nimport { View } from "@deck.gl/core/typed";\nimport { ContinuousLegend } from "@emerson-eps/color-tables";\nimport SubsurfaceViewer from "./SubsurfaceViewer";\nimport { WellsLayer, MapLayer } from "./layers";\nimport InfoCard from "./components/InfoCard";\nimport { ViewFooter } from "./components/ViewFooter";\nimport { styled } from "@mui/material/styles";\nimport Switch from "@mui/material/Switch";\nexport default {\n  component: SubsurfaceViewer,\n  title: "SubsurfaceViewer"\n};\nconst classes = {\n  main: "default-main"\n};\nconst Root = styled("div")({\n  [`& .${classes.main}`]: {\n    width: 750,\n    height: 500,\n    top: "50%",\n    left: "50%",\n    transform: "translate(-50%, -50%)",\n    border: "1px solid black",\n    background: "azure",\n    position: "absolute"\n  }\n});\nconst defaultWellsProps = {\n  id: "volve-wells",\n  data: "./volve_wells.json"\n};\nconst defaultWellsLayer = new WellsLayer({\n  ...defaultWellsProps\n});\nconst defaultProps = {\n  id: "volve-wells",\n  bounds: [432150, 6475800, 439400, 6481500],\n  layers: [defaultWellsLayer]\n};\nconst wellsLayerWithlogs = new WellsLayer({\n  ...defaultWellsProps,\n  logData: "./volve_logs.json",\n  logrunName: "BLOCKING",\n  logName: "PORO",\n  logColor: "Physics"\n});\nconst meshMapLayerBig = new MapLayer({\n  "@@type": "MapLayer",\n  id: "mesh-layer",\n  meshData: "hugin_depth_5_m.float32",\n  frame: {\n    origin: [432150, 6475800],\n    count: [1451, 1141],\n    increment: [5, 5],\n    rotDeg: 0\n  },\n  propertiesData: "kh_netmap_5_m.float32",\n  contours: [0, 100],\n  isContoursDepth: true,\n  gridLines: false,\n  material: true,\n  colorMapName: "Physics"\n});\nconst Template = args => /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\nfunction mdTooltip(info) {\n  if (!info.picked) return null;\n  const value = info?.properties?.[0].value;\n  if (!value) return null;\n  const f = format(".2f");\n  const niceValue = f(+value);\n  return "MD: " + niceValue;\n}\nexport const TooltipApi = Template.bind({});\nTooltipApi.args = {\n  ...defaultProps,\n  layers: [new WellsLayer({\n    ...defaultWellsProps,\n    lineStyle: {\n      width: 7\n    }\n  })],\n  getTooltip: mdTooltip,\n  bounds: [433000, 6476000, 439000, 6480000]\n};\nTooltipApi.parameters = {\n  docs: {\n    description: {\n      story: "Example of overriding the default tooltip, showing measured depth (MD) instead of the default bahaviour, which is to show the well name."\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nexport const TooltipStyle = Template.bind({});\nconst processPropInfo = (properties, filter) => {\n  if (!properties) {\n    return "";\n  }\n  let outputString = "";\n  if (typeof filter == "boolean") {\n    if (filter) {\n      properties.forEach(ppobj => {\n        outputString += `\\n${ppobj["name"]} : ${ppobj["value"]}`;\n      });\n    }\n  } else {\n    // filter is not boolean - thus it is a string array and we should check each property\n    properties.forEach(ppobj => {\n      if (filter.includes(ppobj["name"])) {\n        outputString += `\\n${ppobj["name"]} : ${ppobj["value"]}`;\n      }\n    });\n  }\n  return outputString;\n};\nconst tooltipImpFunc = info => {\n  if (!info.picked || !info.layer) {\n    return null;\n  }\n  const outputObject = {};\n  const layerName = info.layer.constructor.name;\n  let outputString = "";\n  if (layerName === "Map3DLayer") {\n    const layerProps = info.layer.props;\n    const layerName = layerProps.name;\n    const properties = info.properties;\n    outputString += `Property: ${layerName}`;\n    outputString += processPropInfo(properties, true);\n  } else if (layerName === "WellsLayer") {\n    const wellsPickInfo = info;\n    const wellsPickInfoObject = info.object;\n    const wellProperties = wellsPickInfoObject.properties;\n    const name = wellProperties.name;\n    outputString += `Well: ${name || ""}`;\n    if (wellsPickInfo.featureType !== "points") {\n      outputString += processPropInfo(wellsPickInfo.properties, true);\n    }\n  }\n  outputObject["text"] = outputString;\n  outputObject["style"] = {\n    color: "yellow"\n  };\n  return outputObject;\n};\nTooltipStyle.args = {\n  ...defaultProps,\n  layers: [new WellsLayer({\n    ...defaultWellsProps,\n    lineStyle: {\n      width: 7\n    }\n  })],\n  getTooltip: tooltipImpFunc,\n  bounds: [433000, 6476000, 439000, 6480000]\n};\nTooltipStyle.parameters = {\n  docs: {\n    description: {\n      story: "Example of overriding tooltip style."\n    },\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nconst CustomTemplate = args => {\n  const [state, setState] = React.useState(args.cameraPosition);\n  const getCameraPosition = React.useCallback(input => {\n    setState(input);\n    return input;\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({}, args, {\n    cameraPosition: args.cameraPosition,\n    getCameraPosition: getCameraPosition\n  })), /*#__PURE__*/React.createElement("div", {\n    style: {\n      position: "absolute",\n      marginLeft: 200\n    }\n  }, /*#__PURE__*/React.createElement("div", null, "zoom: ", state?.zoom), /*#__PURE__*/React.createElement("div", null, "rotationX: ", state?.rotationX), /*#__PURE__*/React.createElement("div", null, "rotationOrbit: ", state?.rotationOrbit), /*#__PURE__*/React.createElement("div", null, "targetX: ", state?.target[0]), /*#__PURE__*/React.createElement("div", null, "targetY: ", state?.target[1])));\n};\nexport const customizedCameraPosition = CustomTemplate.bind({});\nconst cameraPosition = {\n  target: [437500, 6475000],\n  zoom: -5.0,\n  rotationX: 90,\n  rotationOrbit: 0\n};\ncustomizedCameraPosition.args = {\n  ...defaultProps,\n  cameraPosition\n};\nconst mapProps = {\n  id: "kh_netmap",\n  meshData: "hugin_depth_25_m.float32",\n  frame: {\n    origin: [432150, 6475800],\n    count: [291, 229],\n    increment: [25, 25],\n    rotDeg: 0\n  },\n  propertiesData: "kh_netmap_25_m.float32",\n  contours: [0, 100],\n  material: false\n};\nconst netmapLayer = new MapLayer({\n  ...mapProps\n});\nconst huginLayer = new MapLayer({\n  ...mapProps,\n  id: "hugin",\n  propertiesData: "hugin_depth_25_m.float32"\n});\nconst MultiViewAnnotationTemplate = args => /*#__PURE__*/React.createElement(SubsurfaceViewer, args, /*#__PURE__*/React.createElement(View, {\n  id: "view_1"\n}, /*#__PURE__*/React.createElement(ContinuousLegend, {\n  min: -3071,\n  max: 41048\n}), /*#__PURE__*/React.createElement(ViewFooter, null, "kH netmap")), /*#__PURE__*/React.createElement(View, {\n  id: "view_2"\n}, /*#__PURE__*/React.createElement(ContinuousLegend, {\n  min: 2725,\n  max: 3396\n}), /*#__PURE__*/React.createElement(ViewFooter, null, "Hugin")));\nexport const MultiViewAnnotation = MultiViewAnnotationTemplate.bind({});\nMultiViewAnnotation.args = {\n  id: "multi_view_annotation",\n  layers: [netmapLayer, huginLayer],\n  views: {\n    layout: [1, 2],\n    showLabel: true,\n    viewports: [{\n      id: "view_1",\n      layerIds: ["hugin"]\n    }, {\n      id: "view_2",\n      layerIds: ["kh_netmap"]\n    }]\n  }\n};\nexport const ViewObjectInitializedAsEmpty = MultiViewAnnotationTemplate.bind({});\nViewObjectInitializedAsEmpty.args = {\n  id: "view_initialized_as_empty",\n  layers: [netmapLayer, huginLayer],\n  views: {}\n};\nconst wellsLayerNoDepthTest = new WellsLayer({\n  ...defaultWellsProps,\n  id: "wells-layer-no-depth-test",\n  depthTest: false\n});\nexport const DepthTest = args => {\n  const props = {\n    ...args,\n    layers: [huginLayer, defaultWellsLayer, wellsLayerNoDepthTest]\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(SubsurfaceViewer, props)), /*#__PURE__*/React.createElement("h4", null, "View on the right depthTest for the wells layer property is set to false and wells layer is given last so that it will be painted on top. On the left parts of the wells are hidden beneath the surface."));\n};\nDepthTest.args = {\n  id: "DepthTest",\n  views: {\n    layout: [1, 2],\n    viewports: [{\n      id: "view_1",\n      layerIds: ["hugin", "volve-wells"],\n      show3D: false,\n      isSync: true\n    }, {\n      id: "view_2",\n      layerIds: ["hugin", "wells-layer-no-depth-test"],\n      show3D: false,\n      isSync: true\n    }]\n  }\n};\nDepthTest.parameters = {\n  docs: {\n    description: {\n      story: "Example using the depthTest property. If this is set to false it will disable depth testing for the layer"\n    }\n  }\n};\nfunction getReadout(event) {\n  const pickInfo = event.infos;\n  return /*#__PURE__*/React.createElement(InfoCard, {\n    pickInfos: pickInfo\n  });\n}\nconst MouseEventStory = args => {\n  const [event, setEvent] = useState({\n    type: "click",\n    infos: []\n  });\n  const handleEvent = useCallback(event => {\n    setEvent(event);\n  }, [setEvent]);\n  const useProps = useMemo(() => {\n    const props = {\n      ...defaultProps,\n      layers: [wellsLayerWithlogs, netmapLayer],\n      onMouseEvent: handleEvent,\n      views: {\n        layout: [1, 1],\n        viewports: [{\n          id: "test",\n          show3D: args.show3d\n        }]\n      },\n      coords: {\n        visible: false\n      }\n    };\n    return props;\n  }, [handleEvent, args.show3d]);\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, useProps, /*#__PURE__*/React.createElement(View, {\n    id: "test"\n  }, getReadout(event), /*#__PURE__*/React.createElement(ViewFooter, null, "Mouse event example")));\n};\nexport const MouseEvent = args => {\n  return /*#__PURE__*/React.createElement(MouseEventStory, args);\n};\nMouseEvent.args = {\n  show3d: true\n};\nconst ViewStateSynchronizationStory = args => {\n  const subsurfaceViewerArgs = {\n    id: "view_state_synchronization",\n    layers: [netmapLayer, huginLayer, defaultWellsLayer],\n    views: {\n      layout: [2, 2],\n      viewports: [{\n        id: "view_1",\n        layerIds: ["hugin"],\n        show3D: args.show3d,\n        isSync: args.sync.includes("view_1")\n      }, {\n        id: "view_2",\n        layerIds: ["kh_netmap"],\n        show3D: args.show3d,\n        isSync: args.sync.includes("view_2")\n      }, {\n        id: "view_3",\n        layerIds: ["volve-wells"],\n        show3D: args.show3d,\n        isSync: args.sync.includes("view_3")\n      }, {\n        id: "view_4",\n        layerIds: ["volve-wells", "hugin"],\n        show3D: args.show3d,\n        isSync: args.sync.includes("view_4")\n      }]\n    }\n  };\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, subsurfaceViewerArgs);\n};\nexport const ViewStateSynchronization = args => {\n  return /*#__PURE__*/React.createElement(ViewStateSynchronizationStory, args);\n};\nViewStateSynchronization.args = {\n  show3d: false,\n  sync: ["view_1", "view_2", "view_3", "view_4"]\n};\nViewStateSynchronization.argTypes = {\n  sync: {\n    options: ["view_1", "view_2", "view_3", "view_4"],\n    control: "check"\n  }\n};\nexport const IsLoadedCallback = args => {\n  const [layers, setLayers] = React.useState([defaultWellsLayer]);\n  const [label, setLabel] = React.useState("");\n  const handleChange = () => {\n    if (layers.length === 1) {\n      setLayers([defaultWellsLayer, meshMapLayerBig]);\n    } else {\n      setLayers([defaultWellsLayer]);\n    }\n  };\n  const props = {\n    ...args,\n    isLoadedCallback: isLoaded => {\n      console.log("isLoadedCallback", isLoaded);\n      setLabel(isLoaded ? "LOADED" : "NOT LOADED");\n      return;\n    },\n    layers\n  };\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, props)), /*#__PURE__*/React.createElement("label", null, "Add big map layer "), /*#__PURE__*/React.createElement(Switch, {\n    onClick: handleChange\n  }), /*#__PURE__*/React.createElement("label", null, label));\n};\nIsLoadedCallback.args = {\n  id: "DeckGL-Map",\n  layers: [meshMapLayerBig, defaultWellsLayer],\n  bounds: [432150, 6475800, 439400, 6481501],\n  views: {\n    layout: [1, 1],\n    viewports: [{\n      id: "view_1",\n      show3D: false\n    }]\n  }\n};\nIsLoadedCallback.parameters = {\n  docs: {\n    inlineStories: false,\n    iframeHeight: 500,\n    description: {\n      story: "IsLoadedCallback will report in console when triggered"\n    }\n  }\n};\nTooltipApi.parameters = {\n  ...TooltipApi.parameters,\n  docs: {\n    ...TooltipApi.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args} />",\n      ...TooltipApi.parameters?.docs?.source\n    }\n  }\n};\nTooltipStyle.parameters = {\n  ...TooltipStyle.parameters,\n  docs: {\n    ...TooltipStyle.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args} />",\n      ...TooltipStyle.parameters?.docs?.source\n    }\n  }\n};\ncustomizedCameraPosition.parameters = {\n  ...customizedCameraPosition.parameters,\n  docs: {\n    ...customizedCameraPosition.parameters?.docs,\n    source: {\n      originalSource: "args => {\\n  const [state, setState] = React.useState(args.cameraPosition);\\n  const getCameraPosition = React.useCallback((input: ViewStateType) => {\\n    setState(input);\\n    return input;\\n  }, []);\\n  return <>\\n            <SubsurfaceViewer {...args} cameraPosition={args.cameraPosition} getCameraPosition={getCameraPosition} />\\n            <div style={{\\n      position: \\"absolute\\",\\n      marginLeft: 200\\n    }}>\\n                <div>zoom: {state?.zoom}</div>\\n                <div>rotationX: {state?.rotationX}</div>\\n                <div>rotationOrbit: {state?.rotationOrbit}</div>\\n                <div>targetX: {state?.target[0]}</div>\\n                <div>targetY: {state?.target[1]}</div>\\n            </div>\\n        </>;\\n}",\n      ...customizedCameraPosition.parameters?.docs?.source\n    }\n  }\n};\nMultiViewAnnotation.parameters = {\n  ...MultiViewAnnotation.parameters,\n  docs: {\n    ...MultiViewAnnotation.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args}>\\n        {<View id=\\"view_1\\">\\n                <ContinuousLegend min={-3071} max={41048} />\\n                <ViewFooter>kH netmap</ViewFooter>\\n            </View>}\\n        {<View id=\\"view_2\\">\\n                <ContinuousLegend min={2725} max={3396} />\\n                <ViewFooter>Hugin</ViewFooter>\\n            </View>}\\n    </SubsurfaceViewer>",\n      ...MultiViewAnnotation.parameters?.docs?.source\n    }\n  }\n};\nViewObjectInitializedAsEmpty.parameters = {\n  ...ViewObjectInitializedAsEmpty.parameters,\n  docs: {\n    ...ViewObjectInitializedAsEmpty.parameters?.docs,\n    source: {\n      originalSource: "args => <SubsurfaceViewer {...args}>\\n        {<View id=\\"view_1\\">\\n                <ContinuousLegend min={-3071} max={41048} />\\n                <ViewFooter>kH netmap</ViewFooter>\\n            </View>}\\n        {<View id=\\"view_2\\">\\n                <ContinuousLegend min={2725} max={3396} />\\n                <ViewFooter>Hugin</ViewFooter>\\n            </View>}\\n    </SubsurfaceViewer>",\n      ...ViewObjectInitializedAsEmpty.parameters?.docs?.source\n    }\n  }\n};\nDepthTest.parameters = {\n  ...DepthTest.parameters,\n  docs: {\n    ...DepthTest.parameters?.docs,\n    source: {\n      originalSource: "args => {\\n  const props = {\\n    ...args,\\n    layers: [huginLayer, defaultWellsLayer, wellsLayerNoDepthTest]\\n  };\\n  return <>\\n            <div>\\n                <SubsurfaceViewer {...props} />\\n            </div>\\n            <h4>\\n                View on the right depthTest for the wells layer property is set\\n                to false and wells layer is given last so that it will be\\n                painted on top. On the left parts of the wells are hidden\\n                beneath the surface.\\n            </h4>\\n        </>;\\n}",\n      ...DepthTest.parameters?.docs?.source\n    }\n  }\n};\nMouseEvent.parameters = {\n  ...MouseEvent.parameters,\n  docs: {\n    ...MouseEvent.parameters?.docs,\n    source: {\n      originalSource: "args => {\\n  return <MouseEventStory {...args} />;\\n}",\n      ...MouseEvent.parameters?.docs?.source\n    }\n  }\n};\nViewStateSynchronization.parameters = {\n  ...ViewStateSynchronization.parameters,\n  docs: {\n    ...ViewStateSynchronization.parameters?.docs,\n    source: {\n      originalSource: "args => {\\n  return <ViewStateSynchronizationStory {...args} />;\\n}",\n      ...ViewStateSynchronization.parameters?.docs?.source\n    }\n  }\n};\nIsLoadedCallback.parameters = {\n  ...IsLoadedCallback.parameters,\n  docs: {\n    ...IsLoadedCallback.parameters?.docs,\n    source: {\n      originalSource: "(args: SubsurfaceViewerProps) => {\\n  const [layers, setLayers] = React.useState(([defaultWellsLayer] as [WellsLayer, MapLayer?]));\\n  const [label, setLabel] = React.useState(\\"\\");\\n  const handleChange = () => {\\n    if (layers.length === 1) {\\n      setLayers([defaultWellsLayer, meshMapLayerBig]);\\n    } else {\\n      setLayers([defaultWellsLayer]);\\n    }\\n  };\\n  const props = {\\n    ...args,\\n    isLoadedCallback: (isLoaded: boolean) => {\\n      console.log(\\"isLoadedCallback\\", isLoaded);\\n      setLabel(isLoaded ? \\"LOADED\\" : \\"NOT LOADED\\");\\n      return;\\n    },\\n    layers\\n  };\\n  return <Root>\\n            <div className={classes.main}>\\n                <SubsurfaceViewer {...props} />\\n            </div>\\n            <label>{\\"Add big map layer \\"}</label>\\n            <Switch onClick={handleChange} />\\n            <label>{label}</label>\\n        </Root>;\\n}",\n      ...IsLoadedCallback.parameters?.docs?.source\n    }\n  }\n};',locationsMap:{"tooltip-api":{startLoc:{col:17,line:67},endLoc:{col:81,line:67},startBody:{col:17,line:67},endBody:{col:81,line:67}},"tooltip-style":{startLoc:{col:17,line:67},endLoc:{col:81,line:67},startBody:{col:17,line:67},endBody:{col:81,line:67}},"customized-camera-position":{startLoc:{col:23,line:168},endLoc:{col:1,line:183},startBody:{col:23,line:168},endBody:{col:1,line:183}},"multi-view-annotation":{startLoc:{col:36,line:216},endLoc:{col:65,line:226},startBody:{col:36,line:216},endBody:{col:65,line:226}},"view-object-initialized-as-empty":{startLoc:{col:36,line:216},endLoc:{col:65,line:226},startBody:{col:36,line:216},endBody:{col:65,line:226}},"depth-test":{startLoc:{col:25,line:254},endLoc:{col:1,line:260},startBody:{col:25,line:254},endBody:{col:1,line:260}},"mouse-event":{startLoc:{col:26,line:321},endLoc:{col:1,line:323},startBody:{col:26,line:321},endBody:{col:1,line:323}},"view-state-synchronization":{startLoc:{col:40,line:358},endLoc:{col:1,line:360},startBody:{col:40,line:358},endBody:{col:1,line:360}},"is-loaded-callback":{startLoc:{col:32,line:371},endLoc:{col:1,line:395},startBody:{col:32,line:371},endBody:{col:1,line:395}}}}},component:_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,title:"SubsurfaceViewer"};const classes_main="default-main",Root=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__.ZP)("div")({[`& .${classes_main}`]:{width:750,height:500,top:"50%",left:"50%",transform:"translate(-50%, -50%)",border:"1px solid black",background:"azure",position:"absolute"}}),defaultWellsProps={id:"volve-wells",data:"./volve_wells.json"},defaultWellsLayer=new _layers__WEBPACK_IMPORTED_MODULE_3__.WellsLayer({...defaultWellsProps}),defaultProps={id:"volve-wells",bounds:[432150,6475800,439400,6481500],layers:[defaultWellsLayer]},wellsLayerWithlogs=new _layers__WEBPACK_IMPORTED_MODULE_3__.WellsLayer({...defaultWellsProps,logData:"./volve_logs.json",logrunName:"BLOCKING",logName:"PORO",logColor:"Physics"}),meshMapLayerBig=new _layers__WEBPACK_IMPORTED_MODULE_3__.MapLayer({"@@type":"MapLayer",id:"mesh-layer",meshData:"hugin_depth_5_m.float32",frame:{origin:[432150,6475800],count:[1451,1141],increment:[5,5],rotDeg:0},propertiesData:"kh_netmap_5_m.float32",contours:[0,100],isContoursDepth:!0,gridLines:!1,material:!0,colorMapName:"Physics"}),Template=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args);const TooltipApi=Template.bind({});TooltipApi.args={...defaultProps,layers:[new _layers__WEBPACK_IMPORTED_MODULE_3__.WellsLayer({...defaultWellsProps,lineStyle:{width:7}})],getTooltip:function mdTooltip(info){if(!info.picked)return null;const value=info?.properties?.[0].value;return value?"MD: "+(0,d3_format__WEBPACK_IMPORTED_MODULE_7__.WU)(".2f")(+value):null},bounds:[433e3,6476e3,439e3,648e4]},TooltipApi.parameters={docs:{description:{story:"Example of overriding the default tooltip, showing measured depth (MD) instead of the default bahaviour, which is to show the well name."},inlineStories:!1,iframeHeight:500}};const TooltipStyle=Template.bind({}),processPropInfo=(properties,filter)=>{if(!properties)return"";let outputString="";return"boolean"==typeof filter?filter&&properties.forEach((ppobj=>{outputString+=`\n${ppobj.name} : ${ppobj.value}`})):properties.forEach((ppobj=>{filter.includes(ppobj.name)&&(outputString+=`\n${ppobj.name} : ${ppobj.value}`)})),outputString};TooltipStyle.args={...defaultProps,layers:[new _layers__WEBPACK_IMPORTED_MODULE_3__.WellsLayer({...defaultWellsProps,lineStyle:{width:7}})],getTooltip:info=>{if(!info.picked||!info.layer)return null;const outputObject={},layerName=info.layer.constructor.name;let outputString="";if("Map3DLayer"===layerName){const layerName=info.layer.props.name,properties=info.properties;outputString+=`Property: ${layerName}`,outputString+=processPropInfo(properties,!0)}else if("WellsLayer"===layerName){const wellsPickInfo=info;outputString+=`Well: ${info.object.properties.name||""}`,"points"!==wellsPickInfo.featureType&&(outputString+=processPropInfo(wellsPickInfo.properties,!0))}return outputObject.text=outputString,outputObject.style={color:"yellow"},outputObject},bounds:[433e3,6476e3,439e3,648e4]},TooltipStyle.parameters={docs:{description:{story:"Example of overriding tooltip style."},inlineStories:!1,iframeHeight:500}};const customizedCameraPosition=(args=>{const[state,setState]=react__WEBPACK_IMPORTED_MODULE_0__.useState(args.cameraPosition),getCameraPosition=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((input=>(setState(input),input)),[]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,_extends({},args,{cameraPosition:args.cameraPosition,getCameraPosition:getCameraPosition})),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{position:"absolute",marginLeft:200}},react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"zoom: ",state?.zoom),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"rotationX: ",state?.rotationX),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"rotationOrbit: ",state?.rotationOrbit),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"targetX: ",state?.target[0]),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"targetY: ",state?.target[1])))}).bind({});customizedCameraPosition.args={...defaultProps,cameraPosition:{target:[437500,6475e3],zoom:-5,rotationX:90,rotationOrbit:0}};const mapProps={id:"kh_netmap",meshData:"hugin_depth_25_m.float32",frame:{origin:[432150,6475800],count:[291,229],increment:[25,25],rotDeg:0},propertiesData:"kh_netmap_25_m.float32",contours:[0,100],material:!1},netmapLayer=new _layers__WEBPACK_IMPORTED_MODULE_3__.MapLayer({...mapProps}),huginLayer=new _layers__WEBPACK_IMPORTED_MODULE_3__.MapLayer({...mapProps,id:"hugin",propertiesData:"hugin_depth_25_m.float32"}),MultiViewAnnotationTemplate=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_8__.Z,{id:"view_1"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_1__.sG,{min:-3071,max:41048}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_ViewFooter__WEBPACK_IMPORTED_MODULE_5__.n,null,"kH netmap")),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_8__.Z,{id:"view_2"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_1__.sG,{min:2725,max:3396}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_ViewFooter__WEBPACK_IMPORTED_MODULE_5__.n,null,"Hugin"))),MultiViewAnnotation=MultiViewAnnotationTemplate.bind({});MultiViewAnnotation.args={id:"multi_view_annotation",layers:[netmapLayer,huginLayer],views:{layout:[1,2],showLabel:!0,viewports:[{id:"view_1",layerIds:["hugin"]},{id:"view_2",layerIds:["kh_netmap"]}]}};const ViewObjectInitializedAsEmpty=MultiViewAnnotationTemplate.bind({});ViewObjectInitializedAsEmpty.args={id:"view_initialized_as_empty",layers:[netmapLayer,huginLayer],views:{}};const wellsLayerNoDepthTest=new _layers__WEBPACK_IMPORTED_MODULE_3__.WellsLayer({...defaultWellsProps,id:"wells-layer-no-depth-test",depthTest:!1}),DepthTest=args=>{const props={...args,layers:[huginLayer,defaultWellsLayer,wellsLayerNoDepthTest]};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,props)),react__WEBPACK_IMPORTED_MODULE_0__.createElement("h4",null,"View on the right depthTest for the wells layer property is set to false and wells layer is given last so that it will be painted on top. On the left parts of the wells are hidden beneath the surface."))};DepthTest.args={id:"DepthTest",views:{layout:[1,2],viewports:[{id:"view_1",layerIds:["hugin","volve-wells"],show3D:!1,isSync:!0},{id:"view_2",layerIds:["hugin","wells-layer-no-depth-test"],show3D:!1,isSync:!0}]}},DepthTest.parameters={docs:{description:{story:"Example using the depthTest property. If this is set to false it will disable depth testing for the layer"}}};const MouseEventStory=args=>{const[event,setEvent]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({type:"click",infos:[]}),handleEvent=(0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event=>{setEvent(event)}),[setEvent]),useProps=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({...defaultProps,layers:[wellsLayerWithlogs,netmapLayer],onMouseEvent:handleEvent,views:{layout:[1,1],viewports:[{id:"test",show3D:args.show3d}]},coords:{visible:!1}})),[handleEvent,args.show3d]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,useProps,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_8__.Z,{id:"test"},function getReadout(event){const pickInfo=event.infos;return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_InfoCard__WEBPACK_IMPORTED_MODULE_4__.Z,{pickInfos:pickInfo})}(event),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_ViewFooter__WEBPACK_IMPORTED_MODULE_5__.n,null,"Mouse event example")))},MouseEvent=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(MouseEventStory,args);MouseEvent.args={show3d:!0};const ViewStateSynchronizationStory=args=>{const subsurfaceViewerArgs={id:"view_state_synchronization",layers:[netmapLayer,huginLayer,defaultWellsLayer],views:{layout:[2,2],viewports:[{id:"view_1",layerIds:["hugin"],show3D:args.show3d,isSync:args.sync.includes("view_1")},{id:"view_2",layerIds:["kh_netmap"],show3D:args.show3d,isSync:args.sync.includes("view_2")},{id:"view_3",layerIds:["volve-wells"],show3D:args.show3d,isSync:args.sync.includes("view_3")},{id:"view_4",layerIds:["volve-wells","hugin"],show3D:args.show3d,isSync:args.sync.includes("view_4")}]}};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,subsurfaceViewerArgs)},ViewStateSynchronization=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(ViewStateSynchronizationStory,args);ViewStateSynchronization.args={show3d:!1,sync:["view_1","view_2","view_3","view_4"]},ViewStateSynchronization.argTypes={sync:{options:["view_1","view_2","view_3","view_4"],control:"check"}};const IsLoadedCallback=args=>{const[layers,setLayers]=react__WEBPACK_IMPORTED_MODULE_0__.useState([defaultWellsLayer]),[label,setLabel]=react__WEBPACK_IMPORTED_MODULE_0__.useState(""),props={...args,isLoadedCallback:isLoaded=>{console.log("isLoadedCallback",isLoaded),setLabel(isLoaded?"LOADED":"NOT LOADED")},layers:layers};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes_main},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,props)),react__WEBPACK_IMPORTED_MODULE_0__.createElement("label",null,"Add big map layer "),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material_Switch__WEBPACK_IMPORTED_MODULE_9__.Z,{onClick:()=>{1===layers.length?setLayers([defaultWellsLayer,meshMapLayerBig]):setLayers([defaultWellsLayer])}}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("label",null,label))};IsLoadedCallback.args={id:"DeckGL-Map",layers:[meshMapLayerBig,defaultWellsLayer],bounds:[432150,6475800,439400,6481501],views:{layout:[1,1],viewports:[{id:"view_1",show3D:!1}]}},IsLoadedCallback.parameters={docs:{inlineStories:!1,iframeHeight:500,description:{story:"IsLoadedCallback will report in console when triggered"}}},TooltipApi.parameters={...TooltipApi.parameters,docs:{...TooltipApi.parameters?.docs,source:{originalSource:"args => <SubsurfaceViewer {...args} />",...TooltipApi.parameters?.docs?.source}}},TooltipStyle.parameters={...TooltipStyle.parameters,docs:{...TooltipStyle.parameters?.docs,source:{originalSource:"args => <SubsurfaceViewer {...args} />",...TooltipStyle.parameters?.docs?.source}}},customizedCameraPosition.parameters={...customizedCameraPosition.parameters,docs:{...customizedCameraPosition.parameters?.docs,source:{originalSource:'args => {\n  const [state, setState] = React.useState(args.cameraPosition);\n  const getCameraPosition = React.useCallback((input: ViewStateType) => {\n    setState(input);\n    return input;\n  }, []);\n  return <>\n            <SubsurfaceViewer {...args} cameraPosition={args.cameraPosition} getCameraPosition={getCameraPosition} />\n            <div style={{\n      position: "absolute",\n      marginLeft: 200\n    }}>\n                <div>zoom: {state?.zoom}</div>\n                <div>rotationX: {state?.rotationX}</div>\n                <div>rotationOrbit: {state?.rotationOrbit}</div>\n                <div>targetX: {state?.target[0]}</div>\n                <div>targetY: {state?.target[1]}</div>\n            </div>\n        </>;\n}',...customizedCameraPosition.parameters?.docs?.source}}},MultiViewAnnotation.parameters={...MultiViewAnnotation.parameters,docs:{...MultiViewAnnotation.parameters?.docs,source:{originalSource:'args => <SubsurfaceViewer {...args}>\n        {<View id="view_1">\n                <ContinuousLegend min={-3071} max={41048} />\n                <ViewFooter>kH netmap</ViewFooter>\n            </View>}\n        {<View id="view_2">\n                <ContinuousLegend min={2725} max={3396} />\n                <ViewFooter>Hugin</ViewFooter>\n            </View>}\n    </SubsurfaceViewer>',...MultiViewAnnotation.parameters?.docs?.source}}},ViewObjectInitializedAsEmpty.parameters={...ViewObjectInitializedAsEmpty.parameters,docs:{...ViewObjectInitializedAsEmpty.parameters?.docs,source:{originalSource:'args => <SubsurfaceViewer {...args}>\n        {<View id="view_1">\n                <ContinuousLegend min={-3071} max={41048} />\n                <ViewFooter>kH netmap</ViewFooter>\n            </View>}\n        {<View id="view_2">\n                <ContinuousLegend min={2725} max={3396} />\n                <ViewFooter>Hugin</ViewFooter>\n            </View>}\n    </SubsurfaceViewer>',...ViewObjectInitializedAsEmpty.parameters?.docs?.source}}},DepthTest.parameters={...DepthTest.parameters,docs:{...DepthTest.parameters?.docs,source:{originalSource:"args => {\n  const props = {\n    ...args,\n    layers: [huginLayer, defaultWellsLayer, wellsLayerNoDepthTest]\n  };\n  return <>\n            <div>\n                <SubsurfaceViewer {...props} />\n            </div>\n            <h4>\n                View on the right depthTest for the wells layer property is set\n                to false and wells layer is given last so that it will be\n                painted on top. On the left parts of the wells are hidden\n                beneath the surface.\n            </h4>\n        </>;\n}",...DepthTest.parameters?.docs?.source}}},MouseEvent.parameters={...MouseEvent.parameters,docs:{...MouseEvent.parameters?.docs,source:{originalSource:"args => {\n  return <MouseEventStory {...args} />;\n}",...MouseEvent.parameters?.docs?.source}}},ViewStateSynchronization.parameters={...ViewStateSynchronization.parameters,docs:{...ViewStateSynchronization.parameters?.docs,source:{originalSource:"args => {\n  return <ViewStateSynchronizationStory {...args} />;\n}",...ViewStateSynchronization.parameters?.docs?.source}}},IsLoadedCallback.parameters={...IsLoadedCallback.parameters,docs:{...IsLoadedCallback.parameters?.docs,source:{originalSource:'(args: SubsurfaceViewerProps) => {\n  const [layers, setLayers] = React.useState(([defaultWellsLayer] as [WellsLayer, MapLayer?]));\n  const [label, setLabel] = React.useState("");\n  const handleChange = () => {\n    if (layers.length === 1) {\n      setLayers([defaultWellsLayer, meshMapLayerBig]);\n    } else {\n      setLayers([defaultWellsLayer]);\n    }\n  };\n  const props = {\n    ...args,\n    isLoadedCallback: (isLoaded: boolean) => {\n      console.log("isLoadedCallback", isLoaded);\n      setLabel(isLoaded ? "LOADED" : "NOT LOADED");\n      return;\n    },\n    layers\n  };\n  return <Root>\n            <div className={classes.main}>\n                <SubsurfaceViewer {...props} />\n            </div>\n            <label>{"Add big map layer "}</label>\n            <Switch onClick={handleChange} />\n            <label>{label}</label>\n        </Root>;\n}',...IsLoadedCallback.parameters?.docs?.source}}};const __namedExportsOrder=["TooltipApi","TooltipStyle","customizedCameraPosition","MultiViewAnnotation","ViewObjectInitializedAsEmpty","DepthTest","MouseEvent","ViewStateSynchronization","IsLoadedCallback"];try{IsLoadedCallback.displayName="IsLoadedCallback",IsLoadedCallback.__docgenInfo={description:"",displayName:"IsLoadedCallback",props:{id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},resources:{defaultValue:null,description:"",name:"resources",required:!1,type:{name:"Record<string, unknown>"}},layers:{defaultValue:null,description:"",name:"layers",required:!1,type:{name:"Record<string, unknown>[] | LayersList"}},bounds:{defaultValue:null,description:"",name:"bounds",required:!1,type:{name:"[number, number, number, number] | BoundsAccessor"}},views:{defaultValue:null,description:"",name:"views",required:!1,type:{name:"ViewsType"}},coords:{defaultValue:null,description:"",name:"coords",required:!1,type:{name:"{ visible?: boolean | null; multiPicking?: boolean | null; pickDepth?: number | null | undefined; } | undefined"}},scale:{defaultValue:null,description:"",name:"scale",required:!1,type:{name:"{ visible?: boolean | null; incrementValue?: number | null; widthPerUnit?: number | null | undefined; cssStyle?: Record<string, unknown> | null | undefined; } | undefined"}},coordinateUnit:{defaultValue:null,description:"",name:"coordinateUnit",required:!1,type:{name:"enum",value:[{value:'"mm"'},{value:'"cm"'},{value:'"m"'},{value:'"km"'},{value:'"in"'},{value:'"ft-us"'},{value:'"ft"'},{value:'"mi"'},{value:'"mm2"'},{value:'"cm2"'},{value:'"m2"'},{value:'"ha"'},{value:'"km2"'},{value:'"in2"'},{value:'"ft2"'},{value:'"ac"'},{value:'"mi2"'},{value:'"mcg"'},{value:'"mg"'},{value:'"g"'},{value:'"kg"'},{value:'"oz"'},{value:'"lb"'},{value:'"mt"'},{value:'"t"'},{value:'"mm3"'},{value:'"cm3"'},{value:'"ml"'},{value:'"l"'},{value:'"kl"'},{value:'"m3"'},{value:'"km3"'},{value:'"tsp"'},{value:'"Tbs"'},{value:'"in3"'},{value:'"fl-oz"'},{value:'"cup"'},{value:'"pnt"'},{value:'"qt"'},{value:'"gal"'},{value:'"ft3"'},{value:'"yd3"'},{value:'"mm3/s"'},{value:'"cm3/s"'},{value:'"ml/s"'},{value:'"cl/s"'},{value:'"dl/s"'},{value:'"l/s"'},{value:'"l/min"'},{value:'"l/h"'},{value:'"kl/s"'},{value:'"kl/min"'},{value:'"kl/h"'},{value:'"m3/s"'},{value:'"m3/min"'},{value:'"m3/h"'},{value:'"km3/s"'},{value:'"tsp/s"'},{value:'"Tbs/s"'},{value:'"in3/s"'},{value:'"in3/min"'},{value:'"in3/h"'},{value:'"fl-oz/s"'},{value:'"fl-oz/min"'},{value:'"fl-oz/h"'},{value:'"cup/s"'},{value:'"pnt/s"'},{value:'"pnt/min"'},{value:'"pnt/h"'},{value:'"qt/s"'},{value:'"gal/s"'},{value:'"gal/min"'},{value:'"gal/h"'},{value:'"ft3/s"'},{value:'"ft3/min"'},{value:'"ft3/h"'},{value:'"yd3/s"'},{value:'"yd3/min"'},{value:'"yd3/h"'},{value:'"C"'},{value:'"F"'},{value:'"K"'},{value:'"R"'},{value:'"ns"'},{value:'"mu"'},{value:'"ms"'},{value:'"s"'},{value:'"min"'},{value:'"h"'},{value:'"d"'},{value:'"week"'},{value:'"month"'},{value:'"year"'},{value:'"Hz"'},{value:'"mHz"'},{value:'"kHz"'},{value:'"MHz"'},{value:'"GHz"'},{value:'"THz"'},{value:'"rpm"'},{value:'"deg/s"'},{value:'"rad/s"'},{value:'"m/s"'},{value:'"km/h"'},{value:'"m/h"'},{value:'"knot"'},{value:'"ft/s"'},{value:'"s/m"'},{value:'"min/km"'},{value:'"s/ft"'},{value:'"Pa"'},{value:'"hPa"'},{value:'"kPa"'},{value:'"MPa"'},{value:'"bar"'},{value:'"torr"'},{value:'"psi"'},{value:'"ksi"'},{value:'"b"'},{value:'"Kb"'},{value:'"Mb"'},{value:'"Gb"'},{value:'"Tb"'},{value:'"B"'},{value:'"KB"'},{value:'"MB"'},{value:'"GB"'},{value:'"TB"'},{value:'"lx"'},{value:'"ft-cd"'},{value:'"ppm"'},{value:'"ppb"'},{value:'"ppt"'},{value:'"ppq"'},{value:'"V"'},{value:'"mV"'},{value:'"kV"'},{value:'"A"'},{value:'"mA"'},{value:'"kA"'},{value:'"W"'},{value:'"mW"'},{value:'"kW"'},{value:'"MW"'},{value:'"GW"'},{value:'"VA"'},{value:'"mVA"'},{value:'"kVA"'},{value:'"MVA"'},{value:'"GVA"'},{value:'"VAR"'},{value:'"mVAR"'},{value:'"kVAR"'},{value:'"MVAR"'},{value:'"GVAR"'},{value:'"Wh"'},{value:'"mWh"'},{value:'"kWh"'},{value:'"MWh"'},{value:'"GWh"'},{value:'"J"'},{value:'"kJ"'},{value:'"VARh"'},{value:'"mVARh"'},{value:'"kVARh"'},{value:'"MVARh"'},{value:'"GVARH"'},{value:'"deg"'},{value:'"rad"'},{value:'"grad"'},{value:'"arcmin"'},{value:'"arcsec"'}]}},toolbar:{defaultValue:null,description:"",name:"toolbar",required:!1,type:{name:"{ visible?: boolean | null; }"}},legend:{defaultValue:null,description:"",name:"legend",required:!1,type:{name:"{ visible?: boolean | null; cssStyle?: Record<string, unknown> | null; horizontal?: boolean | null | undefined; } | undefined"}},colorTables:{defaultValue:null,description:"",name:"colorTables",required:!1,type:{name:"colorTablesArray"}},editedData:{defaultValue:null,description:"",name:"editedData",required:!1,type:{name:"Record<string, unknown>"}},setProps:{defaultValue:null,description:"",name:"setProps",required:!1,type:{name:"((data: Record<string, unknown>) => void)"}},checkDatafileSchema:{defaultValue:null,description:"Validate JSON datafile against schema",name:"checkDatafileSchema",required:!1,type:{name:"boolean"}},onMouseEvent:{defaultValue:null,description:"For get mouse events",name:"onMouseEvent",required:!1,type:{name:"((event: MapMouseEvent) => void)"}},getCameraPosition:{defaultValue:null,description:"",name:"getCameraPosition",required:!1,type:{name:"((input: ViewStateType) => void)"}},isLoadedCallback:{defaultValue:null,description:"Will be called after all layers have finished loading data.",name:"isLoadedCallback",required:!1,type:{name:"((arg: boolean) => void)"}},triggerHome:{defaultValue:null,description:"If changed will reset camera to default position.",name:"triggerHome",required:!1,type:{name:"number"}},triggerResetMultipleWells:{defaultValue:null,description:"",name:"triggerResetMultipleWells",required:!1,type:{name:"number"}},selection:{defaultValue:null,description:"Range selection of the current well",name:"selection",required:!1,type:{name:"{ well: string; selection: [number, number | undefined] | undefined; } | undefined"}},getTooltip:{defaultValue:null,description:"Override default tooltip with a callback.",name:"getTooltip",required:!1,type:{name:"TooltipCallback"}},cameraPosition:{defaultValue:null,description:"",name:"cameraPosition",required:!1,type:{name:"ViewStateType"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/SubsurfaceViewer.stories.tsx#IsLoadedCallback"]={docgenInfo:IsLoadedCallback.__docgenInfo,name:"IsLoadedCallback",path:"packages/subsurface-viewer/src/SubsurfaceViewer.stories.tsx#IsLoadedCallback"})}catch(__react_docgen_typescript_loader_error){}},"./packages/subsurface-viewer/src/components/ViewFooter.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{n:function(){return ViewFooter}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);const StyledViewFooter=(0,__webpack_require__("./node_modules/@mui/system/esm/styled.js").Z)("div")((({theme:theme})=>({position:"absolute",bottom:theme.spacing(0),right:theme.spacing(2),zIndex:999999,float:"right",backgroundColor:"#ffffffcc",color:"#000000ff",paddingLeft:"3px",display:"tableRow"}))),ViewFooter=({children:children})=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(StyledViewFooter,null,children);ViewFooter.propTypes={children:prop_types__WEBPACK_IMPORTED_MODULE_2___default().any};try{ViewFooter.displayName="ViewFooter",ViewFooter.__docgenInfo={description:"",displayName:"ViewFooter",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/components/ViewFooter.tsx#ViewFooter"]={docgenInfo:ViewFooter.__docgenInfo,name:"ViewFooter",path:"packages/subsurface-viewer/src/components/ViewFooter.tsx#ViewFooter"})}catch(__react_docgen_typescript_loader_error){}}}]);