"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[2741],{"./packages/subsurface-viewer/src/layers/map/mapLayer.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AddLayer:function(){return AddLayer},BigMap:function(){return BigMap},BigMap3d:function(){return BigMap3d},BigMapWithHole:function(){return BigMapWithHole},BreakpointColorMap:function(){return BreakpointColorMap},CellCenteredPropMap:function(){return CellCenteredPropMap},ColorMapRange:function(){return ColorMapRange},ColorSelector:function(){return ColorSelector},ConstantColor:function(){return ConstantColor},ContourLines:function(){return ContourLines},DefaultColorScale:function(){return DefaultColorScale},Extensions:function(){return Extensions},GradientFunctionColorMap:function(){return GradientFunctionColorMap},MapLayer2d:function(){return MapLayer2d},MapLayer2dDarkMode:function(){return MapLayer2dDarkMode},MapLayer3dPng:function(){return MapLayer3dPng},MapLayer3dPngNoBounds:function(){return MapLayer3dPngNoBounds},NodeCenteredPropMap:function(){return NodeCenteredPropMap},NodeCenteredPropMapWithArrayInput:function(){return NodeCenteredPropMapWithArrayInput},Readout:function(){return Readout},ResetCameraProperty:function(){return ResetCameraProperty},Rotated:function(){return Rotated},ScaleZ:function(){return ScaleZ},SmallMap:function(){return SmallMap},StepFunctionColorMap:function(){return StepFunctionColorMap},TypedArrayInput:function(){return TypedArrayInput},__namedExportsOrder:function(){return __namedExportsOrder}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_mui_material_styles__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),_components_Map__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/subsurface-viewer/src/components/Map.tsx"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),_components_InfoCard__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./packages/subsurface-viewer/src/components/InfoCard.tsx"),_mui_material__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./node_modules/@mui/material/Slider/Slider.js"),_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@emerson-eps/color-tables/dist/index.js"),_axes2d_axes2DLayer__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./packages/subsurface-viewer/src/layers/axes2d/axes2DLayer.ts"),_axes_axesLayer__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./packages/subsurface-viewer/src/layers/axes/axesLayer.ts"),_mapLayer__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./packages/subsurface-viewer/src/layers/map/mapLayer.ts"),_components_ViewFooter__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./packages/subsurface-viewer/src/components/ViewFooter.tsx"),_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__("./node_modules/@deck.gl/core/dist/esm/views/view.js"),_northarrow_northArrow3DLayer__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./packages/subsurface-viewer/src/layers/northarrow/northArrow3DLayer.ts"),_deck_gl_extensions_typed__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__("./node_modules/@deck.gl/extensions/dist/esm/clip/clip-extension.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const classes={main:"MapLayer3dPng-main",legend:"MapLayer3dPng-legend"},Root=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_10__.ZP)("div")({[`& .${classes.main}`]:{height:500,border:"1px solid black",position:"relative"},[`& .${classes.legend}`]:{width:100,position:"absolute",top:"0",right:"0"}});__webpack_exports__.default={parameters:{storySource:{source:'function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from "react";\nimport { styled } from "@mui/material/styles";\nimport { useHoverInfo } from "../../components/Map";\nimport SubsurfaceViewer from "../../SubsurfaceViewer";\nimport InfoCard from "../../components/InfoCard";\nimport { Slider } from "@mui/material";\nimport { ContinuousLegend, ColorLegend, createColorMapFunction } from "@emerson-eps/color-tables";\nimport Axes2DLayer from "../axes2d/axes2DLayer";\nimport AxesLayer from "../axes/axesLayer";\nimport MapLayer from "./mapLayer";\nimport { ViewFooter } from "../../components/ViewFooter";\nimport { View } from "@deck.gl/core/typed";\nimport NorthArrow3DLayer from "../northarrow/northArrow3DLayer";\nimport { ClipExtension } from "@deck.gl/extensions/typed";\nconst PREFIX = "MapLayer3dPng";\nconst classes = {\n  main: `${PREFIX}-main`,\n  legend: `${PREFIX}-legend`\n};\nconst Root = styled("div")({\n  [`& .${classes.main}`]: {\n    height: 500,\n    border: "1px solid black",\n    position: "relative"\n  },\n  [`& .${classes.legend}`]: {\n    width: 100,\n    position: "absolute",\n    top: "0",\n    right: "0"\n  }\n});\nexport default {\n  component: SubsurfaceViewer,\n  title: "SubsurfaceViewer / Map Layer",\n  args: {\n    // Add a reset button for all the stories.\n    // Somehow, I do not manage to add the triggerHome to the general "unset" controls :/\n    triggerHome: 0\n  }\n};\nconst valueRange = [-3071, 41048];\nconst defaultMapLayerProps = {\n  id: "default_map",\n  meshData: "hugin_depth_25_m.float32",\n  frame: {\n    origin: [432150, 6475800],\n    count: [291, 229],\n    increment: [25, 25],\n    rotDeg: 0\n  },\n  propertiesData: "kh_netmap_25_m.float32",\n  ZIncreasingDownwards: true\n};\nconst defaultMapLayer = new MapLayer({\n  ...defaultMapLayerProps\n});\nconst wellsLayer = {\n  "@@type": "WellsLayer",\n  id: "wells-layer",\n  data: "./volve_wells.json",\n  logData: "./volve_logs.json",\n  logrunName: "BLOCKING",\n  logName: "ZONELOG",\n  logColor: "Stratigraphy"\n};\n\n// Example using "Map" layer. Uses float32 mesh and properties binary arrays. Not PNG.\nconst meshMapLayerBig = {\n  "@@type": "MapLayer",\n  id: "mesh-layer",\n  meshUrl: "hugin_depth_5_m.float32",\n  frame: {\n    origin: [432150, 6475800],\n    count: [1451, 1141],\n    increment: [5, 5],\n    rotDeg: 0\n  },\n  propertiesUrl: "kh_netmap_5_m.float32",\n  contours: [0, 100],\n  isContoursDepth: true,\n  gridLines: false,\n  material: true,\n  colorMapName: "Physics"\n};\n\n// Small test map. 4 by 5 cells. One inactive node => 4 inactive cells.\n// property values and depth values both from 0 to 29.\n// Useful for debugging.\nconst smallLayer = {\n  "@@type": "MapLayer",\n  id: "mesh-layer",\n  meshUrl: "small_depths.float32",\n  frame: {\n    origin: [459840.7, 5929826.1],\n    count: [5, 6],\n    increment: [175, 150],\n    rotDeg: 0\n  },\n  propertiesUrl: "small_properties.float32",\n  gridLines: true,\n  material: false,\n  // black to white colors.\n  colorMapFunction: value => [value * 255, value * 255, value * 255],\n  colorMapRange: [0, 29],\n  colorMapClampColor: [255, 0, 0]\n};\n\n// This layer has as many property values as depth values hence each cell will be interpolated in color.\nconst nodeCenteredPropertiesLayer = {\n  "@@type": "MapLayer",\n  id: "node-centered-layer",\n  meshUrl: "data:text/plain;base64,zczMP5qZ2T9mZuY/MzPzP5qZmT9mZqY/MzOzPwAAwD/NzEw/ZmZmPwAAgD/NzIw/zczMPgAAAD+amRk/MzMzPwAAAIDNzMw9zcxMPpqZmT4=",\n  frame: {\n    origin: [0, 0],\n    count: [4, 5],\n    increment: [1, 1],\n    rotDeg: 0\n  },\n  propertiesUrl: "data:text/plain;base64,ZmYmQM3MLEAzMzNAmpk5QM3MDEAzMxNAmpkZQAAAIEBmZuY/MzPzPwAAAEBmZgZAMzOzPwAAwD/NzMw/mpnZPwAAgD/NzIw/mpmZP2Zmpj8=",\n  gridLines: true,\n  material: true,\n  // black to white colors.\n  colorMapFunction: value => [value * 255, value * 255, value * 255]\n};\nconst nodeCenteredPropertiesLayerWithArrayInput = {\n  "@@type": "MapLayer",\n  id: "node-centered-layer",\n  frame: {\n    origin: [0, 0],\n    count: [4, 5],\n    increment: [1, 1],\n    rotDeg: 0\n  },\n  meshData: Array.from(Array(20)).map(() => Math.random()),\n  // Array of 20 random numbers\n  propertiesData: Array.from(Array(20)).map(() => Math.random()),\n  gridLines: true,\n  material: true,\n  // black to white colors.\n  colorMapFunction: value => [value * 255, value * 255, value * 255]\n};\n\n// This layer has as (nx-1)*(ny-1) property values and depth values are nx*ny hence each cell will be fixed in color.\nconst cellCenteredPropertiesLayer = {\n  "@@type": "MapLayer",\n  id: "cell-centered-layer",\n  \n  // One depth pr node\n  meshData: [1.6, 1.7, 1.8, 1.9, 1.2, 1.3, 1.4, 1.5, 0.8, 0.9, 1.0, 1.1, 0.4, 0.5, 0.6, 0.7, 0.0, 0.1, 0.2, 0.3],\n  // One property pr cell.\n  propertiesData: [0.9, 1.0, 1.1, 0.6, undefined, 0.8, 0.3, 0.4, 0.5, 0.0, 0.1, 0.2],\n  \n\n  frame: {\n    origin: [0, 0],\n    count: [4, 5],\n    increment: [1, 1],\n    rotDeg: 0\n  },\n  gridLines: true,\n  material: true,\n  // black to white colors.\n  colorMapFunction: value => [value * 255, value * 255, value * 255],\n  smoothShading: true\n};\n\n// Example using "Map" layer. Uses PNG float for mesh and properties.\nconst meshMapLayerPng = {\n  "@@type": "MapLayer",\n  id: "mesh-layer",\n  meshUrl: "hugin_depth_25_m.png",\n  frame: {\n    origin: [432150, 6475800],\n    count: [291, 229],\n    increment: [25, 25],\n    rotDeg: 0\n  },\n  propertiesUrl: "kh_netmap_25_m.png",\n  contours: [0, 100],\n  isContoursDepth: true,\n  gridLines: false,\n  material: true,\n  smoothShading: true,\n  colorMapName: "Physics",\n  ZIncreasingDownwards: true\n};\n\n// Example using "Map" layer. Uses float32 float for mesh and properties.\nconst meshMapLayerFloat32 = {\n  "@@type": "MapLayer",\n  id: "mesh-layer",\n  meshUrl: "hugin_depth_25_m.float32",\n  frame: {\n    origin: [432150, 6475800],\n    count: [291, 229],\n    increment: [25, 25],\n    rotDeg: 0\n  },\n  propertiesUrl: "kh_netmap_25_m.float32",\n  contours: [0, 100],\n  isContoursDepth: true,\n  gridLines: false,\n  material: false,\n  colorMapName: "Physics"\n};\n\n// Example rotated layer\nconst meshMapLayerRotated = {\n  "@@type": "MapLayer",\n  id: "mesh-layer",\n  meshUrl: "hugin_depth_25_m.float32",\n  frame: {\n    origin: [432150, 6475800],\n    count: [291, 229],\n    increment: [25, 25],\n    rotDeg: 30\n    //rotPoint: [436000, 6478000],\n  },\n  propertiesUrl: "kh_netmap_25_m.float32",\n  contours: [0, 100],\n  isContoursDepth: true,\n  material: false,\n  colorMapName: "Physics"\n};\nconst axes_hugin = {\n  "@@type": "AxesLayer",\n  id: "axes-layer2",\n  bounds: [432150, 6475800, 2000, 439400, 6481500, 3500]\n};\nconst north_arrow_layer = {\n  "@@type": "NorthArrow3DLayer",\n  id: "north-arrow-layer"\n};\nconst defaultArgs = {\n  bounds: [432150, 6475800, 439400, 6481500]\n};\nconst DEFAULT_VIEWS = {\n  layout: [1, 1],\n  viewports: [{\n    id: "view_1",\n    show3D: true\n  }]\n};\nconst defaultParameters = {\n  docs: {\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\nfunction gradientColorMap(x) {\n  return [255 - x * 255, 255 - x * 100, 255 * x];\n}\nfunction nearestColorMap(x) {\n  if (x > 0.5) return [100, 255, 255];else if (x > 0.1) return [255, 100, 255];\n  return [255, 255, 100];\n}\nfunction breakpointColorMap(x, breakpoint) {\n  if (x > breakpoint) return [0, 50, 200];\n  return [255, 255, 0];\n}\nfunction createColorMap(breakpoint) {\n  return value => breakpointColorMap(value, breakpoint);\n}\nexport const MapLayer3dPng = args => {\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nMapLayer3dPng.args = {\n  id: "map",\n  layers: [axes_hugin, meshMapLayerPng, north_arrow_layer],\n  bounds: [432150, 6475800, 439400, 6481500],\n  views: DEFAULT_VIEWS\n};\nMapLayer3dPng.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Example using png as mesh and properties data."\n    }\n  }\n};\nexport const MapLayer3dPngNoBounds = args => {\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nMapLayer3dPngNoBounds.args = {\n  id: "map",\n  layers: [axes_hugin, meshMapLayerPng, north_arrow_layer],\n  views: DEFAULT_VIEWS\n};\nMapLayer3dPngNoBounds.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "If no bounds are specified will results in automatically calcultated camera. Will look at center of bounding box of the data"\n    }\n  }\n};\nexport const ConstantColor = args => {\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nConstantColor.args = {\n  id: "map",\n  layers: [axes_hugin, {\n    ...meshMapLayerPng,\n    colorMapFunction: [0, 255, 0] // Use constant color instead of function\n  }, north_arrow_layer],\n  bounds: [432150, 6475800, 439400, 6481500],\n  views: DEFAULT_VIEWS\n};\nConstantColor.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: \'Example using the property "colorMapFunction" to color the surface in one color only\'\n    }\n  }\n};\nexport const ScaleZ = args => {\n  const [layers, setLayers] = React.useState([axes_hugin, meshMapLayerPng, north_arrow_layer]);\n  const handleChange = () => {\n    setLayers([axes_hugin, meshMapLayerPng, wellsLayer, north_arrow_layer]);\n  };\n  const props = {\n    ...args,\n    layers\n  };\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, props)), /*#__PURE__*/React.createElement("button", {\n    onClick: handleChange\n  }, " Add layer "));\n};\nScaleZ.args = {\n  id: "ScaleZ",\n  layers: [axes_hugin, meshMapLayerPng, wellsLayer, north_arrow_layer],\n  bounds: [432150, 6475800, 439400, 6481500],\n  views: {\n    layout: [1, 2],\n    viewports: [{\n      id: "view_1",\n      layerIds: ["axes-layer2", "mesh-layer", "north-arrow-layer"],\n      show3D: true,\n      isSync: true\n    }, {\n      id: "view_2",\n      layerIds: ["axes-layer2", "wells-layer", "north-arrow-layer"],\n      show3D: true,\n      isSync: true\n    }]\n  }\n};\nScaleZ.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Example scaling in z direction using arrow up/down buttons."\n    }\n  }\n};\nexport const ResetCameraProperty = args => {\n  const [home, setHome] = React.useState(0);\n  const [camera, setCamera] = React.useState({\n    rotationOrbit: 0,\n    rotationX: 45,\n    target: [435775, 6477650, -1750],\n    zoom: -3.8\n  });\n  const handleChange1 = () => {\n    setHome(home + 1);\n  };\n  const handleChange2 = () => {\n    setCamera({\n      ...camera,\n      rotationOrbit: camera.rotationOrbit + 5\n    });\n  };\n  const props = {\n    ...args,\n    cameraPosition: camera,\n    triggerHome: home\n  };\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, props)), /*#__PURE__*/React.createElement("button", {\n    onClick: handleChange1\n  }, " Reset Camera to bounds"), /*#__PURE__*/React.createElement("button", {\n    onClick: handleChange2\n  }, " Change Camera "));\n};\nResetCameraProperty.args = {\n  id: "ResetCameraProperty",\n  layers: [axes_hugin, meshMapLayerPng, north_arrow_layer],\n  bounds: [432150, 6475800, 439400, 6481500],\n  cameraPosition: {\n    rotationOrbit: 0,\n    rotationX: 80,\n    target: [435775, 6478650, -1750],\n    zoom: -3.5109619192773796\n  },\n  views: DEFAULT_VIEWS\n};\nResetCameraProperty.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: `Example using optional \'triggerHome\' property.\n                    When this property is changed camera will reset to home position.\n                    Using the button the property will change its value.`\n    }\n  }\n};\nexport const AddLayer = args => {\n  const [layers, setLayers] = React.useState([axes_hugin, meshMapLayerPng, north_arrow_layer]);\n  const handleChange = () => {\n    setLayers([axes_hugin, meshMapLayerPng, wellsLayer, north_arrow_layer]);\n  };\n  const props = {\n    ...args,\n    layers\n  };\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, props)), /*#__PURE__*/React.createElement("button", {\n    onClick: handleChange\n  }, " Add layer "));\n};\nAddLayer.args = {\n  id: "map",\n  //bounds: [432150, 6475800, 439400, 6481500] as NumberQuad,  // Keep this line for future testing.\n  cameraPosition: {\n    rotationOrbit: 45,\n    rotationX: -45,\n    zoom: [432150, 6475800, -2000, 439400, 6481500, -3500],\n    target: [0, 0, 0]\n  },\n  views: DEFAULT_VIEWS\n};\nAddLayer.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: `Example using button to add a layer.`\n    }\n  }\n};\nexport const MapLayer2d = args => {\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nconst axesLayer2D = new Axes2DLayer({\n  id: "axesLayer2D",\n  backgroundColor: [0, 255, 255]\n});\nconst mapLayer = new MapLayer({\n  id: "MapLayer",\n  meshUrl: "hugin_depth_25_m.float32",\n  frame: {\n    origin: [432150, 6475800],\n    count: [291, 229],\n    increment: [25, 25],\n    rotDeg: 0\n  },\n  propertiesUrl: "kh_netmap_25_m.float32",\n  contours: [0, 100],\n  isContoursDepth: true,\n  gridLines: false,\n  material: true,\n  colorMapName: "Physics"\n});\nMapLayer2d.args = {\n  id: "map",\n  layers: [mapLayer, axesLayer2D],\n  bounds: [432150, 6475800, 439400, 6481500],\n  views: {\n    layout: [1, 1],\n    viewports: [{\n      id: "view_1",\n      show3D: false\n    }]\n  }\n};\nMapLayer2d.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Example using png as mesh and properties data."\n    }\n  }\n};\nexport const MapLayer2dDarkMode = args => {\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nconst white = [255, 255, 255, 255];\nMapLayer2dDarkMode.args = {\n  id: "map",\n  layers: [{\n    ...axes_hugin,\n    labelColor: white,\n    axisColor: white\n  }, {\n    ...meshMapLayerFloat32,\n    material: false,\n    gridLines: false\n  }, {\n    ...north_arrow_layer,\n    color: white\n  }],\n  bounds: [432150, 6475800, 439400, 6481500],\n  scale: {\n    visible: true,\n    cssStyle: {\n      color: "white"\n    }\n  },\n  views: {\n    layout: [1, 1],\n    viewports: [{\n      id: "view_1",\n      show3D: false\n    }]\n  }\n};\nMapLayer2dDarkMode.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Example using png as mesh and properties data."\n    }\n  },\n  backgrounds: {\n    default: "dark"\n  }\n};\nexport const Rotated = args => {\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nRotated.args = {\n  id: "map",\n  layers: [axes_hugin, meshMapLayerRotated, north_arrow_layer],\n  bounds: [432150, 6475800, 439400, 6481500],\n  views: {\n    layout: [1, 1],\n    viewports: [{\n      id: "view_1",\n      show3D: false\n    }]\n  }\n};\nRotated.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Example using png as mesh and properties data."\n    }\n  }\n};\nexport const BigMap = args => {\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nBigMap.args = {\n  id: "map",\n  layers: [axes_hugin, meshMapLayerBig, north_arrow_layer],\n  bounds: [432150, 6475800, 439400, 6481500]\n};\nexport const BigMap3d = args => {\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nBigMap3d.args = {\n  id: "map",\n  layers: [axes_hugin, meshMapLayerBig, north_arrow_layer],\n  bounds: [432150, 6475800, 439400, 6481500],\n  views: DEFAULT_VIEWS\n};\nBigMap3d.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Example using large map with approx. 1400x1400 cells."\n    }\n  }\n};\nconst axes_small = {\n  "@@type": "AxesLayer",\n  id: "axes_small",\n  bounds: [459790, 5929776, 0, 460590, 5930626, 30]\n};\nexport const SmallMap = args => {\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nSmallMap.args = {\n  id: "map",\n  layers: [axes_small, smallLayer, north_arrow_layer],\n  bounds: [459840.7, 5929826.1, 460540.7, 5930576.1],\n  views: DEFAULT_VIEWS\n};\nSmallMap.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "4x5 cells."\n    }\n  }\n};\nconst axes_lite = {\n  "@@type": "AxesLayer",\n  id: "axes_small",\n  bounds: [-1, -1, 0, 4, 5, 3]\n};\n\n//-- CellCenteredPropMap --\nexport const CellCenteredPropMap = args => {\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nCellCenteredPropMap.args = {\n  id: "map",\n  layers: [axes_lite, cellCenteredPropertiesLayer, north_arrow_layer],\n  bounds: [-1, -1, 4, 5],\n  views: DEFAULT_VIEWS\n};\nCellCenteredPropMap.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "A small map with properties given at cell centers. Each cell will be constant colored"\n    }\n  }\n};\n\n//-- NodeCenteredPropMap --\nexport const NodeCenteredPropMap = args => {\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nNodeCenteredPropMap.args = {\n  id: "map",\n  layers: [axes_lite, nodeCenteredPropertiesLayer, north_arrow_layer],\n  bounds: [-1, -1, 4, 5],\n  views: DEFAULT_VIEWS\n};\nNodeCenteredPropMap.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "A small map with properties given at nodes. Each cell will be interpolated in color."\n    }\n  }\n};\n\n//-- NodeCenteredPropMap  with native javascript arrays as input --\nexport const NodeCenteredPropMapWithArrayInput = args => {\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nNodeCenteredPropMapWithArrayInput.args = {\n  id: "map",\n  layers: [axes_lite, nodeCenteredPropertiesLayerWithArrayInput, north_arrow_layer],\n  bounds: [-1, -1, 4, 5],\n  views: DEFAULT_VIEWS\n};\nNodeCenteredPropMapWithArrayInput.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Both mesh and property data given as native javascript arrays (as opposed to URL)."\n    }\n  }\n};\nfunction makeGaussian(amplitude, x0, y0, stdX, stdY) {\n  return function (amplitude, x0, y0, stdX, stdY, x, y) {\n    const exponent = -(Math.pow(x - x0, 2) / (2 * Math.pow(stdX, 2)) + Math.pow(y - y0, 2) / (2 * Math.pow(stdY, 2)));\n    return amplitude * Math.pow(Math.E, exponent);\n  }.bind(null, amplitude, x0, y0, stdX, stdY);\n}\nfunction makeData(n, amplitude) {\n  const X0 = 0;\n  const Y0 = 0;\n  const stdX = 75;\n  const stdY = 50;\n  const f = makeGaussian(amplitude, X0, Y0, stdX, stdY);\n  const data = new Float32Array(n * n).map((val, index) => {\n    const x = index % n - n / 2;\n    const y = Math.floor(index / n) - n / 2;\n    return f(x, y); // keep + 0.3 * Math.random();\n  });\n  return data;\n}\n\n//-- MapLayer with native javascript arrays as input --\nexport const TypedArrayInput = args => {\n  const subsurfaceViewerArgs = {\n    id: "map",\n    layers: [new MapLayer({\n      frame: {\n        origin: [-args.dimension / 2, -args.dimension / 2],\n        count: [args.dimension, args.dimension],\n        increment: [1, 1],\n        rotDeg: 0\n      },\n      meshData: makeData(args.dimension, 99),\n      propertiesData: makeData(args.dimension, 1),\n      gridLines: false,\n      material: true,\n      ZIncreasingDownwards: false,\n      contours: [0, 5],\n      colorMapFunction: nearestColorMap\n    }), new AxesLayer({\n      ZIncreasingDownwards: false,\n      bounds: [-args.dimension / 2, -args.dimension / 2, -10, args.dimension / 2, args.dimension / 2, 60]\n    })],\n    cameraPosition: {\n      rotationOrbit: 45,\n      rotationX: 45,\n      zoom: [-100, -100, -10, 100, 100, 60],\n      target: [0, 0, 0]\n    },\n    views: DEFAULT_VIEWS\n  };\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, subsurfaceViewerArgs);\n};\nTypedArrayInput.args = {\n  dimension: 300\n};\nTypedArrayInput.argTypes = {\n  dimension: {\n    control: {\n      type: "range",\n      min: 150,\n      max: 300,\n      step: 1\n    }\n  }\n};\nTypedArrayInput.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Both mesh and property data given as typed arrays arrays (as opposed to URL)."\n    }\n  }\n};\nexport const GradientFunctionColorMap = () => {\n  const args = {\n    ...defaultArgs,\n    id: "gradient-color-map",\n    layers: [{\n      ...meshMapLayerFloat32,\n      colorMapFunction: gradientColorMap\n    }]\n  };\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nGradientFunctionColorMap.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Example using gradient color mapping function."\n    }\n  }\n};\nexport const StepFunctionColorMap = () => {\n  const args = {\n    ...defaultArgs,\n    id: "nearest-color-map",\n    layers: [{\n      ...meshMapLayerFloat32,\n      material: true,\n      colorMapFunction: nearestColorMap\n    }]\n  };\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nStepFunctionColorMap.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Example using step color mapping function."\n    }\n  }\n};\nexport const DefaultColorScale = () => {\n  const args = {\n    ...defaultArgs,\n    id: "default-color-scale",\n    layers: [{\n      ...meshMapLayerFloat32\n    }]\n  };\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nDefaultColorScale.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Default color scale."\n    }\n  }\n};\nexport const Readout = () => {\n  const [hoverInfo, hoverCallback] = useHoverInfo();\n  const args = React.useMemo(() => {\n    return {\n      ...defaultArgs,\n      id: "readout",\n      layers: [{\n        ...meshMapLayerFloat32\n      }],\n      coords: {\n        visible: false\n      },\n      onMouseEvent: hoverCallback\n    };\n  }, [hoverCallback]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SubsurfaceViewer, args), hoverInfo && /*#__PURE__*/React.createElement(InfoCard, {\n    pickInfos: hoverInfo\n  }));\n};\nReadout.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Readout example."\n    }\n  }\n};\nexport const BigMapWithHole = () => {\n  const [hoverInfo, hoverCallback] = useHoverInfo();\n  const args = React.useMemo(() => {\n    return {\n      ...defaultArgs,\n      id: "readout",\n      layers: [{\n        ...meshMapLayerBig,\n        meshUrl: "hugin_depth_5_m_w_hole.float32",\n        gridLines: false,\n        material: false\n      }],\n      coords: {\n        visible: false\n      },\n      onMouseEvent: hoverCallback\n    };\n  }, [hoverCallback]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SubsurfaceViewer, args), hoverInfo && /*#__PURE__*/React.createElement(InfoCard, {\n    pickInfos: hoverInfo\n  }));\n};\nBigMapWithHole.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Example of map with a hole."\n    }\n  }\n};\nexport const BreakpointColorMap = args => {\n  const [breakpoint, setBreakpoint] = React.useState(0.5);\n  const colorMap = React.useCallback(value => {\n    return createColorMap(breakpoint)(value);\n  }, [breakpoint]);\n  const layer = {\n    ...args?.layers?.[0],\n    colorMapFunction: colorMap\n  };\n  const props = {\n    ...args,\n    layers: [layer]\n  };\n  const handleChange = React.useCallback((_event, value) => {\n    setBreakpoint(value / 100);\n  }, []);\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, props), /*#__PURE__*/React.createElement("div", {\n    className: classes.legend\n  }, /*#__PURE__*/React.createElement(ContinuousLegend, {\n    min: valueRange[0],\n    max: valueRange[1],\n    colorMapFunction: colorMap\n  }))), /*#__PURE__*/React.createElement(Slider, {\n    min: 0,\n    max: 100,\n    defaultValue: 50,\n    step: 1,\n    onChangeCommitted: handleChange\n  }));\n};\nBreakpointColorMap.args = {\n  ...defaultArgs,\n  id: "breakpoint-color-map",\n  layers: [{\n    ...meshMapLayerFloat32,\n    gridLines: false,\n    material: true\n  }]\n};\nBreakpointColorMap.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Example using a color scale with a breakpoint."\n    }\n  }\n};\nexport const ColorMapRange = args => {\n  const [colorMapUpper, setColorMapUpper] = React.useState(41048);\n  const layer = {\n    ...args?.layers?.[0],\n    colorMapRange: [-3071, colorMapUpper]\n  };\n  const props = {\n    ...args,\n    layers: [layer]\n  };\n  const handleChange = React.useCallback((_event, value) => {\n    setColorMapUpper(value);\n  }, []);\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, props)), /*#__PURE__*/React.createElement(Slider, {\n    min: 10000,\n    max: 41048,\n    defaultValue: 41048,\n    step: 1000,\n    onChange: handleChange\n  }));\n};\nColorMapRange.args = {\n  ...defaultArgs,\n  id: "breakpoint-color-map",\n  layers: [{\n    ...meshMapLayerFloat32,\n    colorMapName: "Seismic",\n    colorMapClampColor: false,\n    gridLines: false,\n    material: true\n  }]\n};\nColorMapRange.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: \'Example changing the "ColorMapRange" property using a slider.\'\n    }\n  }\n};\n\n// Map layer with color colorselector\n\nconst MapLayerColorSelectorTemplate = args => {\n  const [colorName, setColorName] = React.useState("Rainbow");\n  const [colorRange, setRange] = React.useState();\n  const [isAuto, setAuto] = React.useState();\n  const [breakPoints, setBreakPoint] = React.useState();\n  const [isLog, setIsLog] = React.useState(false);\n  const [isNearest, setIsNearest] = React.useState(false);\n\n  // user defined breakpoint(domain)\n  const userDefinedBreakPoint = React.useCallback(data => {\n    if (data) setBreakPoint(data.colorArray);\n  }, []);\n\n  // Get color name from color selector\n  const colorNameFromSelector = React.useCallback(data => {\n    setColorName(data);\n  }, []);\n\n  // user defined range\n  const userDefinedRange = React.useCallback(data => {\n    if (data.range) setRange(data.range);\n    setAuto(data.isAuto);\n  }, []);\n\n  // Get interpolation method from color selector to layer\n  const getInterpolateMethod = React.useCallback(data => {\n    setIsLog(data.isLog);\n    setIsNearest(data.isNearest);\n  }, []);\n\n  // color map function\n  const colorMapFunc = React.useCallback(() => {\n    return createColorMapFunction(colorName, isLog, isNearest, breakPoints);\n  }, [colorName, isLog, isNearest, breakPoints]);\n  const min = 100;\n  const max = 1000;\n  const updatedLayerData = [{\n    ...meshMapLayerFloat32,\n    colorMapName: colorName,\n    colorMapRange: colorRange && isAuto == false ? colorRange : [min, max],\n    colorMapFunction: colorMapFunc()\n  }];\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({}, args, {\n    layers: updatedLayerData\n  }),\n  /*#__PURE__*/\n  \n  /* @ts-expect-error */\n  React.createElement(View, {\n    id: "view_1"\n  }, /*#__PURE__*/React.createElement("div", {\n    style: {\n      marginTop: 50\n    }\n  }, /*#__PURE__*/React.createElement(ColorLegend, {\n    min: min,\n    max: max,\n    colorNameFromSelector: colorNameFromSelector,\n    getColorRange: userDefinedRange,\n    getInterpolateMethod: getInterpolateMethod,\n    getBreakpointValue: userDefinedBreakPoint,\n    horizontal: true,\n    numberOfTicks: 2\n  }))));\n};\nexport const ColorSelector = MapLayerColorSelectorTemplate.bind({});\nColorSelector.args = {\n  ...defaultArgs,\n  id: "map_layer_color_selector",\n  legend: {\n    visible: true\n  },\n  layers: [{\n    ...meshMapLayerFloat32\n  }],\n  views: {\n    layout: [1, 1],\n    showLabel: true,\n    viewports: [{\n      id: "view_1",\n      zoom: -4\n    }]\n  }\n};\nconst ContourLinesStory = props => {\n  const views = {\n    layout: [2, 2],\n    viewports: [{\n      id: "view_1",\n      show3D: props.show3d,\n      layerIds: ["default_map"],\n      isSync: props.syncViewports\n    }, {\n      id: "view_2",\n      show3D: props.show3d,\n      layerIds: ["contours"],\n      isSync: props.syncViewports\n    }, {\n      id: "view_3",\n      show3D: props.show3d,\n      layerIds: ["property_contours"],\n      isSync: props.syncViewports\n    }, {\n      id: "view_4",\n      show3D: props.show3d,\n      layerIds: ["flat"],\n      isSync: props.syncViewports\n    }]\n  };\n  const contourMapLayer = new MapLayer({\n    ...defaultMapLayerProps,\n    id: "contours",\n    contours: [props.contourOffset, props.zContourInterval]\n  });\n  const propertyContourMapLayer = new MapLayer({\n    ...defaultMapLayerProps,\n    id: "property_contours",\n    contours: [props.contourOffset, props.propertyContourInterval],\n    isContoursDepth: false\n  });\n  const flatMapLayerProps = {\n    ...defaultMapLayerProps,\n    id: "flat",\n    meshData: undefined,\n    contours: [props.contourOffset, props.propertyContourInterval]\n  };\n  const flatPropertyContourMapLayer = new MapLayer({\n    ...flatMapLayerProps\n  });\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, {\n    id: "test",\n    layers: [defaultMapLayer, contourMapLayer, propertyContourMapLayer, flatPropertyContourMapLayer],\n    views: views\n  },\n  /*#__PURE__*/\n  \n  /* @ts-expect-error */\n  React.createElement(View, {\n    id: "view_1"\n  }, /*#__PURE__*/React.createElement(ViewFooter, null, "Default - no contour lines")),\n  /*#__PURE__*/\n  \n  /* @ts-expect-error */\n  React.createElement(View, {\n    id: "view_2"\n  }, /*#__PURE__*/React.createElement(ViewFooter, null, "Contour lines enabled - default is Z value")),\n  /*#__PURE__*/\n  \n  /* @ts-expect-error */\n  React.createElement(View, {\n    id: "view_3"\n  }, /*#__PURE__*/React.createElement(ViewFooter, null, "Contour lines on property value")),\n  /*#__PURE__*/\n  \n  /* @ts-expect-error */\n  React.createElement(View, {\n    id: "view_4"\n  }, /*#__PURE__*/React.createElement(ViewFooter, null, "Contour lines on flat map - default is property value")));\n};\nexport const ContourLines = args => {\n  return /*#__PURE__*/React.createElement(ContourLinesStory, args);\n};\nContourLines.args = {\n  syncViewports: true,\n  show3d: true,\n  contourOffset: 0,\n  zContourInterval: 100,\n  propertyContourInterval: 5000,\n  marginPixels: 0\n};\nexport const Extensions = args => {\n  const rightClipBounds = [args.bounds?.[0] + args.clipX, args.bounds?.[1], args.bounds?.[2], args.bounds?.[3]];\n  const leftClipBounds = [args.bounds?.[0], args.bounds?.[1], args.bounds?.[0] + args.clipX, args.bounds?.[3]];\n  const leftMap = new MapLayer({\n    ...defaultMapLayerProps,\n    id: "left",\n    extensions: [new ClipExtension()],\n    clipBounds: leftClipBounds,\n    clipByInstance: true\n  });\n  const rightMap = new MapLayer({\n    ...defaultMapLayerProps,\n    id: "right",\n    colorMapName: "Physics reverse",\n    extensions: [new ClipExtension()],\n    clipBounds: rightClipBounds,\n    clipByInstance: true\n  });\n  const layers = [new AxesLayer({\n    ...axes_hugin\n  }), leftMap, rightMap, new NorthArrow3DLayer()];\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({}, args, {\n    layers: layers\n  }));\n};\nExtensions.args = {\n  id: "map",\n  ...defaultArgs,\n  views: DEFAULT_VIEWS,\n  clipX: 1000\n};\nExtensions.argTypes = {\n  clipX: {\n    control: {\n      type: "range",\n      min: 0,\n      max: 8000,\n      step: 10\n    }\n  }\n};',locationsMap:{"map-layer-3-d-png":{startLoc:{col:29,line:266},endLoc:{col:1,line:268},startBody:{col:29,line:266},endBody:{col:1,line:268}},"map-layer-3-d-png-no-bounds":{startLoc:{col:37,line:283},endLoc:{col:1,line:285},startBody:{col:37,line:283},endBody:{col:1,line:285}},"constant-color":{startLoc:{col:29,line:299},endLoc:{col:1,line:301},startBody:{col:29,line:299},endBody:{col:1,line:301}},"scale-z":{startLoc:{col:22,line:319},endLoc:{col:1,line:333},startBody:{col:22,line:319},endBody:{col:1,line:333}},"reset-camera-property":{startLoc:{col:35,line:361},endLoc:{col:1,line:390},startBody:{col:35,line:361},endBody:{col:1,line:390}},"add-layer":{startLoc:{col:24,line:413},endLoc:{col:1,line:427},startBody:{col:24,line:413},endBody:{col:1,line:427}},"map-layer-2-d":{startLoc:{col:26,line:447},endLoc:{col:1,line:449},startBody:{col:26,line:447},endBody:{col:1,line:449}},"map-layer-2-d-dark-mode":{startLoc:{col:34,line:490},endLoc:{col:1,line:492},startBody:{col:34,line:490},endBody:{col:1,line:492}},rotated:{startLoc:{col:23,line:534},endLoc:{col:1,line:536},startBody:{col:23,line:534},endBody:{col:1,line:536}},"big-map":{startLoc:{col:22,line:557},endLoc:{col:1,line:559},startBody:{col:22,line:557},endBody:{col:1,line:559}},"big-map-3-d":{startLoc:{col:24,line:565},endLoc:{col:1,line:567},startBody:{col:24,line:565},endBody:{col:1,line:567}},"small-map":{startLoc:{col:24,line:587},endLoc:{col:1,line:589},startBody:{col:24,line:587},endBody:{col:1,line:589}},"cell-centered-prop-map":{startLoc:{col:35,line:611},endLoc:{col:1,line:613},startBody:{col:35,line:611},endBody:{col:1,line:613}},"node-centered-prop-map":{startLoc:{col:35,line:630},endLoc:{col:1,line:632},startBody:{col:35,line:630},endBody:{col:1,line:632}},"node-centered-prop-map-with-array-input":{startLoc:{col:49,line:649},endLoc:{col:1,line:651},startBody:{col:49,line:649},endBody:{col:1,line:651}},"typed-array-input":{startLoc:{col:31,line:687},endLoc:{col:1,line:717},startBody:{col:31,line:687},endBody:{col:1,line:717}},"gradient-function-color-map":{startLoc:{col:40,line:739},endLoc:{col:1,line:749},startBody:{col:40,line:739},endBody:{col:1,line:749}},"step-function-color-map":{startLoc:{col:36,line:758},endLoc:{col:1,line:769},startBody:{col:36,line:758},endBody:{col:1,line:769}},"default-color-scale":{startLoc:{col:33,line:778},endLoc:{col:1,line:787},startBody:{col:33,line:778},endBody:{col:1,line:787}},readout:{startLoc:{col:23,line:796},endLoc:{col:1,line:814},startBody:{col:23,line:796},endBody:{col:1,line:814}},"big-map-with-hole":{startLoc:{col:30,line:823},endLoc:{col:1,line:844},startBody:{col:30,line:823},endBody:{col:1,line:844}},"breakpoint-color-map":{startLoc:{col:34,line:853},endLoc:{col:1,line:884},startBody:{col:34,line:853},endBody:{col:1,line:884}},"color-map-range":{startLoc:{col:29,line:902},endLoc:{col:1,line:924},startBody:{col:29,line:902},endBody:{col:1,line:924}},"color-selector":{startLoc:{col:38,line:947},endLoc:{col:1,line:1011},startBody:{col:38,line:947},endBody:{col:1,line:1011}},"contour-lines":{startLoc:{col:28,line:1106},endLoc:{col:1,line:1108},startBody:{col:28,line:1106},endBody:{col:1,line:1108}},extensions:{startLoc:{col:26,line:1117},endLoc:{col:1,line:1141},startBody:{col:26,line:1117},endBody:{col:1,line:1141}}}}},component:_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,title:"SubsurfaceViewer / Map Layer",args:{triggerHome:0}};const valueRange=[-3071,41048],defaultMapLayerProps={id:"default_map",meshData:"hugin_depth_25_m.float32",frame:{origin:[432150,6475800],count:[291,229],increment:[25,25],rotDeg:0},propertiesData:"kh_netmap_25_m.float32",ZIncreasingDownwards:!0},defaultMapLayer=new _mapLayer__WEBPACK_IMPORTED_MODULE_7__.Z({...defaultMapLayerProps}),wellsLayer={"@@type":"WellsLayer",id:"wells-layer",data:"./volve_wells.json",logData:"./volve_logs.json",logrunName:"BLOCKING",logName:"ZONELOG",logColor:"Stratigraphy"},meshMapLayerBig={"@@type":"MapLayer",id:"mesh-layer",meshUrl:"hugin_depth_5_m.float32",frame:{origin:[432150,6475800],count:[1451,1141],increment:[5,5],rotDeg:0},propertiesUrl:"kh_netmap_5_m.float32",contours:[0,100],isContoursDepth:!0,gridLines:!1,material:!0,colorMapName:"Physics"},nodeCenteredPropertiesLayerWithArrayInput={"@@type":"MapLayer",id:"node-centered-layer",frame:{origin:[0,0],count:[4,5],increment:[1,1],rotDeg:0},meshData:Array.from(Array(20)).map((()=>Math.random())),propertiesData:Array.from(Array(20)).map((()=>Math.random())),gridLines:!0,material:!0,colorMapFunction:value=>[255*value,255*value,255*value]},cellCenteredPropertiesLayer={"@@type":"MapLayer",id:"cell-centered-layer",meshData:[1.6,1.7,1.8,1.9,1.2,1.3,1.4,1.5,.8,.9,1,1.1,.4,.5,.6,.7,0,.1,.2,.3],propertiesData:[.9,1,1.1,.6,void 0,.8,.3,.4,.5,0,.1,.2],frame:{origin:[0,0],count:[4,5],increment:[1,1],rotDeg:0},gridLines:!0,material:!0,colorMapFunction:value=>[255*value,255*value,255*value],smoothShading:!0},meshMapLayerPng={"@@type":"MapLayer",id:"mesh-layer",meshUrl:"hugin_depth_25_m.png",frame:{origin:[432150,6475800],count:[291,229],increment:[25,25],rotDeg:0},propertiesUrl:"kh_netmap_25_m.png",contours:[0,100],isContoursDepth:!0,gridLines:!1,material:!0,smoothShading:!0,colorMapName:"Physics",ZIncreasingDownwards:!0},meshMapLayerFloat32={"@@type":"MapLayer",id:"mesh-layer",meshUrl:"hugin_depth_25_m.float32",frame:{origin:[432150,6475800],count:[291,229],increment:[25,25],rotDeg:0},propertiesUrl:"kh_netmap_25_m.float32",contours:[0,100],isContoursDepth:!0,gridLines:!1,material:!1,colorMapName:"Physics"},axes_hugin={"@@type":"AxesLayer",id:"axes-layer2",bounds:[432150,6475800,2e3,439400,6481500,3500]},north_arrow_layer={"@@type":"NorthArrow3DLayer",id:"north-arrow-layer"},defaultArgs={bounds:[432150,6475800,439400,6481500]},DEFAULT_VIEWS={layout:[1,1],viewports:[{id:"view_1",show3D:!0}]},defaultParameters_docs={inlineStories:!1,iframeHeight:500};function gradientColorMap(x){return[255-255*x,255-100*x,255*x]}function nearestColorMap(x){return x>.5?[100,255,255]:x>.1?[255,100,255]:[255,255,100]}const MapLayer3dPng=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args);MapLayer3dPng.args={id:"map",layers:[axes_hugin,meshMapLayerPng,north_arrow_layer],bounds:[432150,6475800,439400,6481500],views:DEFAULT_VIEWS},MapLayer3dPng.parameters={docs:{...defaultParameters_docs,description:{story:"Example using png as mesh and properties data."}}};const MapLayer3dPngNoBounds=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args);MapLayer3dPngNoBounds.args={id:"map",layers:[axes_hugin,meshMapLayerPng,north_arrow_layer],views:DEFAULT_VIEWS},MapLayer3dPngNoBounds.parameters={docs:{...defaultParameters_docs,description:{story:"If no bounds are specified will results in automatically calcultated camera. Will look at center of bounding box of the data"}}};const ConstantColor=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args);ConstantColor.args={id:"map",layers:[axes_hugin,{...meshMapLayerPng,colorMapFunction:[0,255,0]},north_arrow_layer],bounds:[432150,6475800,439400,6481500],views:DEFAULT_VIEWS},ConstantColor.parameters={docs:{...defaultParameters_docs,description:{story:'Example using the property "colorMapFunction" to color the surface in one color only'}}};const ScaleZ=args=>{const[layers,setLayers]=react__WEBPACK_IMPORTED_MODULE_0__.useState([axes_hugin,meshMapLayerPng,north_arrow_layer]),props={...args,layers:layers};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.main},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,props)),react__WEBPACK_IMPORTED_MODULE_0__.createElement("button",{onClick:()=>{setLayers([axes_hugin,meshMapLayerPng,wellsLayer,north_arrow_layer])}}," Add layer "))};ScaleZ.args={id:"ScaleZ",layers:[axes_hugin,meshMapLayerPng,wellsLayer,north_arrow_layer],bounds:[432150,6475800,439400,6481500],views:{layout:[1,2],viewports:[{id:"view_1",layerIds:["axes-layer2","mesh-layer","north-arrow-layer"],show3D:!0,isSync:!0},{id:"view_2",layerIds:["axes-layer2","wells-layer","north-arrow-layer"],show3D:!0,isSync:!0}]}},ScaleZ.parameters={docs:{...defaultParameters_docs,description:{story:"Example scaling in z direction using arrow up/down buttons."}}};const ResetCameraProperty=args=>{const[home,setHome]=react__WEBPACK_IMPORTED_MODULE_0__.useState(0),[camera,setCamera]=react__WEBPACK_IMPORTED_MODULE_0__.useState({rotationOrbit:0,rotationX:45,target:[435775,6477650,-1750],zoom:-3.8}),props={...args,cameraPosition:camera,triggerHome:home};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.main},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,props)),react__WEBPACK_IMPORTED_MODULE_0__.createElement("button",{onClick:()=>{setHome(home+1)}}," Reset Camera to bounds"),react__WEBPACK_IMPORTED_MODULE_0__.createElement("button",{onClick:()=>{setCamera({...camera,rotationOrbit:camera.rotationOrbit+5})}}," Change Camera "))};ResetCameraProperty.args={id:"ResetCameraProperty",layers:[axes_hugin,meshMapLayerPng,north_arrow_layer],bounds:[432150,6475800,439400,6481500],cameraPosition:{rotationOrbit:0,rotationX:80,target:[435775,6478650,-1750],zoom:-3.5109619192773796},views:DEFAULT_VIEWS},ResetCameraProperty.parameters={docs:{...defaultParameters_docs,description:{story:"Example using optional 'triggerHome' property.\n                    When this property is changed camera will reset to home position.\n                    Using the button the property will change its value."}}};const AddLayer=args=>{const[layers,setLayers]=react__WEBPACK_IMPORTED_MODULE_0__.useState([axes_hugin,meshMapLayerPng,north_arrow_layer]),props={...args,layers:layers};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.main},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,props)),react__WEBPACK_IMPORTED_MODULE_0__.createElement("button",{onClick:()=>{setLayers([axes_hugin,meshMapLayerPng,wellsLayer,north_arrow_layer])}}," Add layer "))};AddLayer.args={id:"map",cameraPosition:{rotationOrbit:45,rotationX:-45,zoom:[432150,6475800,-2e3,439400,6481500,-3500],target:[0,0,0]},views:DEFAULT_VIEWS},AddLayer.parameters={docs:{...defaultParameters_docs,description:{story:"Example using button to add a layer."}}};const MapLayer2d=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args),axesLayer2D=new _axes2d_axes2DLayer__WEBPACK_IMPORTED_MODULE_5__.Z({id:"axesLayer2D",backgroundColor:[0,255,255]}),mapLayer=new _mapLayer__WEBPACK_IMPORTED_MODULE_7__.Z({id:"MapLayer",meshUrl:"hugin_depth_25_m.float32",frame:{origin:[432150,6475800],count:[291,229],increment:[25,25],rotDeg:0},propertiesUrl:"kh_netmap_25_m.float32",contours:[0,100],isContoursDepth:!0,gridLines:!1,material:!0,colorMapName:"Physics"});MapLayer2d.args={id:"map",layers:[mapLayer,axesLayer2D],bounds:[432150,6475800,439400,6481500],views:{layout:[1,1],viewports:[{id:"view_1",show3D:!1}]}},MapLayer2d.parameters={docs:{...defaultParameters_docs,description:{story:"Example using png as mesh and properties data."}}};const MapLayer2dDarkMode=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args),white=[255,255,255,255];MapLayer2dDarkMode.args={id:"map",layers:[{...axes_hugin,labelColor:white,axisColor:white},{...meshMapLayerFloat32,material:!1,gridLines:!1},{...north_arrow_layer,color:white}],bounds:[432150,6475800,439400,6481500],scale:{visible:!0,cssStyle:{color:"white"}},views:{layout:[1,1],viewports:[{id:"view_1",show3D:!1}]}},MapLayer2dDarkMode.parameters={docs:{...defaultParameters_docs,description:{story:"Example using png as mesh and properties data."}},backgrounds:{default:"dark"}};const Rotated=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args);Rotated.args={id:"map",layers:[axes_hugin,{"@@type":"MapLayer",id:"mesh-layer",meshUrl:"hugin_depth_25_m.float32",frame:{origin:[432150,6475800],count:[291,229],increment:[25,25],rotDeg:30},propertiesUrl:"kh_netmap_25_m.float32",contours:[0,100],isContoursDepth:!0,material:!1,colorMapName:"Physics"},north_arrow_layer],bounds:[432150,6475800,439400,6481500],views:{layout:[1,1],viewports:[{id:"view_1",show3D:!1}]}},Rotated.parameters={docs:{...defaultParameters_docs,description:{story:"Example using png as mesh and properties data."}}};const BigMap=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args);BigMap.args={id:"map",layers:[axes_hugin,meshMapLayerBig,north_arrow_layer],bounds:[432150,6475800,439400,6481500]};const BigMap3d=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args);BigMap3d.args={id:"map",layers:[axes_hugin,meshMapLayerBig,north_arrow_layer],bounds:[432150,6475800,439400,6481500],views:DEFAULT_VIEWS},BigMap3d.parameters={docs:{...defaultParameters_docs,description:{story:"Example using large map with approx. 1400x1400 cells."}}};const SmallMap=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args);SmallMap.args={id:"map",layers:[{"@@type":"AxesLayer",id:"axes_small",bounds:[459790,5929776,0,460590,5930626,30]},{"@@type":"MapLayer",id:"mesh-layer",meshUrl:"small_depths.float32",frame:{origin:[459840.7,5929826.1],count:[5,6],increment:[175,150],rotDeg:0},propertiesUrl:"small_properties.float32",gridLines:!0,material:!1,colorMapFunction:value=>[255*value,255*value,255*value],colorMapRange:[0,29],colorMapClampColor:[255,0,0]},north_arrow_layer],bounds:[459840.7,5929826.1,460540.7,5930576.1],views:DEFAULT_VIEWS},SmallMap.parameters={docs:{...defaultParameters_docs,description:{story:"4x5 cells."}}};const axes_lite={"@@type":"AxesLayer",id:"axes_small",bounds:[-1,-1,0,4,5,3]},CellCenteredPropMap=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args);CellCenteredPropMap.args={id:"map",layers:[axes_lite,cellCenteredPropertiesLayer,north_arrow_layer],bounds:[-1,-1,4,5],views:DEFAULT_VIEWS},CellCenteredPropMap.parameters={docs:{...defaultParameters_docs,description:{story:"A small map with properties given at cell centers. Each cell will be constant colored"}}};const NodeCenteredPropMap=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args);NodeCenteredPropMap.args={id:"map",layers:[axes_lite,{"@@type":"MapLayer",id:"node-centered-layer",meshUrl:"data:text/plain;base64,zczMP5qZ2T9mZuY/MzPzP5qZmT9mZqY/MzOzPwAAwD/NzEw/ZmZmPwAAgD/NzIw/zczMPgAAAD+amRk/MzMzPwAAAIDNzMw9zcxMPpqZmT4=",frame:{origin:[0,0],count:[4,5],increment:[1,1],rotDeg:0},propertiesUrl:"data:text/plain;base64,ZmYmQM3MLEAzMzNAmpk5QM3MDEAzMxNAmpkZQAAAIEBmZuY/MzPzPwAAAEBmZgZAMzOzPwAAwD/NzMw/mpnZPwAAgD/NzIw/mpmZP2Zmpj8=",gridLines:!0,material:!0,colorMapFunction:value=>[255*value,255*value,255*value]},north_arrow_layer],bounds:[-1,-1,4,5],views:DEFAULT_VIEWS},NodeCenteredPropMap.parameters={docs:{...defaultParameters_docs,description:{story:"A small map with properties given at nodes. Each cell will be interpolated in color."}}};const NodeCenteredPropMapWithArrayInput=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args);function makeData(n,amplitude){const f=function makeGaussian(amplitude,x0,y0,stdX,stdY){return function(amplitude,x0,y0,stdX,stdY,x,y){const exponent=-(Math.pow(x-x0,2)/(2*Math.pow(stdX,2))+Math.pow(y-y0,2)/(2*Math.pow(stdY,2)));return amplitude*Math.pow(Math.E,exponent)}.bind(null,amplitude,x0,y0,stdX,stdY)}(amplitude,0,0,75,50);return new Float32Array(n*n).map(((val,index)=>{const x=index%n-n/2,y=Math.floor(index/n)-n/2;return f(x,y)}))}NodeCenteredPropMapWithArrayInput.args={id:"map",layers:[axes_lite,nodeCenteredPropertiesLayerWithArrayInput,north_arrow_layer],bounds:[-1,-1,4,5],views:DEFAULT_VIEWS},NodeCenteredPropMapWithArrayInput.parameters={docs:{...defaultParameters_docs,description:{story:"Both mesh and property data given as native javascript arrays (as opposed to URL)."}}};const TypedArrayInput=args=>{const subsurfaceViewerArgs={id:"map",layers:[new _mapLayer__WEBPACK_IMPORTED_MODULE_7__.Z({frame:{origin:[-args.dimension/2,-args.dimension/2],count:[args.dimension,args.dimension],increment:[1,1],rotDeg:0},meshData:makeData(args.dimension,99),propertiesData:makeData(args.dimension,1),gridLines:!1,material:!0,ZIncreasingDownwards:!1,contours:[0,5],colorMapFunction:nearestColorMap}),new _axes_axesLayer__WEBPACK_IMPORTED_MODULE_6__.Z({ZIncreasingDownwards:!1,bounds:[-args.dimension/2,-args.dimension/2,-10,args.dimension/2,args.dimension/2,60]})],cameraPosition:{rotationOrbit:45,rotationX:45,zoom:[-100,-100,-10,100,100,60],target:[0,0,0]},views:DEFAULT_VIEWS};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,subsurfaceViewerArgs)};TypedArrayInput.args={dimension:300},TypedArrayInput.argTypes={dimension:{control:{type:"range",min:150,max:300,step:1}}},TypedArrayInput.parameters={docs:{...defaultParameters_docs,description:{story:"Both mesh and property data given as typed arrays arrays (as opposed to URL)."}}};const GradientFunctionColorMap=()=>{const args={...defaultArgs,id:"gradient-color-map",layers:[{...meshMapLayerFloat32,colorMapFunction:gradientColorMap}]};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args)};GradientFunctionColorMap.parameters={docs:{...defaultParameters_docs,description:{story:"Example using gradient color mapping function."}}};const StepFunctionColorMap=()=>{const args={...defaultArgs,id:"nearest-color-map",layers:[{...meshMapLayerFloat32,material:!0,colorMapFunction:nearestColorMap}]};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args)};StepFunctionColorMap.parameters={docs:{...defaultParameters_docs,description:{story:"Example using step color mapping function."}}};const DefaultColorScale=()=>{const args={...defaultArgs,id:"default-color-scale",layers:[{...meshMapLayerFloat32}]};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args)};DefaultColorScale.parameters={docs:{...defaultParameters_docs,description:{story:"Default color scale."}}};const Readout=()=>{const[hoverInfo,hoverCallback]=(0,_components_Map__WEBPACK_IMPORTED_MODULE_1__.oO)(),args=react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>({...defaultArgs,id:"readout",layers:[{...meshMapLayerFloat32}],coords:{visible:!1},onMouseEvent:hoverCallback})),[hoverCallback]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args),hoverInfo&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_InfoCard__WEBPACK_IMPORTED_MODULE_3__.Z,{pickInfos:hoverInfo}))};Readout.parameters={docs:{...defaultParameters_docs,description:{story:"Readout example."}}};const BigMapWithHole=()=>{const[hoverInfo,hoverCallback]=(0,_components_Map__WEBPACK_IMPORTED_MODULE_1__.oO)(),args=react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>({...defaultArgs,id:"readout",layers:[{...meshMapLayerBig,meshUrl:"hugin_depth_5_m_w_hole.float32",gridLines:!1,material:!1}],coords:{visible:!1},onMouseEvent:hoverCallback})),[hoverCallback]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,args),hoverInfo&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_InfoCard__WEBPACK_IMPORTED_MODULE_3__.Z,{pickInfos:hoverInfo}))};BigMapWithHole.parameters={docs:{...defaultParameters_docs,description:{story:"Example of map with a hole."}}};const BreakpointColorMap=args=>{const[breakpoint,setBreakpoint]=react__WEBPACK_IMPORTED_MODULE_0__.useState(.5),colorMap=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((value=>function createColorMap(breakpoint){return value=>function breakpointColorMap(x,breakpoint){return x>breakpoint?[0,50,200]:[255,255,0]}(value,breakpoint)}(breakpoint)(value)),[breakpoint]),layer={...args?.layers?.[0],colorMapFunction:colorMap},props={...args,layers:[layer]},handleChange=react__WEBPACK_IMPORTED_MODULE_0__.useCallback(((_event,value)=>{setBreakpoint(value/100)}),[]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.main},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,props),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.legend},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_4__.sG,{min:valueRange[0],max:valueRange[1],colorMapFunction:colorMap}))),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_11__.ZP,{min:0,max:100,defaultValue:50,step:1,onChangeCommitted:handleChange}))};BreakpointColorMap.args={...defaultArgs,id:"breakpoint-color-map",layers:[{...meshMapLayerFloat32,gridLines:!1,material:!0}]},BreakpointColorMap.parameters={docs:{...defaultParameters_docs,description:{story:"Example using a color scale with a breakpoint."}}};const ColorMapRange=args=>{const[colorMapUpper,setColorMapUpper]=react__WEBPACK_IMPORTED_MODULE_0__.useState(41048),layer={...args?.layers?.[0],colorMapRange:[-3071,colorMapUpper]},props={...args,layers:[layer]},handleChange=react__WEBPACK_IMPORTED_MODULE_0__.useCallback(((_event,value)=>{setColorMapUpper(value)}),[]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:classes.main},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,props)),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_11__.ZP,{min:1e4,max:41048,defaultValue:41048,step:1e3,onChange:handleChange}))};ColorMapRange.args={...defaultArgs,id:"breakpoint-color-map",layers:[{...meshMapLayerFloat32,colorMapName:"Seismic",colorMapClampColor:!1,gridLines:!1,material:!0}]},ColorMapRange.parameters={docs:{...defaultParameters_docs,description:{story:'Example changing the "ColorMapRange" property using a slider.'}}};const ColorSelector=(args=>{const[colorName,setColorName]=react__WEBPACK_IMPORTED_MODULE_0__.useState("Rainbow"),[colorRange,setRange]=react__WEBPACK_IMPORTED_MODULE_0__.useState(),[isAuto,setAuto]=react__WEBPACK_IMPORTED_MODULE_0__.useState(),[breakPoints,setBreakPoint]=react__WEBPACK_IMPORTED_MODULE_0__.useState(),[isLog,setIsLog]=react__WEBPACK_IMPORTED_MODULE_0__.useState(!1),[isNearest,setIsNearest]=react__WEBPACK_IMPORTED_MODULE_0__.useState(!1),userDefinedBreakPoint=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((data=>{data&&setBreakPoint(data.colorArray)}),[]),colorNameFromSelector=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((data=>{setColorName(data)}),[]),userDefinedRange=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((data=>{data.range&&setRange(data.range),setAuto(data.isAuto)}),[]),getInterpolateMethod=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((data=>{setIsLog(data.isLog),setIsNearest(data.isNearest)}),[]),colorMapFunc=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((()=>(0,_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_4__.rX)(colorName,isLog,isNearest,breakPoints)),[colorName,isLog,isNearest,breakPoints]),updatedLayerData=[{...meshMapLayerFloat32,colorMapName:colorName,colorMapRange:colorRange&&0==isAuto?colorRange:[100,1e3],colorMapFunction:colorMapFunc()}];return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,_extends({},args,{layers:updatedLayerData}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_12__.Z,{id:"view_1"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{marginTop:50}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_emerson_eps_color_tables__WEBPACK_IMPORTED_MODULE_4__.n6,{min:100,max:1e3,colorNameFromSelector:colorNameFromSelector,getColorRange:userDefinedRange,getInterpolateMethod:getInterpolateMethod,getBreakpointValue:userDefinedBreakPoint,horizontal:!0,numberOfTicks:2}))))}).bind({});ColorSelector.args={...defaultArgs,id:"map_layer_color_selector",legend:{visible:!0},layers:[{...meshMapLayerFloat32}],views:{layout:[1,1],showLabel:!0,viewports:[{id:"view_1",zoom:-4}]}};const ContourLinesStory=props=>{const views={layout:[2,2],viewports:[{id:"view_1",show3D:props.show3d,layerIds:["default_map"],isSync:props.syncViewports},{id:"view_2",show3D:props.show3d,layerIds:["contours"],isSync:props.syncViewports},{id:"view_3",show3D:props.show3d,layerIds:["property_contours"],isSync:props.syncViewports},{id:"view_4",show3D:props.show3d,layerIds:["flat"],isSync:props.syncViewports}]},contourMapLayer=new _mapLayer__WEBPACK_IMPORTED_MODULE_7__.Z({...defaultMapLayerProps,id:"contours",contours:[props.contourOffset,props.zContourInterval]}),propertyContourMapLayer=new _mapLayer__WEBPACK_IMPORTED_MODULE_7__.Z({...defaultMapLayerProps,id:"property_contours",contours:[props.contourOffset,props.propertyContourInterval],isContoursDepth:!1}),flatMapLayerProps={...defaultMapLayerProps,id:"flat",meshData:void 0,contours:[props.contourOffset,props.propertyContourInterval]},flatPropertyContourMapLayer=new _mapLayer__WEBPACK_IMPORTED_MODULE_7__.Z({...flatMapLayerProps});return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,{id:"test",layers:[defaultMapLayer,contourMapLayer,propertyContourMapLayer,flatPropertyContourMapLayer],views:views},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_12__.Z,{id:"view_1"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_ViewFooter__WEBPACK_IMPORTED_MODULE_8__.n,null,"Default - no contour lines")),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_12__.Z,{id:"view_2"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_ViewFooter__WEBPACK_IMPORTED_MODULE_8__.n,null,"Contour lines enabled - default is Z value")),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_12__.Z,{id:"view_3"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_ViewFooter__WEBPACK_IMPORTED_MODULE_8__.n,null,"Contour lines on property value")),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_deck_gl_core_typed__WEBPACK_IMPORTED_MODULE_12__.Z,{id:"view_4"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_ViewFooter__WEBPACK_IMPORTED_MODULE_8__.n,null,"Contour lines on flat map - default is property value")))},ContourLines=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(ContourLinesStory,args);ContourLines.args={syncViewports:!0,show3d:!0,contourOffset:0,zContourInterval:100,propertyContourInterval:5e3,marginPixels:0};const Extensions=args=>{const rightClipBounds=[args.bounds?.[0]+args.clipX,args.bounds?.[1],args.bounds?.[2],args.bounds?.[3]],leftClipBounds=[args.bounds?.[0],args.bounds?.[1],args.bounds?.[0]+args.clipX,args.bounds?.[3]],leftMap=new _mapLayer__WEBPACK_IMPORTED_MODULE_7__.Z({...defaultMapLayerProps,id:"left",extensions:[new _deck_gl_extensions_typed__WEBPACK_IMPORTED_MODULE_13__.Z],clipBounds:leftClipBounds,clipByInstance:!0}),rightMap=new _mapLayer__WEBPACK_IMPORTED_MODULE_7__.Z({...defaultMapLayerProps,id:"right",colorMapName:"Physics reverse",extensions:[new _deck_gl_extensions_typed__WEBPACK_IMPORTED_MODULE_13__.Z],clipBounds:rightClipBounds,clipByInstance:!0}),layers=[new _axes_axesLayer__WEBPACK_IMPORTED_MODULE_6__.Z({...axes_hugin}),leftMap,rightMap,new _northarrow_northArrow3DLayer__WEBPACK_IMPORTED_MODULE_9__.Z];return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_2__.Z,_extends({},args,{layers:layers}))};Extensions.args={id:"map",...defaultArgs,views:DEFAULT_VIEWS,clipX:1e3},Extensions.argTypes={clipX:{control:{type:"range",min:0,max:8e3,step:10}}},MapLayer3dPng.parameters={...MapLayer3dPng.parameters,docs:{...MapLayer3dPng.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...MapLayer3dPng.parameters?.docs?.source}}},MapLayer3dPngNoBounds.parameters={...MapLayer3dPngNoBounds.parameters,docs:{...MapLayer3dPngNoBounds.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...MapLayer3dPngNoBounds.parameters?.docs?.source}}},ConstantColor.parameters={...ConstantColor.parameters,docs:{...ConstantColor.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...ConstantColor.parameters?.docs?.source}}},ScaleZ.parameters={...ScaleZ.parameters,docs:{...ScaleZ.parameters?.docs,source:{originalSource:"args => {\n  const [layers, setLayers] = React.useState([axes_hugin, meshMapLayerPng, north_arrow_layer]);\n  const handleChange = () => {\n    setLayers([axes_hugin, meshMapLayerPng, wellsLayer, north_arrow_layer]);\n  };\n  const props = {\n    ...args,\n    layers\n  };\n  return <Root>\n            <div className={classes.main}>\n                <SubsurfaceViewer {...props} />\n            </div>\n            <button onClick={handleChange}> Add layer </button>\n        </Root>;\n}",...ScaleZ.parameters?.docs?.source}}},ResetCameraProperty.parameters={...ResetCameraProperty.parameters,docs:{...ResetCameraProperty.parameters?.docs,source:{originalSource:"args => {\n  const [home, setHome] = React.useState<number>(0);\n  const [camera, setCamera] = React.useState({\n    rotationOrbit: 0,\n    rotationX: 45,\n    target: [435775, 6477650, -1750],\n    zoom: -3.8\n  });\n  const handleChange1 = () => {\n    setHome(home + 1);\n  };\n  const handleChange2 = () => {\n    setCamera({\n      ...camera,\n      rotationOrbit: camera.rotationOrbit + 5\n    });\n  };\n  const props = {\n    ...args,\n    cameraPosition: camera,\n    triggerHome: home\n  };\n  return <Root>\n            <div className={classes.main}>\n                <SubsurfaceViewer {...props} />\n            </div>\n            <button onClick={handleChange1}> Reset Camera to bounds</button>\n            <button onClick={handleChange2}> Change Camera </button>\n        </Root>;\n}",...ResetCameraProperty.parameters?.docs?.source}}},AddLayer.parameters={...AddLayer.parameters,docs:{...AddLayer.parameters?.docs,source:{originalSource:"args => {\n  const [layers, setLayers] = React.useState([axes_hugin, meshMapLayerPng, north_arrow_layer]);\n  const handleChange = () => {\n    setLayers([axes_hugin, meshMapLayerPng, wellsLayer, north_arrow_layer]);\n  };\n  const props = {\n    ...args,\n    layers\n  };\n  return <Root>\n            <div className={classes.main}>\n                <SubsurfaceViewer {...props} />\n            </div>\n            <button onClick={handleChange}> Add layer </button>\n        </Root>;\n}",...AddLayer.parameters?.docs?.source}}},MapLayer2d.parameters={...MapLayer2d.parameters,docs:{...MapLayer2d.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...MapLayer2d.parameters?.docs?.source}}},MapLayer2dDarkMode.parameters={...MapLayer2dDarkMode.parameters,docs:{...MapLayer2dDarkMode.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...MapLayer2dDarkMode.parameters?.docs?.source}}},Rotated.parameters={...Rotated.parameters,docs:{...Rotated.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...Rotated.parameters?.docs?.source}}},BigMap.parameters={...BigMap.parameters,docs:{...BigMap.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...BigMap.parameters?.docs?.source}}},BigMap3d.parameters={...BigMap3d.parameters,docs:{...BigMap3d.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...BigMap3d.parameters?.docs?.source}}},SmallMap.parameters={...SmallMap.parameters,docs:{...SmallMap.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...SmallMap.parameters?.docs?.source}}},CellCenteredPropMap.parameters={...CellCenteredPropMap.parameters,docs:{...CellCenteredPropMap.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...CellCenteredPropMap.parameters?.docs?.source}}},NodeCenteredPropMap.parameters={...NodeCenteredPropMap.parameters,docs:{...NodeCenteredPropMap.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...NodeCenteredPropMap.parameters?.docs?.source}}},NodeCenteredPropMapWithArrayInput.parameters={...NodeCenteredPropMapWithArrayInput.parameters,docs:{...NodeCenteredPropMapWithArrayInput.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...NodeCenteredPropMapWithArrayInput.parameters?.docs?.source}}},TypedArrayInput.parameters={...TypedArrayInput.parameters,docs:{...TypedArrayInput.parameters?.docs,source:{originalSource:'args => {\n  const subsurfaceViewerArgs = {\n    id: "map",\n    layers: [new MapLayer({\n      frame: {\n        origin: [-args.dimension / 2, -args.dimension / 2],\n        count: [args.dimension, args.dimension],\n        increment: [1, 1],\n        rotDeg: 0\n      },\n      meshData: makeData(args.dimension, 99),\n      propertiesData: makeData(args.dimension, 1),\n      gridLines: false,\n      material: true,\n      ZIncreasingDownwards: false,\n      contours: [0, 5],\n      colorMapFunction: (nearestColorMap as colorMapFunctionType)\n    }), new AxesLayer({\n      ZIncreasingDownwards: false,\n      bounds: [-args.dimension / 2, -args.dimension / 2, -10, args.dimension / 2, args.dimension / 2, 60]\n    })],\n    cameraPosition: {\n      rotationOrbit: 45,\n      rotationX: 45,\n      zoom: ([-100, -100, -10, 100, 100, 60] as BoundingBox3D),\n      target: [0, 0, 0]\n    },\n    views: DEFAULT_VIEWS\n  };\n  return <SubsurfaceViewer {...subsurfaceViewerArgs} />;\n}',...TypedArrayInput.parameters?.docs?.source}}},GradientFunctionColorMap.parameters={...GradientFunctionColorMap.parameters,docs:{...GradientFunctionColorMap.parameters?.docs,source:{originalSource:'() => {\n  const args = {\n    ...defaultArgs,\n    id: "gradient-color-map",\n    layers: [{\n      ...meshMapLayerFloat32,\n      colorMapFunction: gradientColorMap\n    }]\n  };\n  return <SubsurfaceViewer {...args} />;\n}',...GradientFunctionColorMap.parameters?.docs?.source}}},StepFunctionColorMap.parameters={...StepFunctionColorMap.parameters,docs:{...StepFunctionColorMap.parameters?.docs,source:{originalSource:'() => {\n  const args = {\n    ...defaultArgs,\n    id: "nearest-color-map",\n    layers: [{\n      ...meshMapLayerFloat32,\n      material: true,\n      colorMapFunction: nearestColorMap\n    }]\n  };\n  return <SubsurfaceViewer {...args} />;\n}',...StepFunctionColorMap.parameters?.docs?.source}}},DefaultColorScale.parameters={...DefaultColorScale.parameters,docs:{...DefaultColorScale.parameters?.docs,source:{originalSource:'() => {\n  const args = {\n    ...defaultArgs,\n    id: "default-color-scale",\n    layers: [{\n      ...meshMapLayerFloat32\n    }]\n  };\n  return <SubsurfaceViewer {...args} />;\n}',...DefaultColorScale.parameters?.docs?.source}}},Readout.parameters={...Readout.parameters,docs:{...Readout.parameters?.docs,source:{originalSource:'() => {\n  const [hoverInfo, hoverCallback] = useHoverInfo();\n  const args = React.useMemo(() => {\n    return {\n      ...defaultArgs,\n      id: "readout",\n      layers: [{\n        ...meshMapLayerFloat32\n      }],\n      coords: {\n        visible: false\n      },\n      onMouseEvent: hoverCallback\n    };\n  }, [hoverCallback]);\n  return <>\n            <SubsurfaceViewer {...args} />\n            {hoverInfo && <InfoCard pickInfos={hoverInfo} />}\n        </>;\n}',...Readout.parameters?.docs?.source}}},BigMapWithHole.parameters={...BigMapWithHole.parameters,docs:{...BigMapWithHole.parameters?.docs,source:{originalSource:'() => {\n  const [hoverInfo, hoverCallback] = useHoverInfo();\n  const args = React.useMemo(() => {\n    return {\n      ...defaultArgs,\n      id: "readout",\n      layers: [{\n        ...meshMapLayerBig,\n        meshUrl: "hugin_depth_5_m_w_hole.float32",\n        gridLines: false,\n        material: false\n      }],\n      coords: {\n        visible: false\n      },\n      onMouseEvent: hoverCallback\n    };\n  }, [hoverCallback]);\n  return <>\n            <SubsurfaceViewer {...args} />\n            {hoverInfo && <InfoCard pickInfos={hoverInfo} />}\n        </>;\n}',...BigMapWithHole.parameters?.docs?.source}}},BreakpointColorMap.parameters={...BreakpointColorMap.parameters,docs:{...BreakpointColorMap.parameters?.docs,source:{originalSource:"args => {\n  const [breakpoint, setBreakpoint] = React.useState<number>(0.5);\n  const colorMap = React.useCallback((value: number) => {\n    return createColorMap(breakpoint)(value);\n  }, [breakpoint]);\n  const layer = {\n    ...args?.layers?.[0],\n    colorMapFunction: colorMap\n  };\n  const props = {\n    ...args,\n    layers: [layer]\n  };\n  const handleChange = React.useCallback((_event: Event | SyntheticEvent, value: number | number[]) => {\n    setBreakpoint((value as number) / 100);\n  }, []);\n  return <Root>\n            <div className={classes.main}>\n                <SubsurfaceViewer {...props} />\n                <div className={classes.legend}>\n                    <ContinuousLegend min={valueRange[0]} max={valueRange[1]} colorMapFunction={colorMap} />\n                </div>\n            </div>\n            <Slider min={0} max={100} defaultValue={50} step={1} onChangeCommitted={handleChange} />\n        </Root>;\n}",...BreakpointColorMap.parameters?.docs?.source}}},ColorMapRange.parameters={...ColorMapRange.parameters,docs:{...ColorMapRange.parameters?.docs,source:{originalSource:"args => {\n  const [colorMapUpper, setColorMapUpper] = React.useState<number>(41048);\n  const layer = {\n    ...args?.layers?.[0],\n    colorMapRange: [-3071, colorMapUpper]\n  };\n  const props = {\n    ...args,\n    layers: [layer]\n  };\n  const handleChange = React.useCallback((_event: unknown, value: number | number[]) => {\n    setColorMapUpper((value as number));\n  }, []);\n  return <Root>\n            <div className={classes.main}>\n                <SubsurfaceViewer {...props} />\n            </div>\n            <Slider min={10000} max={41048} defaultValue={41048} step={1000} onChange={handleChange} />\n        </Root>;\n}",...ColorMapRange.parameters?.docs?.source}}},ColorSelector.parameters={...ColorSelector.parameters,docs:{...ColorSelector.parameters?.docs,source:{originalSource:'args => {\n  const [colorName, setColorName] = React.useState("Rainbow");\n  const [colorRange, setRange] = React.useState();\n  const [isAuto, setAuto] = React.useState();\n  const [breakPoints, setBreakPoint] = React.useState();\n  const [isLog, setIsLog] = React.useState(false);\n  const [isNearest, setIsNearest] = React.useState(false);\n\n  // user defined breakpoint(domain)\n  const userDefinedBreakPoint = React.useCallback((data: {\n    colorArray: React.SetStateAction<undefined>;\n  }) => {\n    if (data) setBreakPoint(data.colorArray);\n  }, []);\n\n  // Get color name from color selector\n  const colorNameFromSelector = React.useCallback((data: React.SetStateAction<string>) => {\n    setColorName(data);\n  }, []);\n\n  // user defined range\n  const userDefinedRange = React.useCallback((data: {\n    range: React.SetStateAction<undefined>;\n    isAuto: React.SetStateAction<undefined>;\n  }) => {\n    if (data.range) setRange(data.range);\n    setAuto(data.isAuto);\n  }, []);\n\n  // Get interpolation method from color selector to layer\n  const getInterpolateMethod = React.useCallback((data: {\n    isLog: boolean | ((prevState: boolean) => boolean);\n    isNearest: boolean | ((prevState: boolean) => boolean);\n  }) => {\n    setIsLog(data.isLog);\n    setIsNearest(data.isNearest);\n  }, []);\n\n  // color map function\n  const colorMapFunc = React.useCallback(() => {\n    return createColorMapFunction(colorName, isLog, isNearest, breakPoints);\n  }, [colorName, isLog, isNearest, breakPoints]);\n  const min = 100;\n  const max = 1000;\n  const updatedLayerData = [{\n    ...meshMapLayerFloat32,\n    colorMapName: colorName,\n    colorMapRange: colorRange && isAuto == false ? colorRange : [min, max],\n    colorMapFunction: colorMapFunc()\n  }];\n  return <SubsurfaceViewer {...args} layers={updatedLayerData}>\n            {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    /* @ts-expect-error */\n    <View id="view_1">\n                    <div style={{\n        marginTop: 50\n      }}>\n                        <ColorLegend min={min} max={max} colorNameFromSelector={colorNameFromSelector} getColorRange={userDefinedRange} getInterpolateMethod={getInterpolateMethod} getBreakpointValue={userDefinedBreakPoint} horizontal={true} numberOfTicks={2} />\n                    </div>\n                </View>}\n        </SubsurfaceViewer>;\n}',...ColorSelector.parameters?.docs?.source}}},ContourLines.parameters={...ContourLines.parameters,docs:{...ContourLines.parameters?.docs,source:{originalSource:"args => {\n  return <ContourLinesStory {...args} />;\n}",...ContourLines.parameters?.docs?.source}}},Extensions.parameters={...Extensions.parameters,docs:{...Extensions.parameters?.docs,source:{originalSource:'args => {\n  const rightClipBounds = [args.bounds?.[0] + args.clipX, args.bounds?.[1], args.bounds?.[2], args.bounds?.[3]];\n  const leftClipBounds = [args.bounds?.[0], args.bounds?.[1], args.bounds?.[0] + args.clipX, args.bounds?.[3]];\n  const leftMap = new MapLayer({\n    ...defaultMapLayerProps,\n    id: "left",\n    extensions: [new ClipExtension()],\n    clipBounds: leftClipBounds,\n    clipByInstance: true\n  });\n  const rightMap = new MapLayer({\n    ...defaultMapLayerProps,\n    id: "right",\n    colorMapName: "Physics reverse",\n    extensions: [new ClipExtension()],\n    clipBounds: rightClipBounds,\n    clipByInstance: true\n  });\n  const layers = [new AxesLayer({\n    ...axes_hugin\n  }), leftMap, rightMap, new NorthArrow3DLayer()];\n  return <SubsurfaceViewer {...args} layers={layers}></SubsurfaceViewer>;\n}',...Extensions.parameters?.docs?.source}}};const __namedExportsOrder=["MapLayer3dPng","MapLayer3dPngNoBounds","ConstantColor","ScaleZ","ResetCameraProperty","AddLayer","MapLayer2d","MapLayer2dDarkMode","Rotated","BigMap","BigMap3d","SmallMap","CellCenteredPropMap","NodeCenteredPropMap","NodeCenteredPropMapWithArrayInput","TypedArrayInput","GradientFunctionColorMap","StepFunctionColorMap","DefaultColorScale","Readout","BigMapWithHole","BreakpointColorMap","ColorMapRange","ColorSelector","ContourLines","Extensions"]},"./packages/subsurface-viewer/src/components/ViewFooter.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{n:function(){return ViewFooter}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);const StyledViewFooter=(0,__webpack_require__("./node_modules/@mui/system/esm/styled.js").Z)("div")((({theme:theme})=>({position:"absolute",bottom:theme.spacing(0),right:theme.spacing(2),zIndex:999999,float:"right",backgroundColor:"#ffffffcc",color:"#000000ff",paddingLeft:"3px",display:"tableRow"}))),ViewFooter=({children:children})=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(StyledViewFooter,null,children);ViewFooter.propTypes={children:prop_types__WEBPACK_IMPORTED_MODULE_2___default().any};try{ViewFooter.displayName="ViewFooter",ViewFooter.__docgenInfo={description:"",displayName:"ViewFooter",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/components/ViewFooter.tsx#ViewFooter"]={docgenInfo:ViewFooter.__docgenInfo,name:"ViewFooter",path:"packages/subsurface-viewer/src/components/ViewFooter.tsx#ViewFooter"})}catch(__react_docgen_typescript_loader_error){}}}]);