"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[6075],{"./packages/well-log-viewer/src/components/ScaleSelector.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:function(){return Default},__namedExportsOrder:function(){return __namedExportsOrder}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_ScaleSelector__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/well-log-viewer/src/components/ScaleSelector.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const stories={component:_ScaleSelector__WEBPACK_IMPORTED_MODULE_1__.A,title:"WellLogViewer/Components/ScaleSelector",parameters:{docs:{description:{component:"An auxiliary component for WellLogViewer/SyncLogViewer component. Used for setting a zoom factor to well log tracks"}},componentSource:{code:"<ScaleSelector value={1} max={128}/>",language:"javascript"}},argTypes:{values:{description:"Available scale values array"},value:{description:"A value to show in the combobox"},onChange:{description:"A callback to recieve current value selected by user"},round:{description:'round the value to a "good" number (true for auto or number for rounding step)'}}};__webpack_exports__.default=stories;const Template=args=>{const infoRef=react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"Scale:",react__WEBPACK_IMPORTED_MODULE_0__.createElement(_ScaleSelector__WEBPACK_IMPORTED_MODULE_1__.A,_extends({},args,{onChange:function(value){var info;info="scale value="+value,infoRef.current&&(infoRef.current.innerHTML=info)}})),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{ref:infoRef},"Â "))},Default={args:{value:1e4,round:!0},render:args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(Template,args)},__namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {\n    value: 10000,\n    round: true\n  },\n  render: args => <Template {...args} />\n}",...Default.parameters?.docs?.source}}}},"./packages/well-log-viewer/src/components/ScaleSelector.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function addOption(value){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option",{key:value,value:value},"1:"+value)}const defValues=[100,200,500,1e3,2e3,5e3,1e4,2e4,5e4];function ScaleSelector(props){const[value,setValue]=react__WEBPACK_IMPORTED_MODULE_0__.useState(props.value);react__WEBPACK_IMPORTED_MODULE_0__.useEffect((()=>{setValue(props.value)}),[props.value]);const values=props.values||defValues,{shouldAddCustomValue:shouldAddCustomValue,valueRound:valueRound}=function getScale(value,values,round){let nearestValue;const len=values.length;if(len){nearestValue=values[len-1];for(let i=1;i<len;i++)if(value<.5*(values[i-1]+values[i])){nearestValue=values[i-1];break}}if(round){let r=1;if(!0===round){const ticks=[1e4,5e3,2e3,1e3,500,200,100,50,20,10,5,2,1],n=ticks.length;for(let i=0;i+2<n;i++)if(!(value<ticks[i])){r=ticks[i+2];break}}else r=round;value=Number((value/r).toFixed(0))*r}return{shouldAddCustomValue:nearestValue!==value,valueRound:value}}(value,values,props.round);return react__WEBPACK_IMPORTED_MODULE_0__.createElement("select",{onChange:event=>{event.preventDefault();const value=parseFloat(event.target.value);props.onChange?.(value),setValue(value)},value:valueRound},shouldAddCustomValue&&addOption(valueRound),values.map((value=>addOption(value))))}__webpack_exports__.A=ScaleSelector,ScaleSelector.__docgenInfo={description:"",methods:[],displayName:"ScaleSelector",props:{values:{required:!1,tsType:{name:"Array",elements:[{name:"number"}],raw:"number[]"},description:""},value:{required:!0,tsType:{name:"number"},description:""},round:{required:!1,tsType:{name:"union",raw:"boolean | number",elements:[{name:"boolean"},{name:"number"}]},description:""}}}}}]);