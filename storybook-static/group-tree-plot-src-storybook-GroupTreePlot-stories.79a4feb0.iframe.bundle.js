"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[5338],{"./node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./packages/group-tree-plot/src/GroupTreeAssembler/group_tree.css":function(module,__webpack_exports__,__webpack_require__){var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js"),_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,'.link {\r\n    fill: none;\r\n    stroke: #5c5c5c;\r\n    opacity: 1;\r\n}\r\n\r\n.grouptree_link {\r\n    opacity: 0.3;\r\n}\r\n\r\n.grouptree_link__oilrate {\r\n    stroke: #60be6c;\r\n}\r\n\r\n.grouptree_link__waterrate {\r\n    stroke: #0d1b9e;\r\n}\r\n\r\n.grouptree_link__gasrate {\r\n    stroke: #c5221c;\r\n}\r\n\r\n.grouptree_link__waterinjrate {\r\n    stroke: #00c3ff;\r\n}\r\n\r\n.grouptree_link__gasinjrate {\r\n    stroke: #d6397a;\r\n}\r\n\r\n.grouptree__node {\r\n    fill: #fff;\r\n    stroke: #60be6c;\r\n    stroke-width: 1px;\r\n    cursor: default;\r\n}\r\n\r\n.grouptree__nodelabel {\r\n    font-size: 10px;\r\n    font-family: sans-serif;\r\n}\r\n\r\n.grouptree__pressurelabel {\r\n    font-size: 10px;\r\n    font-family: "Statoil Sans Light", Lucida, Arial, Helvetica, sans-serif;\r\n}\r\n\r\n.grouptree__pressureunit {\r\n    font-size: 9px;\r\n}\r\n\r\n.grouptree__grupnet_text {\r\n    font-size: 12px;\r\n}\r\n\r\n.grouptree__node--withchildren {\r\n    stroke-width: 2.5px;\r\n    cursor: pointer;\r\n}\r\n',"",{version:3,sources:["webpack://./packages/group-tree-plot/src/GroupTreeAssembler/group_tree.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,eAAe;IACf,UAAU;AACd;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,UAAU;IACV,eAAe;IACf,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,uBAAuB;AAC3B;;AAEA;IACI,eAAe;IACf,uEAAuE;AAC3E;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,mBAAmB;IACnB,eAAe;AACnB",sourcesContent:['.link {\r\n    fill: none;\r\n    stroke: #5c5c5c;\r\n    opacity: 1;\r\n}\r\n\r\n.grouptree_link {\r\n    opacity: 0.3;\r\n}\r\n\r\n.grouptree_link__oilrate {\r\n    stroke: #60be6c;\r\n}\r\n\r\n.grouptree_link__waterrate {\r\n    stroke: #0d1b9e;\r\n}\r\n\r\n.grouptree_link__gasrate {\r\n    stroke: #c5221c;\r\n}\r\n\r\n.grouptree_link__waterinjrate {\r\n    stroke: #00c3ff;\r\n}\r\n\r\n.grouptree_link__gasinjrate {\r\n    stroke: #d6397a;\r\n}\r\n\r\n.grouptree__node {\r\n    fill: #fff;\r\n    stroke: #60be6c;\r\n    stroke-width: 1px;\r\n    cursor: default;\r\n}\r\n\r\n.grouptree__nodelabel {\r\n    font-size: 10px;\r\n    font-family: sans-serif;\r\n}\r\n\r\n.grouptree__pressurelabel {\r\n    font-size: 10px;\r\n    font-family: "Statoil Sans Light", Lucida, Arial, Helvetica, sans-serif;\r\n}\r\n\r\n.grouptree__pressureunit {\r\n    font-size: 9px;\r\n}\r\n\r\n.grouptree__grupnet_text {\r\n    font-size: 12px;\r\n}\r\n\r\n.grouptree__node--withchildren {\r\n    stroke-width: 2.5px;\r\n    cursor: pointer;\r\n}\r\n'],sourceRoot:""}]),__webpack_exports__.A=___CSS_LOADER_EXPORT___},"./node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js":function(module){module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js":function(module){module.exports=function(item){var content=item[1],cssMapping=item[3];if(!cssMapping)return content;if("function"==typeof btoa){var base64=btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping)))),data="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64),sourceMapping="/*# ".concat(data," */");return[content].concat([sourceMapping]).join("\n")}return[content].join("\n")}},"./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":function(module){var stylesInDOM=[];function getIndexByIdentifier(identifier){for(var result=-1,i=0;i<stylesInDOM.length;i++)if(stylesInDOM[i].identifier===identifier){result=i;break}return result}function modulesToDom(list,options){for(var idCountMap={},identifiers=[],i=0;i<list.length;i++){var item=list[i],id=options.base?item[0]+options.base:item[0],count=idCountMap[id]||0,identifier="".concat(id," ").concat(count);idCountMap[id]=count+1;var indexByIdentifier=getIndexByIdentifier(identifier),obj={css:item[1],media:item[2],sourceMap:item[3],supports:item[4],layer:item[5]};if(-1!==indexByIdentifier)stylesInDOM[indexByIdentifier].references++,stylesInDOM[indexByIdentifier].updater(obj);else{var updater=addElementStyle(obj,options);options.byIndex=i,stylesInDOM.splice(i,0,{identifier:identifier,updater:updater,references:1})}identifiers.push(identifier)}return identifiers}function addElementStyle(obj,options){var api=options.domAPI(options);api.update(obj);return function updater(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap&&newObj.supports===obj.supports&&newObj.layer===obj.layer)return;api.update(obj=newObj)}else api.remove()}}module.exports=function(list,options){var lastIdentifiers=modulesToDom(list=list||[],options=options||{});return function update(newList){newList=newList||[];for(var i=0;i<lastIdentifiers.length;i++){var index=getIndexByIdentifier(lastIdentifiers[i]);stylesInDOM[index].references--}for(var newLastIdentifiers=modulesToDom(newList,options),_i=0;_i<lastIdentifiers.length;_i++){var _index=getIndexByIdentifier(lastIdentifiers[_i]);0===stylesInDOM[_index].references&&(stylesInDOM[_index].updater(),stylesInDOM.splice(_index,1))}lastIdentifiers=newLastIdentifiers}}},"./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js":function(module){var memo={};module.exports=function insertBySelector(insert,style){var target=function getTarget(target){if(void 0===memo[target]){var styleTarget=document.querySelector(target);if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement)try{styleTarget=styleTarget.contentDocument.head}catch(e){styleTarget=null}memo[target]=styleTarget}return memo[target]}(insert);if(!target)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");target.appendChild(style)}},"./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js":function(module){module.exports=function insertStyleElement(options){var element=document.createElement("style");return options.setAttributes(element,options.attributes),options.insert(element,options.options),element}},"./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":function(module,__unused_webpack_exports,__webpack_require__){module.exports=function setAttributesWithoutAttributes(styleElement){var nonce=__webpack_require__.nc;nonce&&styleElement.setAttribute("nonce",nonce)}},"./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js":function(module){module.exports=function domAPI(options){if("undefined"==typeof document)return{update:function update(){},remove:function remove(){}};var styleElement=options.insertStyleElement(options);return{update:function update(obj){!function apply(styleElement,options,obj){var css="";obj.supports&&(css+="@supports (".concat(obj.supports,") {")),obj.media&&(css+="@media ".concat(obj.media," {"));var needLayer=void 0!==obj.layer;needLayer&&(css+="@layer".concat(obj.layer.length>0?" ".concat(obj.layer):""," {")),css+=obj.css,needLayer&&(css+="}"),obj.media&&(css+="}"),obj.supports&&(css+="}");var sourceMap=obj.sourceMap;sourceMap&&"undefined"!=typeof btoa&&(css+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))," */")),options.styleTagTransform(css,styleElement,options.options)}(styleElement,options,obj)},remove:function remove(){!function removeStyleElement(styleElement){if(null===styleElement.parentNode)return!1;styleElement.parentNode.removeChild(styleElement)}(styleElement)}}}},"./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js":function(module){module.exports=function styleTagTransform(css,styleElement){if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}},"./packages/group-tree-plot/src/storybook/GroupTreePlot.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:function(){return Default},__namedExportsOrder:function(){return __namedExportsOrder},default:function(){return GroupTreePlot_stories}});var react=__webpack_require__("./node_modules/react/index.js"),src=__webpack_require__("./node_modules/d3/src/index.js"),injectStylesIntoStyleTag=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),injectStylesIntoStyleTag_default=__webpack_require__.n(injectStylesIntoStyleTag),styleDomAPI=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js"),styleDomAPI_default=__webpack_require__.n(styleDomAPI),insertBySelector=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js"),insertBySelector_default=__webpack_require__.n(insertBySelector),setAttributesWithoutAttributes=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),setAttributesWithoutAttributes_default=__webpack_require__.n(setAttributesWithoutAttributes),insertStyleElement=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js"),insertStyleElement_default=__webpack_require__.n(insertStyleElement),styleTagTransform=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js"),styleTagTransform_default=__webpack_require__.n(styleTagTransform),group_tree=__webpack_require__("./node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./packages/group-tree-plot/src/GroupTreeAssembler/group_tree.css"),options={};options.styleTagTransform=styleTagTransform_default(),options.setAttributes=setAttributesWithoutAttributes_default(),options.insert=insertBySelector_default().bind(null,"head"),options.domAPI=styleDomAPI_default(),options.insertStyleElement=insertStyleElement_default();injectStylesIntoStyleTag_default()(group_tree.A,options),group_tree.A&&group_tree.A.locals&&group_tree.A.locals;var lodash=__webpack_require__("./node_modules/lodash/lodash.js");class GroupTreeAssembler{constructor(dom_element_id,datedTrees,initialFlowRate,initialNodeInfo,currentDateTime,edgeMetadataList,nodeMetadataList){let clonedDatedTrees=(0,lodash.cloneDeep)(datedTrees);"#"!==dom_element_id.charAt(0)&&(dom_element_id="#"+dom_element_id);const metadataList=[...edgeMetadataList,...nodeMetadataList];this._propertyToLabelMap=new Map,metadataList.forEach((elm=>{this._propertyToLabelMap.set(elm.key,[elm.label??"",elm.unit??""])})),0===clonedDatedTrees.length&&(clonedDatedTrees=[{dates:[currentDateTime=""],tree:{node_label:"NO DATA",edge_label:"NO DATA",node_data:{},edge_data:{}}}]),this._currentFlowRate=initialFlowRate,this._currentNodeInfo=initialNodeInfo,this._currentDateTime=currentDateTime,this._transitionTime=200;const tree_values={};clonedDatedTrees.map((datedTree=>{let tree=datedTree.tree;src.Sk5(tree,(d=>d.children)).each((node=>{Object.keys(node.data.edge_data).forEach((key=>{tree_values[key]||(tree_values[key]=[]),tree_values[key].push(node.data.edge_data[key])}))}))})),this._path_scale=new Map,Object.keys(tree_values).forEach((key=>{const extent=[0,src.T9B(tree_values[key].flat())];this._path_scale[key]=src.m4Y().domain(extent).range([2,100])}));const margin_top=10,margin_right=90,margin_bottom=30,margin_left=90,select=src.Ltv(dom_element_id);this._rectWidth=select.node().getBoundingClientRect().width,this._rectHeight=700,this._rectLeftMargin=-margin_left,this._rectTopMargin=-margin_top;const treeHeight=this._rectHeight-margin_top-margin_bottom;this._treeWidth=this._rectWidth-margin_left-margin_right,src.Ltv(dom_element_id).selectAll("svg").remove(),this._svg=src.Ltv(dom_element_id).append("svg").attr("width",this._treeWidth+margin_right+margin_left).attr("height",treeHeight+margin_top+margin_bottom).append("g").attr("transform",`translate(${margin_left},${margin_top})`),this._textpaths=this._svg.append("g"),this._renderTree=src.B22().size([treeHeight,this._treeWidth]),this._data=GroupTreeAssembler.initHierarchies(clonedDatedTrees,treeHeight),this._currentTree={},this.update(currentDateTime)}static initHierarchies(tree_data,height){return tree_data.map((datedTree=>{let tree=datedTree.tree;tree=src.Sk5(tree,(dd=>dd.children)),tree.descendants().map((n=>{return n.id=null===(d=n).parent?d.data.node_label:`${d.parent.id}_${d.data.node_label}`;var d})),tree.x0=height/2,tree.y0=0,datedTree.tree=tree})),tree_data}get data(){return this._data}set flowrate(flowrate){this._currentFlowRate=flowrate;const current_tree_index=this._data.findIndex((e=>e.dates.includes(this._currentDateTime)));if(-1===current_tree_index)return void this._svg.selectAll("path.link").remove();const date_index=this._data[current_tree_index].dates.indexOf(this._currentDateTime);-1!==date_index?this._svg.selectAll("path.link").transition().duration(this._transitionTime).attr("class",(()=>`link grouptree_link grouptree_link__${flowrate}`)).style("stroke-width",(d=>this.getEdgeStrokeWidth(flowrate,d.data.edge_data[flowrate]?.[date_index]??0))).style("stroke-dasharray",(d=>(d.data.edge_data[flowrate]?.[date_index]??0)>0?"none":"5,5")):this._svg.selectAll("path.link").remove()}get flowrate(){return this._currentFlowRate}set nodeinfo(nodeinfo){this._currentNodeInfo=nodeinfo;const current_tree_index=this._data.findIndex((e=>e.dates.includes(this._currentDateTime)));if(-1===current_tree_index)return void this._svg.selectAll("path.link").remove();const date_index=this._data[current_tree_index].dates.indexOf(this._currentDateTime);-1!==date_index?(this._svg.selectAll(".grouptree__pressurelabel").text((d=>d.data.node_data?.[nodeinfo]?.[date_index]?.toFixed(0)??"NA")),this._svg.selectAll(".grouptree__pressureunit").text((()=>(this._propertyToLabelMap.get(nodeinfo)??["",""])[1]))):this._svg.selectAll("path.link").remove()}get nodeinfo(){return this._currentNodeInfo}getEdgeStrokeWidth(key,val){return`${void 0!==this._path_scale[key]?this._path_scale[key](val??0):2}px`}update(newDateTime){const self=this,new_tree_index=self._data.findIndex((e=>e.dates.includes(newDateTime))),root=self._data[new_tree_index],date_index=root?.dates.indexOf(newDateTime)??-1,hasInvalidDate=!root||-1===date_index||-1===new_tree_index;function findClosestVisibleParent(d){let c=d;for(;c.parent&&!c.isvisible;)c=c.parent;return c}function getClosestVisibleParentStartCoordinates(d){const p=findClosestVisibleParent(d);return{x:p.x0??0,y:p.y0??0}}function getClosestVisibleParentEndCoordinates(d){const p=findClosestVisibleParent(d);return{x:p.x,y:p.y}}function toggleBranch(node){node.children?(node._children=node.children,node.children=null):(node.children=node._children,node._children=null),self.update(self._currentDateTime)}function getToolTipText(data,date_index){if(void 0===data||void 0===date_index)return"";const propNames=Object.keys(data);let text="";return propNames.forEach((function(s){const t=self._propertyToLabelMap.get(s)??[s,""],pre=t[0],unit=t[1];text+=pre+" "+(data[s]?.[date_index]?.toFixed(0)??"")+" "+unit+"\n"})),text}if(hasInvalidDate&&(self._currentDateTime=newDateTime),this._svg.selectAll(".error-overlay-background, .error-overlay").remove(),hasInvalidDate)this._svg.append("rect").attr("class","error-overlay-background").attr("width",this._rectWidth).attr("height",this._rectHeight).attr("x",this._rectLeftMargin).attr("y",this._rectTopMargin).attr("fill","rgba(255, 255, 255, 0.8)"),this._svg.append("text").attr("class","error-overlay").attr("x",this._rectWidth/2+2*this._rectLeftMargin).attr("y",this._rectHeight/2+2*this._rectTopMargin).style("fill","red").style("font-size","16px").text("Date not found in data");else{const newTree=function cloneExistingNodeStates(newRoot,oldRoot){return Object.keys(oldRoot).length>0&&oldRoot.descendants().forEach((oldNode=>{newRoot.descendants().forEach((newNode=>{oldNode.id===newNode.id&&(newNode.x0=oldNode.x0,newNode.y0=oldNode.y0,oldNode.x=newNode.x,oldNode.y=newNode.y,newNode.isvisible=oldNode.isvisible)}))})),newRoot}(function growNewTree(t,width){return t.descendants().forEach((d=>{d.y=d.depth*width/(t.height+1)})),t}(this._renderTree(root.tree),this._treeWidth),this._currentTree);!function updateNodes(nodes,nodeinfo){const node=self._svg.selectAll("g.node").data(nodes,(d=>d.id)),nodeEnter=node.enter().append("g").attr("class","node").attr("id",(d=>d.id)).attr("transform",(d=>{const c=getClosestVisibleParentStartCoordinates(d);return`translate(${c.y},${c.x})`})).on("click",toggleBranch);nodeEnter.append("circle").attr("id",(d=>d.id)).attr("r",6).transition().duration(self._transitionTime).attr("x",(d=>d.x)).attr("y",(d=>d.y)),nodeEnter.append("text").attr("class","grouptree__nodelabel").attr("dy",".35em").style("fill-opacity",1).attr("x",(d=>d.children||d._children?-21:21)).attr("text-anchor",(d=>d.children||d._children?"end":"start")).text((d=>d.data.node_label)),nodeEnter.append("text").attr("class","grouptree__pressurelabel").attr("x",0).attr("dy","-.05em").attr("text-anchor","middle").text((d=>d.data.node_data[nodeinfo]?.[date_index]?.toFixed(0)??"NA")),nodeEnter.append("text").attr("class","grouptree__pressureunit").attr("x",0).attr("dy",".04em").attr("dominant-baseline","text-before-edge").attr("text-anchor","middle").text((()=>(self._propertyToLabelMap.get(nodeinfo)??["",""])[1])),nodeEnter.append("title").text((d=>getToolTipText(d.data.node_data,date_index)));const nodeUpdate=nodeEnter.merge(node);nodeUpdate.filter(".exiting").interrupt().classed("exiting",!1).attr("opacity",1),nodeUpdate.select("text.grouptree__pressurelabel").text((d=>d.data.node_data[nodeinfo]?.[date_index]?.toFixed(0)??"NA")),nodeUpdate.transition().duration(self._transitionTime).attr("transform",(d=>`translate(${d.y},${d.x})`)),nodeUpdate.select("circle").attr("class",(d=>"grouptree__node "+(d.children||d._children?"grouptree__node--withchildren":"grouptree__node"))).transition().duration(self._transitionTime).attr("r",15),nodeUpdate.select("title").text((d=>getToolTipText(d.data.node_data,date_index))),node.exit().classed("exiting",!0).attr("opacity",1).transition().duration(self._transitionTime).attr("opacity",1e-6).attr("transform",(d=>{d.isvisible=!1;const c=getClosestVisibleParentEndCoordinates(d);return`translate(${c.y},${c.x})`})).remove()}(newTree.descendants(),this.nodeinfo),function updateEdges(edges,flowrate){const link=self._svg.selectAll("path.link").data(edges,(d=>d.id)),linkEnter=link.enter().insert("path","g").attr("id",(d=>`path ${d.id}`)).attr("d",(d=>{const c=getClosestVisibleParentStartCoordinates(d);return diagonal(c,c)}));linkEnter.append("title").text((d=>getToolTipText(d.data.edge_data,date_index)));const linkUpdate=linkEnter.merge(link);function diagonal(s,d){return`M ${d.y} ${d.x}\n                 C ${(d.y+s.y)/2} ${d.x},\n                   ${(d.y+s.y)/2} ${s.x},\n                   ${s.y} ${s.x}`}linkUpdate.attr("class",(()=>`link grouptree_link grouptree_link__${flowrate}`)).transition().duration(self._transitionTime).attr("d",(d=>diagonal(d,d.parent))).style("stroke-width",(d=>self.getEdgeStrokeWidth(flowrate,d.data.edge_data[flowrate]?.[date_index]??0))).style("stroke-dasharray",(d=>(d.data.edge_data[flowrate]?.[date_index]??0)>0?"none":"5,5")),linkUpdate.select("title").text((d=>getToolTipText(d.data.edge_data,date_index))),link.exit().transition().duration(self._transitionTime).attr("d",(d=>{d.isvisible=!1;const c=getClosestVisibleParentEndCoordinates(d);return diagonal(c,c)})).remove()}(newTree.descendants().slice(1),this.flowrate),function updateEdgeTexts(edges){const textpath=self._textpaths.selectAll(".edge_info_text").data(edges,(d=>d.id));textpath.enter().insert("text").attr("dominant-baseline","central").attr("text-anchor","middle").append("textPath").attr("class","edge_info_text").attr("startOffset","50%").attr("xlink:href",(d=>`#path ${d.id}`)).merge(textpath).attr("fill-opacity",1e-6).transition().duration(self._transitionTime).attr("fill-opacity",1).text((d=>d.data.edge_label)),textpath.exit().remove()}(newTree.descendants().slice(1)),this._currentTree=function doPostUpdateOperations(tree){return function setEndPositions(nodes){nodes.forEach((d=>{d.x0=d.x,d.y0=d.y}))}(tree.descendants()),function setNodeVisibility(nodes,visibility){nodes.forEach((d=>{d.isvisible=visibility}))}(tree.descendants(),!0),tree}(newTree)}}}const GroupTreePlot=props=>{const divRef=react.useRef(null),groupTreeAssemblerRef=react.useRef(),[isMounted,setIsMounted]=react.useState(!1),[prevId,setPrevId]=react.useState(null),[prevDatedTrees,setPrevDatedTrees]=react.useState(null),[prevSelectedEdgeKey,setPrevSelectedEdgeKey]=react.useState(props.selectedEdgeKey),[prevSelectedNodeKey,setPrevSelectedNodeKey]=react.useState(props.selectedNodeKey),[prevSelectedDateTime,setPrevSelectedDateTime]=react.useState(props.selectedDateTime);return react.useEffect((function initialRender(){setIsMounted(!0)}),[]),!isMounted||!divRef.current||(0,lodash.isEqual)(prevDatedTrees,props.datedTrees)&&prevId===divRef.current.id||(setPrevDatedTrees(props.datedTrees),setPrevId(divRef.current.id),groupTreeAssemblerRef.current=new GroupTreeAssembler(divRef.current.id,props.datedTrees,props.selectedEdgeKey,props.selectedNodeKey,props.selectedDateTime,props.edgeMetadataList,props.nodeMetadataList)),prevSelectedEdgeKey!==props.selectedEdgeKey&&(setPrevSelectedEdgeKey(props.selectedEdgeKey),groupTreeAssemblerRef.current&&(groupTreeAssemblerRef.current.flowrate=props.selectedEdgeKey)),prevSelectedNodeKey!==props.selectedNodeKey&&(setPrevSelectedNodeKey(props.selectedNodeKey),groupTreeAssemblerRef.current&&(groupTreeAssemblerRef.current.nodeinfo=props.selectedNodeKey)),prevSelectedDateTime!==props.selectedDateTime&&(setPrevSelectedDateTime(props.selectedDateTime),groupTreeAssemblerRef.current&&groupTreeAssemblerRef.current.update(props.selectedDateTime)),react.createElement("div",{id:props.id,ref:divRef})};GroupTreePlot.displayName="GroupTreePlot",GroupTreePlot.__docgenInfo={description:"",methods:[],displayName:"GroupTreePlot",props:{id:{required:!0,tsType:{name:"string"},description:""},edgeMetadataList:{required:!0,tsType:{name:"Array",elements:[{name:"EdgeMetadata"}],raw:"EdgeMetadata[]"},description:""},nodeMetadataList:{required:!0,tsType:{name:"Array",elements:[{name:"NodeMetadata"}],raw:"NodeMetadata[]"},description:""},datedTrees:{required:!0,tsType:{name:"Array",elements:[{name:"DatedTree"}],raw:"DatedTree[]"},description:""},selectedEdgeKey:{required:!0,tsType:{name:"string"},description:""},selectedNodeKey:{required:!0,tsType:{name:"string"},description:""},selectedDateTime:{required:!0,tsType:{name:"string"},description:""}}};var GroupTreePlot_stories={component:GroupTreePlot,title:"GroupTreePlot/Demo",argTypes:{selectedDateTime:{description:"The selected `string` must be a date time present in one of the `dates` arrays in an element of the`datedTrees`-prop.\n\n"},selectedEdgeKey:{description:"The selection `string` must be an edge key present in one of the `edge_data` objects in the `tree`-prop of an element in `datedTrees`-prop.\n\n"},selectedNodeKey:{description:"The selected `string` must be a node key present in one of the `node_data` objects in the `tree`-prop of an element in `datedTrees`-prop.\n\n"}}};const Template=args=>react.createElement(GroupTreePlot,{id:args.id,datedTrees:args.datedTrees,edgeMetadataList:args.edgeMetadataList,nodeMetadataList:args.nodeMetadataList,selectedDateTime:args.selectedDateTime,selectedEdgeKey:args.selectedEdgeKey,selectedNodeKey:args.selectedNodeKey}),edgeMetadataList=[{key:"waterrate",label:"Water Rate",unit:"m3/s"},{key:"oilrate",label:"Oil Rate",unit:"m3/s"},{key:"gasrate",label:"Gas Rate",unit:"m3/s"},{key:"waterinjrate",label:"Water Injection Rate",unit:"m3/s"},{key:"gasinjrate",label:"Gas Injection Rate",unit:"m3/s"}],nodeMetadataList=[{key:"pressure",label:"Pressure",unit:"Bar"},{key:"bhp",label:"Bottom Hole Pressure",unit:"N/m2"},{key:"wmctl",label:"Missing label",unit:"Unknown unit"}],Default={args:{id:"grouptreeplot",datedTrees:[{dates:["2018-02-01","2018-03-01"],tree:{node_label:"TRE_1",node_type:"Group",node_data:{pressure:[5,10]},edge_label:"VFP10",edge_data:{waterrate:[10,10],oilrate:[10,10],gasrate:[10,10],waterinjrate:[10,10],gasinjrate:[10,10]},children:[{node_label:"TRE_1_1",node_type:"Well",node_data:{pressure:[20,30],bhp:[11,10],wmctl:[12,10]},edge_label:"VFP11",edge_data:{waterrate:[20,30],oilrate:[30,40],gasrate:[40,50],waterinjrate:[50,60],gasinjrate:[60,70]},children:void 0},{node_label:"TRE_1_2",node_type:"Well",node_data:{pressure:[22,30],wmctl:[10,10]},edge_label:"VFP12",edge_data:{waterrate:[25,35],oilrate:[35,45],gasrate:[45,55],waterinjrate:[55,65],gasinjrate:[65,75]},children:void 0}]}},{dates:["2019-02-01","2019-03-01"],tree:{node_label:"TRE_1",node_type:"Group",node_data:{pressure:[5,10]},edge_label:"VFP10",edge_data:{waterrate:[10,10],oilrate:[10,10],gasrate:[10,10],waterinjrate:[10,10],gasinjrate:[10,10]},children:[{node_label:"TRE_1_1",node_type:"Well",node_data:{pressure:[20,30],bhp:[10,10],wmctl:[10,10]},edge_label:"VFP11",edge_data:{waterrate:[20,30],oilrate:[30,40],gasrate:[40,50],waterinjrate:[50,60],gasinjrate:[60,70]},children:[{node_label:"TRE_1_1_1",node_type:"Well",node_data:{pressure:[20,30],bhp:[10,10],wmctl:[10,10]},edge_label:"VFP12",edge_data:{waterrate:[20,30],oilrate:[30,40],gasrate:[40,50],waterinjrate:[50,60],gasinjrate:[60,70]}},{node_label:"TRE_1_1_2",node_type:"Well",node_data:{pressure:[20,30],bhp:[10,10],wmctl:[10,10]},edge_label:"VFP13",edge_data:{waterrate:[20,30],oilrate:[30,40],gasrate:[40,50],waterinjrate:[50,60],gasinjrate:[60,70]}}]},{node_label:"TRE_1_2",node_type:"Well",node_data:{pressure:[20,30],bhp:[10,10],wmctl:[10,10]},edge_label:"VFP14",edge_data:{waterrate:[20,30],oilrate:[30,40],gasrate:[40,50],waterinjrate:[50,60],gasinjrate:[60,70]}}]}}],edgeMetadataList:edgeMetadataList,nodeMetadataList:nodeMetadataList,selectedDateTime:"2018-02-01",selectedEdgeKey:edgeMetadataList[0].key,selectedNodeKey:nodeMetadataList[0].key},render:args=>react.createElement(Template,args)},__namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "grouptreeplot",\n    datedTrees: exampleDatedTrees,\n    edgeMetadataList: edgeMetadataList,\n    nodeMetadataList: nodeMetadataList,\n    selectedDateTime: exampleDates[0],\n    selectedEdgeKey: edgeMetadataList[0].key,\n    selectedNodeKey: nodeMetadataList[0].key\n  },\n  render: args => <Template {...args} />\n}',...Default.parameters?.docs?.source}}}}}]);