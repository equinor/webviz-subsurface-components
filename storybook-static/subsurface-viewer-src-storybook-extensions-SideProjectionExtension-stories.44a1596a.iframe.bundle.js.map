{"version":3,"file":"subsurface-viewer-src-storybook-extensions-SideProjectionExtension-stories.44a1596a.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;AAsCA;;AAIA;;;AAMA","sources":["webpack://@webviz/subsurface-components/./packages/subsurface-viewer/src/extensions/side-projection-extension.ts"],"sourcesContent":["import { LayerExtension } from \"@deck.gl/core\";\n\nimport type { ShaderModule } from \"@luma.gl/shadertools\";\nimport type { Layer } from \"@deck.gl/core\";\nimport { project32, project } from \"@deck.gl/core\";\nimport { glsl } from \"@luma.gl/shadertools\";\n\nconst defaultProps = {\n    sideViewIds: [],\n};\n\ntype SideProjectionExtensionProps = {\n    sideViewIds?: string[];\n};\n\nconst shaderFunction = glsl`\nuniform float side_view;\n\nvec3 transform(vec3 clip_position) {\n    if (side_view < 1.0) {\n        return clip_position;\n    }\n    vec3 world_position = geometry.worldPosition.xyz;\n    vec4 transformed = vec4(world_position.x, world_position.z, 0.0, 1.0);\n\n    vec4 commonspace = project_position(transformed);\n\n    vec4 clipspace = project_common_position_to_clipspace(commonspace);\n\n    return clipspace.xyz;\n}\n`;\n\nconst shaderModuleVs: ShaderModule = {\n    name: \"unfold-vs\",\n    vs: shaderFunction,\n};\n\nconst injectionVs = {\n    \"vs:#decl\": glsl`\n  vec3 new_position;\n`,\n    \"vs:DECKGL_FILTER_GL_POSITION\": glsl`\n  new_position = transform(position.xyz);\n  position.xyz = new_position;\n`,\n};\n\nexport class SideProjectionExtension extends LayerExtension {\n    static defaultProps = defaultProps;\n    static extensionName = \"SideProjectionExtension\";\n\n    getShaders(this: Layer<SideProjectionExtensionProps>) {\n        return {\n            modules: [shaderModuleVs, project, project32],\n            inject: injectionVs,\n        };\n    }\n\n    draw(\n        this: Layer<Required<SideProjectionExtensionProps>>,\n        {\n            uniforms,\n        }: {\n            uniforms: {\n                side_view: unknown;\n            };\n        }\n    ): void {\n        const { sideViewIds } = this.props;\n        const isSideView = sideViewIds.includes(this.context.viewport.id);\n        uniforms.side_view = isSideView ? 1.0 : 0.0;\n    }\n}\n"],"names":[],"sourceRoot":""}