(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[6997],{"./node_modules/escape-latex/dist/index.js":function(module){"use strict";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},defaultEscapes={"{":"\\{","}":"\\}","\\":"\\textbackslash{}","#":"\\#",$:"\\$","%":"\\%","&":"\\&","^":"\\textasciicircum{}",_:"\\_","~":"\\textasciitilde{}"},formatEscapes={"–":"\\--","—":"\\---"," ":"~","\t":"\\qquad{}","\r\n":"\\newline{}","\n":"\\newline{}"},defaultEscapeMapFn=function defaultEscapeMapFn(defaultEscapes,formatEscapes){return _extends({},defaultEscapes,formatEscapes)};module.exports=function(str){for(var _ref=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_ref$preserveFormatti=_ref.preserveFormatting,preserveFormatting=void 0!==_ref$preserveFormatti&&_ref$preserveFormatti,_ref$escapeMapFn=_ref.escapeMapFn,escapeMapFn=void 0===_ref$escapeMapFn?defaultEscapeMapFn:_ref$escapeMapFn,runningStr=String(str),result="",escapes=escapeMapFn(_extends({},defaultEscapes),preserveFormatting?_extends({},formatEscapes):{}),escapeKeys=Object.keys(escapes),_loop=function _loop(){var specialCharFound=!1;escapeKeys.forEach((function(key,index){specialCharFound||runningStr.length>=key.length&&runningStr.slice(0,key.length)===key&&(result+=escapes[escapeKeys[index]],runningStr=runningStr.slice(key.length,runningStr.length),specialCharFound=!0)})),specialCharFound||(result+=runningStr.slice(0,1),runningStr=runningStr.slice(1,runningStr.length))};runningStr;)_loop();return result}},"./node_modules/mathjs/lib/esm/core/create.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{v:function(){return create}});var esm_extends=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js"),typed_function=__webpack_require__("./node_modules/typed-function/lib/umd/typed-function.js"),typed_function_default=__webpack_require__.n(typed_function),ArgumentsError=__webpack_require__("./node_modules/mathjs/lib/esm/error/ArgumentsError.js"),DimensionError=__webpack_require__("./node_modules/mathjs/lib/esm/error/DimensionError.js"),IndexError=__webpack_require__("./node_modules/mathjs/lib/esm/error/IndexError.js"),utils_factory=__webpack_require__("./node_modules/mathjs/lib/esm/utils/factory.js"),is=__webpack_require__("./node_modules/mathjs/lib/esm/utils/is.js"),object=__webpack_require__("./node_modules/mathjs/lib/esm/utils/object.js"),tiny_emitter=__webpack_require__("./node_modules/tiny-emitter/index.js"),tiny_emitter_default=__webpack_require__.n(tiny_emitter);var core_config=__webpack_require__("./node_modules/mathjs/lib/esm/core/config.js"),function_config=__webpack_require__("./node_modules/mathjs/lib/esm/core/function/config.js");function importFactory(typed,load,math,importedFactories){function _import(name,value,options){if(options.wrap&&"function"==typeof value&&(value=function _wrap(fn){var wrapper=function wrapper(){for(var args=[],i=0,len=arguments.length;i<len;i++){var arg=arguments[i];args[i]=arg&&arg.valueOf()}return fn.apply(math,args)};fn.transform&&(wrapper.transform=fn.transform);return wrapper}(value)),function hasTypedFunctionSignature(fn){return"function"==typeof fn&&"string"==typeof fn.signature}(value)&&(value=typed(name,{[value.signature]:value})),typed.isTypedFunction(math[name])&&typed.isTypedFunction(value))return value=options.override?typed(name,value.signatures):typed(math[name],value),math[name]=value,delete importedFactories[name],_importTransform(name,value),void math.emit("import",name,(function resolver(){return value}));if(void 0===math[name]||options.override)return math[name]=value,delete importedFactories[name],_importTransform(name,value),void math.emit("import",name,(function resolver(){return value}));if(!options.silent)throw new Error('Cannot import "'+name+'": already exists')}function _importTransform(name,value){value&&"function"==typeof value.transform?(math.expression.transform[name]=value.transform,allowedInExpressions(name)&&(math.expression.mathWithTransform[name]=value.transform)):(delete math.expression.transform[name],allowedInExpressions(name)&&(math.expression.mathWithTransform[name]=value))}function _deleteTransform(name){delete math.expression.transform[name],allowedInExpressions(name)?math.expression.mathWithTransform[name]=math[name]:delete math.expression.mathWithTransform[name]}function _importFactory(factory,options){var name=arguments.length>2&&void 0!==arguments[2]?arguments[2]:factory.fn;if(name.includes("."))throw new Error("Factory name should not contain a nested path. Name: "+JSON.stringify(name));var namespace=isTransformFunctionFactory(factory)?math.expression.transform:math,existingTransform=name in math.expression.transform,existing=(0,object.mQ)(namespace,name)?namespace[name]:void 0,resolver=function resolver(){var dependencies={};factory.dependencies.map(utils_factory.Py).forEach((dependency=>{if(dependency.includes("."))throw new Error("Factory dependency should not contain a nested path. Name: "+JSON.stringify(dependency));"math"===dependency?dependencies.math=math:"mathWithTransform"===dependency?dependencies.mathWithTransform=math.expression.mathWithTransform:"classes"===dependency?dependencies.classes=math:dependencies[dependency]=math[dependency]}));var instance=factory(dependencies);if(instance&&"function"==typeof instance.transform)throw new Error('Transforms cannot be attached to factory functions. Please create a separate function for it with export const path = "expression.transform"');if(void 0===existing||options.override)return instance;if(typed.isTypedFunction(existing)&&typed.isTypedFunction(instance))return typed(existing,instance);if(options.silent)return existing;throw new Error('Cannot import "'+name+'": already exists')};factory.meta&&!1===factory.meta.lazy?(namespace[name]=resolver(),existing&&existingTransform?_deleteTransform(name):(isTransformFunctionFactory(factory)||factoryAllowedInExpressions(factory))&&(0,object.RZ)(math.expression.mathWithTransform,name,(()=>namespace[name]))):((0,object.RZ)(namespace,name,resolver),existing&&existingTransform?_deleteTransform(name):(isTransformFunctionFactory(factory)||factoryAllowedInExpressions(factory))&&(0,object.RZ)(math.expression.mathWithTransform,name,(()=>namespace[name]))),importedFactories[name]=factory,math.emit("import",name,resolver)}function isSupportedType(object){return"function"==typeof object||"number"==typeof object||"string"==typeof object||"boolean"==typeof object||null===object||(0,is.vO)(object)||(0,is.Zd)(object)||(0,is.C4)(object)||(0,is.fU)(object)||(0,is.OA)(object)||Array.isArray(object)}function allowedInExpressions(name){return!(0,object.mQ)(unsafe,name)}function factoryAllowedInExpressions(factory){return!(factory.fn.includes(".")||(0,object.mQ)(unsafe,factory.fn)||factory.meta&&factory.meta.isClass)}function isTransformFunctionFactory(factory){return void 0!==factory&&void 0!==factory.meta&&!0===factory.meta.isTransformFunction||!1}var unsafe={expression:!0,type:!0,docs:!0,error:!0,json:!0,chain:!0};return function mathImport(functions,options){var num=arguments.length;if(1!==num&&2!==num)throw new ArgumentsError.X("import",num,1,2);options||(options={});var flatValues={};for(var name in function flattenImports(flatValues,value,name){if(Array.isArray(value))value.forEach((item=>flattenImports(flatValues,item)));else if("object"==typeof value)for(var _name in value)(0,object.mQ)(value,_name)&&flattenImports(flatValues,value[_name],_name);else if((0,utils_factory.T$)(value)||void 0!==name){var flatName=(0,utils_factory.T$)(value)?isTransformFunctionFactory(value)?value.fn+".transform":value.fn:name;if((0,object.mQ)(flatValues,flatName)&&flatValues[flatName]!==value&&!options.silent)throw new Error('Cannot import "'+flatName+'" twice');flatValues[flatName]=value}else if(!options.silent)throw new TypeError("Factory, Object, or Array expected")}(flatValues,functions),flatValues)if((0,object.mQ)(flatValues,name)){var value=flatValues[name];if((0,utils_factory.T$)(value))_importFactory(value,options);else if(isSupportedType(value))_import(name,value,options);else if(!options.silent)throw new TypeError("Factory, Object, or Array expected")}}}function create(factories,config){var configInternal=(0,esm_extends.A)({},core_config.P,config);if("function"!=typeof Object.create)throw new Error("ES5 not supported by this JavaScript engine. Please load the es5-shim and es5-sham library for compatibility.");var math=function mixin(obj){var emitter=new(tiny_emitter_default());return obj.on=emitter.on.bind(emitter),obj.off=emitter.off.bind(emitter),obj.once=emitter.once.bind(emitter),obj.emit=emitter.emit.bind(emitter),obj}({isNumber:is.Et,isComplex:is.Zd,isBigNumber:is.C4,isBigInt:is.sI,isFraction:is.fU,isUnit:is.vO,isString:is.Kg,isArray:is.cy,isMatrix:is.OA,isCollection:is.P3,isDenseMatrix:is.zR,isSparseMatrix:is.AF,isRange:is._Z,isIndex:is.nw,isBoolean:is.Lm,isResultSet:is.eW,isHelp:is.gS,isFunction:is.Tn,isDate:is.$P,isRegExp:is.gd,isObject:is.Gv,isMap:is.jh,isPartitionedMap:is.aZ,isObjectWrappingMap:is.uQ,isNull:is.kZ,isUndefined:is.b0,isAccessorNode:is.AS,isArrayNode:is.gO,isAssignmentNode:is.qM,isBlockNode:is.CD,isConditionalNode:is.PO,isConstantNode:is.BA,isFunctionAssignmentNode:is.m2,isFunctionNode:is.Px,isIndexNode:is.$I,isNode:is.Ll,isObjectNode:is.GJ,isOperatorNode:is.$$,isParenthesisNode:is.tv,isRangeNode:is.Ye,isRelationalNode:is.iu,isSymbolNode:is.li,isChain:is.o_});math.config=(0,function_config.hZ)(configInternal,math.emit),math.expression={transform:{},mathWithTransform:{config:math.config}};var importedFactories={};function lazyTyped(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return math.typed.apply(math.typed,args)}lazyTyped.isTypedFunction=typed_function_default().isTypedFunction;var internalImport=importFactory(lazyTyped,0,math,importedFactories);return math.import=internalImport,math.on("config",(()=>{Object.values(importedFactories).forEach((factory=>{factory&&factory.meta&&factory.meta.recreateOnConfigChange&&internalImport(factory,{override:!0})}))})),math.create=create.bind(null,factories),math.factory=utils_factory.P9,math.import(Object.values((0,object.rU)(factories))),math.ArgumentsError=ArgumentsError.X,math.DimensionError=DimensionError.h,math.IndexError=IndexError.d,math}},"./node_modules/mathjs/lib/esm/entry/allFactoriesAny.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{Q:function(){return allFactoriesAny_all}});var factoriesAny_namespaceObject={};__webpack_require__.r(factoriesAny_namespaceObject),__webpack_require__.d(factoriesAny_namespaceObject,{createAbs:function(){return abs.r},createAccessorNode:function(){return createAccessorNode},createAcos:function(){return acos.J},createAcosh:function(){return acosh.B},createAcot:function(){return acot.C},createAcoth:function(){return acoth.g},createAcsc:function(){return acsc.v},createAcsch:function(){return acsch.V},createAdd:function(){return add.W},createAddScalar:function(){return addScalar.w},createAnd:function(){return logical_and.i},createAndTransform:function(){return createAndTransform},createApply:function(){return matrix_apply.p},createApplyTransform:function(){return createApplyTransform},createArg:function(){return arg.P},createArrayNode:function(){return createArrayNode},createAsec:function(){return asec.x},createAsech:function(){return asech.n},createAsin:function(){return asin.I},createAsinh:function(){return asinh.Q},createAssignmentNode:function(){return createAssignmentNode},createAtan:function(){return atan.X},createAtan2:function(){return atan2.J},createAtanh:function(){return atanh.v},createAtomicMass:function(){return physicalConstants.Kw},createAvogadro:function(){return physicalConstants.Gj},createBellNumbers:function(){return bellNumbers.e},createBigNumberClass:function(){return BigNumber.g},createBigint:function(){return bigint.S},createBignumber:function(){return bignumber._},createBin:function(){return bin.O},createBitAnd:function(){return bitwise_bitAnd.x},createBitAndTransform:function(){return createBitAndTransform},createBitNot:function(){return bitNot.j},createBitOr:function(){return bitwise_bitOr.$},createBitOrTransform:function(){return createBitOrTransform},createBitXor:function(){return bitXor.x},createBlockNode:function(){return createBlockNode},createBohrMagneton:function(){return physicalConstants.XS},createBohrRadius:function(){return physicalConstants.cC},createBoltzmann:function(){return physicalConstants.UK},createBoolean:function(){return type_boolean.p},createCatalan:function(){return catalan.f},createCbrt:function(){return cbrt.q},createCeil:function(){return ceil.K},createChain:function(){return createChain},createChainClass:function(){return createChainClass},createClassicalElectronRadius:function(){return physicalConstants.WX},createClone:function(){return clone.s},createColumn:function(){return matrix_column.H},createColumnTransform:function(){return createColumnTransform},createCombinations:function(){return combinations.p},createCombinationsWithRep:function(){return combinationsWithRep.Q},createCompare:function(){return compare.m},createCompareNatural:function(){return compareNatural.b},createCompareText:function(){return compareText.r},createCompile:function(){return createCompile},createComplex:function(){return complex.X},createComplexClass:function(){return Complex.z},createComposition:function(){return composition.z},createConcat:function(){return matrix_concat.z},createConcatTransform:function(){return createConcatTransform},createConditionalNode:function(){return createConditionalNode},createConductanceQuantum:function(){return physicalConstants.VK},createConj:function(){return conj.x},createConstantNode:function(){return createConstantNode},createCorr:function(){return corr.r},createCos:function(){return cos.o},createCosh:function(){return cosh.q},createCot:function(){return cot.v},createCoth:function(){return coth.$},createCoulomb:function(){return physicalConstants.w$},createCount:function(){return count.K},createCreateUnit:function(){return createUnit.J},createCross:function(){return cross.x},createCsc:function(){return csc.Y},createCsch:function(){return csch.g},createCtranspose:function(){return ctranspose.d},createCube:function(){return cube.Y},createCumSum:function(){return statistics_cumsum.b},createCumSumTransform:function(){return createCumSumTransform},createDeepEqual:function(){return deepEqual.H},createDenseMatrixClass:function(){return DenseMatrix.j},createDerivative:function(){return createDerivative},createDet:function(){return det.k},createDeuteronMass:function(){return physicalConstants.zr},createDiag:function(){return diag.I},createDiff:function(){return matrix_diff.i},createDiffTransform:function(){return createDiffTransform},createDistance:function(){return distance.G},createDivide:function(){return divide.G},createDivideScalar:function(){return divideScalar.Q},createDot:function(){return dot.Y},createDotDivide:function(){return dotDivide.F},createDotMultiply:function(){return dotMultiply.S},createDotPow:function(){return dotPow.U},createE:function(){return constants.UN},createEfimovFactor:function(){return physicalConstants.ez},createEigs:function(){return eigs.f},createElectricConstant:function(){return physicalConstants.eb},createElectronMass:function(){return physicalConstants.dd},createElementaryCharge:function(){return physicalConstants.v2},createEqual:function(){return equal.X},createEqualScalar:function(){return equalScalar.p},createEqualText:function(){return equalText.a},createErf:function(){return erf.K},createEvaluate:function(){return createEvaluate},createExp:function(){return exp.I},createExpm:function(){return expm.H},createExpm1:function(){return expm1.U},createFactorial:function(){return factorial.w},createFalse:function(){return constants.i0},createFaraday:function(){return physicalConstants.Dp},createFermiCoupling:function(){return physicalConstants.Dc},createFft:function(){return fft.H},createFibonacciHeapClass:function(){return FibonacciHeap.B},createFilter:function(){return matrix_filter.H},createFilterTransform:function(){return createFilterTransform},createFineStructure:function(){return physicalConstants.I},createFirstRadiation:function(){return physicalConstants.qQ},createFix:function(){return fix.Y},createFlatten:function(){return flatten.d},createFloor:function(){return floor.$},createForEach:function(){return matrix_forEach.j},createForEachTransform:function(){return createForEachTransform},createFormat:function(){return format.I},createFraction:function(){return fraction.l},createFractionClass:function(){return Fraction.z},createFreqz:function(){return freqz.$},createFunctionAssignmentNode:function(){return createFunctionAssignmentNode},createFunctionNode:function(){return createFunctionNode},createGamma:function(){return gamma.M},createGasConstant:function(){return physicalConstants.Ik},createGcd:function(){return gcd.p},createGetMatrixDataType:function(){return getMatrixDataType.C},createGravitationConstant:function(){return physicalConstants.tP},createGravity:function(){return physicalConstants.Tx},createHartreeEnergy:function(){return physicalConstants.oL},createHasNumericValue:function(){return hasNumericValue.l},createHelp:function(){return createHelp},createHelpClass:function(){return createHelpClass},createHex:function(){return hex.i},createHypot:function(){return hypot.r},createI:function(){return constants.GM},createIdentity:function(){return identity.D},createIfft:function(){return ifft.C},createIm:function(){return im.z},createImmutableDenseMatrixClass:function(){return ImmutableDenseMatrix.r},createIndex:function(){return matrix_function.z},createIndexClass:function(){return MatrixIndex.T},createIndexNode:function(){return createIndexNode},createIndexTransform:function(){return createIndexTransform},createInfinity:function(){return constants.Xd},createIntersect:function(){return intersect.s},createInv:function(){return inv.K},createInverseConductanceQuantum:function(){return physicalConstants.rg},createInvmod:function(){return invmod.o},createIsInteger:function(){return isInteger.r},createIsNaN:function(){return utils_isNaN.Y},createIsNegative:function(){return isNegative.A},createIsNumeric:function(){return isNumeric.y},createIsPositive:function(){return isPositive.q},createIsPrime:function(){return isPrime.w},createIsZero:function(){return isZero.L},createKldivergence:function(){return kldivergence.u},createKlitzing:function(){return physicalConstants.$L},createKron:function(){return kron.l},createLN10:function(){return constants.ad},createLN2:function(){return constants.l7},createLOG10E:function(){return constants.fi},createLOG2E:function(){return constants.C8},createLarger:function(){return larger.o},createLargerEq:function(){return largerEq.W},createLcm:function(){return lcm.D},createLeafCount:function(){return createLeafCount},createLeftShift:function(){return leftShift.O},createLgamma:function(){return lgamma.k},createLog:function(){return log.h},createLog10:function(){return log10.e},createLog1p:function(){return log1p.s},createLog2:function(){return log2.j},createLoschmidt:function(){return physicalConstants.Cc},createLsolve:function(){return lsolve.i},createLsolveAll:function(){return lsolveAll.H},createLup:function(){return lup.o},createLusolve:function(){return lusolve.b},createLyap:function(){return lyap.L},createMad:function(){return mad.p},createMagneticConstant:function(){return physicalConstants.Rd},createMagneticFluxQuantum:function(){return physicalConstants.DT},createMap:function(){return matrix_map.p},createMapTransform:function(){return createMapTransform},createMatrix:function(){return matrix.u},createMatrixClass:function(){return Matrix.w},createMatrixFromColumns:function(){return matrixFromColumns.z},createMatrixFromFunction:function(){return matrixFromFunction.s},createMatrixFromRows:function(){return matrixFromRows.Z},createMax:function(){return statistics_max.p},createMaxTransform:function(){return createMaxTransform},createMean:function(){return statistics_mean.s},createMeanTransform:function(){return createMeanTransform},createMedian:function(){return median.h},createMin:function(){return statistics_min.L},createMinTransform:function(){return createMinTransform},createMod:function(){return mod.n},createMode:function(){return mode.E},createMolarMass:function(){return physicalConstants.e0},createMolarMassC12:function(){return physicalConstants.KV},createMolarPlanckConstant:function(){return physicalConstants.hy},createMolarVolume:function(){return physicalConstants.u5},createMultinomial:function(){return multinomial.k},createMultiply:function(){return multiply.F},createMultiplyScalar:function(){return multiplyScalar.J},createNaN:function(){return constants.SV},createNeutronMass:function(){return physicalConstants.Wq},createNode:function(){return createNode},createNorm:function(){return norm.X},createNot:function(){return not.m},createNthRoot:function(){return nthRoot.f},createNthRoots:function(){return nthRoots.s},createNuclearMagneton:function(){return physicalConstants.EE},createNull:function(){return constants.Er},createNumber:function(){return number.G},createNumeric:function(){return numeric.y},createObjectNode:function(){return createObjectNode},createOct:function(){return oct.R},createOnes:function(){return ones.A},createOperatorNode:function(){return createOperatorNode},createOr:function(){return logical_or.M},createOrTransform:function(){return createOrTransform},createParenthesisNode:function(){return createParenthesisNode},createParse:function(){return createParse},createParser:function(){return createParser},createParserClass:function(){return createParserClass},createPartitionSelect:function(){return partitionSelect.X},createPermutations:function(){return permutations.U},createPhi:function(){return constants.Ah},createPi:function(){return constants.GD},createPickRandom:function(){return pickRandom.B},createPinv:function(){return pinv.w},createPlanckCharge:function(){return physicalConstants.aE},createPlanckConstant:function(){return physicalConstants.Og},createPlanckLength:function(){return physicalConstants.qU},createPlanckMass:function(){return physicalConstants.cn},createPlanckTemperature:function(){return physicalConstants._F},createPlanckTime:function(){return physicalConstants.TT},createPolynomialRoot:function(){return polynomialRoot.r},createPow:function(){return pow.V},createPrint:function(){return string_print.q},createPrintTransform:function(){return createPrintTransform},createProd:function(){return prod._},createProtonMass:function(){return physicalConstants.jh},createQr:function(){return qr.K},createQuantileSeq:function(){return statistics_quantileSeq.D},createQuantileSeqTransform:function(){return createQuantileSeqTransform},createQuantumOfCirculation:function(){return physicalConstants._7},createRandom:function(){return random.s},createRandomInt:function(){return randomInt.d},createRange:function(){return matrix_range.S},createRangeClass:function(){return Range.U},createRangeNode:function(){return createRangeNode},createRangeTransform:function(){return createRangeTransform},createRationalize:function(){return createRationalize},createRe:function(){return re.W},createReducedPlanckConstant:function(){return physicalConstants.y0},createRelationalNode:function(){return createRelationalNode},createReplacer:function(){return replacer.h},createReshape:function(){return reshape.r},createResize:function(){return resize.B},createResolve:function(){return createResolve},createResultSet:function(){return ResultSet.O},createReviver:function(){return createReviver},createRightArithShift:function(){return rightArithShift.f},createRightLogShift:function(){return rightLogShift.n},createRotate:function(){return rotate.S},createRotationMatrix:function(){return rotationMatrix.m},createRound:function(){return round.B},createRow:function(){return matrix_row.R},createRowTransform:function(){return createRowTransform},createRydberg:function(){return physicalConstants.QE},createSQRT1_2:function(){return constants.j2},createSQRT2:function(){return constants.RJ},createSackurTetrode:function(){return physicalConstants.bz},createSchur:function(){return schur.u},createSec:function(){return sec.c},createSech:function(){return sech.g},createSecondRadiation:function(){return physicalConstants.cr},createSetCartesian:function(){return setCartesian.v},createSetDifference:function(){return setDifference.e},createSetDistinct:function(){return setDistinct.Z},createSetIntersect:function(){return setIntersect.e},createSetIsSubset:function(){return setIsSubset.P},createSetMultiplicity:function(){return setMultiplicity.C},createSetPowerset:function(){return setPowerset.Y},createSetSize:function(){return setSize.G},createSetSymDifference:function(){return setSymDifference.l},createSetUnion:function(){return setUnion.s},createSign:function(){return sign.m},createSimplify:function(){return createSimplify},createSimplifyConstant:function(){return createSimplifyConstant},createSimplifyCore:function(){return createSimplifyCore},createSin:function(){return sin.T},createSinh:function(){return sinh.V},createSize:function(){return size.A},createSlu:function(){return slu.H},createSmaller:function(){return smaller.p},createSmallerEq:function(){return smallerEq.V},createSolveODE:function(){return solveODE.c},createSort:function(){return sort.V},createSpaClass:function(){return Spa.Z},createSparse:function(){return sparse.R},createSparseMatrixClass:function(){return SparseMatrix.g},createSpeedOfLight:function(){return physicalConstants.Lg},createSplitUnit:function(){return splitUnit.t},createSqrt:function(){return sqrt.R},createSqrtm:function(){return sqrtm.y},createSquare:function(){return square.G},createSqueeze:function(){return squeeze.l},createStd:function(){return statistics_std.y},createStdTransform:function(){return createStdTransform},createStefanBoltzmann:function(){return physicalConstants.zy},createStirlingS2:function(){return stirlingS2.w},createString:function(){return string.I},createSubset:function(){return matrix_subset.$},createSubsetTransform:function(){return createSubsetTransform},createSubtract:function(){return subtract.t},createSubtractScalar:function(){return subtractScalar.f},createSum:function(){return statistics_sum.i},createSumTransform:function(){return createSumTransform},createSylvester:function(){return sylvester._},createSymbolNode:function(){return createSymbolNode},createSymbolicEqual:function(){return createSymbolicEqual},createTan:function(){return tan.a},createTanh:function(){return tanh.I},createTau:function(){return constants.hI},createThomsonCrossSection:function(){return physicalConstants.wp},createTo:function(){return to.U},createTrace:function(){return trace.s},createTranspose:function(){return transpose.M},createTrue:function(){return constants.L7},createTypeOf:function(){return typeOf.o},createTyped:function(){return typed.B},createUnaryMinus:function(){return unaryMinus.e},createUnaryPlus:function(){return unaryPlus.e},createUnequal:function(){return unequal.K},createUnitClass:function(){return Unit.d},createUnitFunction:function(){return unit.n},createUppercaseE:function(){return constants.OL},createUppercasePi:function(){return constants.ol},createUsolve:function(){return usolve.p},createUsolveAll:function(){return usolveAll.m},createVacuumImpedance:function(){return physicalConstants.AW},createVariance:function(){return statistics_variance.A},createVarianceTransform:function(){return createVarianceTransform},createVersion:function(){return constants.BB},createWeakMixingAngle:function(){return physicalConstants.qH},createWienDisplacement:function(){return physicalConstants.Lz},createXgcd:function(){return xgcd.F},createXor:function(){return xor.Y},createZeros:function(){return zeros.I},createZeta:function(){return zeta.b},createZpk2tf:function(){return zpk2tf.S}});var typed=__webpack_require__("./node_modules/mathjs/lib/esm/core/function/typed.js"),ResultSet=__webpack_require__("./node_modules/mathjs/lib/esm/type/resultset/ResultSet.js"),BigNumber=__webpack_require__("./node_modules/mathjs/lib/esm/type/bignumber/BigNumber.js"),Complex=__webpack_require__("./node_modules/mathjs/lib/esm/type/complex/Complex.js"),Fraction=__webpack_require__("./node_modules/mathjs/lib/esm/type/fraction/Fraction.js"),Range=__webpack_require__("./node_modules/mathjs/lib/esm/type/matrix/Range.js"),Matrix=__webpack_require__("./node_modules/mathjs/lib/esm/type/matrix/Matrix.js"),DenseMatrix=__webpack_require__("./node_modules/mathjs/lib/esm/type/matrix/DenseMatrix.js"),clone=__webpack_require__("./node_modules/mathjs/lib/esm/function/utils/clone.js"),isInteger=__webpack_require__("./node_modules/mathjs/lib/esm/function/utils/isInteger.js"),isNegative=__webpack_require__("./node_modules/mathjs/lib/esm/function/utils/isNegative.js"),isNumeric=__webpack_require__("./node_modules/mathjs/lib/esm/function/utils/isNumeric.js"),hasNumericValue=__webpack_require__("./node_modules/mathjs/lib/esm/function/utils/hasNumericValue.js"),isPositive=__webpack_require__("./node_modules/mathjs/lib/esm/function/utils/isPositive.js"),isZero=__webpack_require__("./node_modules/mathjs/lib/esm/function/utils/isZero.js"),utils_isNaN=__webpack_require__("./node_modules/mathjs/lib/esm/function/utils/isNaN.js"),typeOf=__webpack_require__("./node_modules/mathjs/lib/esm/function/utils/typeOf.js"),equalScalar=__webpack_require__("./node_modules/mathjs/lib/esm/function/relational/equalScalar.js"),SparseMatrix=__webpack_require__("./node_modules/mathjs/lib/esm/type/matrix/SparseMatrix.js"),number=__webpack_require__("./node_modules/mathjs/lib/esm/type/number.js"),bigint=__webpack_require__("./node_modules/mathjs/lib/esm/type/bigint.js"),string=__webpack_require__("./node_modules/mathjs/lib/esm/type/string.js"),type_boolean=__webpack_require__("./node_modules/mathjs/lib/esm/type/boolean.js"),bignumber=__webpack_require__("./node_modules/mathjs/lib/esm/type/bignumber/function/bignumber.js"),complex=__webpack_require__("./node_modules/mathjs/lib/esm/type/complex/function/complex.js"),fraction=__webpack_require__("./node_modules/mathjs/lib/esm/type/fraction/function/fraction.js"),matrix=__webpack_require__("./node_modules/mathjs/lib/esm/type/matrix/function/matrix.js"),matrixFromFunction=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/matrixFromFunction.js"),matrixFromRows=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/matrixFromRows.js"),matrixFromColumns=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/matrixFromColumns.js"),splitUnit=__webpack_require__("./node_modules/mathjs/lib/esm/type/unit/function/splitUnit.js"),unaryMinus=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/unaryMinus.js"),unaryPlus=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/unaryPlus.js"),abs=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/abs.js"),matrix_apply=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/apply.js"),addScalar=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/addScalar.js"),subtractScalar=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/subtractScalar.js"),cbrt=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/cbrt.js"),ceil=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/ceil.js"),cube=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/cube.js"),exp=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/exp.js"),expm1=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/expm1.js"),fix=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/fix.js"),floor=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/floor.js"),gcd=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/gcd.js"),lcm=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/lcm.js"),log10=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/log10.js"),log2=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/log2.js"),mod=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/mod.js"),multiplyScalar=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/multiplyScalar.js"),multiply=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/multiply.js"),nthRoot=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/nthRoot.js"),sign=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/sign.js"),sqrt=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/sqrt.js"),square=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/square.js"),subtract=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/subtract.js"),xgcd=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/xgcd.js"),invmod=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/invmod.js"),dotMultiply=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/dotMultiply.js"),bitwise_bitAnd=__webpack_require__("./node_modules/mathjs/lib/esm/function/bitwise/bitAnd.js"),bitNot=__webpack_require__("./node_modules/mathjs/lib/esm/function/bitwise/bitNot.js"),bitwise_bitOr=__webpack_require__("./node_modules/mathjs/lib/esm/function/bitwise/bitOr.js"),bitXor=__webpack_require__("./node_modules/mathjs/lib/esm/function/bitwise/bitXor.js"),arg=__webpack_require__("./node_modules/mathjs/lib/esm/function/complex/arg.js"),conj=__webpack_require__("./node_modules/mathjs/lib/esm/function/complex/conj.js"),im=__webpack_require__("./node_modules/mathjs/lib/esm/function/complex/im.js"),re=__webpack_require__("./node_modules/mathjs/lib/esm/function/complex/re.js"),not=__webpack_require__("./node_modules/mathjs/lib/esm/function/logical/not.js"),logical_or=__webpack_require__("./node_modules/mathjs/lib/esm/function/logical/or.js"),xor=__webpack_require__("./node_modules/mathjs/lib/esm/function/logical/xor.js"),matrix_concat=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/concat.js"),matrix_column=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/column.js"),count=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/count.js"),cross=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/cross.js"),diag=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/diag.js"),matrix_filter=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/filter.js"),flatten=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/flatten.js"),matrix_forEach=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/forEach.js"),getMatrixDataType=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/getMatrixDataType.js"),identity=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/identity.js"),kron=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/kron.js"),matrix_map=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/map.js"),matrix_diff=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/diff.js"),ones=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/ones.js"),matrix_range=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/range.js"),reshape=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/reshape.js"),resize=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/resize.js"),rotate=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/rotate.js"),rotationMatrix=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/rotationMatrix.js"),matrix_row=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/row.js"),size=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/size.js"),squeeze=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/squeeze.js"),matrix_subset=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/subset.js"),transpose=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/transpose.js"),ctranspose=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/ctranspose.js"),zeros=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/zeros.js"),fft=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/fft.js"),ifft=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/ifft.js"),solveODE=__webpack_require__("./node_modules/mathjs/lib/esm/function/numeric/solveODE.js"),erf=__webpack_require__("./node_modules/mathjs/lib/esm/function/special/erf.js"),zeta=__webpack_require__("./node_modules/mathjs/lib/esm/function/special/zeta.js"),mode=__webpack_require__("./node_modules/mathjs/lib/esm/function/statistics/mode.js"),prod=__webpack_require__("./node_modules/mathjs/lib/esm/function/statistics/prod.js"),format=__webpack_require__("./node_modules/mathjs/lib/esm/function/string/format.js"),bin=__webpack_require__("./node_modules/mathjs/lib/esm/function/string/bin.js"),oct=__webpack_require__("./node_modules/mathjs/lib/esm/function/string/oct.js"),hex=__webpack_require__("./node_modules/mathjs/lib/esm/function/string/hex.js"),string_print=__webpack_require__("./node_modules/mathjs/lib/esm/function/string/print.js"),to=__webpack_require__("./node_modules/mathjs/lib/esm/function/unit/to.js"),isPrime=__webpack_require__("./node_modules/mathjs/lib/esm/function/utils/isPrime.js"),numeric=__webpack_require__("./node_modules/mathjs/lib/esm/function/utils/numeric.js"),divideScalar=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/divideScalar.js"),pow=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/pow.js"),round=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/round.js"),log=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/log.js"),log1p=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/log1p.js"),nthRoots=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/nthRoots.js"),dotPow=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/dotPow.js"),dotDivide=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/dotDivide.js"),lsolve=__webpack_require__("./node_modules/mathjs/lib/esm/function/algebra/solver/lsolve.js"),usolve=__webpack_require__("./node_modules/mathjs/lib/esm/function/algebra/solver/usolve.js"),lsolveAll=__webpack_require__("./node_modules/mathjs/lib/esm/function/algebra/solver/lsolveAll.js"),usolveAll=__webpack_require__("./node_modules/mathjs/lib/esm/function/algebra/solver/usolveAll.js"),leftShift=__webpack_require__("./node_modules/mathjs/lib/esm/function/bitwise/leftShift.js"),rightArithShift=__webpack_require__("./node_modules/mathjs/lib/esm/function/bitwise/rightArithShift.js"),rightLogShift=__webpack_require__("./node_modules/mathjs/lib/esm/function/bitwise/rightLogShift.js"),logical_and=__webpack_require__("./node_modules/mathjs/lib/esm/function/logical/and.js"),compare=__webpack_require__("./node_modules/mathjs/lib/esm/function/relational/compare.js"),compareNatural=__webpack_require__("./node_modules/mathjs/lib/esm/function/relational/compareNatural.js"),compareText=__webpack_require__("./node_modules/mathjs/lib/esm/function/relational/compareText.js"),equal=__webpack_require__("./node_modules/mathjs/lib/esm/function/relational/equal.js"),equalText=__webpack_require__("./node_modules/mathjs/lib/esm/function/relational/equalText.js"),smaller=__webpack_require__("./node_modules/mathjs/lib/esm/function/relational/smaller.js"),smallerEq=__webpack_require__("./node_modules/mathjs/lib/esm/function/relational/smallerEq.js"),larger=__webpack_require__("./node_modules/mathjs/lib/esm/function/relational/larger.js"),largerEq=__webpack_require__("./node_modules/mathjs/lib/esm/function/relational/largerEq.js"),deepEqual=__webpack_require__("./node_modules/mathjs/lib/esm/function/relational/deepEqual.js"),unequal=__webpack_require__("./node_modules/mathjs/lib/esm/function/relational/unequal.js"),partitionSelect=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/partitionSelect.js"),sort=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/sort.js"),statistics_max=__webpack_require__("./node_modules/mathjs/lib/esm/function/statistics/max.js"),statistics_min=__webpack_require__("./node_modules/mathjs/lib/esm/function/statistics/min.js"),ImmutableDenseMatrix=__webpack_require__("./node_modules/mathjs/lib/esm/type/matrix/ImmutableDenseMatrix.js"),MatrixIndex=__webpack_require__("./node_modules/mathjs/lib/esm/type/matrix/MatrixIndex.js"),FibonacciHeap=__webpack_require__("./node_modules/mathjs/lib/esm/type/matrix/FibonacciHeap.js"),Spa=__webpack_require__("./node_modules/mathjs/lib/esm/type/matrix/Spa.js"),Unit=__webpack_require__("./node_modules/mathjs/lib/esm/type/unit/Unit.js"),unit=__webpack_require__("./node_modules/mathjs/lib/esm/type/unit/function/unit.js"),sparse=__webpack_require__("./node_modules/mathjs/lib/esm/type/matrix/function/sparse.js"),createUnit=__webpack_require__("./node_modules/mathjs/lib/esm/type/unit/function/createUnit.js"),acos=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/acos.js"),acosh=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/acosh.js"),acot=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/acot.js"),acoth=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/acoth.js"),acsc=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/acsc.js"),acsch=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/acsch.js"),asec=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/asec.js"),asech=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/asech.js"),asin=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/asin.js"),asinh=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/asinh.js"),atan=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/atan.js"),atan2=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/atan2.js"),atanh=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/atanh.js"),cos=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/cos.js"),cosh=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/cosh.js"),cot=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/cot.js"),coth=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/coth.js"),csc=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/csc.js"),csch=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/csch.js"),sec=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/sec.js"),sech=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/sech.js"),sin=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/sin.js"),sinh=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/sinh.js"),tan=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/tan.js"),tanh=__webpack_require__("./node_modules/mathjs/lib/esm/function/trigonometry/tanh.js"),setCartesian=__webpack_require__("./node_modules/mathjs/lib/esm/function/set/setCartesian.js"),setDifference=__webpack_require__("./node_modules/mathjs/lib/esm/function/set/setDifference.js"),setDistinct=__webpack_require__("./node_modules/mathjs/lib/esm/function/set/setDistinct.js"),setIntersect=__webpack_require__("./node_modules/mathjs/lib/esm/function/set/setIntersect.js"),setIsSubset=__webpack_require__("./node_modules/mathjs/lib/esm/function/set/setIsSubset.js"),setMultiplicity=__webpack_require__("./node_modules/mathjs/lib/esm/function/set/setMultiplicity.js"),setPowerset=__webpack_require__("./node_modules/mathjs/lib/esm/function/set/setPowerset.js"),setSize=__webpack_require__("./node_modules/mathjs/lib/esm/function/set/setSize.js"),setSymDifference=__webpack_require__("./node_modules/mathjs/lib/esm/function/set/setSymDifference.js"),setUnion=__webpack_require__("./node_modules/mathjs/lib/esm/function/set/setUnion.js"),add=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/add.js"),hypot=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/hypot.js"),norm=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/norm.js"),dot=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/dot.js"),trace=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/trace.js"),matrix_function=__webpack_require__("./node_modules/mathjs/lib/esm/type/matrix/function/index.js"),is=__webpack_require__("./node_modules/mathjs/lib/esm/utils/is.js"),keywords=new Set(["end"]),object=__webpack_require__("./node_modules/mathjs/lib/esm/utils/object.js"),factory=__webpack_require__("./node_modules/mathjs/lib/esm/utils/factory.js"),map=__webpack_require__("./node_modules/mathjs/lib/esm/utils/map.js"),dependencies=["mathWithTransform"],createNode=(0,factory.P9)("Node",dependencies,(_ref=>{var{mathWithTransform:mathWithTransform}=_ref;return class Node{get type(){return"Node"}get isNode(){return!0}evaluate(scope){return this.compile().evaluate(scope)}compile(){var expr=this._compile(mathWithTransform,{}),args={};return{evaluate:function evaluate(scope){var s=(0,map.pI)(scope);return function _validateScope(scope){for(var symbol of[...keywords])if(scope.has(symbol))throw new Error('Scope contains an illegal symbol, "'+symbol+'" is a reserved keyword')}(s),expr(s,args,null)}}}_compile(math,argNames){throw new Error("Method _compile must be implemented by type "+this.type)}forEach(callback){throw new Error("Cannot run forEach on a Node interface")}map(callback){throw new Error("Cannot run map on a Node interface")}_ifNode(node){if(!(0,is.Ll)(node))throw new TypeError("Callback function must return a Node");return node}traverse(callback){callback(this,null,null),function _traverse(node,callback){node.forEach((function(child,path,parent){callback(child,path,parent),_traverse(child,callback)}))}(this,callback)}transform(callback){return function _transform(child,path,parent){var replacement=callback(child,path,parent);return replacement!==child?replacement:child.map(_transform)}(this,null,null)}filter(callback){var nodes=[];return this.traverse((function(node,path,parent){callback(node,path,parent)&&nodes.push(node)})),nodes}clone(){throw new Error("Cannot clone a Node interface")}cloneDeep(){return this.map((function(node){return node.cloneDeep()}))}equals(other){return!!other&&(this.type===other.type&&(0,object.QO)(this,other))}toString(options){var customString=this._getCustomString(options);return void 0!==customString?customString:this._toString(options)}_toString(){throw new Error("_toString not implemented for "+this.type)}toJSON(){throw new Error("Cannot serialize object: toJSON not implemented by "+this.type)}toHTML(options){var customString=this._getCustomString(options);return void 0!==customString?customString:this._toHTML(options)}_toHTML(){throw new Error("_toHTML not implemented for "+this.type)}toTex(options){var customString=this._getCustomString(options);return void 0!==customString?customString:this._toTex(options)}_toTex(options){throw new Error("_toTex not implemented for "+this.type)}_getCustomString(options){if(options&&"object"==typeof options)switch(typeof options.handler){case"object":case"undefined":return;case"function":return options.handler(this,options);default:throw new TypeError("Object or function expected as callback")}}getIdentifier(){return this.type}getContent(){return this}}}),{isClass:!0,isNode:!0}),defineProperty=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),customs=__webpack_require__("./node_modules/mathjs/lib/esm/utils/customs.js"),IndexError=__webpack_require__("./node_modules/mathjs/lib/esm/error/IndexError.js");function errorTransform(err){return err&&err.isIndexError?new IndexError.d(err.index+1,err.min+1,void 0!==err.max?err.max+1:void 0):err}function accessFactory(_ref){var{subset:subset}=_ref;return function access(object,index){try{if(Array.isArray(object))return subset(object,index);if(object&&"function"==typeof object.subset)return object.subset(index);if("string"==typeof object)return subset(object,index);if("object"==typeof object){if(!index.isObjectProperty())throw new TypeError("Cannot apply a numeric index as object property");return(0,customs.HU)(object,index.getObjectProperty())}throw new TypeError("Cannot apply index: unsupported type of object")}catch(err){throw errorTransform(err)}}}var AccessorNode_dependencies=["subset","Node"],createAccessorNode=(0,factory.P9)("AccessorNode",AccessorNode_dependencies,(_ref=>{var{subset:subset,Node:Node}=_ref,access=accessFactory({subset:subset});function needParenthesis(node){return!((0,is.AS)(node)||(0,is.gO)(node)||(0,is.BA)(node)||(0,is.Px)(node)||(0,is.GJ)(node)||(0,is.tv)(node)||(0,is.li)(node))}class AccessorNode extends Node{constructor(object,index){if(super(),!(0,is.Ll)(object))throw new TypeError('Node expected for parameter "object"');if(!(0,is.$I)(index))throw new TypeError('IndexNode expected for parameter "index"');this.object=object,this.index=index}get name(){return this.index?this.index.isObjectProperty()?this.index.getObjectProperty():"":this.object.name||""}get type(){return"AccessorNode"}get isAccessorNode(){return!0}_compile(math,argNames){var evalObject=this.object._compile(math,argNames),evalIndex=this.index._compile(math,argNames);if(this.index.isObjectProperty()){var prop=this.index.getObjectProperty();return function evalAccessorNode(scope,args,context){return(0,customs.HU)(evalObject(scope,args,context),prop)}}return function evalAccessorNode(scope,args,context){var object=evalObject(scope,args,context),index=evalIndex(scope,args,object);return access(object,index)}}forEach(callback){callback(this.object,"object",this),callback(this.index,"index",this)}map(callback){return new AccessorNode(this._ifNode(callback(this.object,"object",this)),this._ifNode(callback(this.index,"index",this)))}clone(){return new AccessorNode(this.object,this.index)}_toString(options){var object=this.object.toString(options);return needParenthesis(this.object)&&(object="("+object+")"),object+this.index.toString(options)}_toHTML(options){var object=this.object.toHTML(options);return needParenthesis(this.object)&&(object='<span class="math-parenthesis math-round-parenthesis">(</span>'+object+'<span class="math-parenthesis math-round-parenthesis">)</span>'),object+this.index.toHTML(options)}_toTex(options){var object=this.object.toTex(options);return needParenthesis(this.object)&&(object="\\left(' + object + '\\right)"),object+this.index.toTex(options)}toJSON(){return{mathjs:"AccessorNode",object:this.object,index:this.index}}static fromJSON(json){return new AccessorNode(json.object,json.index)}}return(0,defineProperty.A)(AccessorNode,"name","AccessorNode"),AccessorNode}),{isClass:!0,isNode:!0}),array=__webpack_require__("./node_modules/mathjs/lib/esm/utils/array.js"),ArrayNode_dependencies=["Node"],createArrayNode=(0,factory.P9)("ArrayNode",ArrayNode_dependencies,(_ref=>{var{Node:Node}=_ref;class ArrayNode extends Node{constructor(items){if(super(),this.items=items||[],!Array.isArray(this.items)||!this.items.every(is.Ll))throw new TypeError("Array containing Nodes expected")}get type(){return"ArrayNode"}get isArrayNode(){return!0}_compile(math,argNames){var evalItems=(0,array.Tj)(this.items,(function(item){return item._compile(math,argNames)}));if("Array"!==math.config.matrix){var matrix=math.matrix;return function evalArrayNode(scope,args,context){return matrix((0,array.Tj)(evalItems,(function(evalItem){return evalItem(scope,args,context)})))}}return function evalArrayNode(scope,args,context){return(0,array.Tj)(evalItems,(function(evalItem){return evalItem(scope,args,context)}))}}forEach(callback){for(var i=0;i<this.items.length;i++){callback(this.items[i],"items["+i+"]",this)}}map(callback){for(var items=[],i=0;i<this.items.length;i++)items[i]=this._ifNode(callback(this.items[i],"items["+i+"]",this));return new ArrayNode(items)}clone(){return new ArrayNode(this.items.slice(0))}_toString(options){return"["+this.items.map((function(node){return node.toString(options)})).join(", ")+"]"}toJSON(){return{mathjs:"ArrayNode",items:this.items}}static fromJSON(json){return new ArrayNode(json.items)}_toHTML(options){return'<span class="math-parenthesis math-square-parenthesis">[</span>'+this.items.map((function(node){return node.toHTML(options)})).join('<span class="math-separator">,</span>')+'<span class="math-parenthesis math-square-parenthesis">]</span>'}_toTex(options){return function itemsToTex(items,nested){var mixedItems=items.some(is.gO)&&!items.every(is.gO),itemsFormRow=nested||mixedItems,itemSep=itemsFormRow?"&":"\\\\",itemsTex=items.map((function(node){return node.items?itemsToTex(node.items,!nested):node.toTex(options)})).join(itemSep);return mixedItems||!itemsFormRow||itemsFormRow&&!nested?"\\begin{bmatrix}"+itemsTex+"\\end{bmatrix}":itemsTex}(this.items,!1)}}return(0,defineProperty.A)(ArrayNode,"name","ArrayNode"),ArrayNode}),{isClass:!0,isNode:!0});var properties=[{AssignmentNode:{},FunctionAssignmentNode:{}},{ConditionalNode:{latexLeftParens:!1,latexRightParens:!1,latexParens:!1}},{"OperatorNode:or":{op:"or",associativity:"left",associativeWith:[]}},{"OperatorNode:xor":{op:"xor",associativity:"left",associativeWith:[]}},{"OperatorNode:and":{op:"and",associativity:"left",associativeWith:[]}},{"OperatorNode:bitOr":{op:"|",associativity:"left",associativeWith:[]}},{"OperatorNode:bitXor":{op:"^|",associativity:"left",associativeWith:[]}},{"OperatorNode:bitAnd":{op:"&",associativity:"left",associativeWith:[]}},{"OperatorNode:equal":{op:"==",associativity:"left",associativeWith:[]},"OperatorNode:unequal":{op:"!=",associativity:"left",associativeWith:[]},"OperatorNode:smaller":{op:"<",associativity:"left",associativeWith:[]},"OperatorNode:larger":{op:">",associativity:"left",associativeWith:[]},"OperatorNode:smallerEq":{op:"<=",associativity:"left",associativeWith:[]},"OperatorNode:largerEq":{op:">=",associativity:"left",associativeWith:[]},RelationalNode:{associativity:"left",associativeWith:[]}},{"OperatorNode:leftShift":{op:"<<",associativity:"left",associativeWith:[]},"OperatorNode:rightArithShift":{op:">>",associativity:"left",associativeWith:[]},"OperatorNode:rightLogShift":{op:">>>",associativity:"left",associativeWith:[]}},{"OperatorNode:to":{op:"to",associativity:"left",associativeWith:[]}},{RangeNode:{}},{"OperatorNode:add":{op:"+",associativity:"left",associativeWith:["OperatorNode:add","OperatorNode:subtract"]},"OperatorNode:subtract":{op:"-",associativity:"left",associativeWith:[]}},{"OperatorNode:multiply":{op:"*",associativity:"left",associativeWith:["OperatorNode:multiply","OperatorNode:divide","Operator:dotMultiply","Operator:dotDivide"]},"OperatorNode:divide":{op:"/",associativity:"left",associativeWith:[],latexLeftParens:!1,latexRightParens:!1,latexParens:!1},"OperatorNode:dotMultiply":{op:".*",associativity:"left",associativeWith:["OperatorNode:multiply","OperatorNode:divide","OperatorNode:dotMultiply","OperatorNode:doDivide"]},"OperatorNode:dotDivide":{op:"./",associativity:"left",associativeWith:[]},"OperatorNode:mod":{op:"mod",associativity:"left",associativeWith:[]}},{"OperatorNode:multiply":{associativity:"left",associativeWith:["OperatorNode:multiply","OperatorNode:divide","Operator:dotMultiply","Operator:dotDivide"]}},{"OperatorNode:unaryPlus":{op:"+",associativity:"right"},"OperatorNode:unaryMinus":{op:"-",associativity:"right"},"OperatorNode:bitNot":{op:"~",associativity:"right"},"OperatorNode:not":{op:"not",associativity:"right"}},{"OperatorNode:pow":{op:"^",associativity:"right",associativeWith:[],latexRightParens:!1},"OperatorNode:dotPow":{op:".^",associativity:"right",associativeWith:[]}},{"OperatorNode:factorial":{op:"!",associativity:"left"}},{"OperatorNode:ctranspose":{op:"'",associativity:"left"}}];function unwrapParen(_node,parenthesis){if(!parenthesis||"auto"!==parenthesis)return _node;for(var node=_node;(0,is.tv)(node);)node=node.content;return node}function getPrecedence(_node,parenthesis,implicit,parent){var node=_node;"keep"!==parenthesis&&(node=_node.getContent());for(var identifier=node.getIdentifier(),precedence=null,i=0;i<properties.length;i++)if(identifier in properties[i]){precedence=i;break}if("OperatorNode:multiply"===identifier&&node.implicit&&"show"!==implicit){var leftArg=unwrapParen(node.args[0],parenthesis);(0,is.BA)(leftArg)&&parent&&"OperatorNode:divide"===parent.getIdentifier()&&(0,is.jW)(unwrapParen(parent.args[0],parenthesis))||"OperatorNode:divide"===leftArg.getIdentifier()&&(0,is.jW)(unwrapParen(leftArg.args[0],parenthesis))&&(0,is.BA)(unwrapParen(leftArg.args[1]))||(precedence+=1)}return precedence}function getAssociativity(_node,parenthesis){var node=_node;"keep"!==parenthesis&&(node=_node.getContent());var identifier=node.getIdentifier(),index=getPrecedence(node,parenthesis);if(null===index)return null;var property=properties[index][identifier];if((0,object.mQ)(property,"associativity")){if("left"===property.associativity)return"left";if("right"===property.associativity)return"right";throw Error("'"+identifier+"' has the invalid associativity '"+property.associativity+"'.")}return null}function isAssociativeWith(nodeA,nodeB,parenthesis){var a="keep"!==parenthesis?nodeA.getContent():nodeA,b="keep"!==parenthesis?nodeA.getContent():nodeB,identifierA=a.getIdentifier(),identifierB=b.getIdentifier(),index=getPrecedence(a,parenthesis);if(null===index)return null;var property=properties[index][identifierA];if((0,object.mQ)(property,"associativeWith")&&property.associativeWith instanceof Array){for(var i=0;i<property.associativeWith.length;i++)if(property.associativeWith[i]===identifierB)return!0;return!1}return null}var AssignmentNode_dependencies=["subset","?matrix","Node"],createAssignmentNode=(0,factory.P9)("AssignmentNode",AssignmentNode_dependencies,(_ref=>{var{subset:subset,matrix:matrix,Node:Node}=_ref,access=accessFactory({subset:subset}),assign=function assignFactory(_ref){var{subset:subset,matrix:matrix}=_ref;return function assign(object,index,value){try{if(Array.isArray(object))return matrix(object).subset(index,value).valueOf().forEach(((item,index)=>{object[index]=item})),object;if(object&&"function"==typeof object.subset)return object.subset(index,value);if("string"==typeof object)return subset(object,index,value);if("object"==typeof object){if(!index.isObjectProperty())throw TypeError("Cannot apply a numeric index as object property");return(0,customs.dL)(object,index.getObjectProperty(),value),object}throw new TypeError("Cannot apply index: unsupported type of object")}catch(err){throw errorTransform(err)}}}({subset:subset,matrix:matrix});function needParenthesis(node,parenthesis,implicit){parenthesis||(parenthesis="keep");var precedence=getPrecedence(node,parenthesis,implicit),exprPrecedence=getPrecedence(node.value,parenthesis,implicit);return"all"===parenthesis||null!==exprPrecedence&&exprPrecedence<=precedence}class AssignmentNode extends Node{constructor(object,index,value){if(super(),this.object=object,this.index=value?index:null,this.value=value||index,!(0,is.li)(object)&&!(0,is.AS)(object))throw new TypeError('SymbolNode or AccessorNode expected as "object"');if((0,is.li)(object)&&"end"===object.name)throw new Error('Cannot assign to symbol "end"');if(this.index&&!(0,is.$I)(this.index))throw new TypeError('IndexNode expected as "index"');if(!(0,is.Ll)(this.value))throw new TypeError('Node expected as "value"')}get name(){return this.index?this.index.isObjectProperty()?this.index.getObjectProperty():"":this.object.name||""}get type(){return"AssignmentNode"}get isAssignmentNode(){return!0}_compile(math,argNames){var evalObject=this.object._compile(math,argNames),evalIndex=this.index?this.index._compile(math,argNames):null,evalValue=this.value._compile(math,argNames),name=this.object.name;if(this.index){if(this.index.isObjectProperty()){var prop=this.index.getObjectProperty();return function evalAssignmentNode(scope,args,context){var object=evalObject(scope,args,context),value=evalValue(scope,args,context);return(0,customs.dL)(object,prop,value),value}}if((0,is.li)(this.object))return function evalAssignmentNode(scope,args,context){var childObject=evalObject(scope,args,context),value=evalValue(scope,args,context),index=evalIndex(scope,args,childObject);return scope.set(name,assign(childObject,index,value)),value};var evalParentObject=this.object.object._compile(math,argNames);if(this.object.index.isObjectProperty()){var parentProp=this.object.index.getObjectProperty();return function evalAssignmentNode(scope,args,context){var parent=evalParentObject(scope,args,context),childObject=(0,customs.HU)(parent,parentProp),index=evalIndex(scope,args,childObject),value=evalValue(scope,args,context);return(0,customs.dL)(parent,parentProp,assign(childObject,index,value)),value}}var evalParentIndex=this.object.index._compile(math,argNames);return function evalAssignmentNode(scope,args,context){var parent=evalParentObject(scope,args,context),parentIndex=evalParentIndex(scope,args,parent),childObject=access(parent,parentIndex),index=evalIndex(scope,args,childObject),value=evalValue(scope,args,context);return assign(parent,parentIndex,assign(childObject,index,value)),value}}if(!(0,is.li)(this.object))throw new TypeError("SymbolNode expected as object");return function evalAssignmentNode(scope,args,context){var value=evalValue(scope,args,context);return scope.set(name,value),value}}forEach(callback){callback(this.object,"object",this),this.index&&callback(this.index,"index",this),callback(this.value,"value",this)}map(callback){var object=this._ifNode(callback(this.object,"object",this)),index=this.index?this._ifNode(callback(this.index,"index",this)):null,value=this._ifNode(callback(this.value,"value",this));return new AssignmentNode(object,index,value)}clone(){return new AssignmentNode(this.object,this.index,this.value)}_toString(options){var object=this.object.toString(options),index=this.index?this.index.toString(options):"",value=this.value.toString(options);return needParenthesis(this,options&&options.parenthesis,options&&options.implicit)&&(value="("+value+")"),object+index+" = "+value}toJSON(){return{mathjs:"AssignmentNode",object:this.object,index:this.index,value:this.value}}static fromJSON(json){return new AssignmentNode(json.object,json.index,json.value)}_toHTML(options){var object=this.object.toHTML(options),index=this.index?this.index.toHTML(options):"",value=this.value.toHTML(options);return needParenthesis(this,options&&options.parenthesis,options&&options.implicit)&&(value='<span class="math-paranthesis math-round-parenthesis">(</span>'+value+'<span class="math-paranthesis math-round-parenthesis">)</span>'),object+index+'<span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>'+value}_toTex(options){var object=this.object.toTex(options),index=this.index?this.index.toTex(options):"",value=this.value.toTex(options);return needParenthesis(this,options&&options.parenthesis,options&&options.implicit)&&(value="\\left(".concat(value,"\\right)")),object+index+"="+value}}return(0,defineProperty.A)(AssignmentNode,"name","AssignmentNode"),AssignmentNode}),{isClass:!0,isNode:!0}),BlockNode_dependencies=["ResultSet","Node"],createBlockNode=(0,factory.P9)("BlockNode",BlockNode_dependencies,(_ref=>{var{ResultSet:ResultSet,Node:Node}=_ref;class BlockNode extends Node{constructor(blocks){if(super(),!Array.isArray(blocks))throw new Error("Array expected");this.blocks=blocks.map((function(block){var node=block&&block.node,visible=!block||void 0===block.visible||block.visible;if(!(0,is.Ll)(node))throw new TypeError('Property "node" must be a Node');if("boolean"!=typeof visible)throw new TypeError('Property "visible" must be a boolean');return{node:node,visible:visible}}))}get type(){return"BlockNode"}get isBlockNode(){return!0}_compile(math,argNames){var evalBlocks=(0,array.Tj)(this.blocks,(function(block){return{evaluate:block.node._compile(math,argNames),visible:block.visible}}));return function evalBlockNodes(scope,args,context){var results=[];return(0,array.jJ)(evalBlocks,(function evalBlockNode(block){var result=block.evaluate(scope,args,context);block.visible&&results.push(result)})),new ResultSet(results)}}forEach(callback){for(var i=0;i<this.blocks.length;i++)callback(this.blocks[i].node,"blocks["+i+"].node",this)}map(callback){for(var blocks=[],i=0;i<this.blocks.length;i++){var block=this.blocks[i],node=this._ifNode(callback(block.node,"blocks["+i+"].node",this));blocks[i]={node:node,visible:block.visible}}return new BlockNode(blocks)}clone(){var blocks=this.blocks.map((function(block){return{node:block.node,visible:block.visible}}));return new BlockNode(blocks)}_toString(options){return this.blocks.map((function(param){return param.node.toString(options)+(param.visible?"":";")})).join("\n")}toJSON(){return{mathjs:"BlockNode",blocks:this.blocks}}static fromJSON(json){return new BlockNode(json.blocks)}_toHTML(options){return this.blocks.map((function(param){return param.node.toHTML(options)+(param.visible?"":'<span class="math-separator">;</span>')})).join('<span class="math-separator"><br /></span>')}_toTex(options){return this.blocks.map((function(param){return param.node.toTex(options)+(param.visible?"":";")})).join("\\;\\;\n")}}return(0,defineProperty.A)(BlockNode,"name","BlockNode"),BlockNode}),{isClass:!0,isNode:!0}),ConditionalNode_dependencies=["Node"],createConditionalNode=(0,factory.P9)("ConditionalNode",ConditionalNode_dependencies,(_ref=>{var{Node:Node}=_ref;class ConditionalNode extends Node{constructor(condition,trueExpr,falseExpr){if(super(),!(0,is.Ll)(condition))throw new TypeError("Parameter condition must be a Node");if(!(0,is.Ll)(trueExpr))throw new TypeError("Parameter trueExpr must be a Node");if(!(0,is.Ll)(falseExpr))throw new TypeError("Parameter falseExpr must be a Node");this.condition=condition,this.trueExpr=trueExpr,this.falseExpr=falseExpr}get type(){return"ConditionalNode"}get isConditionalNode(){return!0}_compile(math,argNames){var evalCondition=this.condition._compile(math,argNames),evalTrueExpr=this.trueExpr._compile(math,argNames),evalFalseExpr=this.falseExpr._compile(math,argNames);return function evalConditionalNode(scope,args,context){return function testCondition(condition){if("number"==typeof condition||"boolean"==typeof condition||"string"==typeof condition)return!!condition;if(condition){if((0,is.C4)(condition))return!condition.isZero();if((0,is.Zd)(condition))return!(!condition.re&&!condition.im);if((0,is.vO)(condition))return!!condition.value}if(null==condition)return!1;throw new TypeError('Unsupported type of condition "'+(0,is.QP)(condition)+'"')}(evalCondition(scope,args,context))?evalTrueExpr(scope,args,context):evalFalseExpr(scope,args,context)}}forEach(callback){callback(this.condition,"condition",this),callback(this.trueExpr,"trueExpr",this),callback(this.falseExpr,"falseExpr",this)}map(callback){return new ConditionalNode(this._ifNode(callback(this.condition,"condition",this)),this._ifNode(callback(this.trueExpr,"trueExpr",this)),this._ifNode(callback(this.falseExpr,"falseExpr",this)))}clone(){return new ConditionalNode(this.condition,this.trueExpr,this.falseExpr)}_toString(options){var parenthesis=options&&options.parenthesis?options.parenthesis:"keep",precedence=getPrecedence(this,parenthesis,options&&options.implicit),condition=this.condition.toString(options),conditionPrecedence=getPrecedence(this.condition,parenthesis,options&&options.implicit);("all"===parenthesis||"OperatorNode"===this.condition.type||null!==conditionPrecedence&&conditionPrecedence<=precedence)&&(condition="("+condition+")");var trueExpr=this.trueExpr.toString(options),truePrecedence=getPrecedence(this.trueExpr,parenthesis,options&&options.implicit);("all"===parenthesis||"OperatorNode"===this.trueExpr.type||null!==truePrecedence&&truePrecedence<=precedence)&&(trueExpr="("+trueExpr+")");var falseExpr=this.falseExpr.toString(options),falsePrecedence=getPrecedence(this.falseExpr,parenthesis,options&&options.implicit);return("all"===parenthesis||"OperatorNode"===this.falseExpr.type||null!==falsePrecedence&&falsePrecedence<=precedence)&&(falseExpr="("+falseExpr+")"),condition+" ? "+trueExpr+" : "+falseExpr}toJSON(){return{mathjs:"ConditionalNode",condition:this.condition,trueExpr:this.trueExpr,falseExpr:this.falseExpr}}static fromJSON(json){return new ConditionalNode(json.condition,json.trueExpr,json.falseExpr)}_toHTML(options){var parenthesis=options&&options.parenthesis?options.parenthesis:"keep",precedence=getPrecedence(this,parenthesis,options&&options.implicit),condition=this.condition.toHTML(options),conditionPrecedence=getPrecedence(this.condition,parenthesis,options&&options.implicit);("all"===parenthesis||"OperatorNode"===this.condition.type||null!==conditionPrecedence&&conditionPrecedence<=precedence)&&(condition='<span class="math-parenthesis math-round-parenthesis">(</span>'+condition+'<span class="math-parenthesis math-round-parenthesis">)</span>');var trueExpr=this.trueExpr.toHTML(options),truePrecedence=getPrecedence(this.trueExpr,parenthesis,options&&options.implicit);("all"===parenthesis||"OperatorNode"===this.trueExpr.type||null!==truePrecedence&&truePrecedence<=precedence)&&(trueExpr='<span class="math-parenthesis math-round-parenthesis">(</span>'+trueExpr+'<span class="math-parenthesis math-round-parenthesis">)</span>');var falseExpr=this.falseExpr.toHTML(options),falsePrecedence=getPrecedence(this.falseExpr,parenthesis,options&&options.implicit);return("all"===parenthesis||"OperatorNode"===this.falseExpr.type||null!==falsePrecedence&&falsePrecedence<=precedence)&&(falseExpr='<span class="math-parenthesis math-round-parenthesis">(</span>'+falseExpr+'<span class="math-parenthesis math-round-parenthesis">)</span>'),condition+'<span class="math-operator math-conditional-operator">?</span>'+trueExpr+'<span class="math-operator math-conditional-operator">:</span>'+falseExpr}_toTex(options){return"\\begin{cases} {"+this.trueExpr.toTex(options)+"}, &\\quad{\\text{if }\\;"+this.condition.toTex(options)+"}\\\\{"+this.falseExpr.toTex(options)+"}, &\\quad{\\text{otherwise}}\\end{cases}"}}return(0,defineProperty.A)(ConditionalNode,"name","ConditionalNode"),ConditionalNode}),{isClass:!0,isNode:!0}),utils_string=__webpack_require__("./node_modules/mathjs/lib/esm/utils/string.js"),dist=__webpack_require__("./node_modules/escape-latex/dist/index.js"),dist_default=__webpack_require__.n(dist),latexSymbols={Alpha:"A",alpha:"\\alpha",Beta:"B",beta:"\\beta",Gamma:"\\Gamma",gamma:"\\gamma",Delta:"\\Delta",delta:"\\delta",Epsilon:"E",epsilon:"\\epsilon",varepsilon:"\\varepsilon",Zeta:"Z",zeta:"\\zeta",Eta:"H",eta:"\\eta",Theta:"\\Theta",theta:"\\theta",vartheta:"\\vartheta",Iota:"I",iota:"\\iota",Kappa:"K",kappa:"\\kappa",varkappa:"\\varkappa",Lambda:"\\Lambda",lambda:"\\lambda",Mu:"M",mu:"\\mu",Nu:"N",nu:"\\nu",Xi:"\\Xi",xi:"\\xi",Omicron:"O",omicron:"o",Pi:"\\Pi",pi:"\\pi",varpi:"\\varpi",Rho:"P",rho:"\\rho",varrho:"\\varrho",Sigma:"\\Sigma",sigma:"\\sigma",varsigma:"\\varsigma",Tau:"T",tau:"\\tau",Upsilon:"\\Upsilon",upsilon:"\\upsilon",Phi:"\\Phi",phi:"\\phi",varphi:"\\varphi",Chi:"X",chi:"\\chi",Psi:"\\Psi",psi:"\\psi",Omega:"\\Omega",omega:"\\omega",true:"\\mathrm{True}",false:"\\mathrm{False}",i:"i",inf:"\\infty",Inf:"\\infty",infinity:"\\infty",Infinity:"\\infty",oo:"\\infty",lim:"\\lim",undefined:"\\mathbf{?}"},latexOperators={transpose:"^\\top",ctranspose:"^H",factorial:"!",pow:"^",dotPow:".^\\wedge",unaryPlus:"+",unaryMinus:"-",bitNot:"\\~",not:"\\neg",multiply:"\\cdot",divide:"\\frac",dotMultiply:".\\cdot",dotDivide:".:",mod:"\\mod",add:"+",subtract:"-",to:"\\rightarrow",leftShift:"<<",rightArithShift:">>",rightLogShift:">>>",equal:"=",unequal:"\\neq",smaller:"<",larger:">",smallerEq:"\\leq",largerEq:"\\geq",bitAnd:"\\&",bitXor:"\\underline{|}",bitOr:"|",and:"\\wedge",xor:"\\veebar",or:"\\vee"},latexFunctions={abs:{1:"\\left|${args[0]}\\right|"},add:{2:"\\left(${args[0]}".concat(latexOperators.add,"${args[1]}\\right)")},cbrt:{1:"\\sqrt[3]{${args[0]}}"},ceil:{1:"\\left\\lceil${args[0]}\\right\\rceil"},cube:{1:"\\left(${args[0]}\\right)^3"},divide:{2:"\\frac{${args[0]}}{${args[1]}}"},dotDivide:{2:"\\left(${args[0]}".concat(latexOperators.dotDivide,"${args[1]}\\right)")},dotMultiply:{2:"\\left(${args[0]}".concat(latexOperators.dotMultiply,"${args[1]}\\right)")},dotPow:{2:"\\left(${args[0]}".concat(latexOperators.dotPow,"${args[1]}\\right)")},exp:{1:"\\exp\\left(${args[0]}\\right)"},expm1:"\\left(e".concat(latexOperators.pow,"{${args[0]}}-1\\right)"),fix:{1:"\\mathrm{${name}}\\left(${args[0]}\\right)"},floor:{1:"\\left\\lfloor${args[0]}\\right\\rfloor"},gcd:"\\gcd\\left(${args}\\right)",hypot:"\\hypot\\left(${args}\\right)",log:{1:"\\ln\\left(${args[0]}\\right)",2:"\\log_{${args[1]}}\\left(${args[0]}\\right)"},log10:{1:"\\log_{10}\\left(${args[0]}\\right)"},log1p:{1:"\\ln\\left(${args[0]}+1\\right)",2:"\\log_{${args[1]}}\\left(${args[0]}+1\\right)"},log2:"\\log_{2}\\left(${args[0]}\\right)",mod:{2:"\\left(${args[0]}".concat(latexOperators.mod,"${args[1]}\\right)")},multiply:{2:"\\left(${args[0]}".concat(latexOperators.multiply,"${args[1]}\\right)")},norm:{1:"\\left\\|${args[0]}\\right\\|",2:void 0},nthRoot:{2:"\\sqrt[${args[1]}]{${args[0]}}"},nthRoots:{2:"\\{y : $y^{args[1]} = {${args[0]}}\\}"},pow:{2:"\\left(${args[0]}\\right)".concat(latexOperators.pow,"{${args[1]}}")},round:{1:"\\left\\lfloor${args[0]}\\right\\rceil",2:void 0},sign:{1:"\\mathrm{${name}}\\left(${args[0]}\\right)"},sqrt:{1:"\\sqrt{${args[0]}}"},square:{1:"\\left(${args[0]}\\right)^2"},subtract:{2:"\\left(${args[0]}".concat(latexOperators.subtract,"${args[1]}\\right)")},unaryMinus:{1:"".concat(latexOperators.unaryMinus,"\\left(${args[0]}\\right)")},unaryPlus:{1:"".concat(latexOperators.unaryPlus,"\\left(${args[0]}\\right)")},bitAnd:{2:"\\left(${args[0]}".concat(latexOperators.bitAnd,"${args[1]}\\right)")},bitNot:{1:latexOperators.bitNot+"\\left(${args[0]}\\right)"},bitOr:{2:"\\left(${args[0]}".concat(latexOperators.bitOr,"${args[1]}\\right)")},bitXor:{2:"\\left(${args[0]}".concat(latexOperators.bitXor,"${args[1]}\\right)")},leftShift:{2:"\\left(${args[0]}".concat(latexOperators.leftShift,"${args[1]}\\right)")},rightArithShift:{2:"\\left(${args[0]}".concat(latexOperators.rightArithShift,"${args[1]}\\right)")},rightLogShift:{2:"\\left(${args[0]}".concat(latexOperators.rightLogShift,"${args[1]}\\right)")},bellNumbers:{1:"\\mathrm{B}_{${args[0]}}"},catalan:{1:"\\mathrm{C}_{${args[0]}}"},stirlingS2:{2:"\\mathrm{S}\\left(${args}\\right)"},arg:{1:"\\arg\\left(${args[0]}\\right)"},conj:{1:"\\left(${args[0]}\\right)^*"},im:{1:"\\Im\\left\\lbrace${args[0]}\\right\\rbrace"},re:{1:"\\Re\\left\\lbrace${args[0]}\\right\\rbrace"},and:{2:"\\left(${args[0]}".concat(latexOperators.and,"${args[1]}\\right)")},not:{1:latexOperators.not+"\\left(${args[0]}\\right)"},or:{2:"\\left(${args[0]}".concat(latexOperators.or,"${args[1]}\\right)")},xor:{2:"\\left(${args[0]}".concat(latexOperators.xor,"${args[1]}\\right)")},cross:{2:"\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)"},ctranspose:{1:"\\left(${args[0]}\\right)".concat(latexOperators.ctranspose)},det:{1:"\\det\\left(${args[0]}\\right)"},dot:{2:"\\left(${args[0]}\\cdot${args[1]}\\right)"},expm:{1:"\\exp\\left(${args[0]}\\right)"},inv:{1:"\\left(${args[0]}\\right)^{-1}"},pinv:{1:"\\left(${args[0]}\\right)^{+}"},sqrtm:{1:"{${args[0]}}".concat(latexOperators.pow,"{\\frac{1}{2}}")},trace:{1:"\\mathrm{tr}\\left(${args[0]}\\right)"},transpose:{1:"\\left(${args[0]}\\right)".concat(latexOperators.transpose)},combinations:{2:"\\binom{${args[0]}}{${args[1]}}"},combinationsWithRep:{2:"\\left(\\!\\!{\\binom{${args[0]}}{${args[1]}}}\\!\\!\\right)"},factorial:{1:"\\left(${args[0]}\\right)".concat(latexOperators.factorial)},gamma:{1:"\\Gamma\\left(${args[0]}\\right)"},lgamma:{1:"\\ln\\Gamma\\left(${args[0]}\\right)"},equal:{2:"\\left(${args[0]}".concat(latexOperators.equal,"${args[1]}\\right)")},larger:{2:"\\left(${args[0]}".concat(latexOperators.larger,"${args[1]}\\right)")},largerEq:{2:"\\left(${args[0]}".concat(latexOperators.largerEq,"${args[1]}\\right)")},smaller:{2:"\\left(${args[0]}".concat(latexOperators.smaller,"${args[1]}\\right)")},smallerEq:{2:"\\left(${args[0]}".concat(latexOperators.smallerEq,"${args[1]}\\right)")},unequal:{2:"\\left(${args[0]}".concat(latexOperators.unequal,"${args[1]}\\right)")},erf:{1:"erf\\left(${args[0]}\\right)"},max:"\\max\\left(${args}\\right)",min:"\\min\\left(${args}\\right)",variance:"\\mathrm{Var}\\left(${args}\\right)",acos:{1:"\\cos^{-1}\\left(${args[0]}\\right)"},acosh:{1:"\\cosh^{-1}\\left(${args[0]}\\right)"},acot:{1:"\\cot^{-1}\\left(${args[0]}\\right)"},acoth:{1:"\\coth^{-1}\\left(${args[0]}\\right)"},acsc:{1:"\\csc^{-1}\\left(${args[0]}\\right)"},acsch:{1:"\\mathrm{csch}^{-1}\\left(${args[0]}\\right)"},asec:{1:"\\sec^{-1}\\left(${args[0]}\\right)"},asech:{1:"\\mathrm{sech}^{-1}\\left(${args[0]}\\right)"},asin:{1:"\\sin^{-1}\\left(${args[0]}\\right)"},asinh:{1:"\\sinh^{-1}\\left(${args[0]}\\right)"},atan:{1:"\\tan^{-1}\\left(${args[0]}\\right)"},atan2:{2:"\\mathrm{atan2}\\left(${args}\\right)"},atanh:{1:"\\tanh^{-1}\\left(${args[0]}\\right)"},cos:{1:"\\cos\\left(${args[0]}\\right)"},cosh:{1:"\\cosh\\left(${args[0]}\\right)"},cot:{1:"\\cot\\left(${args[0]}\\right)"},coth:{1:"\\coth\\left(${args[0]}\\right)"},csc:{1:"\\csc\\left(${args[0]}\\right)"},csch:{1:"\\mathrm{csch}\\left(${args[0]}\\right)"},sec:{1:"\\sec\\left(${args[0]}\\right)"},sech:{1:"\\mathrm{sech}\\left(${args[0]}\\right)"},sin:{1:"\\sin\\left(${args[0]}\\right)"},sinh:{1:"\\sinh\\left(${args[0]}\\right)"},tan:{1:"\\tan\\left(${args[0]}\\right)"},tanh:{1:"\\tanh\\left(${args[0]}\\right)"},to:{2:"\\left(${args[0]}".concat(latexOperators.to,"${args[1]}\\right)")},numeric:function numeric(node,options){return node.args[0].toTex()},number:{0:"0",1:"\\left(${args[0]}\\right)",2:"\\left(\\left(${args[0]}\\right)${args[1]}\\right)"},string:{0:'\\mathtt{""}',1:"\\mathrm{string}\\left(${args[0]}\\right)"},bignumber:{0:"0",1:"\\left(${args[0]}\\right)"},bigint:{0:"0",1:"\\left(${args[0]}\\right)"},complex:{0:"0",1:"\\left(${args[0]}\\right)",2:"\\left(\\left(${args[0]}\\right)+".concat(latexSymbols.i,"\\cdot\\left(${args[1]}\\right)\\right)")},matrix:{0:"\\begin{bmatrix}\\end{bmatrix}",1:"\\left(${args[0]}\\right)",2:"\\left(${args[0]}\\right)"},sparse:{0:"\\begin{bsparse}\\end{bsparse}",1:"\\left(${args[0]}\\right)"},unit:{1:"\\left(${args[0]}\\right)",2:"\\left(\\left(${args[0]}\\right)${args[1]}\\right)"}},latexUnits={deg:"^\\circ"};function escapeLatex(string){return dist_default()(string,{preserveFormatting:!0})}function toSymbol(name,isUnit){return(isUnit=void 0!==isUnit&&isUnit)?(0,object.mQ)(latexUnits,name)?latexUnits[name]:"\\mathrm{"+escapeLatex(name)+"}":(0,object.mQ)(latexSymbols,name)?latexSymbols[name]:escapeLatex(name)}var ConstantNode_dependencies=["Node"],createConstantNode=(0,factory.P9)("ConstantNode",ConstantNode_dependencies,(_ref=>{var{Node:Node}=_ref;class ConstantNode extends Node{constructor(value){super(),this.value=value}get type(){return"ConstantNode"}get isConstantNode(){return!0}_compile(math,argNames){var value=this.value;return function evalConstantNode(){return value}}forEach(callback){}map(callback){return this.clone()}clone(){return new ConstantNode(this.value)}_toString(options){return(0,utils_string.GP)(this.value,options)}_toHTML(options){var value=this._toString(options);switch((0,is.QP)(this.value)){case"number":case"bigint":case"BigNumber":case"Fraction":return'<span class="math-number">'+value+"</span>";case"string":return'<span class="math-string">'+value+"</span>";case"boolean":return'<span class="math-boolean">'+value+"</span>";case"null":return'<span class="math-null-symbol">'+value+"</span>";case"undefined":return'<span class="math-undefined">'+value+"</span>";default:return'<span class="math-symbol">'+value+"</span>"}}toJSON(){return{mathjs:"ConstantNode",value:this.value}}static fromJSON(json){return new ConstantNode(json.value)}_toTex(options){var value=this._toString(options),type=(0,is.QP)(this.value);switch(type){case"string":return"\\mathtt{"+escapeLatex(value)+"}";case"number":case"BigNumber":if(!("BigNumber"===type?this.value.isFinite():isFinite(this.value)))return this.value.valueOf()<0?"-\\infty":"\\infty";var index=value.toLowerCase().indexOf("e");return-1!==index?value.substring(0,index)+"\\cdot10^{"+value.substring(index+1)+"}":value;case"bigint":return value.toString();case"Fraction":return this.value.toLatex();default:return value}}}return(0,defineProperty.A)(ConstantNode,"name","ConstantNode"),ConstantNode}),{isClass:!0,isNode:!0}),FunctionAssignmentNode_dependencies=["typed","Node"],createFunctionAssignmentNode=(0,factory.P9)("FunctionAssignmentNode",FunctionAssignmentNode_dependencies,(_ref=>{var{typed:typed,Node:Node}=_ref;function needParenthesis(node,parenthesis,implicit){var precedence=getPrecedence(node,parenthesis,implicit),exprPrecedence=getPrecedence(node.expr,parenthesis,implicit);return"all"===parenthesis||null!==exprPrecedence&&exprPrecedence<=precedence}class FunctionAssignmentNode extends Node{constructor(name,params,expr){if(super(),"string"!=typeof name)throw new TypeError('String expected for parameter "name"');if(!Array.isArray(params))throw new TypeError('Array containing strings or objects expected for parameter "params"');if(!(0,is.Ll)(expr))throw new TypeError('Node expected for parameter "expr"');if(keywords.has(name))throw new Error('Illegal function name, "'+name+'" is a reserved keyword');var paramNames=new Set;for(var param of params){var _name="string"==typeof param?param:param.name;if(paramNames.has(_name))throw new Error('Duplicate parameter name "'.concat(_name,'"'));paramNames.add(_name)}this.name=name,this.params=params.map((function(param){return param&&param.name||param})),this.types=params.map((function(param){return param&&param.type||"any"})),this.expr=expr}get type(){return"FunctionAssignmentNode"}get isFunctionAssignmentNode(){return!0}_compile(math,argNames){var childArgNames=Object.create(argNames);(0,array.jJ)(this.params,(function(param){childArgNames[param]=!0}));var evalExpr=this.expr._compile(math,childArgNames),name=this.name,params=this.params,signature=(0,array.fj)(this.types,","),syntax=name+"("+(0,array.fj)(this.params,", ")+")";return function evalFunctionAssignmentNode(scope,args,context){var signatures={};signatures[signature]=function(){for(var childArgs=Object.create(args),i=0;i<params.length;i++)childArgs[params[i]]=arguments[i];return evalExpr(scope,childArgs,context)};var fn=typed(name,signatures);return fn.syntax=syntax,scope.set(name,fn),fn}}forEach(callback){callback(this.expr,"expr",this)}map(callback){var expr=this._ifNode(callback(this.expr,"expr",this));return new FunctionAssignmentNode(this.name,this.params.slice(0),expr)}clone(){return new FunctionAssignmentNode(this.name,this.params.slice(0),this.expr)}_toString(options){var parenthesis=options&&options.parenthesis?options.parenthesis:"keep",expr=this.expr.toString(options);return needParenthesis(this,parenthesis,options&&options.implicit)&&(expr="("+expr+")"),this.name+"("+this.params.join(", ")+") = "+expr}toJSON(){var types=this.types;return{mathjs:"FunctionAssignmentNode",name:this.name,params:this.params.map((function(param,index){return{name:param,type:types[index]}})),expr:this.expr}}static fromJSON(json){return new FunctionAssignmentNode(json.name,json.params,json.expr)}_toHTML(options){for(var parenthesis=options&&options.parenthesis?options.parenthesis:"keep",params=[],i=0;i<this.params.length;i++)params.push('<span class="math-symbol math-parameter">'+(0,utils_string.ih)(this.params[i])+"</span>");var expr=this.expr.toHTML(options);return needParenthesis(this,parenthesis,options&&options.implicit)&&(expr='<span class="math-parenthesis math-round-parenthesis">(</span>'+expr+'<span class="math-parenthesis math-round-parenthesis">)</span>'),'<span class="math-function">'+(0,utils_string.ih)(this.name)+'</span><span class="math-parenthesis math-round-parenthesis">(</span>'+params.join('<span class="math-separator">,</span>')+'<span class="math-parenthesis math-round-parenthesis">)</span><span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>'+expr}_toTex(options){var parenthesis=options&&options.parenthesis?options.parenthesis:"keep",expr=this.expr.toTex(options);return needParenthesis(this,parenthesis,options&&options.implicit)&&(expr="\\left(".concat(expr,"\\right)")),"\\mathrm{"+this.name+"}\\left("+this.params.map(toSymbol).join(",")+"\\right)="+expr}}return(0,defineProperty.A)(FunctionAssignmentNode,"name","FunctionAssignmentNode"),FunctionAssignmentNode}),{isClass:!0,isNode:!0}),IndexNode_dependencies=["Node","size"],createIndexNode=(0,factory.P9)("IndexNode",IndexNode_dependencies,(_ref=>{var{Node:Node,size:size}=_ref;class IndexNode extends Node{constructor(dimensions,dotNotation){if(super(),this.dimensions=dimensions,this.dotNotation=dotNotation||!1,!Array.isArray(dimensions)||!dimensions.every(is.Ll))throw new TypeError('Array containing Nodes expected for parameter "dimensions"');if(this.dotNotation&&!this.isObjectProperty())throw new Error("dotNotation only applicable for object properties")}get type(){return"IndexNode"}get isIndexNode(){return!0}_compile(math,argNames){var evalDimensions=(0,array.Tj)(this.dimensions,(function(dimension,i){if(dimension.filter((node=>node.isSymbolNode&&"end"===node.name)).length>0){var childArgNames=Object.create(argNames);childArgNames.end=!0;var _evalDimension=dimension._compile(math,childArgNames);return function evalDimension(scope,args,context){if(!(0,is.OA)(context)&&!(0,is.cy)(context)&&!(0,is.Kg)(context))throw new TypeError('Cannot resolve "end": context must be a Matrix, Array, or string but is '+(0,is.QP)(context));var s=size(context).valueOf(),childArgs=Object.create(args);return childArgs.end=s[i],_evalDimension(scope,childArgs,context)}}return dimension._compile(math,argNames)})),index=(0,customs.HU)(math,"index");return function evalIndexNode(scope,args,context){var dimensions=(0,array.Tj)(evalDimensions,(function(evalDimension){return evalDimension(scope,args,context)}));return index(...dimensions)}}forEach(callback){for(var i=0;i<this.dimensions.length;i++)callback(this.dimensions[i],"dimensions["+i+"]",this)}map(callback){for(var dimensions=[],i=0;i<this.dimensions.length;i++)dimensions[i]=this._ifNode(callback(this.dimensions[i],"dimensions["+i+"]",this));return new IndexNode(dimensions,this.dotNotation)}clone(){return new IndexNode(this.dimensions.slice(0),this.dotNotation)}isObjectProperty(){return 1===this.dimensions.length&&(0,is.BA)(this.dimensions[0])&&"string"==typeof this.dimensions[0].value}getObjectProperty(){return this.isObjectProperty()?this.dimensions[0].value:null}_toString(options){return this.dotNotation?"."+this.getObjectProperty():"["+this.dimensions.join(", ")+"]"}toJSON(){return{mathjs:"IndexNode",dimensions:this.dimensions,dotNotation:this.dotNotation}}static fromJSON(json){return new IndexNode(json.dimensions,json.dotNotation)}_toHTML(options){for(var dimensions=[],i=0;i<this.dimensions.length;i++)dimensions[i]=this.dimensions[i].toHTML();return this.dotNotation?'<span class="math-operator math-accessor-operator">.</span><span class="math-symbol math-property">'+(0,utils_string.ih)(this.getObjectProperty())+"</span>":'<span class="math-parenthesis math-square-parenthesis">[</span>'+dimensions.join('<span class="math-separator">,</span>')+'<span class="math-parenthesis math-square-parenthesis">]</span>'}_toTex(options){var dimensions=this.dimensions.map((function(range){return range.toTex(options)}));return this.dotNotation?"."+this.getObjectProperty():"_{"+dimensions.join(",")+"}"}}return(0,defineProperty.A)(IndexNode,"name","IndexNode"),IndexNode}),{isClass:!0,isNode:!0}),ObjectNode_dependencies=["Node"],createObjectNode=(0,factory.P9)("ObjectNode",ObjectNode_dependencies,(_ref=>{var{Node:Node}=_ref;class ObjectNode extends Node{constructor(properties){if(super(),this.properties=properties||{},properties&&("object"!=typeof properties||!Object.keys(properties).every((function(key){return(0,is.Ll)(properties[key])}))))throw new TypeError("Object containing Nodes expected")}get type(){return"ObjectNode"}get isObjectNode(){return!0}_compile(math,argNames){var evalEntries={};for(var key in this.properties)if((0,object.mQ)(this.properties,key)){var stringifiedKey=(0,utils_string.As)(key),parsedKey=JSON.parse(stringifiedKey),prop=(0,customs.HU)(this.properties,key);evalEntries[parsedKey]=prop._compile(math,argNames)}return function evalObjectNode(scope,args,context){var obj={};for(var _key in evalEntries)(0,object.mQ)(evalEntries,_key)&&(obj[_key]=evalEntries[_key](scope,args,context));return obj}}forEach(callback){for(var key in this.properties)(0,object.mQ)(this.properties,key)&&callback(this.properties[key],"properties["+(0,utils_string.As)(key)+"]",this)}map(callback){var properties={};for(var key in this.properties)(0,object.mQ)(this.properties,key)&&(properties[key]=this._ifNode(callback(this.properties[key],"properties["+(0,utils_string.As)(key)+"]",this)));return new ObjectNode(properties)}clone(){var properties={};for(var key in this.properties)(0,object.mQ)(this.properties,key)&&(properties[key]=this.properties[key]);return new ObjectNode(properties)}_toString(options){var entries=[];for(var key in this.properties)(0,object.mQ)(this.properties,key)&&entries.push((0,utils_string.As)(key)+": "+this.properties[key].toString(options));return"{"+entries.join(", ")+"}"}toJSON(){return{mathjs:"ObjectNode",properties:this.properties}}static fromJSON(json){return new ObjectNode(json.properties)}_toHTML(options){var entries=[];for(var key in this.properties)(0,object.mQ)(this.properties,key)&&entries.push('<span class="math-symbol math-property">'+(0,utils_string.ih)(key)+'</span><span class="math-operator math-assignment-operator math-property-assignment-operator math-binary-operator">:</span>'+this.properties[key].toHTML(options));return'<span class="math-parenthesis math-curly-parenthesis">{</span>'+entries.join('<span class="math-separator">,</span>')+'<span class="math-parenthesis math-curly-parenthesis">}</span>'}_toTex(options){var entries=[];for(var key in this.properties)(0,object.mQ)(this.properties,key)&&entries.push("\\mathbf{"+key+":} & "+this.properties[key].toTex(options)+"\\\\");return"\\left\\{\\begin{array}{ll}"+entries.join("\n")+"\\end{array}\\right\\}"}}return(0,defineProperty.A)(ObjectNode,"name","ObjectNode"),ObjectNode}),{isClass:!0,isNode:!0});function createSubScope(parentScope,args){return new map.w6(parentScope,new map.AP(args),new Set(Object.keys(args)))}var OperatorNode_dependencies=["Node"],createOperatorNode=(0,factory.P9)("OperatorNode",OperatorNode_dependencies,(_ref=>{var{Node:Node}=_ref;function startsWithConstant(expr,parenthesis){var curNode=expr;if("auto"===parenthesis)for(;(0,is.tv)(curNode);)curNode=curNode.content;return!!(0,is.BA)(curNode)||!!(0,is.$$)(curNode)&&startsWithConstant(curNode.args[0],parenthesis)}function calculateNecessaryParentheses(root,parenthesis,implicit,args,latex){var result,precedence=getPrecedence(root,parenthesis,implicit),associativity=getAssociativity(root,parenthesis);if("all"===parenthesis||args.length>2&&"OperatorNode:add"!==root.getIdentifier()&&"OperatorNode:multiply"!==root.getIdentifier())return args.map((function(arg){switch(arg.getContent().type){case"ArrayNode":case"ConstantNode":case"SymbolNode":case"ParenthesisNode":return!1;default:return!0}}));switch(args.length){case 0:result=[];break;case 1:var operandPrecedence=getPrecedence(args[0],parenthesis,implicit,root);if(latex&&null!==operandPrecedence){var operandIdentifier,rootIdentifier;if("keep"===parenthesis?(operandIdentifier=args[0].getIdentifier(),rootIdentifier=root.getIdentifier()):(operandIdentifier=args[0].getContent().getIdentifier(),rootIdentifier=root.getContent().getIdentifier()),!1===properties[precedence][rootIdentifier].latexLeftParens){result=[!1];break}if(!1===properties[operandPrecedence][operandIdentifier].latexParens){result=[!1];break}}if(null===operandPrecedence){result=[!1];break}if(operandPrecedence<=precedence){result=[!0];break}result=[!1];break;case 2:var lhsParens,rhsParens,lhsPrecedence=getPrecedence(args[0],parenthesis,implicit,root),assocWithLhs=isAssociativeWith(root,args[0],parenthesis);lhsParens=null!==lhsPrecedence&&(lhsPrecedence===precedence&&"right"===associativity&&!assocWithLhs||lhsPrecedence<precedence);var _rootIdentifier,lhsIdentifier,rhsIdentifier,rhsPrecedence=getPrecedence(args[1],parenthesis,implicit,root),assocWithRhs=isAssociativeWith(root,args[1],parenthesis);if(rhsParens=null!==rhsPrecedence&&(rhsPrecedence===precedence&&"left"===associativity&&!assocWithRhs||rhsPrecedence<precedence),latex)"keep"===parenthesis?(_rootIdentifier=root.getIdentifier(),lhsIdentifier=root.args[0].getIdentifier(),rhsIdentifier=root.args[1].getIdentifier()):(_rootIdentifier=root.getContent().getIdentifier(),lhsIdentifier=root.args[0].getContent().getIdentifier(),rhsIdentifier=root.args[1].getContent().getIdentifier()),null!==lhsPrecedence&&(!1===properties[precedence][_rootIdentifier].latexLeftParens&&(lhsParens=!1),!1===properties[lhsPrecedence][lhsIdentifier].latexParens&&(lhsParens=!1)),null!==rhsPrecedence&&(!1===properties[precedence][_rootIdentifier].latexRightParens&&(rhsParens=!1),!1===properties[rhsPrecedence][rhsIdentifier].latexParens&&(rhsParens=!1));result=[lhsParens,rhsParens];break;default:"OperatorNode:add"!==root.getIdentifier()&&"OperatorNode:multiply"!==root.getIdentifier()||(result=args.map((function(arg){var argPrecedence=getPrecedence(arg,parenthesis,implicit,root),assocWithArg=isAssociativeWith(root,arg,parenthesis),argAssociativity=getAssociativity(arg,parenthesis);return null!==argPrecedence&&(precedence===argPrecedence&&associativity===argAssociativity&&!assocWithArg||argPrecedence<precedence)})))}if(args.length>=2&&"OperatorNode:multiply"===root.getIdentifier()&&root.implicit&&"all"!==parenthesis&&"hide"===implicit)for(var i=1;i<result.length;++i)!startsWithConstant(args[i],parenthesis)||result[i-1]||"keep"===parenthesis&&(0,is.tv)(args[i-1])||(result[i]=!0);return result}class OperatorNode extends Node{constructor(op,fn,args,implicit,isPercentage){if(super(),"string"!=typeof op)throw new TypeError('string expected for parameter "op"');if("string"!=typeof fn)throw new TypeError('string expected for parameter "fn"');if(!Array.isArray(args)||!args.every(is.Ll))throw new TypeError('Array containing Nodes expected for parameter "args"');this.implicit=!0===implicit,this.isPercentage=!0===isPercentage,this.op=op,this.fn=fn,this.args=args||[]}get type(){return"OperatorNode"}get isOperatorNode(){return!0}_compile(math,argNames){if("string"!=typeof this.fn||!(0,customs.Tn)(math,this.fn))throw math[this.fn]?new Error('No access to function "'+this.fn+'"'):new Error("Function "+this.fn+' missing in provided namespace "math"');var fn=(0,customs.HU)(math,this.fn),evalArgs=(0,array.Tj)(this.args,(function(arg){return arg._compile(math,argNames)}));if("function"==typeof fn&&!0===fn.rawArgs){var rawArgs=this.args;return function evalOperatorNode(scope,args,context){return fn(rawArgs,math,createSubScope(scope,args))}}if(1===evalArgs.length){var evalArg0=evalArgs[0];return function evalOperatorNode(scope,args,context){return fn(evalArg0(scope,args,context))}}if(2===evalArgs.length){var _evalArg=evalArgs[0],evalArg1=evalArgs[1];return function evalOperatorNode(scope,args,context){return fn(_evalArg(scope,args,context),evalArg1(scope,args,context))}}return function evalOperatorNode(scope,args,context){return fn.apply(null,(0,array.Tj)(evalArgs,(function(evalArg){return evalArg(scope,args,context)})))}}forEach(callback){for(var i=0;i<this.args.length;i++)callback(this.args[i],"args["+i+"]",this)}map(callback){for(var args=[],i=0;i<this.args.length;i++)args[i]=this._ifNode(callback(this.args[i],"args["+i+"]",this));return new OperatorNode(this.op,this.fn,args,this.implicit,this.isPercentage)}clone(){return new OperatorNode(this.op,this.fn,this.args.slice(0),this.implicit,this.isPercentage)}isUnary(){return 1===this.args.length}isBinary(){return 2===this.args.length}_toString(options){var parenthesis=options&&options.parenthesis?options.parenthesis:"keep",implicit=options&&options.implicit?options.implicit:"hide",args=this.args,parens=calculateNecessaryParentheses(this,parenthesis,implicit,args,!1);if(1===args.length){var assoc=getAssociativity(this,parenthesis),operand=args[0].toString(options);parens[0]&&(operand="("+operand+")");var opIsNamed=/[a-zA-Z]+/.test(this.op);return"right"===assoc?this.op+(opIsNamed?" ":"")+operand:"left"===assoc?operand+(opIsNamed?" ":"")+this.op:operand+this.op}if(2===args.length){var lhs=args[0].toString(options),rhs=args[1].toString(options);return parens[0]&&(lhs="("+lhs+")"),parens[1]&&(rhs="("+rhs+")"),this.implicit&&"OperatorNode:multiply"===this.getIdentifier()&&"hide"===implicit?lhs+" "+rhs:lhs+" "+this.op+" "+rhs}if(args.length>2&&("OperatorNode:add"===this.getIdentifier()||"OperatorNode:multiply"===this.getIdentifier())){var stringifiedArgs=args.map((function(arg,index){return arg=arg.toString(options),parens[index]&&(arg="("+arg+")"),arg}));return this.implicit&&"OperatorNode:multiply"===this.getIdentifier()&&"hide"===implicit?stringifiedArgs.join(" "):stringifiedArgs.join(" "+this.op+" ")}return this.fn+"("+this.args.join(", ")+")"}toJSON(){return{mathjs:"OperatorNode",op:this.op,fn:this.fn,args:this.args,implicit:this.implicit,isPercentage:this.isPercentage}}static fromJSON(json){return new OperatorNode(json.op,json.fn,json.args,json.implicit,json.isPercentage)}_toHTML(options){var parenthesis=options&&options.parenthesis?options.parenthesis:"keep",implicit=options&&options.implicit?options.implicit:"hide",args=this.args,parens=calculateNecessaryParentheses(this,parenthesis,implicit,args,!1);if(1===args.length){var assoc=getAssociativity(this,parenthesis),operand=args[0].toHTML(options);return parens[0]&&(operand='<span class="math-parenthesis math-round-parenthesis">(</span>'+operand+'<span class="math-parenthesis math-round-parenthesis">)</span>'),"right"===assoc?'<span class="math-operator math-unary-operator math-lefthand-unary-operator">'+(0,utils_string.ih)(this.op)+"</span>"+operand:operand+'<span class="math-operator math-unary-operator math-righthand-unary-operator">'+(0,utils_string.ih)(this.op)+"</span>"}if(2===args.length){var lhs=args[0].toHTML(options),rhs=args[1].toHTML(options);return parens[0]&&(lhs='<span class="math-parenthesis math-round-parenthesis">(</span>'+lhs+'<span class="math-parenthesis math-round-parenthesis">)</span>'),parens[1]&&(rhs='<span class="math-parenthesis math-round-parenthesis">(</span>'+rhs+'<span class="math-parenthesis math-round-parenthesis">)</span>'),this.implicit&&"OperatorNode:multiply"===this.getIdentifier()&&"hide"===implicit?lhs+'<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>'+rhs:lhs+'<span class="math-operator math-binary-operator math-explicit-binary-operator">'+(0,utils_string.ih)(this.op)+"</span>"+rhs}var stringifiedArgs=args.map((function(arg,index){return arg=arg.toHTML(options),parens[index]&&(arg='<span class="math-parenthesis math-round-parenthesis">(</span>'+arg+'<span class="math-parenthesis math-round-parenthesis">)</span>'),arg}));return args.length>2&&("OperatorNode:add"===this.getIdentifier()||"OperatorNode:multiply"===this.getIdentifier())?this.implicit&&"OperatorNode:multiply"===this.getIdentifier()&&"hide"===implicit?stringifiedArgs.join('<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>'):stringifiedArgs.join('<span class="math-operator math-binary-operator math-explicit-binary-operator">'+(0,utils_string.ih)(this.op)+"</span>"):'<span class="math-function">'+(0,utils_string.ih)(this.fn)+'</span><span class="math-paranthesis math-round-parenthesis">(</span>'+stringifiedArgs.join('<span class="math-separator">,</span>')+'<span class="math-paranthesis math-round-parenthesis">)</span>'}_toTex(options){var parenthesis=options&&options.parenthesis?options.parenthesis:"keep",implicit=options&&options.implicit?options.implicit:"hide",args=this.args,parens=calculateNecessaryParentheses(this,parenthesis,implicit,args,!0),op=latexOperators[this.fn];if(op=void 0===op?this.op:op,1===args.length){var assoc=getAssociativity(this,parenthesis),operand=args[0].toTex(options);return parens[0]&&(operand="\\left(".concat(operand,"\\right)")),"right"===assoc?op+operand:operand+op}if(2===args.length){var lhs=args[0],lhsTex=lhs.toTex(options);parens[0]&&(lhsTex="\\left(".concat(lhsTex,"\\right)"));var lhsIdentifier,rhsTex=args[1].toTex(options);switch(parens[1]&&(rhsTex="\\left(".concat(rhsTex,"\\right)")),lhsIdentifier="keep"===parenthesis?lhs.getIdentifier():lhs.getContent().getIdentifier(),this.getIdentifier()){case"OperatorNode:divide":return op+"{"+lhsTex+"}{"+rhsTex+"}";case"OperatorNode:pow":switch(lhsTex="{"+lhsTex+"}",rhsTex="{"+rhsTex+"}",lhsIdentifier){case"ConditionalNode":case"OperatorNode:divide":lhsTex="\\left(".concat(lhsTex,"\\right)")}break;case"OperatorNode:multiply":if(this.implicit&&"hide"===implicit)return lhsTex+"~"+rhsTex}return lhsTex+op+rhsTex}if(args.length>2&&("OperatorNode:add"===this.getIdentifier()||"OperatorNode:multiply"===this.getIdentifier())){var texifiedArgs=args.map((function(arg,index){return arg=arg.toTex(options),parens[index]&&(arg="\\left(".concat(arg,"\\right)")),arg}));return"OperatorNode:multiply"===this.getIdentifier()&&this.implicit&&"hide"===implicit?texifiedArgs.join("~"):texifiedArgs.join(op)}return"\\mathrm{"+this.fn+"}\\left("+args.map((function(arg){return arg.toTex(options)})).join(",")+"\\right)"}getIdentifier(){return this.type+":"+this.fn}}return(0,defineProperty.A)(OperatorNode,"name","OperatorNode"),OperatorNode}),{isClass:!0,isNode:!0}),ParenthesisNode_dependencies=["Node"],createParenthesisNode=(0,factory.P9)("ParenthesisNode",ParenthesisNode_dependencies,(_ref=>{var{Node:Node}=_ref;class ParenthesisNode extends Node{constructor(content){if(super(),!(0,is.Ll)(content))throw new TypeError('Node expected for parameter "content"');this.content=content}get type(){return"ParenthesisNode"}get isParenthesisNode(){return!0}_compile(math,argNames){return this.content._compile(math,argNames)}getContent(){return this.content.getContent()}forEach(callback){callback(this.content,"content",this)}map(callback){var content=callback(this.content,"content",this);return new ParenthesisNode(content)}clone(){return new ParenthesisNode(this.content)}_toString(options){return!options||options&&!options.parenthesis||options&&"keep"===options.parenthesis?"("+this.content.toString(options)+")":this.content.toString(options)}toJSON(){return{mathjs:"ParenthesisNode",content:this.content}}static fromJSON(json){return new ParenthesisNode(json.content)}_toHTML(options){return!options||options&&!options.parenthesis||options&&"keep"===options.parenthesis?'<span class="math-parenthesis math-round-parenthesis">(</span>'+this.content.toHTML(options)+'<span class="math-parenthesis math-round-parenthesis">)</span>':this.content.toHTML(options)}_toTex(options){return!options||options&&!options.parenthesis||options&&"keep"===options.parenthesis?"\\left(".concat(this.content.toTex(options),"\\right)"):this.content.toTex(options)}}return(0,defineProperty.A)(ParenthesisNode,"name","ParenthesisNode"),ParenthesisNode}),{isClass:!0,isNode:!0}),RangeNode_dependencies=["Node"],createRangeNode=(0,factory.P9)("RangeNode",RangeNode_dependencies,(_ref=>{var{Node:Node}=_ref;function calculateNecessaryParentheses(node,parenthesis,implicit){var precedence=getPrecedence(node,parenthesis,implicit),parens={},startPrecedence=getPrecedence(node.start,parenthesis,implicit);if(parens.start=null!==startPrecedence&&startPrecedence<=precedence||"all"===parenthesis,node.step){var stepPrecedence=getPrecedence(node.step,parenthesis,implicit);parens.step=null!==stepPrecedence&&stepPrecedence<=precedence||"all"===parenthesis}var endPrecedence=getPrecedence(node.end,parenthesis,implicit);return parens.end=null!==endPrecedence&&endPrecedence<=precedence||"all"===parenthesis,parens}class RangeNode extends Node{constructor(start,end,step){if(super(),!(0,is.Ll)(start))throw new TypeError("Node expected");if(!(0,is.Ll)(end))throw new TypeError("Node expected");if(step&&!(0,is.Ll)(step))throw new TypeError("Node expected");if(arguments.length>3)throw new Error("Too many arguments");this.start=start,this.end=end,this.step=step||null}get type(){return"RangeNode"}get isRangeNode(){return!0}needsEnd(){return this.filter((function(node){return(0,is.li)(node)&&"end"===node.name})).length>0}_compile(math,argNames){var range=math.range,evalStart=this.start._compile(math,argNames),evalEnd=this.end._compile(math,argNames);if(this.step){var evalStep=this.step._compile(math,argNames);return function evalRangeNode(scope,args,context){return range(evalStart(scope,args,context),evalEnd(scope,args,context),evalStep(scope,args,context))}}return function evalRangeNode(scope,args,context){return range(evalStart(scope,args,context),evalEnd(scope,args,context))}}forEach(callback){callback(this.start,"start",this),callback(this.end,"end",this),this.step&&callback(this.step,"step",this)}map(callback){return new RangeNode(this._ifNode(callback(this.start,"start",this)),this._ifNode(callback(this.end,"end",this)),this.step&&this._ifNode(callback(this.step,"step",this)))}clone(){return new RangeNode(this.start,this.end,this.step&&this.step)}_toString(options){var str,parens=calculateNecessaryParentheses(this,options&&options.parenthesis?options.parenthesis:"keep",options&&options.implicit),start=this.start.toString(options);if(parens.start&&(start="("+start+")"),str=start,this.step){var step=this.step.toString(options);parens.step&&(step="("+step+")"),str+=":"+step}var end=this.end.toString(options);return parens.end&&(end="("+end+")"),str+=":"+end}toJSON(){return{mathjs:"RangeNode",start:this.start,end:this.end,step:this.step}}static fromJSON(json){return new RangeNode(json.start,json.end,json.step)}_toHTML(options){var str,parens=calculateNecessaryParentheses(this,options&&options.parenthesis?options.parenthesis:"keep",options&&options.implicit),start=this.start.toHTML(options);if(parens.start&&(start='<span class="math-parenthesis math-round-parenthesis">(</span>'+start+'<span class="math-parenthesis math-round-parenthesis">)</span>'),str=start,this.step){var step=this.step.toHTML(options);parens.step&&(step='<span class="math-parenthesis math-round-parenthesis">(</span>'+step+'<span class="math-parenthesis math-round-parenthesis">)</span>'),str+='<span class="math-operator math-range-operator">:</span>'+step}var end=this.end.toHTML(options);return parens.end&&(end='<span class="math-parenthesis math-round-parenthesis">(</span>'+end+'<span class="math-parenthesis math-round-parenthesis">)</span>'),str+='<span class="math-operator math-range-operator">:</span>'+end}_toTex(options){var parens=calculateNecessaryParentheses(this,options&&options.parenthesis?options.parenthesis:"keep",options&&options.implicit),str=this.start.toTex(options);if(parens.start&&(str="\\left(".concat(str,"\\right)")),this.step){var step=this.step.toTex(options);parens.step&&(step="\\left(".concat(step,"\\right)")),str+=":"+step}var end=this.end.toTex(options);return parens.end&&(end="\\left(".concat(end,"\\right)")),str+=":"+end}}return(0,defineProperty.A)(RangeNode,"name","RangeNode"),RangeNode}),{isClass:!0,isNode:!0}),RelationalNode_dependencies=["Node"],createRelationalNode=(0,factory.P9)("RelationalNode",RelationalNode_dependencies,(_ref=>{var{Node:Node}=_ref,operatorMap={equal:"==",unequal:"!=",smaller:"<",larger:">",smallerEq:"<=",largerEq:">="};class RelationalNode extends Node{constructor(conditionals,params){if(super(),!Array.isArray(conditionals))throw new TypeError("Parameter conditionals must be an array");if(!Array.isArray(params))throw new TypeError("Parameter params must be an array");if(conditionals.length!==params.length-1)throw new TypeError("Parameter params must contain exactly one more element than parameter conditionals");this.conditionals=conditionals,this.params=params}get type(){return"RelationalNode"}get isRelationalNode(){return!0}_compile(math,argNames){var self=this,compiled=this.params.map((p=>p._compile(math,argNames)));return function evalRelationalNode(scope,args,context){for(var evalLhs,evalRhs=compiled[0](scope,args,context),i=0;i<self.conditionals.length;i++){if(evalLhs=evalRhs,evalRhs=compiled[i+1](scope,args,context),!(0,customs.HU)(math,self.conditionals[i])(evalLhs,evalRhs))return!1}return!0}}forEach(callback){this.params.forEach(((n,i)=>callback(n,"params["+i+"]",this)),this)}map(callback){return new RelationalNode(this.conditionals.slice(),this.params.map(((n,i)=>this._ifNode(callback(n,"params["+i+"]",this))),this))}clone(){return new RelationalNode(this.conditionals,this.params)}_toString(options){for(var parenthesis=options&&options.parenthesis?options.parenthesis:"keep",precedence=getPrecedence(this,parenthesis,options&&options.implicit),paramStrings=this.params.map((function(p,index){var paramPrecedence=getPrecedence(p,parenthesis,options&&options.implicit);return"all"===parenthesis||null!==paramPrecedence&&paramPrecedence<=precedence?"("+p.toString(options)+")":p.toString(options)})),ret=paramStrings[0],i=0;i<this.conditionals.length;i++)ret+=" "+operatorMap[this.conditionals[i]],ret+=" "+paramStrings[i+1];return ret}toJSON(){return{mathjs:"RelationalNode",conditionals:this.conditionals,params:this.params}}static fromJSON(json){return new RelationalNode(json.conditionals,json.params)}_toHTML(options){for(var parenthesis=options&&options.parenthesis?options.parenthesis:"keep",precedence=getPrecedence(this,parenthesis,options&&options.implicit),paramStrings=this.params.map((function(p,index){var paramPrecedence=getPrecedence(p,parenthesis,options&&options.implicit);return"all"===parenthesis||null!==paramPrecedence&&paramPrecedence<=precedence?'<span class="math-parenthesis math-round-parenthesis">(</span>'+p.toHTML(options)+'<span class="math-parenthesis math-round-parenthesis">)</span>':p.toHTML(options)})),ret=paramStrings[0],i=0;i<this.conditionals.length;i++)ret+='<span class="math-operator math-binary-operator math-explicit-binary-operator">'+(0,utils_string.ih)(operatorMap[this.conditionals[i]])+"</span>"+paramStrings[i+1];return ret}_toTex(options){for(var parenthesis=options&&options.parenthesis?options.parenthesis:"keep",precedence=getPrecedence(this,parenthesis,options&&options.implicit),paramStrings=this.params.map((function(p,index){var paramPrecedence=getPrecedence(p,parenthesis,options&&options.implicit);return"all"===parenthesis||null!==paramPrecedence&&paramPrecedence<=precedence?"\\left("+p.toTex(options)+"\right)":p.toTex(options)})),ret=paramStrings[0],i=0;i<this.conditionals.length;i++)ret+=latexOperators[this.conditionals[i]]+paramStrings[i+1];return ret}}return(0,defineProperty.A)(RelationalNode,"name","RelationalNode"),RelationalNode}),{isClass:!0,isNode:!0}),SymbolNode_dependencies=["math","?Unit","Node"],createSymbolNode=(0,factory.P9)("SymbolNode",SymbolNode_dependencies,(_ref=>{var{math:math,Unit:Unit,Node:Node}=_ref;function isValuelessUnit(name){return!!Unit&&Unit.isValuelessUnit(name)}class SymbolNode extends Node{constructor(name){if(super(),"string"!=typeof name)throw new TypeError('String expected for parameter "name"');this.name=name}get type(){return"SymbolNode"}get isSymbolNode(){return!0}_compile(math,argNames){var name=this.name;if(!0===argNames[name])return function(scope,args,context){return(0,customs.HU)(args,name)};if(name in math)return function(scope,args,context){return scope.has(name)?scope.get(name):(0,customs.HU)(math,name)};var isUnit=isValuelessUnit(name);return function(scope,args,context){return scope.has(name)?scope.get(name):isUnit?new Unit(null,name):SymbolNode.onUndefinedSymbol(name)}}forEach(callback){}map(callback){return this.clone()}static onUndefinedSymbol(name){throw new Error("Undefined symbol "+name)}clone(){return new SymbolNode(this.name)}_toString(options){return this.name}_toHTML(options){var name=(0,utils_string.ih)(this.name);return"true"===name||"false"===name?'<span class="math-symbol math-boolean">'+name+"</span>":"i"===name?'<span class="math-symbol math-imaginary-symbol">'+name+"</span>":"Infinity"===name?'<span class="math-symbol math-infinity-symbol">'+name+"</span>":"NaN"===name?'<span class="math-symbol math-nan-symbol">'+name+"</span>":"null"===name?'<span class="math-symbol math-null-symbol">'+name+"</span>":"undefined"===name?'<span class="math-symbol math-undefined-symbol">'+name+"</span>":'<span class="math-symbol">'+name+"</span>"}toJSON(){return{mathjs:"SymbolNode",name:this.name}}static fromJSON(json){return new SymbolNode(json.name)}_toTex(options){var isUnit=!1;void 0===math[this.name]&&isValuelessUnit(this.name)&&(isUnit=!0);var symbol=toSymbol(this.name,isUnit);return"\\"===symbol[0]?symbol:" "+symbol}}return SymbolNode}),{isClass:!0,isNode:!0}),FunctionNode_dependencies=["math","Node","SymbolNode"],createFunctionNode=(0,factory.P9)("FunctionNode",FunctionNode_dependencies,(_ref=>{var _FunctionNode,{math:math,Node:Node,SymbolNode:SymbolNode}=_ref,strin=entity=>(0,utils_string.GP)(entity,{truncate:78});function expandTemplate(template,node,options){for(var match,latex="",regex=/\$(?:\{([a-z_][a-z_0-9]*)(?:\[([0-9]+)\])?\}|\$)/gi,inputPos=0;null!==(match=regex.exec(template));)if(latex+=template.substring(inputPos,match.index),inputPos=match.index,"$$"===match[0])latex+="$",inputPos++;else{inputPos+=match[0].length;var property=node[match[1]];if(!property)throw new ReferenceError("Template: Property "+match[1]+" does not exist.");if(void 0===match[2])switch(typeof property){case"string":latex+=property;break;case"object":if((0,is.Ll)(property))latex+=property.toTex(options);else{if(!Array.isArray(property))throw new TypeError("Template: "+match[1]+" has to be a Node, String or array of Nodes");latex+=property.map((function(arg,index){if((0,is.Ll)(arg))return arg.toTex(options);throw new TypeError("Template: "+match[1]+"["+index+"] is not a Node.")})).join(",")}break;default:throw new TypeError("Template: "+match[1]+" has to be a Node, String or array of Nodes")}else{if(!(0,is.Ll)(property[match[2]]&&property[match[2]]))throw new TypeError("Template: "+match[1]+"["+match[2]+"] is not a Node.");latex+=property[match[2]].toTex(options)}}return latex+=template.slice(inputPos)}class FunctionNode extends Node{constructor(fn,args){if(super(),"string"==typeof fn&&(fn=new SymbolNode(fn)),!(0,is.Ll)(fn))throw new TypeError('Node expected as parameter "fn"');if(!Array.isArray(args)||!args.every(is.Ll))throw new TypeError('Array containing Nodes expected for parameter "args"');this.fn=fn,this.args=args||[]}get name(){return this.fn.name||""}get type(){return"FunctionNode"}get isFunctionNode(){return!0}_compile(math,argNames){var evalArgs=this.args.map((arg=>arg._compile(math,argNames)));if(!(0,is.li)(this.fn)){if((0,is.AS)(this.fn)&&(0,is.$I)(this.fn.index)&&this.fn.index.isObjectProperty()){var evalObject=this.fn.object._compile(math,argNames),prop=this.fn.index.getObjectProperty(),_rawArgs2=this.args;return function evalFunctionNode(scope,args,context){var object=evalObject(scope,args,context),fn=(0,customs.z_)(object,prop);if(null!=fn&&fn.rawArgs)return fn(_rawArgs2,math,createSubScope(scope,args));var values=evalArgs.map((evalArg=>evalArg(scope,args,context)));return fn.apply(object,values)}}var fnExpr=this.fn.toString(),evalFn=this.fn._compile(math,argNames),_rawArgs3=this.args;return function evalFunctionNode(scope,args,context){var fn=evalFn(scope,args,context);if("function"!=typeof fn)throw new TypeError("Expression '".concat(fnExpr,"' did not evaluate to a function; value is:")+"\n  ".concat(strin(fn)));if(fn.rawArgs)return fn(_rawArgs3,math,createSubScope(scope,args));var values=evalArgs.map((evalArg=>evalArg(scope,args,context)));return fn.apply(fn,values)}}var _name=this.fn.name;if(argNames[_name]){var _rawArgs=this.args;return function evalFunctionNode(scope,args,context){var fn=(0,customs.HU)(args,_name);if("function"!=typeof fn)throw new TypeError("Argument '".concat(_name,"' was not a function; received: ").concat(strin(fn)));if(fn.rawArgs)return fn(_rawArgs,math,createSubScope(scope,args));var values=evalArgs.map((evalArg=>evalArg(scope,args,context)));return fn.apply(fn,values)}}var fn=_name in math?(0,customs.HU)(math,_name):void 0,isRaw="function"==typeof fn&&!0===fn.rawArgs,resolveFn=scope=>{var value;if(scope.has(_name))value=scope.get(_name);else{if(!(_name in math))return FunctionNode.onUndefinedFunction(_name);value=(0,customs.HU)(math,_name)}if("function"==typeof value)return value;throw new TypeError("'".concat(_name,"' is not a function; its value is:\n  ").concat(strin(value)))};if(isRaw){var rawArgs=this.args;return function evalFunctionNode(scope,args,context){var fn=resolveFn(scope);return!0===fn.rawArgs?fn(rawArgs,math,createSubScope(scope,args)):fn(...evalArgs.map((evalArg=>evalArg(scope,args,context))))}}switch(evalArgs.length){case 0:return function evalFunctionNode(scope,args,context){return resolveFn(scope)()};case 1:return function evalFunctionNode(scope,args,context){return resolveFn(scope)((0,evalArgs[0])(scope,args,context))};case 2:return function evalFunctionNode(scope,args,context){var fn=resolveFn(scope),evalArg0=evalArgs[0],evalArg1=evalArgs[1];return fn(evalArg0(scope,args,context),evalArg1(scope,args,context))};default:return function evalFunctionNode(scope,args,context){return resolveFn(scope)(...evalArgs.map((evalArg=>evalArg(scope,args,context))))}}}forEach(callback){callback(this.fn,"fn",this);for(var i=0;i<this.args.length;i++)callback(this.args[i],"args["+i+"]",this)}map(callback){for(var fn=this._ifNode(callback(this.fn,"fn",this)),args=[],i=0;i<this.args.length;i++)args[i]=this._ifNode(callback(this.args[i],"args["+i+"]",this));return new FunctionNode(fn,args)}clone(){return new FunctionNode(this.fn,this.args.slice(0))}toString(options){var customString,name=this.fn.toString(options);return options&&"object"==typeof options.handler&&(0,object.mQ)(options.handler,name)&&(customString=options.handler[name](this,options)),void 0!==customString?customString:super.toString(options)}_toString(options){var args=this.args.map((function(arg){return arg.toString(options)}));return((0,is.m2)(this.fn)?"("+this.fn.toString(options)+")":this.fn.toString(options))+"("+args.join(", ")+")"}toJSON(){return{mathjs:"FunctionNode",fn:this.fn,args:this.args}}_toHTML(options){var args=this.args.map((function(arg){return arg.toHTML(options)}));return'<span class="math-function">'+(0,utils_string.ih)(this.fn)+'</span><span class="math-paranthesis math-round-parenthesis">(</span>'+args.join('<span class="math-separator">,</span>')+'<span class="math-paranthesis math-round-parenthesis">)</span>'}toTex(options){var customTex;return options&&"object"==typeof options.handler&&(0,object.mQ)(options.handler,this.name)&&(customTex=options.handler[this.name](this,options)),void 0!==customTex?customTex:super.toTex(options)}_toTex(options){var latexConverter,customToTex,args=this.args.map((function(arg){return arg.toTex(options)}));switch(latexFunctions[this.name]&&(latexConverter=latexFunctions[this.name]),!math[this.name]||"function"!=typeof math[this.name].toTex&&"object"!=typeof math[this.name].toTex&&"string"!=typeof math[this.name].toTex||(latexConverter=math[this.name].toTex),typeof latexConverter){case"function":customToTex=latexConverter(this,options);break;case"string":customToTex=expandTemplate(latexConverter,this,options);break;case"object":switch(typeof latexConverter[args.length]){case"function":customToTex=latexConverter[args.length](this,options);break;case"string":customToTex=expandTemplate(latexConverter[args.length],this,options)}}return void 0!==customToTex?customToTex:expandTemplate("\\mathrm{${name}}\\left(${args}\\right)",this,options)}getIdentifier(){return this.type+":"+this.name}}return _FunctionNode=FunctionNode,(0,defineProperty.A)(FunctionNode,"name","FunctionNode"),(0,defineProperty.A)(FunctionNode,"onUndefinedFunction",(function(name){throw new Error("Undefined function "+name)})),(0,defineProperty.A)(FunctionNode,"fromJSON",(function(json){return new _FunctionNode(json.fn,json.args)})),FunctionNode}),{isClass:!0,isNode:!0}),esm_extends=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js"),collection=__webpack_require__("./node_modules/mathjs/lib/esm/utils/collection.js"),utils_number=__webpack_require__("./node_modules/mathjs/lib/esm/utils/number.js"),parse_dependencies=["typed","numeric","config","AccessorNode","ArrayNode","AssignmentNode","BlockNode","ConditionalNode","ConstantNode","FunctionAssignmentNode","FunctionNode","IndexNode","ObjectNode","OperatorNode","ParenthesisNode","RangeNode","RelationalNode","SymbolNode"],createParse=(0,factory.P9)("parse",parse_dependencies,(_ref=>{var{typed:typed,numeric:numeric,config:config,AccessorNode:AccessorNode,ArrayNode:ArrayNode,AssignmentNode:AssignmentNode,BlockNode:BlockNode,ConditionalNode:ConditionalNode,ConstantNode:ConstantNode,FunctionAssignmentNode:FunctionAssignmentNode,FunctionNode:FunctionNode,IndexNode:IndexNode,ObjectNode:ObjectNode,OperatorNode:OperatorNode,ParenthesisNode:ParenthesisNode,RangeNode:RangeNode,RelationalNode:RelationalNode,SymbolNode:SymbolNode}=_ref,parse=typed("parse",{string:function string(expression){return parseStart(expression,{})},"Array | Matrix":function Array__Matrix(expressions){return parseMultiple(expressions,{})},"string, Object":function string_Object(expression,options){return parseStart(expression,void 0!==options.nodes?options.nodes:{})},"Array | Matrix, Object":parseMultiple});function parseMultiple(expressions){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},extraNodes=void 0!==options.nodes?options.nodes:{};return(0,collection.Bl)(expressions,(function(elem){if("string"!=typeof elem)throw new TypeError("String expected");return parseStart(elem,extraNodes)}))}var TOKENTYPE={NULL:0,DELIMITER:1,NUMBER:2,SYMBOL:3,UNKNOWN:4},DELIMITERS={",":!0,"(":!0,")":!0,"[":!0,"]":!0,"{":!0,"}":!0,'"':!0,"'":!0,";":!0,"+":!0,"-":!0,"*":!0,".*":!0,"/":!0,"./":!0,"%":!0,"^":!0,".^":!0,"~":!0,"!":!0,"&":!0,"|":!0,"^|":!0,"=":!0,":":!0,"?":!0,"==":!0,"!=":!0,"<":!0,">":!0,"<=":!0,">=":!0,"<<":!0,">>":!0,">>>":!0},NAMED_DELIMITERS={mod:!0,to:!0,in:!0,and:!0,xor:!0,or:!0,not:!0},CONSTANTS={true:!0,false:!1,null:null,undefined:void 0},NUMERIC_CONSTANTS=["NaN","Infinity"],ESCAPE_CHARACTERS={'"':'"',"'":"'","\\":"\\","/":"/",b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"};function currentString(state,length){return state.expression.substr(state.index,length)}function currentCharacter(state){return currentString(state,1)}function next(state){state.index++}function prevCharacter(state){return state.expression.charAt(state.index-1)}function nextCharacter(state){return state.expression.charAt(state.index+1)}function getToken(state){for(state.tokenType=TOKENTYPE.NULL,state.token="",state.comment="";;){if("#"===currentCharacter(state))for(;"\n"!==currentCharacter(state)&&""!==currentCharacter(state);)state.comment+=currentCharacter(state),next(state);if(!parse.isWhitespace(currentCharacter(state),state.nestingLevel))break;next(state)}if(""!==currentCharacter(state)){if("\n"===currentCharacter(state)&&!state.nestingLevel)return state.tokenType=TOKENTYPE.DELIMITER,state.token=currentCharacter(state),void next(state);var c1=currentCharacter(state),c2=currentString(state,2),c3=currentString(state,3);if(3===c3.length&&DELIMITERS[c3])return state.tokenType=TOKENTYPE.DELIMITER,state.token=c3,next(state),next(state),void next(state);if(2===c2.length&&DELIMITERS[c2])return state.tokenType=TOKENTYPE.DELIMITER,state.token=c2,next(state),void next(state);if(DELIMITERS[c1])return state.tokenType=TOKENTYPE.DELIMITER,state.token=c1,void next(state);if(parse.isDigitDot(c1)){state.tokenType=TOKENTYPE.NUMBER;var _c=currentString(state,2);if("0b"===_c||"0o"===_c||"0x"===_c){for(state.token+=currentCharacter(state),next(state),state.token+=currentCharacter(state),next(state);parse.isHexDigit(currentCharacter(state));)state.token+=currentCharacter(state),next(state);if("."===currentCharacter(state))for(state.token+=".",next(state);parse.isHexDigit(currentCharacter(state));)state.token+=currentCharacter(state),next(state);else if("i"===currentCharacter(state))for(state.token+="i",next(state);parse.isDigit(currentCharacter(state));)state.token+=currentCharacter(state),next(state);return}if("."===currentCharacter(state)){if(state.token+=currentCharacter(state),next(state),!parse.isDigit(currentCharacter(state)))return void(state.tokenType=TOKENTYPE.DELIMITER)}else{for(;parse.isDigit(currentCharacter(state));)state.token+=currentCharacter(state),next(state);parse.isDecimalMark(currentCharacter(state),nextCharacter(state))&&(state.token+=currentCharacter(state),next(state))}for(;parse.isDigit(currentCharacter(state));)state.token+=currentCharacter(state),next(state);if("E"===currentCharacter(state)||"e"===currentCharacter(state))if(parse.isDigit(nextCharacter(state))||"-"===nextCharacter(state)||"+"===nextCharacter(state)){if(state.token+=currentCharacter(state),next(state),"+"!==currentCharacter(state)&&"-"!==currentCharacter(state)||(state.token+=currentCharacter(state),next(state)),!parse.isDigit(currentCharacter(state)))throw createSyntaxError(state,'Digit expected, got "'+currentCharacter(state)+'"');for(;parse.isDigit(currentCharacter(state));)state.token+=currentCharacter(state),next(state);if(parse.isDecimalMark(currentCharacter(state),nextCharacter(state)))throw createSyntaxError(state,'Digit expected, got "'+currentCharacter(state)+'"')}else if("."===nextCharacter(state))throw next(state),createSyntaxError(state,'Digit expected, got "'+currentCharacter(state)+'"')}else{if(!parse.isAlpha(currentCharacter(state),prevCharacter(state),nextCharacter(state))){for(state.tokenType=TOKENTYPE.UNKNOWN;""!==currentCharacter(state);)state.token+=currentCharacter(state),next(state);throw createSyntaxError(state,'Syntax error in part "'+state.token+'"')}for(;parse.isAlpha(currentCharacter(state),prevCharacter(state),nextCharacter(state))||parse.isDigit(currentCharacter(state));)state.token+=currentCharacter(state),next(state);(0,object.mQ)(NAMED_DELIMITERS,state.token)?state.tokenType=TOKENTYPE.DELIMITER:state.tokenType=TOKENTYPE.SYMBOL}}else state.tokenType=TOKENTYPE.DELIMITER}function getTokenSkipNewline(state){do{getToken(state)}while("\n"===state.token)}function openParams(state){state.nestingLevel++}function closeParams(state){state.nestingLevel--}function parseStart(expression,extraNodes){var state=function initialState(){return{extraNodes:{},expression:"",comment:"",index:0,token:"",tokenType:TOKENTYPE.NULL,nestingLevel:0,conditionalLevel:null}}();(0,esm_extends.A)(state,{expression:expression,extraNodes:extraNodes}),getToken(state);var node=function parseBlock(state){var node,visible,blocks=[];""!==state.token&&"\n"!==state.token&&";"!==state.token&&(node=parseAssignment(state),state.comment&&(node.comment=state.comment));for(;"\n"===state.token||";"===state.token;)0===blocks.length&&node&&(visible=";"!==state.token,blocks.push({node:node,visible:visible})),getToken(state),"\n"!==state.token&&";"!==state.token&&""!==state.token&&(node=parseAssignment(state),state.comment&&(node.comment=state.comment),visible=";"!==state.token,blocks.push({node:node,visible:visible}));return blocks.length>0?new BlockNode(blocks):(node||(node=new ConstantNode(void 0),state.comment&&(node.comment=state.comment)),node)}(state);if(""!==state.token)throw state.tokenType===TOKENTYPE.DELIMITER?createError(state,"Unexpected operator "+state.token):createSyntaxError(state,'Unexpected part "'+state.token+'"');return node}function parseAssignment(state){var name,args,value,valid,node=function parseConditional(state){var node=function parseLogicalOr(state){var node=parseLogicalXor(state);for(;"or"===state.token;)getTokenSkipNewline(state),node=new OperatorNode("or","or",[node,parseLogicalXor(state)]);return node}(state);for(;"?"===state.token;){var prev=state.conditionalLevel;state.conditionalLevel=state.nestingLevel,getTokenSkipNewline(state);var condition=node,trueExpr=parseAssignment(state);if(":"!==state.token)throw createSyntaxError(state,"False part of conditional expression expected");state.conditionalLevel=null,getTokenSkipNewline(state);var falseExpr=parseAssignment(state);node=new ConditionalNode(condition,trueExpr,falseExpr),state.conditionalLevel=prev}return node}(state);if("="===state.token){if((0,is.li)(node))return name=node.name,getTokenSkipNewline(state),value=parseAssignment(state),new AssignmentNode(new SymbolNode(name),value);if((0,is.AS)(node))return getTokenSkipNewline(state),value=parseAssignment(state),new AssignmentNode(node.object,node.index,value);if((0,is.Px)(node)&&(0,is.li)(node.fn)&&(valid=!0,args=[],name=node.name,node.args.forEach((function(arg,index){(0,is.li)(arg)?args[index]=arg.name:valid=!1})),valid))return getTokenSkipNewline(state),value=parseAssignment(state),new FunctionAssignmentNode(name,args,value);throw createSyntaxError(state,"Invalid left hand side of assignment operator =")}return node}function parseLogicalXor(state){for(var node=parseLogicalAnd(state);"xor"===state.token;)getTokenSkipNewline(state),node=new OperatorNode("xor","xor",[node,parseLogicalAnd(state)]);return node}function parseLogicalAnd(state){for(var node=parseBitwiseOr(state);"and"===state.token;)getTokenSkipNewline(state),node=new OperatorNode("and","and",[node,parseBitwiseOr(state)]);return node}function parseBitwiseOr(state){for(var node=parseBitwiseXor(state);"|"===state.token;)getTokenSkipNewline(state),node=new OperatorNode("|","bitOr",[node,parseBitwiseXor(state)]);return node}function parseBitwiseXor(state){for(var node=parseBitwiseAnd(state);"^|"===state.token;)getTokenSkipNewline(state),node=new OperatorNode("^|","bitXor",[node,parseBitwiseAnd(state)]);return node}function parseBitwiseAnd(state){for(var node=parseRelational(state);"&"===state.token;)getTokenSkipNewline(state),node=new OperatorNode("&","bitAnd",[node,parseRelational(state)]);return node}function parseRelational(state){for(var params=[parseShift(state)],conditionals=[],operators={"==":"equal","!=":"unequal","<":"smaller",">":"larger","<=":"smallerEq",">=":"largerEq"};(0,object.mQ)(operators,state.token);){var cond={name:state.token,fn:operators[state.token]};conditionals.push(cond),getTokenSkipNewline(state),params.push(parseShift(state))}return 1===params.length?params[0]:2===params.length?new OperatorNode(conditionals[0].name,conditionals[0].fn,params):new RelationalNode(conditionals.map((c=>c.fn)),params)}function parseShift(state){var node,name,fn,params;node=parseConversion(state);for(var operators={"<<":"leftShift",">>":"rightArithShift",">>>":"rightLogShift"};(0,object.mQ)(operators,state.token);)fn=operators[name=state.token],getTokenSkipNewline(state),params=[node,parseConversion(state)],node=new OperatorNode(name,fn,params);return node}function parseConversion(state){var node,name,fn,params;node=parseRange(state);for(var operators={to:"to",in:"to"};(0,object.mQ)(operators,state.token);)fn=operators[name=state.token],getTokenSkipNewline(state),"in"===name&&""===state.token?node=new OperatorNode("*","multiply",[node,new SymbolNode("in")],!0):(params=[node,parseRange(state)],node=new OperatorNode(name,fn,params));return node}function parseRange(state){var node,params=[];if(node=":"===state.token?new ConstantNode(1):parseAddSubtract(state),":"===state.token&&state.conditionalLevel!==state.nestingLevel){for(params.push(node);":"===state.token&&params.length<3;)getTokenSkipNewline(state),")"===state.token||"]"===state.token||","===state.token||""===state.token?params.push(new SymbolNode("end")):params.push(parseAddSubtract(state));node=3===params.length?new RangeNode(params[0],params[2],params[1]):new RangeNode(params[0],params[1])}return node}function parseAddSubtract(state){var node,name,fn,params;node=parseMultiplyDivide(state);for(var operators={"+":"add","-":"subtract"};(0,object.mQ)(operators,state.token);){fn=operators[name=state.token],getTokenSkipNewline(state);var rightNode=parseMultiplyDivide(state);params=rightNode.isPercentage?[node,new OperatorNode("*","multiply",[node,rightNode])]:[node,rightNode],node=new OperatorNode(name,fn,params)}return node}function parseMultiplyDivide(state){var node,last,name,fn;last=node=parseImplicitMultiplication(state);for(var operators={"*":"multiply",".*":"dotMultiply","/":"divide","./":"dotDivide"};(0,object.mQ)(operators,state.token);)fn=operators[name=state.token],getTokenSkipNewline(state),last=parseImplicitMultiplication(state),node=new OperatorNode(name,fn,[node,last]);return node}function parseImplicitMultiplication(state){var node,last;for(last=node=parseRule2(state);state.tokenType===TOKENTYPE.SYMBOL||"in"===state.token&&(0,is.BA)(node)||"in"===state.token&&(0,is.$$)(node)&&"unaryMinus"===node.fn&&(0,is.BA)(node.args[0])||!(state.tokenType!==TOKENTYPE.NUMBER||(0,is.BA)(last)||(0,is.$$)(last)&&"!"!==last.op)||"("===state.token;)last=parseRule2(state),node=new OperatorNode("*","multiply",[node,last],!0);return node}function parseRule2(state){for(var node=parseModulusPercentage(state),last=node,tokenStates=[];"/"===state.token&&(0,is.jW)(last);){if(tokenStates.push((0,esm_extends.A)({},state)),getTokenSkipNewline(state),state.tokenType!==TOKENTYPE.NUMBER){(0,esm_extends.A)(state,tokenStates.pop());break}if(tokenStates.push((0,esm_extends.A)({},state)),getTokenSkipNewline(state),state.tokenType!==TOKENTYPE.SYMBOL&&"("!==state.token){tokenStates.pop(),(0,esm_extends.A)(state,tokenStates.pop());break}(0,esm_extends.A)(state,tokenStates.pop()),tokenStates.pop(),last=parseModulusPercentage(state),node=new OperatorNode("/","divide",[node,last])}return node}function parseModulusPercentage(state){var node,name,fn,params;node=parseUnary(state);for(var operators={"%":"mod",mod:"mod"};(0,object.mQ)(operators,state.token);)fn=operators[name=state.token],getTokenSkipNewline(state),"%"===name&&state.tokenType===TOKENTYPE.DELIMITER&&"("!==state.token?node=new OperatorNode("/","divide",[node,new ConstantNode(100)],!1,!0):(params=[node,parseUnary(state)],node=new OperatorNode(name,fn,params));return node}function parseUnary(state){var name,params,fn,operators={"-":"unaryMinus","+":"unaryPlus","~":"bitNot",not:"not"};return(0,object.mQ)(operators,state.token)?(fn=operators[state.token],name=state.token,getTokenSkipNewline(state),params=[parseUnary(state)],new OperatorNode(name,fn,params)):function parsePow(state){var node,name,fn,params;node=function parseLeftHandOperators(state){var node,name,fn;node=function parseCustomNodes(state){var params=[];if(state.tokenType===TOKENTYPE.SYMBOL&&(0,object.mQ)(state.extraNodes,state.token)){var CustomNode=state.extraNodes[state.token];if(getToken(state),"("===state.token){if(params=[],openParams(state),getToken(state),")"!==state.token)for(params.push(parseAssignment(state));","===state.token;)getToken(state),params.push(parseAssignment(state));if(")"!==state.token)throw createSyntaxError(state,"Parenthesis ) expected");closeParams(state),getToken(state)}return new CustomNode(params)}return function parseSymbol(state){var name;if(state.tokenType===TOKENTYPE.SYMBOL||state.tokenType===TOKENTYPE.DELIMITER&&state.token in NAMED_DELIMITERS)return name=state.token,getToken(state),parseAccessors(state,(0,object.mQ)(CONSTANTS,name)?new ConstantNode(CONSTANTS[name]):NUMERIC_CONSTANTS.includes(name)?new ConstantNode(numeric(name,"number")):new SymbolNode(name));return function parseString(state){var str;if('"'===state.token||"'"===state.token)return str=parseStringToken(state,state.token),parseAccessors(state,new ConstantNode(str));return function parseMatrix(state){var array,params,rows,cols;if("["===state.token){if(openParams(state),getToken(state),"]"!==state.token){var row=parseRow(state);if(";"===state.token){for(rows=1,params=[row];";"===state.token;)getToken(state),"]"!==state.token&&(params[rows]=parseRow(state),rows++);if("]"!==state.token)throw createSyntaxError(state,"End of matrix ] expected");closeParams(state),getToken(state),cols=params[0].items.length;for(var r=1;r<rows;r++)if(params[r].items.length!==cols)throw createError(state,"Column dimensions mismatch ("+params[r].items.length+" !== "+cols+")");array=new ArrayNode(params)}else{if("]"!==state.token)throw createSyntaxError(state,"End of matrix ] expected");closeParams(state),getToken(state),array=row}}else closeParams(state),getToken(state),array=new ArrayNode([]);return parseAccessors(state,array)}return function parseObject(state){if("{"===state.token){var key;openParams(state);var properties={};do{if(getToken(state),"}"!==state.token){if('"'===state.token||"'"===state.token)key=parseStringToken(state,state.token);else{if(!(state.tokenType===TOKENTYPE.SYMBOL||state.tokenType===TOKENTYPE.DELIMITER&&state.token in NAMED_DELIMITERS))throw createSyntaxError(state,"Symbol or string expected as object key");key=state.token,getToken(state)}if(":"!==state.token)throw createSyntaxError(state,"Colon : expected after object key");getToken(state),properties[key]=parseAssignment(state)}}while(","===state.token);if("}"!==state.token)throw createSyntaxError(state,"Comma , or bracket } expected after object value");closeParams(state),getToken(state);var node=new ObjectNode(properties);return node=parseAccessors(state,node)}return function parseNumber(state){var numberStr;if(state.tokenType===TOKENTYPE.NUMBER){numberStr=state.token,getToken(state);var numericType=(0,utils_number.BC)(numberStr,config),value=numeric(numberStr,numericType);return new ConstantNode(value)}return function parseParentheses(state){var node;if("("===state.token){if(openParams(state),getToken(state),node=parseAssignment(state),")"!==state.token)throw createSyntaxError(state,"Parenthesis ) expected");return closeParams(state),getToken(state),node=parseAccessors(state,node=new ParenthesisNode(node))}return function parseEnd(state){throw""===state.token?createSyntaxError(state,"Unexpected end of expression"):createSyntaxError(state,"Value expected")}(state)}(state)}(state)}(state)}(state)}(state)}(state)}(state);var operators={"!":"factorial","'":"ctranspose"};for(;(0,object.mQ)(operators,state.token);)fn=operators[name=state.token],getToken(state),node=parseAccessors(state,node=new OperatorNode(name,fn,[node]));return node}(state),("^"===state.token||".^"===state.token)&&(fn="^"===(name=state.token)?"pow":"dotPow",getTokenSkipNewline(state),params=[node,parseUnary(state)],node=new OperatorNode(name,fn,params));return node}(state)}function parseAccessors(state,node,types){for(var params;("("===state.token||"["===state.token||"."===state.token)&&(!types||types.includes(state.token));)if(params=[],"("===state.token){if(!(0,is.li)(node)&&!(0,is.AS)(node))return node;if(openParams(state),getToken(state),")"!==state.token)for(params.push(parseAssignment(state));","===state.token;)getToken(state),params.push(parseAssignment(state));if(")"!==state.token)throw createSyntaxError(state,"Parenthesis ) expected");closeParams(state),getToken(state),node=new FunctionNode(node,params)}else if("["===state.token){if(openParams(state),getToken(state),"]"!==state.token)for(params.push(parseAssignment(state));","===state.token;)getToken(state),params.push(parseAssignment(state));if("]"!==state.token)throw createSyntaxError(state,"Parenthesis ] expected");closeParams(state),getToken(state),node=new AccessorNode(node,new IndexNode(params))}else{if(getToken(state),!(state.tokenType===TOKENTYPE.SYMBOL||state.tokenType===TOKENTYPE.DELIMITER&&state.token in NAMED_DELIMITERS))throw createSyntaxError(state,"Property name expected after dot");params.push(new ConstantNode(state.token)),getToken(state);node=new AccessorNode(node,new IndexNode(params,!0))}return node}function parseStringToken(state,quote){for(var str="";""!==currentCharacter(state)&&currentCharacter(state)!==quote;)if("\\"===currentCharacter(state)){next(state);var char=currentCharacter(state),escapeChar=ESCAPE_CHARACTERS[char];if(void 0!==escapeChar)str+=escapeChar,state.index+=1;else{if("u"!==char)throw createSyntaxError(state,"Bad escape character \\".concat(char));var unicode=state.expression.slice(state.index+1,state.index+5);if(!/^[0-9A-Fa-f]{4}$/.test(unicode))throw createSyntaxError(state,"Invalid unicode character \\u".concat(unicode));str+=String.fromCharCode(parseInt(unicode,16)),state.index+=5}}else str+=currentCharacter(state),next(state);if(getToken(state),state.token!==quote)throw createSyntaxError(state,"End of string ".concat(quote," expected"));return getToken(state),str}function parseRow(state){for(var params=[parseAssignment(state)],len=1;","===state.token;)getToken(state),"]"!==state.token&&";"!==state.token&&(params[len]=parseAssignment(state),len++);return new ArrayNode(params)}function col(state){return state.index-state.token.length+1}function createSyntaxError(state,message){var c=col(state),error=new SyntaxError(message+" (char "+c+")");return error.char=c,error}function createError(state,message){var c=col(state),error=new SyntaxError(message+" (char "+c+")");return error.char=c,error}return parse.isAlpha=function isAlpha(c,cPrev,cNext){return parse.isValidLatinOrGreek(c)||parse.isValidMathSymbol(c,cNext)||parse.isValidMathSymbol(cPrev,c)},parse.isValidLatinOrGreek=function isValidLatinOrGreek(c){return/^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(c)},parse.isValidMathSymbol=function isValidMathSymbol(high,low){return/^[\uD835]$/.test(high)&&/^[\uDC00-\uDFFF]$/.test(low)&&/^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low)},parse.isWhitespace=function isWhitespace(c,nestingLevel){return" "===c||"\t"===c||"\n"===c&&nestingLevel>0},parse.isDecimalMark=function isDecimalMark(c,cNext){return"."===c&&"/"!==cNext&&"*"!==cNext&&"^"!==cNext},parse.isDigitDot=function isDigitDot(c){return c>="0"&&c<="9"||"."===c},parse.isDigit=function isDigit(c){return c>="0"&&c<="9"},parse.isHexDigit=function isHexDigit(c){return c>="0"&&c<="9"||c>="a"&&c<="f"||c>="A"&&c<="F"},typed.addConversion({from:"string",to:"Node",convert:parse}),parse})),compile_dependencies=["typed","parse"],createCompile=(0,factory.P9)("compile",compile_dependencies,(_ref=>{var{typed:typed,parse:parse}=_ref;return typed("compile",{string:function string(expr){return parse(expr).compile()},"Array | Matrix":function Array__Matrix(expr){return(0,collection.Bl)(expr,(function(entry){return parse(entry).compile()}))}})})),evaluate_dependencies=["typed","parse"],createEvaluate=(0,factory.P9)("evaluate",evaluate_dependencies,(_ref=>{var{typed:typed,parse:parse}=_ref;return typed("evaluate",{string:function string(expr){var scope=(0,map.A5)();return parse(expr).compile().evaluate(scope)},"string, Map | Object":function string_Map__Object(expr,scope){return parse(expr).compile().evaluate(scope)},"Array | Matrix":function Array__Matrix(expr){var scope=(0,map.A5)();return(0,collection.Bl)(expr,(function(entry){return parse(entry).compile().evaluate(scope)}))},"Array | Matrix, Map | Object":function Array__Matrix_Map__Object(expr,scope){return(0,collection.Bl)(expr,(function(entry){return parse(entry).compile().evaluate(scope)}))}})})),Parser_dependencies=["evaluate"],createParserClass=(0,factory.P9)("Parser",Parser_dependencies,(_ref=>{var{evaluate:evaluate}=_ref;function Parser(){if(!(this instanceof Parser))throw new SyntaxError("Constructor must be called with the new operator");Object.defineProperty(this,"scope",{value:(0,map.A5)(),writable:!1})}return Parser.prototype.type="Parser",Parser.prototype.isParser=!0,Parser.prototype.evaluate=function(expr){return evaluate(expr,this.scope)},Parser.prototype.get=function(name){if(this.scope.has(name))return this.scope.get(name)},Parser.prototype.getAll=function(){return(0,map.vw)(this.scope)},Parser.prototype.getAllAsMap=function(){return this.scope},Parser.prototype.set=function(name,value){return this.scope.set(name,value),value},Parser.prototype.remove=function(name){this.scope.delete(name)},Parser.prototype.clear=function(){this.scope.clear()},Parser}),{isClass:!0}),parser_dependencies=["typed","Parser"],createParser=(0,factory.P9)("parser",parser_dependencies,(_ref=>{var{typed:typed,Parser:Parser}=_ref;return typed("parser",{"":function _(){return new Parser}})})),lup=__webpack_require__("./node_modules/mathjs/lib/esm/function/algebra/decomposition/lup.js"),qr=__webpack_require__("./node_modules/mathjs/lib/esm/function/algebra/decomposition/qr.js"),slu=__webpack_require__("./node_modules/mathjs/lib/esm/function/algebra/decomposition/slu.js"),lusolve=__webpack_require__("./node_modules/mathjs/lib/esm/function/algebra/solver/lusolve.js"),polynomialRoot=__webpack_require__("./node_modules/mathjs/lib/esm/function/algebra/polynomialRoot.js"),Help_dependencies=["evaluate"],createHelpClass=(0,factory.P9)("Help",Help_dependencies,(_ref=>{var{evaluate:evaluate}=_ref;function Help(doc){if(!(this instanceof Help))throw new SyntaxError("Constructor must be called with the new operator");if(!doc)throw new Error('Argument "doc" missing');this.doc=doc}return Help.prototype.type="Help",Help.prototype.isHelp=!0,Help.prototype.toString=function(){var doc=this.doc||{},desc="\n";if(doc.name&&(desc+="Name: "+doc.name+"\n\n"),doc.category&&(desc+="Category: "+doc.category+"\n\n"),doc.description&&(desc+="Description:\n    "+doc.description+"\n\n"),doc.syntax&&(desc+="Syntax:\n    "+doc.syntax.join("\n    ")+"\n\n"),doc.examples){desc+="Examples:\n";for(var configChanged=!1,originalConfig=evaluate("config()"),scope={config:newConfig=>(configChanged=!0,evaluate("config(newConfig)",{newConfig:newConfig}))},i=0;i<doc.examples.length;i++){var expr=doc.examples[i];desc+="    "+expr+"\n";var res=void 0;try{res=evaluate(expr,scope)}catch(e){res=e}void 0===res||(0,is.gS)(res)||(desc+="        "+(0,utils_string.GP)(res,{precision:14})+"\n")}desc+="\n",configChanged&&evaluate("config(originalConfig)",{originalConfig:originalConfig})}return doc.mayThrow&&doc.mayThrow.length&&(desc+="Throws: "+doc.mayThrow.join(", ")+"\n\n"),doc.seealso&&doc.seealso.length&&(desc+="See also: "+doc.seealso.join(", ")+"\n"),desc},Help.prototype.toJSON=function(){var obj=(0,object.o8)(this.doc);return obj.mathjs="Help",obj},Help.fromJSON=function(json){var doc={};return Object.keys(json).filter((prop=>"mathjs"!==prop)).forEach((prop=>{doc[prop]=json[prop]})),new Help(doc)},Help.prototype.valueOf=Help.prototype.toString,Help}),{isClass:!0}),Chain_dependencies=["?on","math","typed"],createChainClass=(0,factory.P9)("Chain",Chain_dependencies,(_ref=>{var{on:on,math:math,typed:typed}=_ref;function Chain(value){if(!(this instanceof Chain))throw new SyntaxError("Constructor must be called with the new operator");(0,is.o_)(value)?this.value=value.value:this.value=value}function createLazyProxy(name,resolver){(0,object.RZ)(Chain.prototype,name,(function outerResolver(){var fn=resolver();if("function"==typeof fn)return chainify(fn)}))}function chainify(fn){return function(){if(0===arguments.length)return new Chain(fn(this.value));for(var args=[this.value],i=0;i<arguments.length;i++)args[i+1]=arguments[i];if(typed.isTypedFunction(fn)){var sigObject=typed.resolve(fn,args);if(1===sigObject.params.length)throw new Error("chain function "+fn.name+" cannot match rest parameter between chain value and additional arguments.");return new Chain(sigObject.implementation.apply(fn,args))}return new Chain(fn.apply(fn,args))}}Chain.prototype.type="Chain",Chain.prototype.isChain=!0,Chain.prototype.done=function(){return this.value},Chain.prototype.valueOf=function(){return this.value},Chain.prototype.toString=function(){return(0,utils_string.GP)(this.value)},Chain.prototype.toJSON=function(){return{mathjs:"Chain",value:this.value}},Chain.fromJSON=function(json){return new Chain(json.value)},Chain.createProxy=function(arg0,arg1){if("string"==typeof arg0)!function createProxy(name,fn){"function"==typeof fn&&(Chain.prototype[name]=chainify(fn))}(arg0,arg1);else{var _loop=function _loop(_name){(0,object.mQ)(arg0,_name)&&void 0===excludedNames[_name]&&createLazyProxy(_name,(()=>arg0[_name]))};for(var _name in arg0)_loop(_name)}};var excludedNames={expression:!0,docs:!0,type:!0,classes:!0,json:!0,error:!0,isChain:!0};return Chain.createProxy(math),on&&on("import",(function(name,resolver,path){path||createLazyProxy(name,resolver)})),Chain}),{isClass:!0}),eDocs={name:"e",category:"Constants",syntax:["e"],description:"Euler's number, the base of the natural logarithm. Approximately equal to 2.71828",examples:["e","e ^ 2","exp(2)","log(e)"],seealso:["exp"]},piDocs={name:"pi",category:"Constants",syntax:["pi"],description:"The number pi is a mathematical constant that is the ratio of a circle's circumference to its diameter, and is approximately equal to 3.14159",examples:["pi","sin(pi/2)"],seealso:["tau"]},embeddedDocs={bignumber:{name:"bignumber",category:"Construction",syntax:["bignumber(x)"],description:"Create a big number from a number or string.",examples:["0.1 + 0.2","bignumber(0.1) + bignumber(0.2)",'bignumber("7.2")','bignumber("7.2e500")',"bignumber([0.1, 0.2, 0.3])"],seealso:["boolean","bigint","complex","fraction","index","matrix","string","unit"]},bigint:{name:"bigint",category:"Construction",syntax:["bigint(x)"],description:"Create a bigint, an integer with an arbitrary number of digits, from a number or string.",examples:["123123123123123123 # a large number will lose digits",'bigint("123123123123123123")','bignumber(["1", "3", "5"])'],seealso:["boolean","bignumber","number","complex","fraction","index","matrix","string","unit"]},boolean:{name:"boolean",category:"Construction",syntax:["x","boolean(x)"],description:"Convert a string or number into a boolean.",examples:["boolean(0)","boolean(1)","boolean(3)",'boolean("true")','boolean("false")',"boolean([1, 0, 1, 1])"],seealso:["bignumber","complex","index","matrix","number","string","unit"]},complex:{name:"complex",category:"Construction",syntax:["complex()","complex(re, im)","complex(string)"],description:"Create a complex number.",examples:["complex()","complex(2, 3)",'complex("7 - 2i")'],seealso:["bignumber","boolean","index","matrix","number","string","unit"]},createUnit:{name:"createUnit",category:"Construction",syntax:["createUnit(definitions)","createUnit(name, definition)"],description:"Create a user-defined unit and register it with the Unit type.",examples:['createUnit("foo")','createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})','createUnit("mph", "1 mile/hour")'],seealso:["unit","splitUnit"]},fraction:{name:"fraction",category:"Construction",syntax:["fraction(num)","fraction(matrix)","fraction(num,den)","fraction({n: num, d: den})"],description:"Create a fraction from a number or from integer numerator and denominator.",examples:["fraction(0.125)","fraction(1, 3) + fraction(2, 5)","fraction({n: 333, d: 53})","fraction([sqrt(9), sqrt(10), sqrt(11)])"],seealso:["bignumber","boolean","complex","index","matrix","string","unit"]},index:{name:"index",category:"Construction",syntax:["[start]","[start:end]","[start:step:end]","[start1, start 2, ...]","[start1:end1, start2:end2, ...]","[start1:step1:end1, start2:step2:end2, ...]"],description:"Create an index to get or replace a subset of a matrix",examples:["A = [1, 2, 3; 4, 5, 6]","A[1, :]","A[1, 2] = 50","A[1:2, 1:2] = 1","B = [1, 2, 3]","B[B>1 and B<3]"],seealso:["bignumber","boolean","complex","matrix,","number","range","string","unit"]},matrix:{name:"matrix",category:"Construction",syntax:["[]","[a1, b1, ...; a2, b2, ...]","matrix()",'matrix("dense")',"matrix([...])"],description:"Create a matrix.",examples:["[]","[1, 2, 3]","[1, 2, 3; 4, 5, 6]","matrix()","matrix([3, 4])",'matrix([3, 4; 5, 6], "sparse")','matrix([3, 4; 5, 6], "sparse", "number")'],seealso:["bignumber","boolean","complex","index","number","string","unit","sparse"]},number:{name:"number",category:"Construction",syntax:["x","number(x)","number(unit, valuelessUnit)"],description:"Create a number or convert a string or boolean into a number.",examples:["2","2e3","4.05","number(2)",'number("7.2")',"number(true)","number([true, false, true, true])",'number(unit("52cm"), "m")'],seealso:["bignumber","bigint","boolean","complex","fraction","index","matrix","string","unit"]},sparse:{name:"sparse",category:"Construction",syntax:["sparse()","sparse([a1, b1, ...; a1, b2, ...])",'sparse([a1, b1, ...; a1, b2, ...], "number")'],description:"Create a sparse matrix.",examples:["sparse()","sparse([3, 4; 5, 6])",'sparse([3, 0; 5, 0], "number")'],seealso:["bignumber","boolean","complex","index","number","string","unit","matrix"]},splitUnit:{name:"splitUnit",category:"Construction",syntax:["splitUnit(unit: Unit, parts: Unit[])"],description:"Split a unit in an array of units whose sum is equal to the original unit.",examples:['splitUnit(1 m, ["feet", "inch"])'],seealso:["unit","createUnit"]},string:{name:"string",category:"Construction",syntax:['"text"',"string(x)"],description:"Create a string or convert a value to a string",examples:['"Hello World!"',"string(4.2)","string(3 + 2i)"],seealso:["bignumber","boolean","complex","index","matrix","number","unit"]},unit:{name:"unit",category:"Construction",syntax:["value unit","unit(value, unit)","unit(string)"],description:"Create a unit.",examples:["5.5 mm","3 inch",'unit(7.1, "kilogram")','unit("23 deg")'],seealso:["bignumber","boolean","complex","index","matrix","number","string"]},e:eDocs,E:eDocs,false:{name:"false",category:"Constants",syntax:["false"],description:"Boolean value false",examples:["false"],seealso:["true"]},i:{name:"i",category:"Constants",syntax:["i"],description:"Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.",examples:["i","i * i","sqrt(-1)"],seealso:[]},Infinity:{name:"Infinity",category:"Constants",syntax:["Infinity"],description:"Infinity, a number which is larger than the maximum number that can be handled by a floating point number.",examples:["Infinity","1 / 0"],seealso:[]},LN2:{name:"LN2",category:"Constants",syntax:["LN2"],description:"Returns the natural logarithm of 2, approximately equal to 0.693",examples:["LN2","log(2)"],seealso:[]},LN10:{name:"LN10",category:"Constants",syntax:["LN10"],description:"Returns the natural logarithm of 10, approximately equal to 2.302",examples:["LN10","log(10)"],seealso:[]},LOG2E:{name:"LOG2E",category:"Constants",syntax:["LOG2E"],description:"Returns the base-2 logarithm of E, approximately equal to 1.442",examples:["LOG2E","log(e, 2)"],seealso:[]},LOG10E:{name:"LOG10E",category:"Constants",syntax:["LOG10E"],description:"Returns the base-10 logarithm of E, approximately equal to 0.434",examples:["LOG10E","log(e, 10)"],seealso:[]},NaN:{name:"NaN",category:"Constants",syntax:["NaN"],description:"Not a number",examples:["NaN","0 / 0"],seealso:[]},null:{name:"null",category:"Constants",syntax:["null"],description:"Value null",examples:["null"],seealso:["true","false"]},pi:piDocs,PI:piDocs,phi:{name:"phi",category:"Constants",syntax:["phi"],description:"Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...",examples:["phi"],seealso:[]},SQRT1_2:{name:"SQRT1_2",category:"Constants",syntax:["SQRT1_2"],description:"Returns the square root of 1/2, approximately equal to 0.707",examples:["SQRT1_2","sqrt(1/2)"],seealso:[]},SQRT2:{name:"SQRT2",category:"Constants",syntax:["SQRT2"],description:"Returns the square root of 2, approximately equal to 1.414",examples:["SQRT2","sqrt(2)"],seealso:[]},tau:{name:"tau",category:"Constants",syntax:["tau"],description:"Tau is the ratio constant of a circle's circumference to radius, equal to 2 * pi, approximately 6.2832.",examples:["tau","2 * pi"],seealso:["pi"]},true:{name:"true",category:"Constants",syntax:["true"],description:"Boolean value true",examples:["true"],seealso:["false"]},version:{name:"version",category:"Constants",syntax:["version"],description:"A string with the version number of math.js",examples:["version"],seealso:[]},speedOfLight:{description:"Speed of light in vacuum",examples:["speedOfLight"]},gravitationConstant:{description:"Newtonian constant of gravitation",examples:["gravitationConstant"]},planckConstant:{description:"Planck constant",examples:["planckConstant"]},reducedPlanckConstant:{description:"Reduced Planck constant",examples:["reducedPlanckConstant"]},magneticConstant:{description:"Magnetic constant (vacuum permeability)",examples:["magneticConstant"]},electricConstant:{description:"Electric constant (vacuum permeability)",examples:["electricConstant"]},vacuumImpedance:{description:"Characteristic impedance of vacuum",examples:["vacuumImpedance"]},coulomb:{description:"Coulomb's constant",examples:["coulomb"]},elementaryCharge:{description:"Elementary charge",examples:["elementaryCharge"]},bohrMagneton:{description:"Bohr magneton",examples:["bohrMagneton"]},conductanceQuantum:{description:"Conductance quantum",examples:["conductanceQuantum"]},inverseConductanceQuantum:{description:"Inverse conductance quantum",examples:["inverseConductanceQuantum"]},magneticFluxQuantum:{description:"Magnetic flux quantum",examples:["magneticFluxQuantum"]},nuclearMagneton:{description:"Nuclear magneton",examples:["nuclearMagneton"]},klitzing:{description:"Von Klitzing constant",examples:["klitzing"]},bohrRadius:{description:"Bohr radius",examples:["bohrRadius"]},classicalElectronRadius:{description:"Classical electron radius",examples:["classicalElectronRadius"]},electronMass:{description:"Electron mass",examples:["electronMass"]},fermiCoupling:{description:"Fermi coupling constant",examples:["fermiCoupling"]},fineStructure:{description:"Fine-structure constant",examples:["fineStructure"]},hartreeEnergy:{description:"Hartree energy",examples:["hartreeEnergy"]},protonMass:{description:"Proton mass",examples:["protonMass"]},deuteronMass:{description:"Deuteron Mass",examples:["deuteronMass"]},neutronMass:{description:"Neutron mass",examples:["neutronMass"]},quantumOfCirculation:{description:"Quantum of circulation",examples:["quantumOfCirculation"]},rydberg:{description:"Rydberg constant",examples:["rydberg"]},thomsonCrossSection:{description:"Thomson cross section",examples:["thomsonCrossSection"]},weakMixingAngle:{description:"Weak mixing angle",examples:["weakMixingAngle"]},efimovFactor:{description:"Efimov factor",examples:["efimovFactor"]},atomicMass:{description:"Atomic mass constant",examples:["atomicMass"]},avogadro:{description:"Avogadro's number",examples:["avogadro"]},boltzmann:{description:"Boltzmann constant",examples:["boltzmann"]},faraday:{description:"Faraday constant",examples:["faraday"]},firstRadiation:{description:"First radiation constant",examples:["firstRadiation"]},loschmidt:{description:"Loschmidt constant at T=273.15 K and p=101.325 kPa",examples:["loschmidt"]},gasConstant:{description:"Gas constant",examples:["gasConstant"]},molarPlanckConstant:{description:"Molar Planck constant",examples:["molarPlanckConstant"]},molarVolume:{description:"Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa",examples:["molarVolume"]},sackurTetrode:{description:"Sackur-Tetrode constant at T=1 K and p=101.325 kPa",examples:["sackurTetrode"]},secondRadiation:{description:"Second radiation constant",examples:["secondRadiation"]},stefanBoltzmann:{description:"Stefan-Boltzmann constant",examples:["stefanBoltzmann"]},wienDisplacement:{description:"Wien displacement law constant",examples:["wienDisplacement"]},molarMass:{description:"Molar mass constant",examples:["molarMass"]},molarMassC12:{description:"Molar mass constant of carbon-12",examples:["molarMassC12"]},gravity:{description:"Standard acceleration of gravity (standard acceleration of free-fall on Earth)",examples:["gravity"]},planckLength:{description:"Planck length",examples:["planckLength"]},planckMass:{description:"Planck mass",examples:["planckMass"]},planckTime:{description:"Planck time",examples:["planckTime"]},planckCharge:{description:"Planck charge",examples:["planckCharge"]},planckTemperature:{description:"Planck temperature",examples:["planckTemperature"]},derivative:{name:"derivative",category:"Algebra",syntax:["derivative(expr, variable)","derivative(expr, variable, {simplify: boolean})"],description:"Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.",examples:['derivative("2x^3", "x")','derivative("2x^3", "x", {simplify: false})','derivative("2x^2 + 3x + 4", "x")','derivative("sin(2x)", "x")','f = parse("x^2 + x")','x = parse("x")',"df = derivative(f, x)","df.evaluate({x: 3})"],seealso:["simplify","parse","evaluate"]},lsolve:{name:"lsolve",category:"Algebra",syntax:["x=lsolve(L, b)"],description:"Finds one solution of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.",examples:["a = [-2, 3; 2, 1]","b = [11, 9]","x = lsolve(a, b)"],seealso:["lsolveAll","lup","lusolve","usolve","matrix","sparse"]},lsolveAll:{name:"lsolveAll",category:"Algebra",syntax:["x=lsolveAll(L, b)"],description:"Finds all solutions of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.",examples:["a = [-2, 3; 2, 1]","b = [11, 9]","x = lsolve(a, b)"],seealso:["lsolve","lup","lusolve","usolve","matrix","sparse"]},lup:{name:"lup",category:"Algebra",syntax:["lup(m)"],description:"Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U",examples:["lup([[2, 1], [1, 4]])","lup(matrix([[2, 1], [1, 4]]))","lup(sparse([[2, 1], [1, 4]]))"],seealso:["lusolve","lsolve","usolve","matrix","sparse","slu","qr"]},lusolve:{name:"lusolve",category:"Algebra",syntax:["x=lusolve(A, b)","x=lusolve(lu, b)"],description:"Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.",examples:["a = [-2, 3; 2, 1]","b = [11, 9]","x = lusolve(a, b)"],seealso:["lup","slu","lsolve","usolve","matrix","sparse"]},leafCount:{name:"leafCount",category:"Algebra",syntax:["leafCount(expr)"],description:"Computes the number of leaves in the parse tree of the given expression",examples:['leafCount("e^(i*pi)-1")','leafCount(parse("{a: 22/7, b: 10^(1/2)}"))'],seealso:["simplify"]},polynomialRoot:{name:"polynomialRoot",category:"Algebra",syntax:["x=polynomialRoot(-6, 3)","x=polynomialRoot(4, -4, 1)","x=polynomialRoot(-8, 12, -6, 1)"],description:"Finds the roots of a univariate polynomial given by its coefficients starting from constant, linear, and so on, increasing in degree.",examples:["a = polynomialRoot(-6, 11, -6, 1)"],seealso:["cbrt","sqrt"]},resolve:{name:"resolve",category:"Algebra",syntax:["resolve(node, scope)"],description:"Recursively substitute variables in an expression tree.",examples:['resolve(parse("1 + x"), { x: 7 })','resolve(parse("size(text)"), { text: "Hello World" })','resolve(parse("x + y"), { x: parse("3z") })','resolve(parse("3x"), { x: parse("y+z"), z: parse("w^y") })'],seealso:["simplify","evaluate"],mayThrow:["ReferenceError"]},simplify:{name:"simplify",category:"Algebra",syntax:["simplify(expr)","simplify(expr, rules)"],description:"Simplify an expression tree.",examples:['simplify("3 + 2 / 4")','simplify("2x + x")','f = parse("x * (x + 2 + x)")',"simplified = simplify(f)","simplified.evaluate({x: 2})"],seealso:["simplifyCore","derivative","evaluate","parse","rationalize","resolve"]},simplifyConstant:{name:"simplifyConstant",category:"Algebra",syntax:["simplifyConstant(expr)","simplifyConstant(expr, options)"],description:"Replace constant subexpressions of node with their values.",examples:['simplifyConstant("(3-3)*x")','simplifyConstant(parse("z-cos(tau/8)"))'],seealso:["simplify","simplifyCore","evaluate"]},simplifyCore:{name:"simplifyCore",category:"Algebra",syntax:["simplifyCore(node)"],description:"Perform simple one-pass simplifications on an expression tree.",examples:['simplifyCore(parse("0*x"))','simplifyCore(parse("(x+0)*2"))'],seealso:["simplify","simplifyConstant","evaluate"]},symbolicEqual:{name:"symbolicEqual",category:"Algebra",syntax:["symbolicEqual(expr1, expr2)","symbolicEqual(expr1, expr2, options)"],description:"Returns true if the difference of the expressions simplifies to 0",examples:['symbolicEqual("x*y","y*x")','symbolicEqual("abs(x^2)", "x^2")','symbolicEqual("abs(x)", "x", {context: {abs: {trivial: true}}})'],seealso:["simplify","evaluate"]},rationalize:{name:"rationalize",category:"Algebra",syntax:["rationalize(expr)","rationalize(expr, scope)","rationalize(expr, scope, detailed)"],description:"Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.",examples:['rationalize("2x/y - y/(x+1)")','rationalize("2x/y - y/(x+1)", true)'],seealso:["simplify"]},slu:{name:"slu",category:"Algebra",syntax:["slu(A, order, threshold)"],description:"Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U",examples:["slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)"],seealso:["lusolve","lsolve","usolve","matrix","sparse","lup","qr"]},usolve:{name:"usolve",category:"Algebra",syntax:["x=usolve(U, b)"],description:"Finds one solution of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.",examples:["x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])"],seealso:["usolveAll","lup","lusolve","lsolve","matrix","sparse"]},usolveAll:{name:"usolveAll",category:"Algebra",syntax:["x=usolve(U, b)"],description:"Finds all solutions of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.",examples:["x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])"],seealso:["usolve","lup","lusolve","lsolve","matrix","sparse"]},qr:{name:"qr",category:"Algebra",syntax:["qr(A)"],description:"Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.",examples:["qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])"],seealso:["lup","slu","matrix"]},abs:{name:"abs",category:"Arithmetic",syntax:["abs(x)"],description:"Compute the absolute value.",examples:["abs(3.5)","abs(-4.2)"],seealso:["sign"]},add:{name:"add",category:"Operators",syntax:["x + y","add(x, y)"],description:"Add two values.",examples:["a = 2.1 + 3.6","a - 3.6","3 + 2i","3 cm + 2 inch",'"2.3" + "4"'],seealso:["subtract"]},cbrt:{name:"cbrt",category:"Arithmetic",syntax:["cbrt(x)","cbrt(x, allRoots)"],description:"Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned",examples:["cbrt(64)","cube(4)","cbrt(-8)","cbrt(2 + 3i)","cbrt(8i)","cbrt(8i, true)","cbrt(27 m^3)"],seealso:["square","sqrt","cube","multiply"]},ceil:{name:"ceil",category:"Arithmetic",syntax:["ceil(x)"],description:"Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.",examples:["ceil(3.2)","ceil(3.8)","ceil(-4.2)"],seealso:["floor","fix","round"]},cube:{name:"cube",category:"Arithmetic",syntax:["cube(x)"],description:"Compute the cube of a value. The cube of x is x * x * x.",examples:["cube(2)","2^3","2 * 2 * 2"],seealso:["multiply","square","pow"]},divide:{name:"divide",category:"Operators",syntax:["x / y","divide(x, y)"],description:"Divide two values.",examples:["a = 2 / 3","a * 3","4.5 / 2","3 + 4 / 2","(3 + 4) / 2","18 km / 4.5"],seealso:["multiply"]},dotDivide:{name:"dotDivide",category:"Operators",syntax:["x ./ y","dotDivide(x, y)"],description:"Divide two values element wise.",examples:["a = [1, 2, 3; 4, 5, 6]","b = [2, 1, 1; 3, 2, 5]","a ./ b"],seealso:["multiply","dotMultiply","divide"]},dotMultiply:{name:"dotMultiply",category:"Operators",syntax:["x .* y","dotMultiply(x, y)"],description:"Multiply two values element wise.",examples:["a = [1, 2, 3; 4, 5, 6]","b = [2, 1, 1; 3, 2, 5]","a .* b"],seealso:["multiply","divide","dotDivide"]},dotPow:{name:"dotPow",category:"Operators",syntax:["x .^ y","dotPow(x, y)"],description:"Calculates the power of x to y element wise.",examples:["a = [1, 2, 3; 4, 5, 6]","a .^ 2"],seealso:["pow"]},exp:{name:"exp",category:"Arithmetic",syntax:["exp(x)"],description:"Calculate the exponent of a value.",examples:["exp(1.3)","e ^ 1.3","log(exp(1.3))","x = 2.4","(exp(i*x) == cos(x) + i*sin(x))   # Euler's formula"],seealso:["expm","expm1","pow","log"]},expm:{name:"expm",category:"Arithmetic",syntax:["exp(x)"],description:"Compute the matrix exponential, expm(A) = e^A. The matrix must be square. Not to be confused with exp(a), which performs element-wise exponentiation.",examples:["expm([[0,2],[0,0]])"],seealso:["exp"]},expm1:{name:"expm1",category:"Arithmetic",syntax:["expm1(x)"],description:"Calculate the value of subtracting 1 from the exponential value.",examples:["expm1(2)","pow(e, 2) - 1","log(expm1(2) + 1)"],seealso:["exp","pow","log"]},fix:{name:"fix",category:"Arithmetic",syntax:["fix(x)"],description:"Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.",examples:["fix(3.2)","fix(3.8)","fix(-4.2)","fix(-4.8)"],seealso:["ceil","floor","round"]},floor:{name:"floor",category:"Arithmetic",syntax:["floor(x)"],description:"Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.",examples:["floor(3.2)","floor(3.8)","floor(-4.2)"],seealso:["ceil","fix","round"]},gcd:{name:"gcd",category:"Arithmetic",syntax:["gcd(a, b)","gcd(a, b, c, ...)"],description:"Compute the greatest common divisor.",examples:["gcd(8, 12)","gcd(-4, 6)","gcd(25, 15, -10)"],seealso:["lcm","xgcd"]},hypot:{name:"hypot",category:"Arithmetic",syntax:["hypot(a, b, c, ...)","hypot([a, b, c, ...])"],description:"Calculate the hypotenuse of a list with values.",examples:["hypot(3, 4)","sqrt(3^2 + 4^2)","hypot(-2)","hypot([3, 4, 5])"],seealso:["abs","norm"]},lcm:{name:"lcm",category:"Arithmetic",syntax:["lcm(x, y)"],description:"Compute the least common multiple.",examples:["lcm(4, 6)","lcm(6, 21)","lcm(6, 21, 5)"],seealso:["gcd"]},log:{name:"log",category:"Arithmetic",syntax:["log(x)","log(x, base)"],description:"Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).",examples:["log(3.5)","a = log(2.4)","exp(a)","10 ^ 4","log(10000, 10)","log(10000) / log(10)","b = log(1024, 2)","2 ^ b"],seealso:["exp","log1p","log2","log10"]},log2:{name:"log2",category:"Arithmetic",syntax:["log2(x)"],description:"Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.",examples:["log2(0.03125)","log2(16)","log2(16) / log2(2)","pow(2, 4)"],seealso:["exp","log1p","log","log10"]},log1p:{name:"log1p",category:"Arithmetic",syntax:["log1p(x)","log1p(x, base)"],description:"Calculate the logarithm of a `value+1`",examples:["log1p(2.5)","exp(log1p(1.4))","pow(10, 4)","log1p(9999, 10)","log1p(9999) / log(10)"],seealso:["exp","log","log2","log10"]},log10:{name:"log10",category:"Arithmetic",syntax:["log10(x)"],description:"Compute the 10-base logarithm of a value.",examples:["log10(0.00001)","log10(10000)","10 ^ 4","log(10000) / log(10)","log(10000, 10)"],seealso:["exp","log"]},mod:{name:"mod",category:"Operators",syntax:["x % y","x mod y","mod(x, y)"],description:"Calculates the modulus, the remainder of an integer division.",examples:["7 % 3","11 % 2","10 mod 4","isOdd(x) = x % 2","isOdd(2)","isOdd(3)"],seealso:["divide"]},multiply:{name:"multiply",category:"Operators",syntax:["x * y","multiply(x, y)"],description:"multiply two values.",examples:["a = 2.1 * 3.4","a / 3.4","2 * 3 + 4","2 * (3 + 4)","3 * 2.1 km"],seealso:["divide"]},norm:{name:"norm",category:"Arithmetic",syntax:["norm(x)","norm(x, p)"],description:"Calculate the norm of a number, vector or matrix.",examples:["abs(-3.5)","norm(-3.5)","norm(3 - 4i)","norm([1, 2, -3], Infinity)","norm([1, 2, -3], -Infinity)","norm([3, 4], 2)","norm([[1, 2], [3, 4]], 1)",'norm([[1, 2], [3, 4]], "inf")','norm([[1, 2], [3, 4]], "fro")']},nthRoot:{name:"nthRoot",category:"Arithmetic",syntax:["nthRoot(a)","nthRoot(a, root)"],description:'Calculate the nth root of a value. The principal nth root of a positive real number A, is the positive real solution of the equation "x^root = A".',examples:["4 ^ 3","nthRoot(64, 3)","nthRoot(9, 2)","sqrt(9)"],seealso:["nthRoots","pow","sqrt"]},nthRoots:{name:"nthRoots",category:"Arithmetic",syntax:["nthRoots(A)","nthRoots(A, root)"],description:'Calculate the nth roots of a value. An nth root of a positive real number A, is a positive real solution of the equation "x^root = A". This function returns an array of complex values.',examples:["nthRoots(1)","nthRoots(1, 3)"],seealso:["sqrt","pow","nthRoot"]},pow:{name:"pow",category:"Operators",syntax:["x ^ y","pow(x, y)"],description:"Calculates the power of x to y, x^y.",examples:["2^3","2*2*2","1 + e ^ (pi * i)","pow([[1, 2], [4, 3]], 2)","pow([[1, 2], [4, 3]], -1)"],seealso:["multiply","nthRoot","nthRoots","sqrt"]},round:{name:"round",category:"Arithmetic",syntax:["round(x)","round(x, n)","round(unit, valuelessUnit)","round(unit, n, valuelessUnit)"],description:"round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.",examples:["round(3.2)","round(3.8)","round(-4.2)","round(-4.8)","round(pi, 3)","round(123.45678, 2)","round(3.241cm, 2, cm)","round([3.2, 3.8, -4.7])"],seealso:["ceil","floor","fix"]},sign:{name:"sign",category:"Arithmetic",syntax:["sign(x)"],description:"Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.",examples:["sign(3.5)","sign(-4.2)","sign(0)"],seealso:["abs"]},sqrt:{name:"sqrt",category:"Arithmetic",syntax:["sqrt(x)"],description:"Compute the square root value. If x = y * y, then y is the square root of x.",examples:["sqrt(25)","5 * 5","sqrt(-1)"],seealso:["square","sqrtm","multiply","nthRoot","nthRoots","pow"]},sqrtm:{name:"sqrtm",category:"Arithmetic",syntax:["sqrtm(x)"],description:"Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.",examples:["sqrtm([[33, 24], [48, 57]])"],seealso:["sqrt","abs","square","multiply"]},square:{name:"square",category:"Arithmetic",syntax:["square(x)"],description:"Compute the square of a value. The square of x is x * x.",examples:["square(3)","sqrt(9)","3^2","3 * 3"],seealso:["multiply","pow","sqrt","cube"]},subtract:{name:"subtract",category:"Operators",syntax:["x - y","subtract(x, y)"],description:"subtract two values.",examples:["a = 5.3 - 2","a + 2","2/3 - 1/6","2 * 3 - 3","2.1 km - 500m"],seealso:["add"]},unaryMinus:{name:"unaryMinus",category:"Operators",syntax:["-x","unaryMinus(x)"],description:"Inverse the sign of a value. Converts booleans and strings to numbers.",examples:["-4.5","-(-5.6)",'-"22"'],seealso:["add","subtract","unaryPlus"]},unaryPlus:{name:"unaryPlus",category:"Operators",syntax:["+x","unaryPlus(x)"],description:"Converts booleans and strings to numbers.",examples:["+true",'+"2"'],seealso:["add","subtract","unaryMinus"]},xgcd:{name:"xgcd",category:"Arithmetic",syntax:["xgcd(a, b)"],description:"Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.",examples:["xgcd(8, 12)","gcd(8, 12)","xgcd(36163, 21199)"],seealso:["gcd","lcm"]},invmod:{name:"invmod",category:"Arithmetic",syntax:["invmod(a, b)"],description:"Calculate the (modular) multiplicative inverse of a modulo b. Solution to the equation ax ≣ 1 (mod b)",examples:["invmod(8, 12)","invmod(7, 13)","invmod(15151, 15122)"],seealso:["gcd","xgcd"]},bitAnd:{name:"bitAnd",category:"Bitwise",syntax:["x & y","bitAnd(x, y)"],description:"Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0",examples:["5 & 3","bitAnd(53, 131)","[1, 12, 31] & 42"],seealso:["bitNot","bitOr","bitXor","leftShift","rightArithShift","rightLogShift"]},bitNot:{name:"bitNot",category:"Bitwise",syntax:["~x","bitNot(x)"],description:"Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.",examples:["~1","~2","bitNot([2, -3, 4])"],seealso:["bitAnd","bitOr","bitXor","leftShift","rightArithShift","rightLogShift"]},bitOr:{name:"bitOr",category:"Bitwise",syntax:["x | y","bitOr(x, y)"],description:"Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.",examples:["5 | 3","bitOr([1, 2, 3], 4)"],seealso:["bitAnd","bitNot","bitXor","leftShift","rightArithShift","rightLogShift"]},bitXor:{name:"bitXor",category:"Bitwise",syntax:["bitXor(x, y)"],description:"Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.",examples:["bitOr(1, 2)","bitXor([2, 3, 4], 4)"],seealso:["bitAnd","bitNot","bitOr","leftShift","rightArithShift","rightLogShift"]},leftShift:{name:"leftShift",category:"Bitwise",syntax:["x << y","leftShift(x, y)"],description:"Bitwise left logical shift of a value x by y number of bits.",examples:["4 << 1","8 >> 1"],seealso:["bitAnd","bitNot","bitOr","bitXor","rightArithShift","rightLogShift"]},rightArithShift:{name:"rightArithShift",category:"Bitwise",syntax:["x >> y","rightArithShift(x, y)"],description:"Bitwise right arithmetic shift of a value x by y number of bits.",examples:["8 >> 1","4 << 1","-12 >> 2"],seealso:["bitAnd","bitNot","bitOr","bitXor","leftShift","rightLogShift"]},rightLogShift:{name:"rightLogShift",category:"Bitwise",syntax:["x >>> y","rightLogShift(x, y)"],description:"Bitwise right logical shift of a value x by y number of bits.",examples:["8 >>> 1","4 << 1","-12 >>> 2"],seealso:["bitAnd","bitNot","bitOr","bitXor","leftShift","rightArithShift"]},bellNumbers:{name:"bellNumbers",category:"Combinatorics",syntax:["bellNumbers(n)"],description:"The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.",examples:["bellNumbers(3)","bellNumbers(8)"],seealso:["stirlingS2"]},catalan:{name:"catalan",category:"Combinatorics",syntax:["catalan(n)"],description:"The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.",examples:["catalan(3)","catalan(8)"],seealso:["bellNumbers"]},composition:{name:"composition",category:"Combinatorics",syntax:["composition(n, k)"],description:"The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.",examples:["composition(5, 3)"],seealso:["combinations"]},stirlingS2:{name:"stirlingS2",category:"Combinatorics",syntax:["stirlingS2(n, k)"],description:"he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.",examples:["stirlingS2(5, 3)"],seealso:["bellNumbers"]},config:{name:"config",category:"Core",syntax:["config()","config(options)"],description:"Get configuration or change configuration.",examples:["config()","1/3 + 1/4",'config({number: "Fraction"})',"1/3 + 1/4"],seealso:[]},import:{name:"import",category:"Core",syntax:["import(functions)","import(functions, options)"],description:"Import functions or constants from an object.",examples:["import({myFn: f(x)=x^2, myConstant: 32 })","myFn(2)","myConstant"],seealso:[]},typed:{name:"typed",category:"Core",syntax:["typed(signatures)","typed(name, signatures)"],description:"Create a typed function.",examples:['double = typed({ "number": f(x)=x+x, "string": f(x)=concat(x,x) })',"double(2)",'double("hello")'],seealso:[]},arg:{name:"arg",category:"Complex",syntax:["arg(x)"],description:"Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).",examples:["arg(2 + 2i)","atan2(3, 2)","arg(2 + 3i)"],seealso:["re","im","conj","abs"]},conj:{name:"conj",category:"Complex",syntax:["conj(x)"],description:"Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.",examples:["conj(2 + 3i)","conj(2 - 3i)","conj(-5.2i)"],seealso:["re","im","abs","arg"]},re:{name:"re",category:"Complex",syntax:["re(x)"],description:"Get the real part of a complex number.",examples:["re(2 + 3i)","im(2 + 3i)","re(-5.2i)","re(2.4)"],seealso:["im","conj","abs","arg"]},im:{name:"im",category:"Complex",syntax:["im(x)"],description:"Get the imaginary part of a complex number.",examples:["im(2 + 3i)","re(2 + 3i)","im(-5.2i)","im(2.4)"],seealso:["re","conj","abs","arg"]},evaluate:{name:"evaluate",category:"Expression",syntax:["evaluate(expression)","evaluate(expression, scope)","evaluate([expr1, expr2, expr3, ...])","evaluate([expr1, expr2, expr3, ...], scope)"],description:"Evaluate an expression or an array with expressions.",examples:['evaluate("2 + 3")','evaluate("sqrt(16)")','evaluate("2 inch to cm")','evaluate("sin(x * pi)", { "x": 1/2 })','evaluate(["width=2", "height=4","width*height"])'],seealso:[]},help:{name:"help",category:"Expression",syntax:["help(object)","help(string)"],description:"Display documentation on a function or data type.",examples:["help(sqrt)",'help("complex")'],seealso:[]},distance:{name:"distance",category:"Geometry",syntax:["distance([x1, y1], [x2, y2])","distance([[x1, y1], [x2, y2]])"],description:"Calculates the Euclidean distance between two points.",examples:["distance([0,0], [4,4])","distance([[0,0], [4,4]])"],seealso:[]},intersect:{name:"intersect",category:"Geometry",syntax:["intersect(expr1, expr2, expr3, expr4)","intersect(expr1, expr2, expr3)"],description:"Computes the intersection point of lines and/or planes.",examples:["intersect([0, 0], [10, 10], [10, 0], [0, 10])","intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])"],seealso:[]},and:{name:"and",category:"Logical",syntax:["x and y","and(x, y)"],description:"Logical and. Test whether two values are both defined with a nonzero/nonempty value.",examples:["true and false","true and true","2 and 4"],seealso:["not","or","xor"]},not:{name:"not",category:"Logical",syntax:["not x","not(x)"],description:"Logical not. Flips the boolean value of given argument.",examples:["not true","not false","not 2","not 0"],seealso:["and","or","xor"]},or:{name:"or",category:"Logical",syntax:["x or y","or(x, y)"],description:"Logical or. Test if at least one value is defined with a nonzero/nonempty value.",examples:["true or false","false or false","0 or 4"],seealso:["not","and","xor"]},xor:{name:"xor",category:"Logical",syntax:["x xor y","xor(x, y)"],description:"Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.",examples:["true xor false","false xor false","true xor true","0 xor 4"],seealso:["not","and","or"]},concat:{name:"concat",category:"Matrix",syntax:["concat(A, B, C, ...)","concat(A, B, C, ..., dim)"],description:"Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.",examples:["A = [1, 2; 5, 6]","B = [3, 4; 7, 8]","concat(A, B)","concat(A, B, 1)","concat(A, B, 2)"],seealso:["det","diag","identity","inv","ones","range","size","squeeze","subset","trace","transpose","zeros"]},count:{name:"count",category:"Matrix",syntax:["count(x)"],description:"Count the number of elements of a matrix, array or string.",examples:["a = [1, 2; 3, 4; 5, 6]","count(a)","size(a)",'count("hello world")'],seealso:["size"]},cross:{name:"cross",category:"Matrix",syntax:["cross(A, B)"],description:"Calculate the cross product for two vectors in three dimensional space.",examples:["cross([1, 1, 0],  [0, 1, 1])","cross([3, -3, 1], [4, 9, 2])","cross([2, 3, 4],  [5, 6, 7])"],seealso:["multiply","dot"]},column:{name:"column",category:"Matrix",syntax:["column(x, index)"],description:"Return a column from a matrix or array.",examples:["A = [[1, 2], [3, 4]]","column(A, 1)","column(A, 2)"],seealso:["row","matrixFromColumns"]},ctranspose:{name:"ctranspose",category:"Matrix",syntax:["x'","ctranspose(x)"],description:"Complex Conjugate and Transpose a matrix",examples:["a = [1, 2, 3; 4, 5, 6]","a'","ctranspose(a)"],seealso:["concat","det","diag","identity","inv","ones","range","size","squeeze","subset","trace","zeros"]},det:{name:"det",category:"Matrix",syntax:["det(x)"],description:"Calculate the determinant of a matrix",examples:["det([1, 2; 3, 4])","det([-2, 2, 3; -1, 1, 3; 2, 0, -1])"],seealso:["concat","diag","identity","inv","ones","range","size","squeeze","subset","trace","transpose","zeros"]},diag:{name:"diag",category:"Matrix",syntax:["diag(x)","diag(x, k)"],description:"Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.",examples:["diag(1:3)","diag(1:3, 1)","a = [1, 2, 3; 4, 5, 6; 7, 8, 9]","diag(a)"],seealso:["concat","det","identity","inv","ones","range","size","squeeze","subset","trace","transpose","zeros"]},diff:{name:"diff",category:"Matrix",syntax:["diff(arr)","diff(arr, dim)"],description:["Create a new matrix or array with the difference of the passed matrix or array.","Dim parameter is optional and used to indicate the dimension of the array/matrix to apply the difference","If no dimension parameter is passed it is assumed as dimension 0","Dimension is zero-based in javascript and one-based in the parser","Arrays must be 'rectangular' meaning arrays like [1, 2]","If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays"],examples:["A = [1, 2, 4, 7, 0]","diff(A)","diff(A, 1)","B = [[1, 2], [3, 4]]","diff(B)","diff(B, 1)","diff(B, 2)","diff(B, bignumber(2))","diff([[1, 2], matrix([3, 4])], 2)"],seealso:["subtract","partitionSelect"]},dot:{name:"dot",category:"Matrix",syntax:["dot(A, B)","A * B"],description:"Calculate the dot product of two vectors. The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn",examples:["dot([2, 4, 1], [2, 2, 3])","[2, 4, 1] * [2, 2, 3]"],seealso:["multiply","cross"]},getMatrixDataType:{name:"getMatrixDataType",category:"Matrix",syntax:["getMatrixDataType(x)"],description:'Find the data type of all elements in a matrix or array, for example "number" if all items are a number and "Complex" if all values are complex numbers. If a matrix contains more than one data type, it will return "mixed".',examples:["getMatrixDataType([1, 2, 3])","getMatrixDataType([[5 cm], [2 inch]])",'getMatrixDataType([1, "text"])',"getMatrixDataType([1, bignumber(4)])"],seealso:["matrix","sparse","typeOf"]},identity:{name:"identity",category:"Matrix",syntax:["identity(n)","identity(m, n)","identity([m, n])"],description:"Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.",examples:["identity(3)","identity(3, 5)","a = [1, 2, 3; 4, 5, 6]","identity(size(a))"],seealso:["concat","det","diag","inv","ones","range","size","squeeze","subset","trace","transpose","zeros"]},filter:{name:"filter",category:"Matrix",syntax:["filter(x, test)"],description:"Filter items in a matrix.",examples:["isPositive(x) = x > 0","filter([6, -2, -1, 4, 3], isPositive)","filter([6, -2, 0, 1, 0], x != 0)"],seealso:["sort","map","forEach"]},flatten:{name:"flatten",category:"Matrix",syntax:["flatten(x)"],description:"Flatten a multi dimensional matrix into a single dimensional matrix.",examples:["a = [1, 2, 3; 4, 5, 6]","size(a)","b = flatten(a)","size(b)"],seealso:["concat","resize","size","squeeze"]},forEach:{name:"forEach",category:"Matrix",syntax:["forEach(x, callback)"],description:"Iterates over all elements of a matrix/array, and executes the given callback function.",examples:["numberOfPets = {}","addPet(n) = numberOfPets[n] = (numberOfPets[n] ? numberOfPets[n]:0 ) + 1;",'forEach(["Dog","Cat","Cat"], addPet)',"numberOfPets"],seealso:["map","sort","filter"]},inv:{name:"inv",category:"Matrix",syntax:["inv(x)"],description:"Calculate the inverse of a matrix",examples:["inv([1, 2; 3, 4])","inv(4)","1 / 4"],seealso:["concat","det","diag","identity","ones","range","size","squeeze","subset","trace","transpose","zeros"]},pinv:{name:"pinv",category:"Matrix",syntax:["pinv(x)"],description:"Calculate the Moore–Penrose inverse of a matrix",examples:["pinv([1, 2; 3, 4])","pinv([[1, 0], [0, 1], [0, 1]])","pinv(4)"],seealso:["inv"]},eigs:{name:"eigs",category:"Matrix",syntax:["eigs(x)"],description:"Calculate the eigenvalues and optionally eigenvectors of a square matrix",examples:["eigs([[5, 2.3], [2.3, 1]])","eigs([[1, 2, 3], [4, 5, 6], [7, 8, 9]], { precision: 1e-6, eigenvectors: false })"],seealso:["inv"]},kron:{name:"kron",category:"Matrix",syntax:["kron(x, y)"],description:"Calculates the Kronecker product of 2 matrices or vectors.",examples:["kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])","kron([1,1], [2,3,4])"],seealso:["multiply","dot","cross"]},matrixFromFunction:{name:"matrixFromFunction",category:"Matrix",syntax:["matrixFromFunction(size, fn)","matrixFromFunction(size, fn, format)","matrixFromFunction(size, fn, format, datatype)","matrixFromFunction(size, format, fn)","matrixFromFunction(size, format, datatype, fn)"],description:"Create a matrix by evaluating a generating function at each index.",examples:["f(I) = I[1] - I[2]","matrixFromFunction([3,3], f)","g(I) = I[1] - I[2] == 1 ? 4 : 0",'matrixFromFunction([100, 100], "sparse", g)',"matrixFromFunction([5], random)"],seealso:["matrix","matrixFromRows","matrixFromColumns","zeros"]},matrixFromRows:{name:"matrixFromRows",category:"Matrix",syntax:["matrixFromRows(...arr)","matrixFromRows(row1, row2)","matrixFromRows(row1, row2, row3)"],description:"Create a dense matrix from vectors as individual rows.",examples:["matrixFromRows([1, 2, 3], [[4],[5],[6]])"],seealso:["matrix","matrixFromColumns","matrixFromFunction","zeros"]},matrixFromColumns:{name:"matrixFromColumns",category:"Matrix",syntax:["matrixFromColumns(...arr)","matrixFromColumns(row1, row2)","matrixFromColumns(row1, row2, row3)"],description:"Create a dense matrix from vectors as individual columns.",examples:["matrixFromColumns([1, 2, 3], [[4],[5],[6]])"],seealso:["matrix","matrixFromRows","matrixFromFunction","zeros"]},map:{name:"map",category:"Matrix",syntax:["map(x, callback)","map(x, y, ..., callback)"],description:"Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array or the matrices/arrays.",examples:["map([1, 2, 3], square)","map([1, 2], [3, 4], f(a,b) = a + b)"],seealso:["filter","forEach"]},ones:{name:"ones",category:"Matrix",syntax:["ones(m)","ones(m, n)","ones(m, n, p, ...)","ones([m])","ones([m, n])","ones([m, n, p, ...])"],description:"Create a matrix containing ones.",examples:["ones(3)","ones(3, 5)","ones([2,3]) * 4.5","a = [1, 2, 3; 4, 5, 6]","ones(size(a))"],seealso:["concat","det","diag","identity","inv","range","size","squeeze","subset","trace","transpose","zeros"]},partitionSelect:{name:"partitionSelect",category:"Matrix",syntax:["partitionSelect(x, k)","partitionSelect(x, k, compare)"],description:"Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.",examples:["partitionSelect([5, 10, 1], 2)",'partitionSelect(["C", "B", "A", "D"], 1, compareText)',"arr = [5, 2, 1]","partitionSelect(arr, 0) # returns 1, arr is now: [1, 2, 5]","arr","partitionSelect(arr, 1, 'desc') # returns 2, arr is now: [5, 2, 1]","arr"],seealso:["sort"]},range:{name:"range",category:"Type",syntax:["start:end","start:step:end","range(start, end)","range(start, end, step)","range(string)"],description:"Create a range. Lower bound of the range is included, upper bound is excluded.",examples:["1:5","3:-1:-3","range(3, 7)","range(0, 12, 2)",'range("4:10")',"range(1m, 1m, 3m)","a = [1, 2, 3, 4; 5, 6, 7, 8]","a[1:2, 1:2]"],seealso:["concat","det","diag","identity","inv","ones","size","squeeze","subset","trace","transpose","zeros"]},resize:{name:"resize",category:"Matrix",syntax:["resize(x, size)","resize(x, size, defaultValue)"],description:"Resize a matrix.",examples:["resize([1,2,3,4,5], [3])","resize([1,2,3], [5])","resize([1,2,3], [5], -1)","resize(2, [2, 3])",'resize("hello", [8], "!")'],seealso:["size","subset","squeeze","reshape"]},reshape:{name:"reshape",category:"Matrix",syntax:["reshape(x, sizes)"],description:"Reshape a multi dimensional array to fit the specified dimensions.",examples:["reshape([1, 2, 3, 4, 5, 6], [2, 3])","reshape([[1, 2], [3, 4]], [1, 4])","reshape([[1, 2], [3, 4]], [4])","reshape([1, 2, 3, 4], [-1, 2])"],seealso:["size","squeeze","resize"]},rotate:{name:"rotate",category:"Matrix",syntax:["rotate(w, theta)","rotate(w, theta, v)"],description:"Returns a 2-D rotation matrix (2x2) for a given angle (in radians). Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.",examples:["rotate([1, 0], pi / 2)",'rotate(matrix([1, 0]), unit("35deg"))','rotate([1, 0, 0], unit("90deg"), [0, 0, 1])','rotate(matrix([1, 0, 0]), unit("90deg"), matrix([0, 0, 1]))'],seealso:["matrix","rotationMatrix"]},rotationMatrix:{name:"rotationMatrix",category:"Matrix",syntax:["rotationMatrix(theta)","rotationMatrix(theta, v)","rotationMatrix(theta, v, format)"],description:"Returns a 2-D rotation matrix (2x2) for a given angle (in radians). Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.",examples:["rotationMatrix(pi / 2)",'rotationMatrix(unit("45deg"), [0, 0, 1])','rotationMatrix(1, matrix([0, 0, 1]), "sparse")'],seealso:["cos","sin"]},row:{name:"row",category:"Matrix",syntax:["row(x, index)"],description:"Return a row from a matrix or array.",examples:["A = [[1, 2], [3, 4]]","row(A, 1)","row(A, 2)"],seealso:["column","matrixFromRows"]},size:{name:"size",category:"Matrix",syntax:["size(x)"],description:"Calculate the size of a matrix.",examples:["size(2.3)",'size("hello world")',"a = [1, 2; 3, 4; 5, 6]","size(a)","size(1:6)"],seealso:["concat","count","det","diag","identity","inv","ones","range","squeeze","subset","trace","transpose","zeros"]},sort:{name:"sort",category:"Matrix",syntax:["sort(x)","sort(x, compare)"],description:'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',examples:["sort([5, 10, 1])",'sort(["C", "B", "A", "D"], "natural")',"sortByLength(a, b) = size(a)[1] - size(b)[1]",'sort(["Langdon", "Tom", "Sara"], sortByLength)','sort(["10", "1", "2"], "natural")'],seealso:["map","filter","forEach"]},squeeze:{name:"squeeze",category:"Matrix",syntax:["squeeze(x)"],description:"Remove inner and outer singleton dimensions from a matrix.",examples:["a = zeros(3,2,1)","size(squeeze(a))","b = zeros(1,1,3)","size(squeeze(b))"],seealso:["concat","det","diag","identity","inv","ones","range","size","subset","trace","transpose","zeros"]},subset:{name:"subset",category:"Matrix",syntax:["value(index)","value(index) = replacement","subset(value, [index])","subset(value, [index], replacement)"],description:"Get or set a subset of the entries of a matrix or characters of a string. Indexes are one-based. There should be one index specification for each dimension of the target. Each specification can be a single index, a list of indices, or a range in colon notation `l:u`. In a range, both the lower bound l and upper bound u are included; and if a bound is omitted it defaults to the most extreme valid value. The cartesian product of the indices specified in each dimension determines the target of the operation.",examples:["d = [1, 2; 3, 4]","e = []","e[1, 1:2] = [5, 6]","e[2, :] = [7, 8]","f = d * e","f[2, 1]","f[:, 1]","f[[1,2], [1,3]] = [9, 10; 11, 12]","f"],seealso:["concat","det","diag","identity","inv","ones","range","size","squeeze","trace","transpose","zeros"]},trace:{name:"trace",category:"Matrix",syntax:["trace(A)"],description:"Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.",examples:["A = [1, 2, 3; -1, 2, 3; 2, 0, 3]","trace(A)"],seealso:["concat","det","diag","identity","inv","ones","range","size","squeeze","subset","transpose","zeros"]},transpose:{name:"transpose",category:"Matrix",syntax:["x'","transpose(x)"],description:"Transpose a matrix",examples:["a = [1, 2, 3; 4, 5, 6]","a'","transpose(a)"],seealso:["concat","det","diag","identity","inv","ones","range","size","squeeze","subset","trace","zeros"]},zeros:{name:"zeros",category:"Matrix",syntax:["zeros(m)","zeros(m, n)","zeros(m, n, p, ...)","zeros([m])","zeros([m, n])","zeros([m, n, p, ...])"],description:"Create a matrix containing zeros.",examples:["zeros(3)","zeros(3, 5)","a = [1, 2, 3; 4, 5, 6]","zeros(size(a))"],seealso:["concat","det","diag","identity","inv","ones","range","size","squeeze","subset","trace","transpose"]},fft:{name:"fft",category:"Matrix",syntax:["fft(x)"],description:"Calculate N-dimensional Fourier transform",examples:["fft([[1, 0], [1, 0]])"],seealso:["ifft"]},ifft:{name:"ifft",category:"Matrix",syntax:["ifft(x)"],description:"Calculate N-dimensional inverse Fourier transform",examples:["ifft([[2, 2], [0, 0]])"],seealso:["fft"]},sylvester:{name:"sylvester",category:"Algebra",syntax:["sylvester(A,B,C)"],description:"Solves the real-valued Sylvester equation AX+XB=C for X",examples:["sylvester([[-1, -2], [1, 1]], [[-2, 1], [-1, 2]], [[-3, 2], [3, 0]])","A = [[-1, -2], [1, 1]]; B = [[2, -1], [1, -2]]; C = [[-3, 2], [3, 0]]","sylvester(A, B, C)"],seealso:["schur","lyap"]},schur:{name:"schur",category:"Algebra",syntax:["schur(A)"],description:"Performs a real Schur decomposition of the real matrix A = UTU'",examples:["schur([[1, 0], [-4, 3]])","A = [[1, 0], [-4, 3]]","schur(A)"],seealso:["lyap","sylvester"]},lyap:{name:"lyap",category:"Algebra",syntax:["lyap(A,Q)"],description:"Solves the Continuous-time Lyapunov equation AP+PA'+Q=0 for P",examples:["lyap([[-2, 0], [1, -4]], [[3, 1], [1, 3]])","A = [[-2, 0], [1, -4]]","Q = [[3, 1], [1, 3]]","lyap(A,Q)"],seealso:["schur","sylvester"]},solveODE:{name:"solveODE",category:"Numeric",syntax:["solveODE(func, tspan, y0)","solveODE(func, tspan, y0, options)"],description:"Numerical Integration of Ordinary Differential Equations.",examples:["f(t,y) = y","tspan = [0, 4]","solveODE(f, tspan, 1)","solveODE(f, tspan, [1, 2])",'solveODE(f, tspan, 1, { method:"RK23", maxStep:0.1 })'],seealso:["derivative","simplifyCore"]},combinations:{name:"combinations",category:"Probability",syntax:["combinations(n, k)"],description:"Compute the number of combinations of n items taken k at a time",examples:["combinations(7, 5)"],seealso:["combinationsWithRep","permutations","factorial"]},combinationsWithRep:{name:"combinationsWithRep",category:"Probability",syntax:["combinationsWithRep(n, k)"],description:"Compute the number of combinations of n items taken k at a time with replacements.",examples:["combinationsWithRep(7, 5)"],seealso:["combinations","permutations","factorial"]},factorial:{name:"factorial",category:"Probability",syntax:["n!","factorial(n)"],description:"Compute the factorial of a value",examples:["5!","5 * 4 * 3 * 2 * 1","3!"],seealso:["combinations","combinationsWithRep","permutations","gamma"]},gamma:{name:"gamma",category:"Probability",syntax:["gamma(n)"],description:"Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.",examples:["gamma(4)","3!","gamma(1/2)","sqrt(pi)"],seealso:["factorial"]},kldivergence:{name:"kldivergence",category:"Probability",syntax:["kldivergence(x, y)"],description:"Calculate the Kullback-Leibler (KL) divergence  between two distributions.",examples:["kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])"],seealso:[]},lgamma:{name:"lgamma",category:"Probability",syntax:["lgamma(n)"],description:"Logarithm of the gamma function for real, positive numbers and complex numbers, using Lanczos approximation for numbers and Stirling series for complex numbers.",examples:["lgamma(4)","lgamma(1/2)","lgamma(i)","lgamma(complex(1.1, 2))"],seealso:["gamma"]},multinomial:{name:"multinomial",category:"Probability",syntax:["multinomial(A)"],description:"Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.",examples:["multinomial([1, 2, 1])"],seealso:["combinations","factorial"]},permutations:{name:"permutations",category:"Probability",syntax:["permutations(n)","permutations(n, k)"],description:"Compute the number of permutations of n items taken k at a time",examples:["permutations(5)","permutations(5, 3)"],seealso:["combinations","combinationsWithRep","factorial"]},pickRandom:{name:"pickRandom",category:"Probability",syntax:["pickRandom(array)","pickRandom(array, number)","pickRandom(array, weights)","pickRandom(array, number, weights)","pickRandom(array, weights, number)"],description:"Pick a random entry from a given array.",examples:["pickRandom(0:10)","pickRandom([1, 3, 1, 6])","pickRandom([1, 3, 1, 6], 2)","pickRandom([1, 3, 1, 6], [2, 3, 2, 1])","pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])","pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)"],seealso:["random","randomInt"]},random:{name:"random",category:"Probability",syntax:["random()","random(max)","random(min, max)","random(size)","random(size, max)","random(size, min, max)"],description:"Return a random number.",examples:["random()","random(10, 20)","random([2, 3])"],seealso:["pickRandom","randomInt"]},randomInt:{name:"randomInt",category:"Probability",syntax:["randomInt(max)","randomInt(min, max)","randomInt(size)","randomInt(size, max)","randomInt(size, min, max)"],description:"Return a random integer number",examples:["randomInt(10, 20)","randomInt([2, 3], 10)"],seealso:["pickRandom","random"]},compare:{name:"compare",category:"Relational",syntax:["compare(x, y)"],description:"Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.",examples:["compare(2, 3)","compare(3, 2)","compare(2, 2)","compare(5cm, 40mm)","compare(2, [1, 2, 3])"],seealso:["equal","unequal","smaller","smallerEq","largerEq","compareNatural","compareText"]},compareNatural:{name:"compareNatural",category:"Relational",syntax:["compareNatural(x, y)"],description:"Compare two values of any type in a deterministic, natural way. Returns 1 when x > y, -1 when x < y, and 0 when x == y.",examples:["compareNatural(2, 3)","compareNatural(3, 2)","compareNatural(2, 2)","compareNatural(5cm, 40mm)",'compareNatural("2", "10")',"compareNatural(2 + 3i, 2 + 4i)","compareNatural([1, 2, 4], [1, 2, 3])","compareNatural([1, 5], [1, 2, 3])","compareNatural([1, 2], [1, 2])","compareNatural({a: 2}, {a: 4})"],seealso:["equal","unequal","smaller","smallerEq","largerEq","compare","compareText"]},compareText:{name:"compareText",category:"Relational",syntax:["compareText(x, y)"],description:"Compare two strings lexically. Comparison is case sensitive. Returns 1 when x > y, -1 when x < y, and 0 when x == y.",examples:['compareText("B", "A")','compareText("A", "B")','compareText("A", "A")','compareText("2", "10")','compare("2", "10")',"compare(2, 10)",'compareNatural("2", "10")','compareText("B", ["A", "B", "C"])'],seealso:["compare","compareNatural"]},deepEqual:{name:"deepEqual",category:"Relational",syntax:["deepEqual(x, y)"],description:"Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.",examples:["deepEqual([1,3,4], [1,3,4])","deepEqual([1,3,4], [1,3])"],seealso:["equal","unequal","smaller","larger","smallerEq","largerEq","compare"]},equal:{name:"equal",category:"Relational",syntax:["x == y","equal(x, y)"],description:"Check equality of two values. Returns true if the values are equal, and false if not.",examples:["2+2 == 3","2+2 == 4","a = 3.2","b = 6-2.8","a == b","50cm == 0.5m"],seealso:["unequal","smaller","larger","smallerEq","largerEq","compare","deepEqual","equalText"]},equalText:{name:"equalText",category:"Relational",syntax:["equalText(x, y)"],description:"Check equality of two strings. Comparison is case sensitive. Returns true if the values are equal, and false if not.",examples:['equalText("Hello", "Hello")','equalText("a", "A")','equal("2e3", "2000")','equalText("2e3", "2000")','equalText("B", ["A", "B", "C"])'],seealso:["compare","compareNatural","compareText","equal"]},larger:{name:"larger",category:"Relational",syntax:["x > y","larger(x, y)"],description:"Check if value x is larger than y. Returns true if x is larger than y, and false if not.",examples:["2 > 3","5 > 2*2","a = 3.3","b = 6-2.8","(a > b)","(b < a)","5 cm > 2 inch"],seealso:["equal","unequal","smaller","smallerEq","largerEq","compare"]},largerEq:{name:"largerEq",category:"Relational",syntax:["x >= y","largerEq(x, y)"],description:"Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.",examples:["2 >= 1+1","2 > 1+1","a = 3.2","b = 6-2.8","(a >= b)"],seealso:["equal","unequal","smallerEq","smaller","compare"]},smaller:{name:"smaller",category:"Relational",syntax:["x < y","smaller(x, y)"],description:"Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.",examples:["2 < 3","5 < 2*2","a = 3.3","b = 6-2.8","(a < b)","5 cm < 2 inch"],seealso:["equal","unequal","larger","smallerEq","largerEq","compare"]},smallerEq:{name:"smallerEq",category:"Relational",syntax:["x <= y","smallerEq(x, y)"],description:"Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.",examples:["2 <= 1+1","2 < 1+1","a = 3.2","b = 6-2.8","(a <= b)"],seealso:["equal","unequal","larger","smaller","largerEq","compare"]},unequal:{name:"unequal",category:"Relational",syntax:["x != y","unequal(x, y)"],description:"Check unequality of two values. Returns true if the values are unequal, and false if they are equal.",examples:["2+2 != 3","2+2 != 4","a = 3.2","b = 6-2.8","a != b","50cm != 0.5m","5 cm != 2 inch"],seealso:["equal","smaller","larger","smallerEq","largerEq","compare","deepEqual"]},setCartesian:{name:"setCartesian",category:"Set",syntax:["setCartesian(set1, set2)"],description:"Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays and the values will be sorted in ascending order before the operation.",examples:["setCartesian([1, 2], [3, 4])"],seealso:["setUnion","setIntersect","setDifference","setPowerset"]},setDifference:{name:"setDifference",category:"Set",syntax:["setDifference(set1, set2)"],description:"Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setDifference([1, 2, 3, 4], [3, 4, 5, 6])","setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],seealso:["setUnion","setIntersect","setSymDifference"]},setDistinct:{name:"setDistinct",category:"Set",syntax:["setDistinct(set)"],description:"Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.",examples:["setDistinct([1, 1, 1, 2, 2, 3])"],seealso:["setMultiplicity"]},setIntersect:{name:"setIntersect",category:"Set",syntax:["setIntersect(set1, set2)"],description:"Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setIntersect([1, 2, 3, 4], [3, 4, 5, 6])","setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],seealso:["setUnion","setDifference"]},setIsSubset:{name:"setIsSubset",category:"Set",syntax:["setIsSubset(set1, set2)"],description:"Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setIsSubset([1, 2], [3, 4, 5, 6])","setIsSubset([3, 4], [3, 4, 5, 6])"],seealso:["setUnion","setIntersect","setDifference"]},setMultiplicity:{name:"setMultiplicity",category:"Set",syntax:["setMultiplicity(element, set)"],description:"Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.",examples:["setMultiplicity(1, [1, 2, 2, 4])","setMultiplicity(2, [1, 2, 2, 4])"],seealso:["setDistinct","setSize"]},setPowerset:{name:"setPowerset",category:"Set",syntax:["setPowerset(set)"],description:"Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.",examples:["setPowerset([1, 2, 3])"],seealso:["setCartesian"]},setSize:{name:"setSize",category:"Set",syntax:["setSize(set)","setSize(set, unique)"],description:'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',examples:["setSize([1, 2, 2, 4])","setSize([1, 2, 2, 4], true)"],seealso:["setUnion","setIntersect","setDifference"]},setSymDifference:{name:"setSymDifference",category:"Set",syntax:["setSymDifference(set1, set2)"],description:"Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])","setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],seealso:["setUnion","setIntersect","setDifference"]},setUnion:{name:"setUnion",category:"Set",syntax:["setUnion(set1, set2)"],description:"Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.",examples:["setUnion([1, 2, 3, 4], [3, 4, 5, 6])","setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])"],seealso:["setIntersect","setDifference"]},zpk2tf:{name:"zpk2tf",category:"Signal",syntax:["zpk2tf(z, p, k)"],description:"Compute the transfer function of a zero-pole-gain model.",examples:["zpk2tf([1, 2], [-1, -2], 1)","zpk2tf([1, 2], [-1, -2])","zpk2tf([1 - 3i, 2 + 2i], [-1, -2])"],seealso:[]},freqz:{name:"freqz",category:"Signal",syntax:["freqz(b, a)","freqz(b, a, w)"],description:"Calculates the frequency response of a filter given its numerator and denominator coefficients.",examples:["freqz([1, 2], [1, 2, 3])","freqz([1, 2], [1, 2, 3], [0, 1])","freqz([1, 2], [1, 2, 3], 512)"],seealso:[]},erf:{name:"erf",category:"Special",syntax:["erf(x)"],description:"Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x",examples:["erf(0.2)","erf(-0.5)","erf(4)"],seealso:[]},zeta:{name:"zeta",category:"Special",syntax:["zeta(s)"],description:"Compute the Riemann Zeta Function using an infinite series and Riemann's Functional Equation for the entire complex plane",examples:["zeta(0.2)","zeta(-0.5)","zeta(4)"],seealso:[]},cumsum:{name:"cumsum",category:"Statistics",syntax:["cumsum(a, b, c, ...)","cumsum(A)"],description:"Compute the cumulative sum of all values.",examples:["cumsum(2, 3, 4, 1)","cumsum([2, 3, 4, 1])","cumsum([1, 2; 3, 4])","cumsum([1, 2; 3, 4], 1)","cumsum([1, 2; 3, 4], 2)"],seealso:["max","mean","median","min","prod","std","sum","variance"]},mad:{name:"mad",category:"Statistics",syntax:["mad(a, b, c, ...)","mad(A)"],description:"Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.",examples:["mad(10, 20, 30)","mad([1, 2, 3])"],seealso:["mean","median","std","abs"]},max:{name:"max",category:"Statistics",syntax:["max(a, b, c, ...)","max(A)","max(A, dimension)"],description:"Compute the maximum value of a list of values.",examples:["max(2, 3, 4, 1)","max([2, 3, 4, 1])","max([2, 5; 4, 3])","max([2, 5; 4, 3], 1)","max([2, 5; 4, 3], 2)","max(2.7, 7.1, -4.5, 2.0, 4.1)","min(2.7, 7.1, -4.5, 2.0, 4.1)"],seealso:["mean","median","min","prod","std","sum","variance"]},mean:{name:"mean",category:"Statistics",syntax:["mean(a, b, c, ...)","mean(A)","mean(A, dimension)"],description:"Compute the arithmetic mean of a list of values.",examples:["mean(2, 3, 4, 1)","mean([2, 3, 4, 1])","mean([2, 5; 4, 3])","mean([2, 5; 4, 3], 1)","mean([2, 5; 4, 3], 2)","mean([1.0, 2.7, 3.2, 4.0])"],seealso:["max","median","min","prod","std","sum","variance"]},median:{name:"median",category:"Statistics",syntax:["median(a, b, c, ...)","median(A)"],description:"Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.",examples:["median(5, 2, 7)","median([3, -1, 5, 7])"],seealso:["max","mean","min","prod","std","sum","variance","quantileSeq"]},min:{name:"min",category:"Statistics",syntax:["min(a, b, c, ...)","min(A)","min(A, dimension)"],description:"Compute the minimum value of a list of values.",examples:["min(2, 3, 4, 1)","min([2, 3, 4, 1])","min([2, 5; 4, 3])","min([2, 5; 4, 3], 1)","min([2, 5; 4, 3], 2)","min(2.7, 7.1, -4.5, 2.0, 4.1)","max(2.7, 7.1, -4.5, 2.0, 4.1)"],seealso:["max","mean","median","prod","std","sum","variance"]},mode:{name:"mode",category:"Statistics",syntax:["mode(a, b, c, ...)","mode(A)","mode(A, a, b, B, c, ...)"],description:"Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.",examples:["mode(2, 1, 4, 3, 1)","mode([1, 2.7, 3.2, 4, 2.7])","mode(1, 4, 6, 1, 6)"],seealso:["max","mean","min","median","prod","std","sum","variance"]},prod:{name:"prod",category:"Statistics",syntax:["prod(a, b, c, ...)","prod(A)"],description:"Compute the product of all values.",examples:["prod(2, 3, 4)","prod([2, 3, 4])","prod([2, 5; 4, 3])"],seealso:["max","mean","min","median","min","std","sum","variance"]},quantileSeq:{name:"quantileSeq",category:"Statistics",syntax:["quantileSeq(A, prob[, sorted])","quantileSeq(A, [prob1, prob2, ...][, sorted])","quantileSeq(A, N[, sorted])"],description:"Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probability are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.",examples:["quantileSeq([3, -1, 5, 7], 0.5)","quantileSeq([3, -1, 5, 7], [1/3, 2/3])","quantileSeq([3, -1, 5, 7], 2)","quantileSeq([-1, 3, 5, 7], 0.5, true)"],seealso:["mean","median","min","max","prod","std","sum","variance"]},std:{name:"std",category:"Statistics",syntax:["std(a, b, c, ...)","std(A)","std(A, dimension)","std(A, normalization)","std(A, dimension, normalization)"],description:'Compute the standard deviation of all values, defined as std(A) = sqrt(variance(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',examples:["std(2, 4, 6)","std([2, 4, 6, 8])",'std([2, 4, 6, 8], "uncorrected")','std([2, 4, 6, 8], "biased")',"std([1, 2, 3; 4, 5, 6])"],seealso:["max","mean","min","median","prod","sum","variance"]},sum:{name:"sum",category:"Statistics",syntax:["sum(a, b, c, ...)","sum(A)","sum(A, dimension)"],description:"Compute the sum of all values.",examples:["sum(2, 3, 4, 1)","sum([2, 3, 4, 1])","sum([2, 5; 4, 3])"],seealso:["max","mean","median","min","prod","std","sum","variance"]},variance:{name:"variance",category:"Statistics",syntax:["variance(a, b, c, ...)","variance(A)","variance(A, dimension)","variance(A, normalization)","variance(A, dimension, normalization)"],description:'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',examples:["variance(2, 4, 6)","variance([2, 4, 6, 8])",'variance([2, 4, 6, 8], "uncorrected")','variance([2, 4, 6, 8], "biased")',"variance([1, 2, 3; 4, 5, 6])"],seealso:["max","mean","min","median","min","prod","std","sum"]},corr:{name:"corr",category:"Statistics",syntax:["corr(A,B)"],description:"Compute the correlation coefficient of a two list with values, For matrices, the matrix correlation coefficient is calculated.",examples:["corr([2, 4, 6, 8],[1, 2, 3, 6])","corr(matrix([[1, 2.2, 3, 4.8, 5], [1, 2, 3, 4, 5]]), matrix([[4, 5.3, 6.6, 7, 8], [1, 2, 3, 4, 5]]))"],seealso:["max","mean","min","median","min","prod","std","sum"]},acos:{name:"acos",category:"Trigonometry",syntax:["acos(x)"],description:"Compute the inverse cosine of a value in radians.",examples:["acos(0.5)","acos(cos(2.3))"],seealso:["cos","atan","asin"]},acosh:{name:"acosh",category:"Trigonometry",syntax:["acosh(x)"],description:"Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.",examples:["acosh(1.5)"],seealso:["cosh","asinh","atanh"]},acot:{name:"acot",category:"Trigonometry",syntax:["acot(x)"],description:"Calculate the inverse cotangent of a value.",examples:["acot(0.5)","acot(cot(0.5))","acot(2)"],seealso:["cot","atan"]},acoth:{name:"acoth",category:"Trigonometry",syntax:["acoth(x)"],description:"Calculate the inverse hyperbolic tangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.",examples:["acoth(2)","acoth(0.5)"],seealso:["acsch","asech"]},acsc:{name:"acsc",category:"Trigonometry",syntax:["acsc(x)"],description:"Calculate the inverse cotangent of a value.",examples:["acsc(2)","acsc(csc(0.5))","acsc(0.5)"],seealso:["csc","asin","asec"]},acsch:{name:"acsch",category:"Trigonometry",syntax:["acsch(x)"],description:"Calculate the inverse hyperbolic cosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.",examples:["acsch(0.5)"],seealso:["asech","acoth"]},asec:{name:"asec",category:"Trigonometry",syntax:["asec(x)"],description:"Calculate the inverse secant of a value.",examples:["asec(0.5)","asec(sec(0.5))","asec(2)"],seealso:["acos","acot","acsc"]},asech:{name:"asech",category:"Trigonometry",syntax:["asech(x)"],description:"Calculate the inverse secant of a value.",examples:["asech(0.5)"],seealso:["acsch","acoth"]},asin:{name:"asin",category:"Trigonometry",syntax:["asin(x)"],description:"Compute the inverse sine of a value in radians.",examples:["asin(0.5)","asin(sin(0.5))"],seealso:["sin","acos","atan"]},asinh:{name:"asinh",category:"Trigonometry",syntax:["asinh(x)"],description:"Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.",examples:["asinh(0.5)"],seealso:["acosh","atanh"]},atan:{name:"atan",category:"Trigonometry",syntax:["atan(x)"],description:"Compute the inverse tangent of a value in radians.",examples:["atan(0.5)","atan(tan(0.5))"],seealso:["tan","acos","asin"]},atanh:{name:"atanh",category:"Trigonometry",syntax:["atanh(x)"],description:"Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.",examples:["atanh(0.5)"],seealso:["acosh","asinh"]},atan2:{name:"atan2",category:"Trigonometry",syntax:["atan2(y, x)"],description:"Computes the principal value of the arc tangent of y/x in radians.",examples:["atan2(2, 2) / pi","angle = 60 deg in rad","x = cos(angle)","y = sin(angle)","atan2(y, x)"],seealso:["sin","cos","tan"]},cos:{name:"cos",category:"Trigonometry",syntax:["cos(x)"],description:"Compute the cosine of x in radians.",examples:["cos(2)","cos(pi / 4) ^ 2","cos(180 deg)","cos(60 deg)","sin(0.2)^2 + cos(0.2)^2"],seealso:["acos","sin","tan"]},cosh:{name:"cosh",category:"Trigonometry",syntax:["cosh(x)"],description:"Compute the hyperbolic cosine of x in radians.",examples:["cosh(0.5)"],seealso:["sinh","tanh","coth"]},cot:{name:"cot",category:"Trigonometry",syntax:["cot(x)"],description:"Compute the cotangent of x in radians. Defined as 1/tan(x)",examples:["cot(2)","1 / tan(2)"],seealso:["sec","csc","tan"]},coth:{name:"coth",category:"Trigonometry",syntax:["coth(x)"],description:"Compute the hyperbolic cotangent of x in radians.",examples:["coth(2)","1 / tanh(2)"],seealso:["sech","csch","tanh"]},csc:{name:"csc",category:"Trigonometry",syntax:["csc(x)"],description:"Compute the cosecant of x in radians. Defined as 1/sin(x)",examples:["csc(2)","1 / sin(2)"],seealso:["sec","cot","sin"]},csch:{name:"csch",category:"Trigonometry",syntax:["csch(x)"],description:"Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)",examples:["csch(2)","1 / sinh(2)"],seealso:["sech","coth","sinh"]},sec:{name:"sec",category:"Trigonometry",syntax:["sec(x)"],description:"Compute the secant of x in radians. Defined as 1/cos(x)",examples:["sec(2)","1 / cos(2)"],seealso:["cot","csc","cos"]},sech:{name:"sech",category:"Trigonometry",syntax:["sech(x)"],description:"Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)",examples:["sech(2)","1 / cosh(2)"],seealso:["coth","csch","cosh"]},sin:{name:"sin",category:"Trigonometry",syntax:["sin(x)"],description:"Compute the sine of x in radians.",examples:["sin(2)","sin(pi / 4) ^ 2","sin(90 deg)","sin(30 deg)","sin(0.2)^2 + cos(0.2)^2"],seealso:["asin","cos","tan"]},sinh:{name:"sinh",category:"Trigonometry",syntax:["sinh(x)"],description:"Compute the hyperbolic sine of x in radians.",examples:["sinh(0.5)"],seealso:["cosh","tanh"]},tan:{name:"tan",category:"Trigonometry",syntax:["tan(x)"],description:"Compute the tangent of x in radians.",examples:["tan(0.5)","sin(0.5) / cos(0.5)","tan(pi / 4)","tan(45 deg)"],seealso:["atan","sin","cos"]},tanh:{name:"tanh",category:"Trigonometry",syntax:["tanh(x)"],description:"Compute the hyperbolic tangent of x in radians.",examples:["tanh(0.5)","sinh(0.5) / cosh(0.5)"],seealso:["sinh","cosh"]},to:{name:"to",category:"Units",syntax:["x to unit","to(x, unit)"],description:"Change the unit of a value.",examples:["5 inch to cm","3.2kg to g","16 bytes in bits"],seealso:[]},clone:{name:"clone",category:"Utils",syntax:["clone(x)"],description:"Clone a variable. Creates a copy of primitive variables, and a deep copy of matrices",examples:["clone(3.5)","clone(2 - 4i)","clone(45 deg)","clone([1, 2; 3, 4])",'clone("hello world")'],seealso:[]},format:{name:"format",category:"Utils",syntax:["format(value)","format(value, precision)"],description:"Format a value of any type as string.",examples:["format(2.3)","format(3 - 4i)","format([])","format(pi, 3)"],seealso:["print"]},bin:{name:"bin",category:"Utils",syntax:["bin(value)"],description:"Format a number as binary",examples:["bin(2)"],seealso:["oct","hex"]},oct:{name:"oct",category:"Utils",syntax:["oct(value)"],description:"Format a number as octal",examples:["oct(56)"],seealso:["bin","hex"]},hex:{name:"hex",category:"Utils",syntax:["hex(value)"],description:"Format a number as hexadecimal",examples:["hex(240)"],seealso:["bin","oct"]},isNaN:{name:"isNaN",category:"Utils",syntax:["isNaN(x)"],description:"Test whether a value is NaN (not a number)",examples:["isNaN(2)","isNaN(0 / 0)","isNaN(NaN)","isNaN(Infinity)"],seealso:["isNegative","isNumeric","isPositive","isZero"]},isInteger:{name:"isInteger",category:"Utils",syntax:["isInteger(x)"],description:"Test whether a value is an integer number.",examples:["isInteger(2)","isInteger(3.5)","isInteger([3, 0.5, -2])"],seealso:["isNegative","isNumeric","isPositive","isZero"]},isNegative:{name:"isNegative",category:"Utils",syntax:["isNegative(x)"],description:"Test whether a value is negative: smaller than zero.",examples:["isNegative(2)","isNegative(0)","isNegative(-4)","isNegative([3, 0.5, -2])"],seealso:["isInteger","isNumeric","isPositive","isZero"]},isNumeric:{name:"isNumeric",category:"Utils",syntax:["isNumeric(x)"],description:"Test whether a value is a numeric value. Returns true when the input is a number, BigNumber, Fraction, or boolean.",examples:["isNumeric(2)",'isNumeric("2")','hasNumericValue("2")',"isNumeric(0)","isNumeric(bignumber(500))","isNumeric(fraction(0.125))","isNumeric(2 + 3i)",'isNumeric([2.3, "foo", false])'],seealso:["isInteger","isZero","isNegative","isPositive","isNaN","hasNumericValue"]},hasNumericValue:{name:"hasNumericValue",category:"Utils",syntax:["hasNumericValue(x)"],description:"Test whether a value is an numeric value. In case of a string, true is returned if the string contains a numeric value.",examples:["hasNumericValue(2)",'hasNumericValue("2")','isNumeric("2")',"hasNumericValue(0)","hasNumericValue(bignumber(500))","hasNumericValue(fraction(0.125))","hasNumericValue(2 + 3i)",'hasNumericValue([2.3, "foo", false])'],seealso:["isInteger","isZero","isNegative","isPositive","isNaN","isNumeric"]},isPositive:{name:"isPositive",category:"Utils",syntax:["isPositive(x)"],description:"Test whether a value is positive: larger than zero.",examples:["isPositive(2)","isPositive(0)","isPositive(-4)","isPositive([3, 0.5, -2])"],seealso:["isInteger","isNumeric","isNegative","isZero"]},isPrime:{name:"isPrime",category:"Utils",syntax:["isPrime(x)"],description:"Test whether a value is prime: has no divisors other than itself and one.",examples:["isPrime(3)","isPrime(-2)","isPrime([2, 17, 100])"],seealso:["isInteger","isNumeric","isNegative","isZero"]},isZero:{name:"isZero",category:"Utils",syntax:["isZero(x)"],description:"Test whether a value is zero.",examples:["isZero(2)","isZero(0)","isZero(-4)","isZero([3, 0, -2, 0])"],seealso:["isInteger","isNumeric","isNegative","isPositive"]},print:{name:"print",category:"Utils",syntax:["print(template, values)","print(template, values, precision)"],description:"Interpolate values into a string template.",examples:['print("Lucy is $age years old", {age: 5})','print("The value of pi is $pi", {pi: pi}, 3)','print("Hello, $user.name!", {user: {name: "John"}})','print("Values: $1, $2, $3", [6, 9, 4])'],seealso:["format"]},typeOf:{name:"typeOf",category:"Utils",syntax:["typeOf(x)"],description:"Get the type of a variable.",examples:["typeOf(3.5)","typeOf(2 - 4i)","typeOf(45 deg)",'typeOf("hello world")'],seealso:["getMatrixDataType"]},numeric:{name:"numeric",category:"Utils",syntax:["numeric(x)"],description:"Convert a numeric input to a specific numeric type: number, BigNumber, bigint, or Fraction.",examples:['numeric("4")','numeric("4", "number")','numeric("4", "bigint")','numeric("4", "BigNumber")','numeric("4", "Fraction")','numeric(4, "Fraction")','numeric(fraction(2, 5), "number")'],seealso:["number","bigint","fraction","bignumber","string","format"]}},help_dependencies=["typed","mathWithTransform","Help"],createHelp=(0,factory.P9)("help",help_dependencies,(_ref=>{var{typed:typed,mathWithTransform:mathWithTransform,Help:Help}=_ref;return typed("help",{any:function any(search){var prop,searchName=search;if("string"!=typeof search)for(prop in mathWithTransform)if((0,object.mQ)(mathWithTransform,prop)&&search===mathWithTransform[prop]){searchName=prop;break}var doc=(0,customs.HU)(embeddedDocs,searchName);if(!doc){var searchText="function"==typeof searchName?searchName.name:searchName;throw new Error('No documentation found on "'+searchText+'"')}return new Help(doc)}})})),chain_dependencies=["typed","Chain"],createChain=(0,factory.P9)("chain",chain_dependencies,(_ref=>{var{typed:typed,Chain:Chain}=_ref;return typed("chain",{"":function _(){return new Chain},any:function any(value){return new Chain(value)}})})),det=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/det.js"),inv=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/inv.js"),pinv=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/pinv.js"),eigs=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/eigs.js"),expm=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/expm.js"),sqrtm=__webpack_require__("./node_modules/mathjs/lib/esm/function/matrix/sqrtm.js"),sylvester=__webpack_require__("./node_modules/mathjs/lib/esm/function/algebra/sylvester.js"),schur=__webpack_require__("./node_modules/mathjs/lib/esm/function/algebra/decomposition/schur.js"),lyap=__webpack_require__("./node_modules/mathjs/lib/esm/function/algebra/lyap.js"),divide=__webpack_require__("./node_modules/mathjs/lib/esm/function/arithmetic/divide.js"),distance=__webpack_require__("./node_modules/mathjs/lib/esm/function/geometry/distance.js"),intersect=__webpack_require__("./node_modules/mathjs/lib/esm/function/geometry/intersect.js"),statistics_sum=__webpack_require__("./node_modules/mathjs/lib/esm/function/statistics/sum.js"),statistics_cumsum=__webpack_require__("./node_modules/mathjs/lib/esm/function/statistics/cumsum.js"),statistics_mean=__webpack_require__("./node_modules/mathjs/lib/esm/function/statistics/mean.js"),median=__webpack_require__("./node_modules/mathjs/lib/esm/function/statistics/median.js"),mad=__webpack_require__("./node_modules/mathjs/lib/esm/function/statistics/mad.js"),statistics_variance=__webpack_require__("./node_modules/mathjs/lib/esm/function/statistics/variance.js"),statistics_quantileSeq=__webpack_require__("./node_modules/mathjs/lib/esm/function/statistics/quantileSeq.js"),statistics_std=__webpack_require__("./node_modules/mathjs/lib/esm/function/statistics/std.js"),corr=__webpack_require__("./node_modules/mathjs/lib/esm/function/statistics/corr.js"),combinations=__webpack_require__("./node_modules/mathjs/lib/esm/function/probability/combinations.js"),combinationsWithRep=__webpack_require__("./node_modules/mathjs/lib/esm/function/probability/combinationsWithRep.js"),gamma=__webpack_require__("./node_modules/mathjs/lib/esm/function/probability/gamma.js"),lgamma=__webpack_require__("./node_modules/mathjs/lib/esm/function/probability/lgamma.js"),factorial=__webpack_require__("./node_modules/mathjs/lib/esm/function/probability/factorial.js"),kldivergence=__webpack_require__("./node_modules/mathjs/lib/esm/function/probability/kldivergence.js"),multinomial=__webpack_require__("./node_modules/mathjs/lib/esm/function/probability/multinomial.js"),permutations=__webpack_require__("./node_modules/mathjs/lib/esm/function/probability/permutations.js"),pickRandom=__webpack_require__("./node_modules/mathjs/lib/esm/function/probability/pickRandom.js"),random=__webpack_require__("./node_modules/mathjs/lib/esm/function/probability/random.js"),randomInt=__webpack_require__("./node_modules/mathjs/lib/esm/function/probability/randomInt.js"),stirlingS2=__webpack_require__("./node_modules/mathjs/lib/esm/function/combinatorics/stirlingS2.js"),bellNumbers=__webpack_require__("./node_modules/mathjs/lib/esm/function/combinatorics/bellNumbers.js"),catalan=__webpack_require__("./node_modules/mathjs/lib/esm/function/combinatorics/catalan.js"),composition=__webpack_require__("./node_modules/mathjs/lib/esm/function/combinatorics/composition.js"),leafCount_dependencies=["parse","typed"],createLeafCount=(0,factory.P9)("leafCount",leafCount_dependencies,(_ref=>{var{parse:parse,typed:typed}=_ref;function countLeaves(node){var count=0;return node.forEach((n=>{count+=countLeaves(n)})),count||1}return typed("leafCount",{Node:function Node(expr){return countLeaves(expr)}})}));function isNumericNode(x){return(0,is.BA)(x)||(0,is.$$)(x)&&x.isUnary()&&(0,is.BA)(x.args[0])}function isConstantExpression(x){return!!(0,is.BA)(x)||(!(!(0,is.Px)(x)&&!(0,is.$$)(x)||!x.args.every(isConstantExpression))||!(!(0,is.tv)(x)||!isConstantExpression(x.content)))}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){(0,defineProperty.A)(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}var util_dependencies=["FunctionNode","OperatorNode","SymbolNode"],createUtil=(0,factory.P9)("simplifyUtil",util_dependencies,(_ref=>{var{FunctionNode:FunctionNode,OperatorNode:OperatorNode,SymbolNode:SymbolNode}=_ref,T=!0,F=!1,defaultContext={add:{trivial:T,total:T,commutative:T,associative:T},unaryPlus:{trivial:T,total:T,commutative:T,associative:T},subtract:{trivial:F,total:T,commutative:F,associative:F},multiply:{trivial:T,total:T,commutative:T,associative:T},divide:{trivial:F,total:T,commutative:F,associative:F},paren:{trivial:T,total:T,commutative:T,associative:F},defaultF:{trivial:F,total:T,commutative:F,associative:F}};function hasProperty(nodeOrName,property){var context=arguments.length>2&&void 0!==arguments[2]?arguments[2]:defaultContext,name="defaultF";if("string"==typeof nodeOrName?name=nodeOrName:(0,is.$$)(nodeOrName)?name=nodeOrName.fn.toString():(0,is.Px)(nodeOrName)?name=nodeOrName.name:(0,is.tv)(nodeOrName)&&(name="paren"),(0,object.mQ)(context,name)){var properties=context[name];if((0,object.mQ)(properties,property))return properties[property];if((0,object.mQ)(defaultContext,name))return defaultContext[name][property]}if((0,object.mQ)(context,"defaultF")){var _properties=context.defaultF;return(0,object.mQ)(_properties,property)?_properties[property]:defaultContext.defaultF[property]}if((0,object.mQ)(defaultContext,name)){var _properties2=defaultContext[name];if((0,object.mQ)(_properties2,property))return _properties2[property]}return defaultContext.defaultF[property]}function isAssociative(node){return hasProperty(node,"associative",arguments.length>1&&void 0!==arguments[1]?arguments[1]:defaultContext)}function allChildren(node,context){var op,children=[],_findChildren=function findChildren(node){for(var i=0;i<node.args.length;i++){var child=node.args[i];(0,is.$$)(child)&&op===child.op?_findChildren(child):children.push(child)}};return isAssociative(node,context)?(op=node.op,_findChildren(node),children):node.args}function createMakeNodeFunction(node){return(0,is.$$)(node)?function(args){try{return new OperatorNode(node.op,node.fn,args,node.implicit)}catch(err){return console.error(err),[]}}:function(args){return new FunctionNode(new SymbolNode(node.name),args)}}return{createMakeNodeFunction:createMakeNodeFunction,hasProperty:hasProperty,isCommutative:function isCommutative(node){return hasProperty(node,"commutative",arguments.length>1&&void 0!==arguments[1]?arguments[1]:defaultContext)},isAssociative:isAssociative,mergeContext:function mergeContext(primary,secondary){var merged=_objectSpread({},primary);for(var prop in secondary)(0,object.mQ)(primary,prop)?merged[prop]=_objectSpread(_objectSpread({},secondary[prop]),primary[prop]):merged[prop]=secondary[prop];return merged},flatten:function flatten(node,context){if(!node.args||0===node.args.length)return node;node.args=allChildren(node,context);for(var i=0;i<node.args.length;i++)flatten(node.args[i],context)},allChildren:allChildren,unflattenr:function unflattenr(node,context){if(node.args&&0!==node.args.length){for(var makeNode=createMakeNodeFunction(node),l=node.args.length,i=0;i<l;i++)unflattenr(node.args[i],context);if(l>2&&isAssociative(node,context)){for(var curnode=node.args.pop();node.args.length>0;)curnode=makeNode([node.args.pop(),curnode]);node.args=curnode.args}}},unflattenl:function unflattenl(node,context){if(node.args&&0!==node.args.length){for(var makeNode=createMakeNodeFunction(node),l=node.args.length,i=0;i<l;i++)unflattenl(node.args[i],context);if(l>2&&isAssociative(node,context)){for(var curnode=node.args.shift();node.args.length>0;)curnode=makeNode([curnode,node.args.shift()]);node.args=curnode.args}}},defaultContext:defaultContext,realContext:{divide:{total:F},log:{total:F}},positiveContext:{subtract:{total:F},abs:{trivial:T},log:{total:T}}}})),simplify_dependencies=["config","typed","parse","add","subtract","multiply","divide","pow","isZero","equal","resolve","simplifyConstant","simplifyCore","?fraction","?bignumber","mathWithTransform","matrix","AccessorNode","ArrayNode","ConstantNode","FunctionNode","IndexNode","ObjectNode","OperatorNode","ParenthesisNode","SymbolNode"],createSimplify=(0,factory.P9)("simplify",simplify_dependencies,(_ref=>{var{config:config,typed:typed,parse:parse,add:add,subtract:subtract,multiply:multiply,divide:divide,pow:pow,isZero:isZero,equal:equal,resolve:resolve,simplifyConstant:simplifyConstant,simplifyCore:simplifyCore,fraction:fraction,bignumber:bignumber,mathWithTransform:mathWithTransform,matrix:matrix,AccessorNode:AccessorNode,ArrayNode:ArrayNode,ConstantNode:ConstantNode,FunctionNode:FunctionNode,IndexNode:IndexNode,ObjectNode:ObjectNode,OperatorNode:OperatorNode,ParenthesisNode:ParenthesisNode,SymbolNode:SymbolNode}=_ref,{hasProperty:hasProperty,isCommutative:isCommutative,isAssociative:isAssociative,mergeContext:mergeContext,flatten:flatten,unflattenr:unflattenr,unflattenl:unflattenl,createMakeNodeFunction:createMakeNodeFunction,defaultContext:defaultContext,realContext:realContext,positiveContext:positiveContext}=createUtil({FunctionNode:FunctionNode,OperatorNode:OperatorNode,SymbolNode:SymbolNode});typed.addConversion({from:"Object",to:"Map",convert:map.pI});var simplify=typed("simplify",{Node:_simplify,"Node, Map":(expr,scope)=>_simplify(expr,!1,scope),"Node, Map, Object":(expr,scope,options)=>_simplify(expr,!1,scope,options),"Node, Array":_simplify,"Node, Array, Map":_simplify,"Node, Array, Map, Object":_simplify});function removeParens(node){return node.transform((function(node,path,parent){return(0,is.tv)(node)?removeParens(node.content):node}))}typed.removeConversion({from:"Object",to:"Map",convert:map.pI}),simplify.defaultContext=defaultContext,simplify.realContext=realContext,simplify.positiveContext=positiveContext;var SUPPORTED_CONSTANTS={true:!0,false:!0,e:!0,i:!0,Infinity:!0,LN2:!0,LN10:!0,LOG2E:!0,LOG10E:!0,NaN:!0,phi:!0,pi:!0,SQRT1_2:!0,SQRT2:!0,tau:!0};function _canonicalizeRule(ruleObject,context){var newRule={};if(ruleObject.s){var lr=ruleObject.s.split("->");if(2!==lr.length)throw SyntaxError("Could not parse rule: "+ruleObject.s);newRule.l=lr[0],newRule.r=lr[1]}else newRule.l=ruleObject.l,newRule.r=ruleObject.r;for(var prop of(newRule.l=removeParens(parse(newRule.l)),newRule.r=removeParens(parse(newRule.r)),["imposeContext","repeat","assuming"]))prop in ruleObject&&(newRule[prop]=ruleObject[prop]);if(ruleObject.evaluate&&(newRule.evaluate=parse(ruleObject.evaluate)),isAssociative(newRule.l,context)){var leftExpandsym,nonCommutative=!isCommutative(newRule.l,context);nonCommutative&&(leftExpandsym=_getExpandPlaceholderSymbol());var makeNode=createMakeNodeFunction(newRule.l),expandsym=_getExpandPlaceholderSymbol();newRule.expanded={},newRule.expanded.l=makeNode([newRule.l,expandsym]),flatten(newRule.expanded.l,context),unflattenr(newRule.expanded.l,context),newRule.expanded.r=makeNode([newRule.r,expandsym]),nonCommutative&&(newRule.expandedNC1={},newRule.expandedNC1.l=makeNode([leftExpandsym,newRule.l]),newRule.expandedNC1.r=makeNode([leftExpandsym,newRule.r]),newRule.expandedNC2={},newRule.expandedNC2.l=makeNode([leftExpandsym,newRule.expanded.l]),newRule.expandedNC2.r=makeNode([leftExpandsym,newRule.expanded.r]))}return newRule}simplify.rules=[simplifyCore,{l:"log(e)",r:"1"},{s:"n-n1 -> n+-n1",assuming:{subtract:{total:!0}}},{s:"n-n -> 0",assuming:{subtract:{total:!1}}},{s:"-(cl*v) -> v * (-cl)",assuming:{multiply:{commutative:!0},subtract:{total:!0}}},{s:"-(cl*v) -> (-cl) * v",assuming:{multiply:{commutative:!1},subtract:{total:!0}}},{s:"-(v*cl) -> v * (-cl)",assuming:{multiply:{commutative:!1},subtract:{total:!0}}},{l:"-(n1/n2)",r:"-n1/n2"},{l:"-v",r:"v * (-1)"},{l:"(n1 + n2)*(-1)",r:"n1*(-1) + n2*(-1)",repeat:!0},{l:"n/n1^n2",r:"n*n1^-n2"},{l:"n/n1",r:"n*n1^-1"},{s:"(n1*n2)^n3 -> n1^n3 * n2^n3",assuming:{multiply:{commutative:!0}}},{s:"(n1*n2)^(-1) -> n2^(-1) * n1^(-1)",assuming:{multiply:{commutative:!1}}},{s:"(n ^ n1) ^ n2 -> n ^ (n1 * n2)",assuming:{divide:{total:!0}}},{l:" vd   * ( vd   * n1 + n2)",r:"vd^2       * n1 +  vd   * n2"},{s:" vd   * (vd^n4 * n1 + n2)   ->  vd^(1+n4)  * n1 +  vd   * n2",assuming:{divide:{total:!0}}},{s:"vd^n3 * ( vd   * n1 + n2)   ->  vd^(n3+1)  * n1 + vd^n3 * n2",assuming:{divide:{total:!0}}},{s:"vd^n3 * (vd^n4 * n1 + n2)   ->  vd^(n3+n4) * n1 + vd^n3 * n2",assuming:{divide:{total:!0}}},{l:"n*n",r:"n^2"},{s:"n * n^n1 -> n^(n1+1)",assuming:{divide:{total:!0}}},{s:"n^n1 * n^n2 -> n^(n1+n2)",assuming:{divide:{total:!0}}},simplifyConstant,{s:"n+n -> 2*n",assuming:{add:{total:!0}}},{l:"n+-n",r:"0"},{l:"vd*n + vd",r:"vd*(n+1)"},{l:"n3*n1 + n3*n2",r:"n3*(n1+n2)"},{l:"n3^(-n4)*n1 +   n3  * n2",r:"n3^(-n4)*(n1 + n3^(n4+1) *n2)"},{l:"n3^(-n4)*n1 + n3^n5 * n2",r:"n3^(-n4)*(n1 + n3^(n4+n5)*n2)"},{s:"n*vd + vd -> (n+1)*vd",assuming:{multiply:{commutative:!1}}},{s:"vd + n*vd -> (1+n)*vd",assuming:{multiply:{commutative:!1}}},{s:"n1*n3 + n2*n3 -> (n1+n2)*n3",assuming:{multiply:{commutative:!1}}},{s:"n^n1 * n -> n^(n1+1)",assuming:{divide:{total:!0},multiply:{commutative:!1}}},{s:"n1*n3^(-n4) + n2 * n3    -> (n1 + n2*n3^(n4 +  1))*n3^(-n4)",assuming:{multiply:{commutative:!1}}},{s:"n1*n3^(-n4) + n2 * n3^n5 -> (n1 + n2*n3^(n4 + n5))*n3^(-n4)",assuming:{multiply:{commutative:!1}}},{l:"n*cd + cd",r:"(n+1)*cd"},{s:"cd*n + cd -> cd*(n+1)",assuming:{multiply:{commutative:!1}}},{s:"cd + cd*n -> cd*(1+n)",assuming:{multiply:{commutative:!1}}},simplifyConstant,{s:"(-n)*n1 -> -(n*n1)",assuming:{subtract:{total:!0}}},{s:"n1*(-n) -> -(n1*n)",assuming:{subtract:{total:!0},multiply:{commutative:!1}}},{s:"ce+ve -> ve+ce",assuming:{add:{commutative:!0}},imposeContext:{add:{commutative:!1}}},{s:"vd*cd -> cd*vd",assuming:{multiply:{commutative:!0}},imposeContext:{multiply:{commutative:!1}}},{l:"n+-n1",r:"n-n1"},{l:"n+-(n1)",r:"n-(n1)"},{s:"n*(n1^-1) -> n/n1",assuming:{multiply:{commutative:!0}}},{s:"n*n1^-n2 -> n/n1^n2",assuming:{multiply:{commutative:!0}}},{s:"n^-1 -> 1/n",assuming:{multiply:{commutative:!0}}},{l:"n^1",r:"n"},{s:"n*(n1/n2) -> (n*n1)/n2",assuming:{multiply:{associative:!0}}},{s:"n-(n1+n2) -> n-n1-n2",assuming:{addition:{associative:!0,commutative:!0}}},{l:"1*n",r:"n",imposeContext:{multiply:{commutative:!0}}},{s:"n1/(n2/n3) -> (n1*n3)/n2",assuming:{multiply:{associative:!0}}},{l:"n1/(-n2)",r:"-n1/n2"}];var _lastsym=0;function _getExpandPlaceholderSymbol(){return new SymbolNode("_p"+_lastsym++)}function _simplify(expr,rules){var scope=arguments.length>2&&void 0!==arguments[2]?arguments[2]:(0,map.A5)(),options=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},debug=options.consoleDebug;rules=function _buildRules(rules,context){for(var ruleSet=[],i=0;i<rules.length;i++){var rule=rules[i],newRule=void 0,ruleType=typeof rule;switch(ruleType){case"string":rule={s:rule};case"object":newRule=_canonicalizeRule(rule,context);break;case"function":newRule=rule;break;default:throw TypeError("Unsupported type of rule: "+ruleType)}ruleSet.push(newRule)}return ruleSet}(rules||simplify.rules,options.context);for(var res=resolve(expr,scope),visited={},str=(res=removeParens(res)).toString({parenthesis:"all"});!visited[str];){visited[str]=!0,_lastsym=0;var laststr=str;debug&&console.log("Working on: ",str);for(var i=0;i<rules.length;i++){var rulestr="";if("function"==typeof rules[i]?(res=rules[i](res,options),debug&&(rulestr=rules[i].name)):(flatten(res,options.context),res=applyRule(res,rules[i],options.context),debug&&(rulestr="".concat(rules[i].l.toString()," -> ").concat(rules[i].r.toString()))),debug){var newstr=res.toString({parenthesis:"all"});newstr!==laststr&&(console.log("Applying",rulestr,"produced",newstr),laststr=newstr)}unflattenl(res,options.context)}str=res.toString({parenthesis:"all"})}return res}function mapRule(nodes,rule,context){var resNodes=nodes;if(nodes)for(var i=0;i<nodes.length;++i){var newNode=applyRule(nodes[i],rule,context);newNode!==nodes[i]&&(resNodes===nodes&&(resNodes=nodes.slice()),resNodes[i]=newNode)}return resNodes}function applyRule(node,rule,context){if(rule.assuming)for(var symbol in rule.assuming)for(var property in rule.assuming[symbol])if(hasProperty(symbol,property,context)!==rule.assuming[symbol][property])return node;var mergedContext=mergeContext(rule.imposeContext,context),res=node;if(res instanceof OperatorNode||res instanceof FunctionNode){var newArgs=mapRule(res.args,rule,context);newArgs!==res.args&&((res=res.clone()).args=newArgs)}else if(res instanceof ParenthesisNode){if(res.content){var newContent=applyRule(res.content,rule,context);newContent!==res.content&&(res=new ParenthesisNode(newContent))}}else if(res instanceof ArrayNode){var newItems=mapRule(res.items,rule,context);newItems!==res.items&&(res=new ArrayNode(newItems))}else if(res instanceof AccessorNode){var newObj=res.object;res.object&&(newObj=applyRule(res.object,rule,context));var newIndex=res.index;res.index&&(newIndex=applyRule(res.index,rule,context)),newObj===res.object&&newIndex===res.index||(res=new AccessorNode(newObj,newIndex))}else if(res instanceof IndexNode){var newDims=mapRule(res.dimensions,rule,context);newDims!==res.dimensions&&(res=new IndexNode(newDims))}else if(res instanceof ObjectNode){var changed=!1,newProps={};for(var prop in res.properties)newProps[prop]=applyRule(res.properties[prop],rule,context),newProps[prop]!==res.properties[prop]&&(changed=!0);changed&&(res=new ObjectNode(newProps))}var repl=rule.r,matches=_ruleMatch(rule.l,res,mergedContext)[0];if(!matches&&rule.expanded&&(repl=rule.expanded.r,matches=_ruleMatch(rule.expanded.l,res,mergedContext)[0]),!matches&&rule.expandedNC1&&(repl=rule.expandedNC1.r,(matches=_ruleMatch(rule.expandedNC1.l,res,mergedContext)[0])||(repl=rule.expandedNC2.r,matches=_ruleMatch(rule.expandedNC2.l,res,mergedContext)[0])),matches){var implicit=res.implicit;res=repl.clone(),implicit&&"implicit"in repl&&(res.implicit=!0),res=res.transform((function(node){return node.isSymbolNode&&(0,object.mQ)(matches.placeholders,node.name)?matches.placeholders[node.name].clone():node}))}return rule.repeat&&res!==node&&(res=applyRule(res,rule,context)),res}function mergeMatch(match1,match2){var res={placeholders:{}};if(!match1.placeholders&&!match2.placeholders)return res;if(!match1.placeholders)return match2;if(!match2.placeholders)return match1;for(var key in match1.placeholders)if((0,object.mQ)(match1.placeholders,key)&&(res.placeholders[key]=match1.placeholders[key],(0,object.mQ)(match2.placeholders,key)&&!_exactMatch(match1.placeholders[key],match2.placeholders[key])))return null;for(var _key in match2.placeholders)(0,object.mQ)(match2.placeholders,_key)&&(res.placeholders[_key]=match2.placeholders[_key]);return res}function combineChildMatches(list1,list2){var merged,res=[];if(0===list1.length||0===list2.length)return res;for(var i1=0;i1<list1.length;i1++)for(var i2=0;i2<list2.length;i2++)(merged=mergeMatch(list1[i1],list2[i2]))&&res.push(merged);return res}function _ruleMatch(rule,node,context,isSplit){var res=[{placeholders:{}}];if(rule instanceof OperatorNode&&node instanceof OperatorNode||rule instanceof FunctionNode&&node instanceof FunctionNode){if(rule instanceof OperatorNode){if(rule.op!==node.op||rule.fn!==node.fn)return[]}else if(rule instanceof FunctionNode&&rule.name!==node.name)return[];if(!(1===node.args.length&&1===rule.args.length||!isAssociative(node,context)&&node.args.length===rule.args.length||isSplit)){if(node.args.length>=2&&2===rule.args.length){for(var splits=function getSplits(node,context){var right,rightArgs,res=[],makeNode=createMakeNodeFunction(node);if(isCommutative(node,context))for(var i=0;i<node.args.length;i++)(rightArgs=node.args.slice(0)).splice(i,1),right=1===rightArgs.length?rightArgs[0]:makeNode(rightArgs),res.push(makeNode([node.args[i],right]));else for(var _i=1;_i<node.args.length;_i++){var left=node.args[0];_i>1&&(left=makeNode(node.args.slice(0,_i))),right=1===(rightArgs=node.args.slice(_i)).length?rightArgs[0]:makeNode(rightArgs),res.push(makeNode([left,right]))}return res}(node,context),splitMatches=[],_i2=0;_i2<splits.length;_i2++){var matchSet=_ruleMatch(rule,splits[_i2],context,!0);splitMatches=splitMatches.concat(matchSet)}return splitMatches}if(rule.args.length>2)throw Error("Unexpected non-binary associative function: "+rule.toString());return[]}for(var childMatches=[],i=0;i<rule.args.length;i++){var childMatch=_ruleMatch(rule.args[i],node.args[i],context);if(0===childMatch.length)break;childMatches.push(childMatch)}if(childMatches.length!==rule.args.length){if(!isCommutative(node,context)||1===rule.args.length)return[];if(rule.args.length>2)throw new Error("permuting >2 commutative non-associative rule arguments not yet implemented");var leftMatch=_ruleMatch(rule.args[0],node.args[1],context);if(0===leftMatch.length)return[];var rightMatch=_ruleMatch(rule.args[1],node.args[0],context);if(0===rightMatch.length)return[];childMatches=[leftMatch,rightMatch]}res=function mergeChildMatches(childMatches){if(0===childMatches.length)return childMatches;for(var sets=childMatches.reduce(combineChildMatches),uniqueSets=[],unique={},i=0;i<sets.length;i++){var s=JSON.stringify(sets[i]);unique[s]||(unique[s]=!0,uniqueSets.push(sets[i]))}return uniqueSets}(childMatches)}else if(rule instanceof SymbolNode){if(0===rule.name.length)throw new Error("Symbol in rule has 0 length...!?");if(SUPPORTED_CONSTANTS[rule.name]){if(rule.name!==node.name)return[]}else switch(rule.name[1]>="a"&&rule.name[1]<="z"?rule.name.substring(0,2):rule.name[0]){case"n":case"_p":res[0].placeholders[rule.name]=node;break;case"c":case"cl":if(!(0,is.BA)(node))return[];res[0].placeholders[rule.name]=node;break;case"v":if((0,is.BA)(node))return[];res[0].placeholders[rule.name]=node;break;case"vl":if(!(0,is.li)(node))return[];res[0].placeholders[rule.name]=node;break;case"cd":if(!isNumericNode(node))return[];res[0].placeholders[rule.name]=node;break;case"vd":if(isNumericNode(node))return[];res[0].placeholders[rule.name]=node;break;case"ce":if(!isConstantExpression(node))return[];res[0].placeholders[rule.name]=node;break;case"ve":if(isConstantExpression(node))return[];res[0].placeholders[rule.name]=node;break;default:throw new Error("Invalid symbol in rule: "+rule.name)}}else{if(!(rule instanceof ConstantNode))return[];if(!equal(rule.value,node.value))return[]}return res}function _exactMatch(p,q){if(p instanceof ConstantNode&&q instanceof ConstantNode){if(!equal(p.value,q.value))return!1}else if(p instanceof SymbolNode&&q instanceof SymbolNode){if(p.name!==q.name)return!1}else{if(!(p instanceof OperatorNode&&q instanceof OperatorNode||p instanceof FunctionNode&&q instanceof FunctionNode))return!1;if(p instanceof OperatorNode){if(p.op!==q.op||p.fn!==q.fn)return!1}else if(p instanceof FunctionNode&&p.name!==q.name)return!1;if(p.args.length!==q.args.length)return!1;for(var i=0;i<p.args.length;i++)if(!_exactMatch(p.args[i],q.args[i]))return!1}return!0}return simplify})),noop=__webpack_require__("./node_modules/mathjs/lib/esm/utils/noop.js"),simplifyConstant_dependencies=["typed","config","mathWithTransform","matrix","?fraction","?bignumber","AccessorNode","ArrayNode","ConstantNode","FunctionNode","IndexNode","ObjectNode","OperatorNode","SymbolNode"],createSimplifyConstant=(0,factory.P9)("simplifyConstant",simplifyConstant_dependencies,(_ref=>{var{typed:typed,config:config,mathWithTransform:mathWithTransform,matrix:matrix,fraction:fraction,bignumber:bignumber,AccessorNode:AccessorNode,ArrayNode:ArrayNode,ConstantNode:ConstantNode,FunctionNode:FunctionNode,IndexNode:IndexNode,ObjectNode:ObjectNode,OperatorNode:OperatorNode,SymbolNode:SymbolNode}=_ref,{isCommutative:isCommutative,isAssociative:isAssociative,allChildren:allChildren,createMakeNodeFunction:createMakeNodeFunction}=createUtil({FunctionNode:FunctionNode,OperatorNode:OperatorNode,SymbolNode:SymbolNode}),simplifyConstant=typed("simplifyConstant",{Node:node=>_ensureNode(foldFraction(node,{})),"Node, Object":function Node_Object(expr,options){return _ensureNode(foldFraction(expr,options))}});function _removeFractions(thing){return(0,is.fU)(thing)?thing.valueOf():thing instanceof Array?thing.map(_removeFractions):(0,is.OA)(thing)?matrix(_removeFractions(thing.valueOf())):thing}function _eval(fnname,args,options){try{return mathWithTransform[fnname].apply(null,args)}catch(ignore){return args=args.map(_removeFractions),_toNumber(mathWithTransform[fnname].apply(null,args),options)}}var _toNode=typed({Fraction:function _fractionToNode(f){var n,vn=f.s*f.n;n=vn<0?new OperatorNode("-","unaryMinus",[new ConstantNode(-vn)]):new ConstantNode(vn);if(1===f.d)return n;return new OperatorNode("/","divide",[n,new ConstantNode(f.d)])},number:function number(n){return n<0?unaryMinusNode(new ConstantNode(-n)):new ConstantNode(n)},BigNumber:function BigNumber(n){return n<0?unaryMinusNode(new ConstantNode(-n)):new ConstantNode(n)},bigint:function bigint(n){return n<0n?unaryMinusNode(new ConstantNode(-n)):new ConstantNode(n)},Complex:function Complex(s){throw new Error("Cannot convert Complex number to Node")},string:function string(s){return new ConstantNode(s)},Matrix:function Matrix(m){return new ArrayNode(m.valueOf().map((e=>_toNode(e))))}});function _ensureNode(thing){return(0,is.Ll)(thing)?thing:_toNode(thing)}function _exactFraction(n,options){if(options&&!1!==options.exactFractions&&isFinite(n)&&fraction){var f=fraction(n),fractionsLimit=options&&"number"==typeof options.fractionsLimit?options.fractionsLimit:1/0;if(f.valueOf()===n&&f.n<fractionsLimit&&f.d<fractionsLimit)return f}return n}var _toNumber=typed({"string, Object":function string_Object(s,options){var numericType=(0,utils_number.BC)(s,config);return"BigNumber"===numericType?(void 0===bignumber&&(0,noop.j9)(),bignumber(s)):"bigint"===numericType?BigInt(s):"Fraction"===numericType?(void 0===fraction&&(0,noop.Sw)(),fraction(s)):_exactFraction(parseFloat(s),options)},"Fraction, Object":function Fraction_Object(s,options){return s},"BigNumber, Object":function BigNumber_Object(s,options){return s},"number, Object":function number_Object(s,options){return _exactFraction(s,options)},"bigint, Object":function bigint_Object(s,options){return s},"Complex, Object":function Complex_Object(s,options){return 0!==s.im?s:_exactFraction(s.re,options)},"Matrix, Object":function Matrix_Object(s,options){return matrix(_exactFraction(s.valueOf()))},"Array, Object":function Array_Object(s,options){return s.map(_exactFraction)}});function unaryMinusNode(n){return new OperatorNode("-","unaryMinus",[n])}function foldOp(fn,args,makeNode,options){var first=args.shift(),reduction=args.reduce(((sofar,next)=>{if(!(0,is.Ll)(next)){var last=sofar.pop();if((0,is.Ll)(last))return[last,next];try{return sofar.push(_eval(fn,[last,next],options)),sofar}catch(ignoreandcontinue){sofar.push(last)}}sofar.push(_ensureNode(sofar.pop()));var newtree=1===sofar.length?sofar[0]:makeNode(sofar);return[makeNode([newtree,_ensureNode(next)])]}),[first]);return 1===reduction.length?reduction[0]:makeNode([reduction[0],_toNode(reduction[1])])}function foldFraction(node,options){switch(node.type){case"SymbolNode":return node;case"ConstantNode":switch(typeof node.value){case"number":case"bigint":return _toNumber(node.value,options);case"string":return node.value;default:if(!isNaN(node.value))return _toNumber(node.value,options)}return node;case"FunctionNode":if(mathWithTransform[node.name]&&mathWithTransform[node.name].rawArgs)return node;if(!["add","multiply"].includes(node.name)){var args=node.args.map((arg=>foldFraction(arg,options)));if(!args.some(is.Ll))try{return _eval(node.name,args,options)}catch(ignoreandcontinue){}if("size"===node.name&&1===args.length&&(0,is.gO)(args[0])){for(var sz=[],section=args[0];(0,is.gO)(section);)sz.push(section.items.length),section=section.items[0];return matrix(sz)}return new FunctionNode(node.name,args.map(_ensureNode))}case"OperatorNode":var _args,res,fn=node.fn.toString(),makeNode=createMakeNodeFunction(node);if((0,is.$$)(node)&&node.isUnary())_args=[foldFraction(node.args[0],options)],res=(0,is.Ll)(_args[0])?makeNode(_args):_eval(fn,_args,options);else if(isAssociative(node,options.context))if(_args=(_args=allChildren(node,options.context)).map((arg=>foldFraction(arg,options))),isCommutative(fn,options.context)){for(var consts=[],vars=[],i=0;i<_args.length;i++)(0,is.Ll)(_args[i])?vars.push(_args[i]):consts.push(_args[i]);consts.length>1?(res=foldOp(fn,consts,makeNode,options),vars.unshift(res),res=foldOp(fn,vars,makeNode,options)):res=foldOp(fn,_args,makeNode,options)}else res=foldOp(fn,_args,makeNode,options);else _args=node.args.map((arg=>foldFraction(arg,options))),res=foldOp(fn,_args,makeNode,options);return res;case"ParenthesisNode":return foldFraction(node.content,options);case"AccessorNode":return function _foldAccessor(obj,index,options){if(!(0,is.$I)(index))return new AccessorNode(_ensureNode(obj),_ensureNode(index));if((0,is.gO)(obj)||(0,is.OA)(obj)){for(var remainingDims=Array.from(index.dimensions);remainingDims.length>0;)if((0,is.BA)(remainingDims[0])&&"string"!=typeof remainingDims[0].value){var first=_toNumber(remainingDims.shift().value,options);(0,is.gO)(obj)?obj=obj.items[first-1]:(obj=obj.valueOf()[first-1])instanceof Array&&(obj=matrix(obj))}else{if(!(remainingDims.length>1&&(0,is.BA)(remainingDims[1])&&"string"!=typeof remainingDims[1].value))break;var second=_toNumber(remainingDims[1].value,options),tryItems=[],fromItems=(0,is.gO)(obj)?obj.items:obj.valueOf();for(var item of fromItems)if((0,is.gO)(item))tryItems.push(item.items[second-1]);else{if(!(0,is.OA)(obj))break;tryItems.push(item[second-1])}if(tryItems.length!==fromItems.length)break;obj=(0,is.gO)(obj)?new ArrayNode(tryItems):matrix(tryItems),remainingDims.splice(1,1)}return remainingDims.length===index.dimensions.length?new AccessorNode(_ensureNode(obj),index):remainingDims.length>0?(index=new IndexNode(remainingDims),new AccessorNode(_ensureNode(obj),index)):obj}if((0,is.GJ)(obj)&&1===index.dimensions.length&&(0,is.BA)(index.dimensions[0])){var key=index.dimensions[0].value;return key in obj.properties?obj.properties[key]:new ConstantNode}return new AccessorNode(_ensureNode(obj),index)}(foldFraction(node.object,options),foldFraction(node.index,options),options);case"ArrayNode":var foldItems=node.items.map((item=>foldFraction(item,options)));return foldItems.some(is.Ll)?new ArrayNode(foldItems.map(_ensureNode)):matrix(foldItems);case"IndexNode":return new IndexNode(node.dimensions.map((n=>simplifyConstant(n,options))));case"ObjectNode":var foldProps={};for(var prop in node.properties)foldProps[prop]=simplifyConstant(node.properties[prop],options);return new ObjectNode(foldProps);default:throw new Error("Unimplemented node type in simplifyConstant: ".concat(node.type))}}return simplifyConstant})),simplifyCore_dependencies=["typed","parse","equal","isZero","add","subtract","multiply","divide","pow","AccessorNode","ArrayNode","ConstantNode","FunctionNode","IndexNode","ObjectNode","OperatorNode","ParenthesisNode","SymbolNode"],createSimplifyCore=(0,factory.P9)("simplifyCore",simplifyCore_dependencies,(_ref=>{var{typed:typed,parse:parse,equal:equal,isZero:isZero,add:add,subtract:subtract,multiply:multiply,divide:divide,pow:pow,AccessorNode:AccessorNode,ArrayNode:ArrayNode,ConstantNode:ConstantNode,FunctionNode:FunctionNode,IndexNode:IndexNode,ObjectNode:ObjectNode,OperatorNode:OperatorNode,ParenthesisNode:ParenthesisNode,SymbolNode:SymbolNode}=_ref,node0=new ConstantNode(0),node1=new ConstantNode(1),nodeT=new ConstantNode(!0),nodeF=new ConstantNode(!1);function isAlwaysBoolean(node){return(0,is.$$)(node)&&["and","not","or"].includes(node.op)}var{hasProperty:hasProperty,isCommutative:isCommutative}=createUtil({FunctionNode:FunctionNode,OperatorNode:OperatorNode,SymbolNode:SymbolNode});function _simplifyCore(nodeToSimplify){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},context=options?options.context:void 0;if(hasProperty(nodeToSimplify,"trivial",context)){if((0,is.Px)(nodeToSimplify)&&1===nodeToSimplify.args.length)return _simplifyCore(nodeToSimplify.args[0],options);var simpChild=!1,childCount=0;if(nodeToSimplify.forEach((c=>{1===++childCount&&(simpChild=_simplifyCore(c,options))})),1===childCount)return simpChild}var node=nodeToSimplify;if((0,is.Px)(node)){var op=function getOperator(fn){var identifier="OperatorNode:"+fn;for(var group of properties)if(identifier in group)return group[identifier].op;return null}(node.name);if(!op)return new FunctionNode(_simplifyCore(node.fn),node.args.map((n=>_simplifyCore(n,options))));if(node.args.length>2&&hasProperty(node,"associative",context))for(;node.args.length>2;){var last=node.args.pop(),seclast=node.args.pop();node.args.push(new OperatorNode(op,node.name,[last,seclast]))}node=new OperatorNode(op,node.name,node.args)}if((0,is.$$)(node)&&node.isUnary()){var a0=_simplifyCore(node.args[0],options);if("~"===node.op&&(0,is.$$)(a0)&&a0.isUnary()&&"~"===a0.op)return a0.args[0];if("not"===node.op&&(0,is.$$)(a0)&&a0.isUnary()&&"not"===a0.op&&isAlwaysBoolean(a0.args[0]))return a0.args[0];var finish=!0;if("-"===node.op&&(0,is.$$)(a0)&&(a0.isBinary()&&"subtract"===a0.fn&&(node=new OperatorNode("-","subtract",[a0.args[1],a0.args[0]]),finish=!1),a0.isUnary()&&"-"===a0.op))return a0.args[0];if(finish)return new OperatorNode(node.op,node.fn,[a0])}if((0,is.$$)(node)&&node.isBinary()){var _a=_simplifyCore(node.args[0],options),a1=_simplifyCore(node.args[1],options);if("+"===node.op){if((0,is.BA)(_a)&&isZero(_a.value))return a1;if((0,is.BA)(a1)&&isZero(a1.value))return _a;(0,is.$$)(a1)&&a1.isUnary()&&"-"===a1.op&&(a1=a1.args[0],node=new OperatorNode("-","subtract",[_a,a1]))}if("-"===node.op)return(0,is.$$)(a1)&&a1.isUnary()&&"-"===a1.op?_simplifyCore(new OperatorNode("+","add",[_a,a1.args[0]]),options):(0,is.BA)(_a)&&isZero(_a.value)?_simplifyCore(new OperatorNode("-","unaryMinus",[a1])):(0,is.BA)(a1)&&isZero(a1.value)?_a:new OperatorNode(node.op,node.fn,[_a,a1]);if("*"===node.op){if((0,is.BA)(_a)){if(isZero(_a.value))return node0;if(equal(_a.value,1))return a1}if((0,is.BA)(a1)){if(isZero(a1.value))return node0;if(equal(a1.value,1))return _a;if(isCommutative(node,context))return new OperatorNode(node.op,node.fn,[a1,_a],node.implicit)}return new OperatorNode(node.op,node.fn,[_a,a1],node.implicit)}if("/"===node.op)return(0,is.BA)(_a)&&isZero(_a.value)?node0:(0,is.BA)(a1)&&equal(a1.value,1)?_a:new OperatorNode(node.op,node.fn,[_a,a1]);if("^"===node.op&&(0,is.BA)(a1)){if(isZero(a1.value))return node1;if(equal(a1.value,1))return _a}if("and"===node.op){if((0,is.BA)(_a)){if(!_a.value)return nodeF;if(isAlwaysBoolean(a1))return a1;if((0,is.BA)(a1))return a1.value?nodeT:nodeF}if((0,is.BA)(a1)){if(!a1.value)return nodeF;if(isAlwaysBoolean(_a))return _a}}if("or"===node.op){if((0,is.BA)(_a)){if(_a.value)return nodeT;if(isAlwaysBoolean(a1))return a1}if((0,is.BA)(a1)){if(a1.value)return nodeT;if(isAlwaysBoolean(_a))return _a}}return new OperatorNode(node.op,node.fn,[_a,a1])}if((0,is.$$)(node))return new OperatorNode(node.op,node.fn,node.args.map((a=>_simplifyCore(a,options))));if((0,is.gO)(node))return new ArrayNode(node.items.map((n=>_simplifyCore(n,options))));if((0,is.AS)(node))return new AccessorNode(_simplifyCore(node.object,options),_simplifyCore(node.index,options));if((0,is.$I)(node))return new IndexNode(node.dimensions.map((n=>_simplifyCore(n,options))));if((0,is.GJ)(node)){var newProps={};for(var prop in node.properties)newProps[prop]=_simplifyCore(node.properties[prop],options);return new ObjectNode(newProps)}return node}return typed("simplifyCore",{Node:_simplifyCore,"Node,Object":_simplifyCore})})),resolve_dependencies=["typed","parse","ConstantNode","FunctionNode","OperatorNode","ParenthesisNode"],createResolve=(0,factory.P9)("resolve",resolve_dependencies,(_ref=>{var{typed:typed,parse:parse,ConstantNode:ConstantNode,FunctionNode:FunctionNode,OperatorNode:OperatorNode,ParenthesisNode:ParenthesisNode}=_ref;function _resolve(node,scope){var within=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new Set;if(!scope)return node;if((0,is.li)(node)){if(within.has(node.name)){var variables=Array.from(within).join(", ");throw new ReferenceError("recursive loop of variable definitions among {".concat(variables,"}"))}var value=scope.get(node.name);if((0,is.Ll)(value)){var nextWithin=new Set(within);return nextWithin.add(node.name),_resolve(value,scope,nextWithin)}return"number"==typeof value?parse(String(value)):void 0!==value?new ConstantNode(value):node}if((0,is.$$)(node)){var args=node.args.map((function(arg){return _resolve(arg,scope,within)}));return new OperatorNode(node.op,node.fn,args,node.implicit)}if((0,is.tv)(node))return new ParenthesisNode(_resolve(node.content,scope,within));if((0,is.Px)(node)){var _args=node.args.map((function(arg){return _resolve(arg,scope,within)}));return new FunctionNode(node.name,_args)}return node.map((child=>_resolve(child,scope,within)))}return typed("resolve",{Node:_resolve,"Node, Map | null | undefined":_resolve,"Node, Object":(n,scope)=>_resolve(n,(0,map.pI)(scope)),"Array | Matrix":typed.referToSelf((self=>A=>A.map((n=>self(n))))),"Array | Matrix, null | undefined":typed.referToSelf((self=>A=>A.map((n=>self(n))))),"Array, Object":typed.referTo("Array,Map",(selfAM=>(A,scope)=>selfAM(A,(0,map.pI)(scope)))),"Matrix, Object":typed.referTo("Matrix,Map",(selfMM=>(A,scope)=>selfMM(A,(0,map.pI)(scope)))),"Array | Matrix, Map":typed.referToSelf((self=>(A,scope)=>A.map((n=>self(n,scope)))))})})),symbolicEqual_dependencies=["parse","simplify","typed","OperatorNode"],createSymbolicEqual=(0,factory.P9)("symbolicEqual",symbolicEqual_dependencies,(_ref=>{var{parse:parse,simplify:simplify,typed:typed,OperatorNode:OperatorNode}=_ref;function _symbolicEqual(e1,e2){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},diff=new OperatorNode("-","subtract",[e1,e2]),simplified=simplify(diff,{},options);return(0,is.BA)(simplified)&&!simplified.value}return typed("symbolicEqual",{"Node, Node":_symbolicEqual,"Node, Node, Object":_symbolicEqual})})),derivative_dependencies=["typed","config","parse","simplify","equal","isZero","numeric","ConstantNode","FunctionNode","OperatorNode","ParenthesisNode","SymbolNode"],createDerivative=(0,factory.P9)("derivative",derivative_dependencies,(_ref=>{var{typed:typed,config:config,parse:parse,simplify:simplify,equal:equal,isZero:isZero,numeric:numeric,ConstantNode:ConstantNode,FunctionNode:FunctionNode,OperatorNode:OperatorNode,ParenthesisNode:ParenthesisNode,SymbolNode:SymbolNode}=_ref;function plainDerivative(expr,variable){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{simplify:!0},constNodes={};constTag(constNodes,expr,variable.name);var res=_derivative(expr,constNodes);return options.simplify?simplify(res):res}function parseIdentifier(string){var symbol=parse(string);if(!symbol.isSymbolNode)throw new TypeError("Invalid variable. "+"Cannot parse ".concat(JSON.stringify(string)," into a variable in function derivative"));return symbol}var derivative=typed("derivative",{"Node, SymbolNode":plainDerivative,"Node, SymbolNode, Object":plainDerivative,"Node, string":(node,symbol)=>plainDerivative(node,parseIdentifier(symbol)),"Node, string, Object":(node,symbol,options)=>plainDerivative(node,parseIdentifier(symbol),options)});derivative._simplify=!0,derivative.toTex=function(deriv){return _derivTex.apply(null,deriv.args)};var _derivTex=typed("_derivTex",{"Node, SymbolNode":function Node_SymbolNode(expr,x){return(0,is.BA)(expr)&&"string"===(0,is.QP)(expr.value)?_derivTex(parse(expr.value).toString(),x.toString(),1):_derivTex(expr.toTex(),x.toString(),1)},"Node, ConstantNode":function Node_ConstantNode(expr,x){if("string"===(0,is.QP)(x.value))return _derivTex(expr,parse(x.value));throw new Error("The second parameter to 'derivative' is a non-string constant")},"Node, SymbolNode, ConstantNode":function Node_SymbolNode_ConstantNode(expr,x,order){return _derivTex(expr.toString(),x.name,order.value)},"string, string, number":function string_string_number(expr,x,order){return(1===order?"{d\\over d"+x+"}":"{d^{"+order+"}\\over d"+x+"^{"+order+"}}")+"\\left[".concat(expr,"\\right]")}}),constTag=typed("constTag",{"Object, ConstantNode, string":function Object_ConstantNode_string(constNodes,node){return constNodes[node]=!0,!0},"Object, SymbolNode, string":function Object_SymbolNode_string(constNodes,node,varName){return node.name!==varName&&(constNodes[node]=!0,!0)},"Object, ParenthesisNode, string":function Object_ParenthesisNode_string(constNodes,node,varName){return constTag(constNodes,node.content,varName)},"Object, FunctionAssignmentNode, string":function Object_FunctionAssignmentNode_string(constNodes,node,varName){return node.params.includes(varName)?constTag(constNodes,node.expr,varName):(constNodes[node]=!0,!0)},"Object, FunctionNode | OperatorNode, string":function Object_FunctionNode__OperatorNode_string(constNodes,node,varName){if(node.args.length>0){for(var isConst=constTag(constNodes,node.args[0],varName),i=1;i<node.args.length;++i)isConst=constTag(constNodes,node.args[i],varName)&&isConst;if(isConst)return constNodes[node]=!0,!0}return!1}}),_derivative=typed("_derivative",{"ConstantNode, Object":function ConstantNode_Object(node){return createConstantNode(0)},"SymbolNode, Object":function SymbolNode_Object(node,constNodes){return void 0!==constNodes[node]?createConstantNode(0):createConstantNode(1)},"ParenthesisNode, Object":function ParenthesisNode_Object(node,constNodes){return new ParenthesisNode(_derivative(node.content,constNodes))},"FunctionAssignmentNode, Object":function FunctionAssignmentNode_Object(node,constNodes){return void 0!==constNodes[node]?createConstantNode(0):_derivative(node.expr,constNodes)},"FunctionNode, Object":function FunctionNode_Object(node,constNodes){if(void 0!==constNodes[node])return createConstantNode(0);var arg1,funcDerivative,op,func,arg0=node.args[0],div=!1,negative=!1;switch(node.name){case"cbrt":div=!0,funcDerivative=new OperatorNode("*","multiply",[createConstantNode(3),new OperatorNode("^","pow",[arg0,new OperatorNode("/","divide",[createConstantNode(2),createConstantNode(3)])])]);break;case"sqrt":case"nthRoot":if(1===node.args.length)div=!0,funcDerivative=new OperatorNode("*","multiply",[createConstantNode(2),new FunctionNode("sqrt",[arg0])]);else if(2===node.args.length)return constNodes[arg1=new OperatorNode("/","divide",[createConstantNode(1),node.args[1]])]=constNodes[node.args[1]],_derivative(new OperatorNode("^","pow",[arg0,arg1]),constNodes);break;case"log10":arg1=createConstantNode(10);case"log":if(arg1||1!==node.args.length){if(1===node.args.length&&arg1||2===node.args.length&&void 0!==constNodes[node.args[1]])funcDerivative=new OperatorNode("*","multiply",[arg0.clone(),new FunctionNode("log",[arg1||node.args[1]])]),div=!0;else if(2===node.args.length)return _derivative(new OperatorNode("/","divide",[new FunctionNode("log",[arg0]),new FunctionNode("log",[node.args[1]])]),constNodes)}else funcDerivative=arg0.clone(),div=!0;break;case"pow":if(2===node.args.length)return constNodes[arg1]=constNodes[node.args[1]],_derivative(new OperatorNode("^","pow",[arg0,node.args[1]]),constNodes);break;case"exp":funcDerivative=new FunctionNode("exp",[arg0.clone()]);break;case"sin":funcDerivative=new FunctionNode("cos",[arg0.clone()]);break;case"cos":funcDerivative=new OperatorNode("-","unaryMinus",[new FunctionNode("sin",[arg0.clone()])]);break;case"tan":funcDerivative=new OperatorNode("^","pow",[new FunctionNode("sec",[arg0.clone()]),createConstantNode(2)]);break;case"sec":funcDerivative=new OperatorNode("*","multiply",[node,new FunctionNode("tan",[arg0.clone()])]);break;case"csc":negative=!0,funcDerivative=new OperatorNode("*","multiply",[node,new FunctionNode("cot",[arg0.clone()])]);break;case"cot":negative=!0,funcDerivative=new OperatorNode("^","pow",[new FunctionNode("csc",[arg0.clone()]),createConstantNode(2)]);break;case"asin":div=!0,funcDerivative=new FunctionNode("sqrt",[new OperatorNode("-","subtract",[createConstantNode(1),new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)])])]);break;case"acos":div=!0,negative=!0,funcDerivative=new FunctionNode("sqrt",[new OperatorNode("-","subtract",[createConstantNode(1),new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)])])]);break;case"atan":div=!0,funcDerivative=new OperatorNode("+","add",[new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)]),createConstantNode(1)]);break;case"asec":div=!0,funcDerivative=new OperatorNode("*","multiply",[new FunctionNode("abs",[arg0.clone()]),new FunctionNode("sqrt",[new OperatorNode("-","subtract",[new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)]),createConstantNode(1)])])]);break;case"acsc":div=!0,negative=!0,funcDerivative=new OperatorNode("*","multiply",[new FunctionNode("abs",[arg0.clone()]),new FunctionNode("sqrt",[new OperatorNode("-","subtract",[new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)]),createConstantNode(1)])])]);break;case"acot":div=!0,negative=!0,funcDerivative=new OperatorNode("+","add",[new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)]),createConstantNode(1)]);break;case"sinh":funcDerivative=new FunctionNode("cosh",[arg0.clone()]);break;case"cosh":funcDerivative=new FunctionNode("sinh",[arg0.clone()]);break;case"tanh":funcDerivative=new OperatorNode("^","pow",[new FunctionNode("sech",[arg0.clone()]),createConstantNode(2)]);break;case"sech":negative=!0,funcDerivative=new OperatorNode("*","multiply",[node,new FunctionNode("tanh",[arg0.clone()])]);break;case"csch":negative=!0,funcDerivative=new OperatorNode("*","multiply",[node,new FunctionNode("coth",[arg0.clone()])]);break;case"coth":negative=!0,funcDerivative=new OperatorNode("^","pow",[new FunctionNode("csch",[arg0.clone()]),createConstantNode(2)]);break;case"asinh":div=!0,funcDerivative=new FunctionNode("sqrt",[new OperatorNode("+","add",[new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)]),createConstantNode(1)])]);break;case"acosh":div=!0,funcDerivative=new FunctionNode("sqrt",[new OperatorNode("-","subtract",[new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)]),createConstantNode(1)])]);break;case"atanh":div=!0,funcDerivative=new OperatorNode("-","subtract",[createConstantNode(1),new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)])]);break;case"asech":div=!0,negative=!0,funcDerivative=new OperatorNode("*","multiply",[arg0.clone(),new FunctionNode("sqrt",[new OperatorNode("-","subtract",[createConstantNode(1),new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)])])])]);break;case"acsch":div=!0,negative=!0,funcDerivative=new OperatorNode("*","multiply",[new FunctionNode("abs",[arg0.clone()]),new FunctionNode("sqrt",[new OperatorNode("+","add",[new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)]),createConstantNode(1)])])]);break;case"acoth":div=!0,negative=!0,funcDerivative=new OperatorNode("-","subtract",[createConstantNode(1),new OperatorNode("^","pow",[arg0.clone(),createConstantNode(2)])]);break;case"abs":funcDerivative=new OperatorNode("/","divide",[new FunctionNode(new SymbolNode("abs"),[arg0.clone()]),arg0.clone()]);break;default:throw new Error('Cannot process function "'+node.name+'" in derivative: the function is not supported, undefined, or the number of arguments passed to it are not supported')}div?(op="/",func="divide"):(op="*",func="multiply");var chainDerivative=_derivative(arg0,constNodes);return negative&&(chainDerivative=new OperatorNode("-","unaryMinus",[chainDerivative])),new OperatorNode(op,func,[chainDerivative,funcDerivative])},"OperatorNode, Object":function OperatorNode_Object(node,constNodes){if(void 0!==constNodes[node])return createConstantNode(0);if("+"===node.op)return new OperatorNode(node.op,node.fn,node.args.map((function(arg){return _derivative(arg,constNodes)})));if("-"===node.op){if(node.isUnary())return new OperatorNode(node.op,node.fn,[_derivative(node.args[0],constNodes)]);if(node.isBinary())return new OperatorNode(node.op,node.fn,[_derivative(node.args[0],constNodes),_derivative(node.args[1],constNodes)])}if("*"===node.op){var constantTerms=node.args.filter((function(arg){return void 0!==constNodes[arg]}));if(constantTerms.length>0){var nonConstantTerms=node.args.filter((function(arg){return void 0===constNodes[arg]})),nonConstantNode=1===nonConstantTerms.length?nonConstantTerms[0]:new OperatorNode("*","multiply",nonConstantTerms),newArgs=constantTerms.concat(_derivative(nonConstantNode,constNodes));return new OperatorNode("*","multiply",newArgs)}return new OperatorNode("+","add",node.args.map((function(argOuter){return new OperatorNode("*","multiply",node.args.map((function(argInner){return argInner===argOuter?_derivative(argInner,constNodes):argInner.clone()})))})))}if("/"===node.op&&node.isBinary()){var arg0=node.args[0],arg1=node.args[1];return void 0!==constNodes[arg1]?new OperatorNode("/","divide",[_derivative(arg0,constNodes),arg1]):void 0!==constNodes[arg0]?new OperatorNode("*","multiply",[new OperatorNode("-","unaryMinus",[arg0]),new OperatorNode("/","divide",[_derivative(arg1,constNodes),new OperatorNode("^","pow",[arg1.clone(),createConstantNode(2)])])]):new OperatorNode("/","divide",[new OperatorNode("-","subtract",[new OperatorNode("*","multiply",[_derivative(arg0,constNodes),arg1.clone()]),new OperatorNode("*","multiply",[arg0.clone(),_derivative(arg1,constNodes)])]),new OperatorNode("^","pow",[arg1.clone(),createConstantNode(2)])])}if("^"===node.op&&node.isBinary()){var _arg=node.args[0],_arg2=node.args[1];if(void 0!==constNodes[_arg])return(0,is.BA)(_arg)&&(isZero(_arg.value)||equal(_arg.value,1))?createConstantNode(0):new OperatorNode("*","multiply",[node,new OperatorNode("*","multiply",[new FunctionNode("log",[_arg.clone()]),_derivative(_arg2.clone(),constNodes)])]);if(void 0!==constNodes[_arg2]){if((0,is.BA)(_arg2)){if(isZero(_arg2.value))return createConstantNode(0);if(equal(_arg2.value,1))return _derivative(_arg,constNodes)}var powMinusOne=new OperatorNode("^","pow",[_arg.clone(),new OperatorNode("-","subtract",[_arg2,createConstantNode(1)])]);return new OperatorNode("*","multiply",[_arg2.clone(),new OperatorNode("*","multiply",[_derivative(_arg,constNodes),powMinusOne])])}return new OperatorNode("*","multiply",[new OperatorNode("^","pow",[_arg.clone(),_arg2.clone()]),new OperatorNode("+","add",[new OperatorNode("*","multiply",[_derivative(_arg,constNodes),new OperatorNode("/","divide",[_arg2.clone(),_arg.clone()])]),new OperatorNode("*","multiply",[_derivative(_arg2,constNodes),new FunctionNode("log",[_arg.clone()])])])])}throw new Error('Cannot process operator "'+node.op+'" in derivative: the operator is not supported, undefined, or the number of arguments passed to it are not supported')}});function createConstantNode(value,valueType){return new ConstantNode(numeric(value,valueType||(0,utils_number.BC)(String(value),config)))}return derivative})),rationalize_dependencies=["config","typed","equal","isZero","add","subtract","multiply","divide","pow","parse","simplifyConstant","simplifyCore","simplify","?bignumber","?fraction","mathWithTransform","matrix","AccessorNode","ArrayNode","ConstantNode","FunctionNode","IndexNode","ObjectNode","OperatorNode","SymbolNode","ParenthesisNode"],createRationalize=(0,factory.P9)("rationalize",rationalize_dependencies,(_ref=>{var{config:config,typed:typed,equal:equal,isZero:isZero,add:add,subtract:subtract,multiply:multiply,divide:divide,pow:pow,parse:parse,simplifyConstant:simplifyConstant,simplifyCore:simplifyCore,simplify:simplify,fraction:fraction,bignumber:bignumber,mathWithTransform:mathWithTransform,matrix:matrix,AccessorNode:AccessorNode,ArrayNode:ArrayNode,ConstantNode:ConstantNode,FunctionNode:FunctionNode,IndexNode:IndexNode,ObjectNode:ObjectNode,OperatorNode:OperatorNode,SymbolNode:SymbolNode,ParenthesisNode:ParenthesisNode}=_ref;function _rationalize(expr){var scope=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},detailed=arguments.length>2&&void 0!==arguments[2]&&arguments[2],setRules=function rulesRationalize(){var oldRules=[simplifyCore,{l:"n+n",r:"2*n"},{l:"n+-n",r:"0"},simplifyConstant,{l:"n*(n1^-1)",r:"n/n1"},{l:"n*n1^-n2",r:"n/n1^n2"},{l:"n1^-1",r:"1/n1"},{l:"n*(n1/n2)",r:"(n*n1)/n2"},{l:"1*n",r:"n"}],rulesFirst=[{l:"(-n1)/(-n2)",r:"n1/n2"},{l:"(-n1)*(-n2)",r:"n1*n2"},{l:"n1--n2",r:"n1+n2"},{l:"n1-n2",r:"n1+(-n2)"},{l:"(n1+n2)*n3",r:"(n1*n3 + n2*n3)"},{l:"n1*(n2+n3)",r:"(n1*n2+n1*n3)"},{l:"c1*n + c2*n",r:"(c1+c2)*n"},{l:"c1*n + n",r:"(c1+1)*n"},{l:"c1*n - c2*n",r:"(c1-c2)*n"},{l:"c1*n - n",r:"(c1-1)*n"},{l:"v/c",r:"(1/c)*v"},{l:"v/-c",r:"-(1/c)*v"},{l:"-v*-c",r:"c*v"},{l:"-v*c",r:"-c*v"},{l:"v*-c",r:"-c*v"},{l:"v*c",r:"c*v"},{l:"-(-n1*n2)",r:"(n1*n2)"},{l:"-(n1*n2)",r:"(-n1*n2)"},{l:"-(-n1+n2)",r:"(n1-n2)"},{l:"-(n1+n2)",r:"(-n1-n2)"},{l:"(n1^n2)^n3",r:"(n1^(n2*n3))"},{l:"-(-n1/n2)",r:"(n1/n2)"},{l:"-(n1/n2)",r:"(-n1/n2)"}],rulesDistrDiv=[{l:"(n1/n2 + n3/n4)",r:"((n1*n4 + n3*n2)/(n2*n4))"},{l:"(n1/n2 + n3)",r:"((n1 + n3*n2)/n2)"},{l:"(n1 + n2/n3)",r:"((n1*n3 + n2)/n3)"}],rulesSucDiv=[{l:"(n1/(n2/n3))",r:"((n1*n3)/n2)"},{l:"(n1/n2/n3)",r:"(n1/(n2*n3))"}],setRules={};return setRules.firstRules=oldRules.concat(rulesFirst,rulesSucDiv),setRules.distrDivRules=rulesDistrDiv,setRules.sucDivRules=rulesSucDiv,setRules.firstRulesAgain=oldRules.concat(rulesFirst),setRules.finalRules=[simplifyCore,{l:"n*-n",r:"-n^2"},{l:"n*n",r:"n^2"},simplifyConstant,{l:"n*-n^n1",r:"-n^(n1+1)"},{l:"n*n^n1",r:"n^(n1+1)"},{l:"n^n1*-n^n2",r:"-n^(n1+n2)"},{l:"n^n1*n^n2",r:"n^(n1+n2)"},{l:"n^n1*-n",r:"-n^(n1+1)"},{l:"n^n1*n",r:"n^(n1+1)"},{l:"n^n1/-n",r:"-n^(n1-1)"},{l:"n^n1/n",r:"n^(n1-1)"},{l:"n/-n^n1",r:"-n^(1-n1)"},{l:"n/n^n1",r:"n^(1-n1)"},{l:"n^n1/-n^n2",r:"n^(n1-n2)"},{l:"n^n1/n^n2",r:"n^(n1-n2)"},{l:"n1+(-n2*n3)",r:"n1-n2*n3"},{l:"v*(-c)",r:"-c*v"},{l:"n1+-n2",r:"n1-n2"},{l:"v*c",r:"c*v"},{l:"(n1^n2)^n3",r:"(n1^(n2*n3))"}],setRules}(),polyRet=function polynomial(expr,scope,extended,rules){var variables=[],node=simplify(expr,rules,scope,{exactFractions:!1}),oper="+-*"+((extended=!!extended)?"/":"");recPoly(node);var retFunc={};return retFunc.expression=node,retFunc.variables=variables,retFunc;function recPoly(node){var tp=node.type;if("FunctionNode"===tp)throw new Error("There is an unsolved function call");if("OperatorNode"===tp)if("^"===node.op){if("ConstantNode"!==node.args[1].type||!(0,utils_number.YN)(parseFloat(node.args[1].value)))throw new Error("There is a non-integer exponent");recPoly(node.args[0])}else{if(!oper.includes(node.op))throw new Error("Operator "+node.op+" invalid in polynomial expression");for(var i=0;i<node.args.length;i++)recPoly(node.args[i])}else if("SymbolNode"===tp){var _name=node.name;-1===variables.indexOf(_name)&&variables.push(_name)}else if("ParenthesisNode"===tp)recPoly(node.content);else if("ConstantNode"!==tp)throw new Error("type "+tp+" is not allowed in polynomial expression")}}(expr,scope,!0,setRules.firstRules),nVars=polyRet.variables.length,noExactFractions={exactFractions:!1},withExactFractions={exactFractions:!0};if(expr=polyRet.expression,nVars>=1){var sBefore,rules;expr=expandPower(expr);var s,eDistrDiv=!0,redoInic=!1;for(expr=simplify(expr,setRules.firstRules,{},noExactFractions);rules=eDistrDiv?setRules.distrDivRules:setRules.sucDivRules,eDistrDiv=!eDistrDiv,(s=(expr=simplify(expr,rules,{},withExactFractions)).toString())!==sBefore;)redoInic=!0,sBefore=s;redoInic&&(expr=simplify(expr,setRules.firstRulesAgain,{},noExactFractions)),expr=simplify(expr,setRules.finalRules,{},noExactFractions)}var coefficients=[],retRationalize={};return"OperatorNode"===expr.type&&expr.isBinary()&&"/"===expr.op?(1===nVars&&(expr.args[0]=polyToCanonical(expr.args[0],coefficients),expr.args[1]=polyToCanonical(expr.args[1])),detailed&&(retRationalize.numerator=expr.args[0],retRationalize.denominator=expr.args[1])):(1===nVars&&(expr=polyToCanonical(expr,coefficients)),detailed&&(retRationalize.numerator=expr,retRationalize.denominator=null)),detailed?(retRationalize.coefficients=coefficients,retRationalize.variables=polyRet.variables,retRationalize.expression=expr,retRationalize):expr}return typed("rationalize",{Node:_rationalize,"Node, boolean":(expr,detailed)=>_rationalize(expr,{},detailed),"Node, Object":_rationalize,"Node, Object, boolean":_rationalize});function expandPower(node,parent,indParent){var tp=node.type,internal=arguments.length>1;if("OperatorNode"===tp&&node.isBinary()){var val,does=!1;if("^"===node.op&&("ParenthesisNode"!==node.args[0].type&&"OperatorNode"!==node.args[0].type||"ConstantNode"!==node.args[1].type||(does=(val=parseFloat(node.args[1].value))>=2&&(0,utils_number.YN)(val))),does){if(val>2){var nEsqTopo=node.args[0],nDirTopo=new OperatorNode("^","pow",[node.args[0].cloneDeep(),new ConstantNode(val-1)]);node=new OperatorNode("*","multiply",[nEsqTopo,nDirTopo])}else node=new OperatorNode("*","multiply",[node.args[0],node.args[0].cloneDeep()]);internal&&("content"===indParent?parent.content=node:parent.args[indParent]=node)}}if("ParenthesisNode"===tp)expandPower(node.content,node,"content");else if("ConstantNode"!==tp&&"SymbolNode"!==tp)for(var i=0;i<node.args.length;i++)expandPower(node.args[i],node,i);if(!internal)return node}function polyToCanonical(node,coefficients){void 0===coefficients&&(coefficients=[]),coefficients[0]=0;var o={cte:1,oper:"+",fire:""},maxExpo=0,varname="";!function recurPol(node,noPai,o){var tp=node.type;if("FunctionNode"===tp)throw new Error("There is an unsolved function call");if("OperatorNode"===tp){if(!"+-*^".includes(node.op))throw new Error("Operator "+node.op+" invalid");if(null!==noPai){if(("unaryMinus"===node.fn||"pow"===node.fn)&&"add"!==noPai.fn&&"subtract"!==noPai.fn&&"multiply"!==noPai.fn)throw new Error("Invalid "+node.op+" placing");if(("subtract"===node.fn||"add"===node.fn||"multiply"===node.fn)&&"add"!==noPai.fn&&"subtract"!==noPai.fn)throw new Error("Invalid "+node.op+" placing");if(("subtract"===node.fn||"add"===node.fn||"unaryMinus"===node.fn)&&0!==o.noFil)throw new Error("Invalid "+node.op+" placing")}"^"!==node.op&&"*"!==node.op||(o.fire=node.op);for(var _i=0;_i<node.args.length;_i++)"unaryMinus"===node.fn&&(o.oper="-"),"+"!==node.op&&"subtract"!==node.fn||(o.fire="",o.cte=1,o.oper=0===_i?"+":node.op),o.noFil=_i,recurPol(node.args[_i],node,o)}else if("SymbolNode"===tp){if(node.name!==varname&&""!==varname)throw new Error("There is more than one variable");if(varname=node.name,null===noPai)return void(coefficients[1]=1);if("^"===noPai.op&&0!==o.noFil)throw new Error("In power the variable should be the first parameter");if("*"===noPai.op&&1!==o.noFil)throw new Error("In multiply the variable should be the second parameter");""!==o.fire&&"*"!==o.fire||(maxExpo<1&&(coefficients[1]=0),coefficients[1]+=o.cte*("+"===o.oper?1:-1),maxExpo=Math.max(1,maxExpo))}else{if("ConstantNode"!==tp)throw new Error("Type "+tp+" is not allowed");var valor=parseFloat(node.value);if(null===noPai)return void(coefficients[0]=valor);if("^"===noPai.op){if(1!==o.noFil)throw new Error("Constant cannot be powered");if(!(0,utils_number.YN)(valor)||valor<=0)throw new Error("Non-integer exponent is not allowed");for(var _i2=maxExpo+1;_i2<valor;_i2++)coefficients[_i2]=0;return valor>maxExpo&&(coefficients[valor]=0),coefficients[valor]+=o.cte*("+"===o.oper?1:-1),void(maxExpo=Math.max(valor,maxExpo))}o.cte=valor,""===o.fire&&(coefficients[0]+=o.cte*("+"===o.oper?1:-1))}}(node,null,o);for(var no,first=!0,i=maxExpo=coefficients.length-1;i>=0;i--)if(0!==coefficients[i]){var n1=new ConstantNode(first?coefficients[i]:Math.abs(coefficients[i])),op=coefficients[i]<0?"-":"+";if(i>0){var n2=new SymbolNode(varname);if(i>1){var n3=new ConstantNode(i);n2=new OperatorNode("^","pow",[n2,n3])}n1=-1===coefficients[i]&&first?new OperatorNode("-","unaryMinus",[n2]):1===Math.abs(coefficients[i])?n2:new OperatorNode("*","multiply",[n1,n2])}no=first?n1:"+"===op?new OperatorNode("+","add",[no,n1]):new OperatorNode("-","subtract",[no,n1]),first=!1}return first?new ConstantNode(0):no}})),zpk2tf=__webpack_require__("./node_modules/mathjs/lib/esm/function/signal/zpk2tf.js"),freqz=__webpack_require__("./node_modules/mathjs/lib/esm/function/signal/freqz.js"),reviver_dependencies=["classes"],createReviver=(0,factory.P9)("reviver",reviver_dependencies,(_ref=>{var{classes:classes}=_ref;return function reviver(key,value){var constructor=classes[value&&value.mathjs];return constructor&&"function"==typeof constructor.fromJSON?constructor.fromJSON(value):value}})),replacer=__webpack_require__("./node_modules/mathjs/lib/esm/json/replacer.js"),constants=__webpack_require__("./node_modules/mathjs/lib/esm/constants.js"),physicalConstants=__webpack_require__("./node_modules/mathjs/lib/esm/type/unit/physicalConstants.js"),apply_transform_dependencies=["typed","isInteger"],createApplyTransform=(0,factory.P9)("apply",apply_transform_dependencies,(_ref=>{var{typed:typed,isInteger:isInteger}=_ref,apply=(0,matrix_apply.p)({typed:typed,isInteger:isInteger});return typed("apply",{"...any":function any(args){var dim=args[1];(0,is.Et)(dim)?args[1]=dim-1:(0,is.C4)(dim)&&(args[1]=dim.minus(1));try{return apply.apply(null,args)}catch(err){throw errorTransform(err)}}})}),{isTransformFunction:!0}),column_transform_dependencies=["typed","Index","matrix","range"],createColumnTransform=(0,factory.P9)("column",column_transform_dependencies,(_ref=>{var{typed:typed,Index:Index,matrix:matrix,range:range}=_ref,column=(0,matrix_column.H)({typed:typed,Index:Index,matrix:matrix,range:range});return typed("column",{"...any":function any(args){var lastIndex=args.length-1,last=args[lastIndex];(0,is.Et)(last)&&(args[lastIndex]=last-1);try{return column.apply(null,args)}catch(err){throw errorTransform(err)}}})}),{isTransformFunction:!0});function compileInlineExpression(expression,math,scope){var symbol=expression.filter((function(node){return(0,is.li)(node)&&!(node.name in math)&&!scope.has(node.name)}))[0];if(!symbol)throw new Error('No undefined variable found in inline expression "'+expression+'"');var name=symbol.name,argsScope=new Map,subScope=new map.w6(scope,argsScope,new Set([name])),eq=expression.compile();return function inlineExpression(x){return argsScope.set(name,x),eq.evaluate(subScope)}}var transformCallback_dependencies=["typed"],createTransformCallback=(0,factory.P9)("transformCallback",transformCallback_dependencies,(_ref=>{var{typed:typed}=_ref;return function(callback,numberOfArrays){return typed.isTypedFunction(callback)?_transformTypedCallbackFunction(callback,numberOfArrays):_transformCallbackFunction(callback,callback.length,numberOfArrays)};function _transformTypedCallbackFunction(typedFunction,numberOfArrays){var signatures=Object.fromEntries(Object.entries(typedFunction.signatures).map((_ref2=>{var[signature,callbackFunction]=_ref2,numberOfCallbackInputs=signature.split(",").length;return typed.isTypedFunction(callbackFunction)?[signature,_transformTypedCallbackFunction(callbackFunction,numberOfArrays)]:[signature,_transformCallbackFunction(callbackFunction,numberOfCallbackInputs,numberOfArrays)]})));return"string"==typeof typedFunction.name?typed(typedFunction.name,signatures):typed(signatures)}}));function _transformCallbackFunction(callbackFunction,numberOfCallbackInputs,numberOfArrays){return numberOfCallbackInputs===numberOfArrays?callbackFunction:numberOfCallbackInputs===numberOfArrays+1?function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];var vals=args.slice(0,numberOfArrays),idx=_transformDims(args[numberOfArrays]);return callbackFunction(...vals,idx)}:numberOfCallbackInputs>numberOfArrays+1?function(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];var vals=args.slice(0,numberOfArrays),idx=_transformDims(args[numberOfArrays]),rest=args.slice(numberOfArrays+1);return callbackFunction(...vals,idx,...rest)}:callbackFunction}function _transformDims(dims){return dims.map((dim=>dim+1))}var filter_transform_dependencies=["typed"],createFilterTransform=(0,factory.P9)("filter",filter_transform_dependencies,(_ref=>{var{typed:typed}=_ref;function filterTransform(args,math,scope){var filter=(0,matrix_filter.H)({typed:typed}),transformCallback=createTransformCallback({typed:typed});if(0===args.length)return filter();var x=args[0];if(1===args.length)return filter(x);var N=args.length-1,callback=args[N];return x&&(x=_compileAndEvaluate(x,scope)),callback&&(callback=(0,is.li)(callback)||(0,is.m2)(callback)?_compileAndEvaluate(callback,scope):compileInlineExpression(callback,math,scope)),filter(x,transformCallback(callback,N))}function _compileAndEvaluate(arg,scope){return arg.compile().evaluate(scope)}return filterTransform.rawArgs=!0,filterTransform}),{isTransformFunction:!0}),forEach_transform_dependencies=["typed"],createForEachTransform=(0,factory.P9)("forEach",forEach_transform_dependencies,(_ref=>{var{typed:typed}=_ref,forEach=(0,matrix_forEach.j)({typed:typed}),transformCallback=createTransformCallback({typed:typed});function forEachTransform(args,math,scope){if(0===args.length)return forEach();var x=args[0];if(1===args.length)return forEach(x);var N=args.length-1,callback=args[N];return x&&(x=_compileAndEvaluate(x,scope)),callback&&(callback=(0,is.li)(callback)||(0,is.m2)(callback)?_compileAndEvaluate(callback,scope):compileInlineExpression(callback,math,scope)),forEach(x,transformCallback(callback,N))}function _compileAndEvaluate(arg,scope){return arg.compile().evaluate(scope)}return forEachTransform.rawArgs=!0,forEachTransform}),{isTransformFunction:!0}),index_transform_dependencies=["Index","getMatrixDataType"],createIndexTransform=(0,factory.P9)("index",index_transform_dependencies,(_ref=>{var{Index:Index,getMatrixDataType:getMatrixDataType}=_ref;return function indexTransform(){for(var args=[],i=0,ii=arguments.length;i<ii;i++){var arg=arguments[i];if((0,is._Z)(arg))arg.start--,arg.end-=arg.step>0?0:2;else if(arg&&!0===arg.isSet)arg=arg.map((function(v){return v-1}));else if((0,is.cy)(arg)||(0,is.OA)(arg))"boolean"!==getMatrixDataType(arg)&&(arg=arg.map((function(v){return v-1})));else if((0,is.Et)(arg))arg--;else if((0,is.C4)(arg))arg=arg.toNumber()-1;else if("string"!=typeof arg)throw new TypeError("Dimension must be an Array, Matrix, number, string, or Range");args[i]=arg}var res=new Index;return Index.apply(res,args),res}}),{isTransformFunction:!0}),map_transform_dependencies=["typed"],createMapTransform=(0,factory.P9)("map",map_transform_dependencies,(_ref=>{var{typed:typed}=_ref,map=(0,matrix_map.p)({typed:typed}),transformCallback=createTransformCallback({typed:typed});function mapTransform(args,math,scope){if(0===args.length)return map();if(1===args.length)return map(args[0]);var N=args.length-1,X=args.slice(0,N),callback=args[N];return X=X.map((arg=>_compileAndEvaluate(arg,scope))),callback&&(callback=(0,is.li)(callback)||(0,is.m2)(callback)?_compileAndEvaluate(callback,scope):compileInlineExpression(callback,math,scope)),map(...X,transformCallback(callback,N));function _compileAndEvaluate(arg,scope){return arg.compile().evaluate(scope)}}return mapTransform.rawArgs=!0,mapTransform}),{isTransformFunction:!0});function lastDimToZeroBase(args){if(2===args.length&&(0,is.P3)(args[0])){var dim=(args=args.slice())[1];(function isNumberOrBigNumber(n){return(0,is.Et)(n)||(0,is.C4)(n)})(dim)&&(args[1]=function dimToZeroBase(dim){return(0,is.Et)(dim)?dim-1:(0,is.C4)(dim)?dim.minus(1):dim}(dim))}return args}var max_transform_dependencies=["typed","config","numeric","larger"],createMaxTransform=(0,factory.P9)("max",max_transform_dependencies,(_ref=>{var{typed:typed,config:config,numeric:numeric,larger:larger}=_ref,max=(0,statistics_max.p)({typed:typed,config:config,numeric:numeric,larger:larger});return typed("max",{"...any":function any(args){args=lastDimToZeroBase(args);try{return max.apply(null,args)}catch(err){throw errorTransform(err)}}})}),{isTransformFunction:!0}),mean_transform_dependencies=["typed","add","divide"],createMeanTransform=(0,factory.P9)("mean",mean_transform_dependencies,(_ref=>{var{typed:typed,add:add,divide:divide}=_ref,mean=(0,statistics_mean.s)({typed:typed,add:add,divide:divide});return typed("mean",{"...any":function any(args){args=lastDimToZeroBase(args);try{return mean.apply(null,args)}catch(err){throw errorTransform(err)}}})}),{isTransformFunction:!0}),min_transform_dependencies=["typed","config","numeric","smaller"],createMinTransform=(0,factory.P9)("min",min_transform_dependencies,(_ref=>{var{typed:typed,config:config,numeric:numeric,smaller:smaller}=_ref,min=(0,statistics_min.L)({typed:typed,config:config,numeric:numeric,smaller:smaller});return typed("min",{"...any":function any(args){args=lastDimToZeroBase(args);try{return min.apply(null,args)}catch(err){throw errorTransform(err)}}})}),{isTransformFunction:!0}),range_transform_dependencies=["typed","config","?matrix","?bignumber","smaller","smallerEq","larger","largerEq","add","isPositive"],createRangeTransform=(0,factory.P9)("range",range_transform_dependencies,(_ref=>{var{typed:typed,config:config,matrix:matrix,bignumber:bignumber,smaller:smaller,smallerEq:smallerEq,larger:larger,largerEq:largerEq,add:add,isPositive:isPositive}=_ref,range=(0,matrix_range.S)({typed:typed,config:config,matrix:matrix,bignumber:bignumber,smaller:smaller,smallerEq:smallerEq,larger:larger,largerEq:largerEq,add:add,isPositive:isPositive});return typed("range",{"...any":function any(args){return"boolean"!=typeof args[args.length-1]&&args.push(!0),range.apply(null,args)}})}),{isTransformFunction:!0}),row_transform_dependencies=["typed","Index","matrix","range"],createRowTransform=(0,factory.P9)("row",row_transform_dependencies,(_ref=>{var{typed:typed,Index:Index,matrix:matrix,range:range}=_ref,row=(0,matrix_row.R)({typed:typed,Index:Index,matrix:matrix,range:range});return typed("row",{"...any":function any(args){var lastIndex=args.length-1,last=args[lastIndex];(0,is.Et)(last)&&(args[lastIndex]=last-1);try{return row.apply(null,args)}catch(err){throw errorTransform(err)}}})}),{isTransformFunction:!0}),subset_transform_dependencies=["typed","matrix","zeros","add"],createSubsetTransform=(0,factory.P9)("subset",subset_transform_dependencies,(_ref=>{var{typed:typed,matrix:matrix,zeros:zeros,add:add}=_ref,subset=(0,matrix_subset.$)({typed:typed,matrix:matrix,zeros:zeros,add:add});return typed("subset",{"...any":function any(args){try{return subset.apply(null,args)}catch(err){throw errorTransform(err)}}})}),{isTransformFunction:!0}),concat_transform_dependencies=["typed","matrix","isInteger"],createConcatTransform=(0,factory.P9)("concat",concat_transform_dependencies,(_ref=>{var{typed:typed,matrix:matrix,isInteger:isInteger}=_ref,concat=(0,matrix_concat.z)({typed:typed,matrix:matrix,isInteger:isInteger});return typed("concat",{"...any":function any(args){var lastIndex=args.length-1,last=args[lastIndex];(0,is.Et)(last)?args[lastIndex]=last-1:(0,is.C4)(last)&&(args[lastIndex]=last.minus(1));try{return concat.apply(null,args)}catch(err){throw errorTransform(err)}}})}),{isTransformFunction:!0}),diff_transform_dependencies=["typed","matrix","subtract","number","bignumber"],createDiffTransform=(0,factory.P9)("diff",diff_transform_dependencies,(_ref=>{var{typed:typed,matrix:matrix,subtract:subtract,number:number,bignumber:bignumber}=_ref,diff=(0,matrix_diff.i)({typed:typed,matrix:matrix,subtract:subtract,number:number,bignumber:bignumber});return typed("diff",{"...any":function any(args){args=lastDimToZeroBase(args);try{return diff.apply(null,args)}catch(err){throw errorTransform(err)}}})}),{isTransformFunction:!0}),std_transform_dependencies=["typed","map","sqrt","variance"],createStdTransform=(0,factory.P9)("std",std_transform_dependencies,(_ref=>{var{typed:typed,map:map,sqrt:sqrt,variance:variance}=_ref,std=(0,statistics_std.y)({typed:typed,map:map,sqrt:sqrt,variance:variance});return typed("std",{"...any":function any(args){args=lastDimToZeroBase(args);try{return std.apply(null,args)}catch(err){throw errorTransform(err)}}})}),{isTransformFunction:!0}),sum_transform_dependencies=["typed","config","add","numeric"],createSumTransform=(0,factory.P9)("sum",sum_transform_dependencies,(_ref=>{var{typed:typed,config:config,add:add,numeric:numeric}=_ref,sum=(0,statistics_sum.i)({typed:typed,config:config,add:add,numeric:numeric});return typed("sum",{"...any":function any(args){args=lastDimToZeroBase(args);try{return sum.apply(null,args)}catch(err){throw errorTransform(err)}}})}),{isTransformFunction:!0}),quantileSeq_transform_dependencies=["typed","bignumber","add","subtract","divide","multiply","partitionSelect","compare","isInteger","smaller","smallerEq","larger"],createQuantileSeqTransform=(0,factory.P9)("quantileSeq",quantileSeq_transform_dependencies,(_ref=>{var{typed:typed,bignumber:bignumber,add:add,subtract:subtract,divide:divide,multiply:multiply,partitionSelect:partitionSelect,compare:compare,isInteger:isInteger,smaller:smaller,smallerEq:smallerEq,larger:larger}=_ref,quantileSeq=(0,statistics_quantileSeq.D)({typed:typed,bignumber:bignumber,add:add,subtract:subtract,divide:divide,multiply:multiply,partitionSelect:partitionSelect,compare:compare,isInteger:isInteger,smaller:smaller,smallerEq:smallerEq,larger:larger});return typed("quantileSeq",{"Array | Matrix, number | BigNumber":quantileSeq,"Array | Matrix, number | BigNumber, number":(arr,prob,dim)=>quantileSeq(arr,prob,dimToZeroBase(dim)),"Array | Matrix, number | BigNumber, boolean":quantileSeq,"Array | Matrix, number | BigNumber, boolean, number":(arr,prob,sorted,dim)=>quantileSeq(arr,prob,sorted,dimToZeroBase(dim)),"Array | Matrix, Array | Matrix":quantileSeq,"Array | Matrix, Array | Matrix, number":(data,prob,dim)=>quantileSeq(data,prob,dimToZeroBase(dim)),"Array | Matrix, Array | Matrix, boolean":quantileSeq,"Array | Matrix, Array | Matrix, boolean, number":(data,prob,sorted,dim)=>quantileSeq(data,prob,sorted,dimToZeroBase(dim))});function dimToZeroBase(dim){return lastDimToZeroBase([[],dim])[1]}}),{isTransformFunction:!0}),cumsum_transform_dependencies=["typed","add","unaryPlus"],createCumSumTransform=(0,factory.P9)("cumsum",cumsum_transform_dependencies,(_ref=>{var{typed:typed,add:add,unaryPlus:unaryPlus}=_ref,cumsum=(0,statistics_cumsum.b)({typed:typed,add:add,unaryPlus:unaryPlus});return typed("cumsum",{"...any":function any(args){if(2===args.length&&(0,is.P3)(args[0])){var dim=args[1];(0,is.Et)(dim)?args[1]=dim-1:(0,is.C4)(dim)&&(args[1]=dim.minus(1))}try{return cumsum.apply(null,args)}catch(err){throw errorTransform(err)}}})}),{isTransformFunction:!0}),variance_transform_dependencies=["typed","add","subtract","multiply","divide","apply","isNaN"],createVarianceTransform=(0,factory.P9)("variance",variance_transform_dependencies,(_ref=>{var{typed:typed,add:add,subtract:subtract,multiply:multiply,divide:divide,apply:apply,isNaN:isNaN}=_ref,variance=(0,statistics_variance.A)({typed:typed,add:add,subtract:subtract,multiply:multiply,divide:divide,apply:apply,isNaN:isNaN});return typed("variance",{"...any":function any(args){args=lastDimToZeroBase(args);try{return variance.apply(null,args)}catch(err){throw errorTransform(err)}}})}),{isTransformFunction:!0}),utils_print=__webpack_require__("./node_modules/mathjs/lib/esm/utils/print.js"),print_transform_dependencies=["typed","matrix","zeros","add"],createPrintTransform=(0,factory.P9)("print",print_transform_dependencies,(_ref=>{var{typed:typed,matrix:matrix,zeros:zeros,add:add}=_ref,print=(0,string_print.q)({typed:typed,matrix:matrix,zeros:zeros,add:add});return typed("print",{"string, Object | Array":function string_Object__Array(template,values){return print(_convertTemplateToZeroBasedIndex(template),values)},"string, Object | Array, number | Object":function string_Object__Array_number__Object(template,values,options){return print(_convertTemplateToZeroBasedIndex(template),values,options)}});function _convertTemplateToZeroBasedIndex(template){return template.replace(utils_print.I,(x=>"$"+x.slice(1).split(".").map((function(part){return!isNaN(part)&&part.length>0?parseInt(part)-1:part})).join(".")))}}),{isTransformFunction:!0}),and_transform_dependencies=["typed","matrix","zeros","add","equalScalar","not","concat"],createAndTransform=(0,factory.P9)("and",and_transform_dependencies,(_ref=>{var{typed:typed,matrix:matrix,equalScalar:equalScalar,zeros:zeros,not:not,concat:concat}=_ref,and=(0,logical_and.i)({typed:typed,matrix:matrix,equalScalar:equalScalar,zeros:zeros,not:not,concat:concat});function andTransform(args,math,scope){var condition1=args[0].compile().evaluate(scope);if(!(0,is.P3)(condition1)&&!and(condition1,!0))return!1;var condition2=args[1].compile().evaluate(scope);return and(condition1,condition2)}return andTransform.rawArgs=!0,andTransform}),{isTransformFunction:!0}),or_transform_dependencies=["typed","matrix","equalScalar","DenseMatrix","concat"],createOrTransform=(0,factory.P9)("or",or_transform_dependencies,(_ref=>{var{typed:typed,matrix:matrix,equalScalar:equalScalar,DenseMatrix:DenseMatrix,concat:concat}=_ref,or=(0,logical_or.M)({typed:typed,matrix:matrix,equalScalar:equalScalar,DenseMatrix:DenseMatrix,concat:concat});function orTransform(args,math,scope){var condition1=args[0].compile().evaluate(scope);if(!(0,is.P3)(condition1)&&or(condition1,!1))return!0;var condition2=args[1].compile().evaluate(scope);return or(condition1,condition2)}return orTransform.rawArgs=!0,orTransform}),{isTransformFunction:!0}),bitAnd_transform_dependencies=["typed","matrix","zeros","add","equalScalar","not","concat"],createBitAndTransform=(0,factory.P9)("bitAnd",bitAnd_transform_dependencies,(_ref=>{var{typed:typed,matrix:matrix,equalScalar:equalScalar,zeros:zeros,not:not,concat:concat}=_ref,bitAnd=(0,bitwise_bitAnd.x)({typed:typed,matrix:matrix,equalScalar:equalScalar,zeros:zeros,not:not,concat:concat});function bitAndTransform(args,math,scope){var condition1=args[0].compile().evaluate(scope);if(!(0,is.P3)(condition1)){if(isNaN(condition1))return NaN;if(0===condition1||!1===condition1)return 0}var condition2=args[1].compile().evaluate(scope);return bitAnd(condition1,condition2)}return bitAndTransform.rawArgs=!0,bitAndTransform}),{isTransformFunction:!0}),bitOr_transform_dependencies=["typed","matrix","equalScalar","DenseMatrix","concat"],createBitOrTransform=(0,factory.P9)("bitOr",bitOr_transform_dependencies,(_ref=>{var{typed:typed,matrix:matrix,equalScalar:equalScalar,DenseMatrix:DenseMatrix,concat:concat}=_ref,bitOr=(0,bitwise_bitOr.$)({typed:typed,matrix:matrix,equalScalar:equalScalar,DenseMatrix:DenseMatrix,concat:concat});function bitOrTransform(args,math,scope){var condition1=args[0].compile().evaluate(scope);if(!(0,is.P3)(condition1)){if(isNaN(condition1))return NaN;if(-1===condition1)return-1;if(!0===condition1)return 1}var condition2=args[1].compile().evaluate(scope);return bitOr(condition1,condition2)}return bitOrTransform.rawArgs=!0,bitOrTransform}),{isTransformFunction:!0}),allFactoriesAny_all=factoriesAny_namespaceObject},"./node_modules/tiny-emitter/index.js":function(module){function E(){}E.prototype={on:function(name,callback,ctx){var e=this.e||(this.e={});return(e[name]||(e[name]=[])).push({fn:callback,ctx:ctx}),this},once:function(name,callback,ctx){var self=this;function listener(){self.off(name,listener),callback.apply(ctx,arguments)}return listener._=callback,this.on(name,listener,ctx)},emit:function(name){for(var data=[].slice.call(arguments,1),evtArr=((this.e||(this.e={}))[name]||[]).slice(),i=0,len=evtArr.length;i<len;i++)evtArr[i].fn.apply(evtArr[i].ctx,data);return this},off:function(name,callback){var e=this.e||(this.e={}),evts=e[name],liveEvents=[];if(evts&&callback)for(var i=0,len=evts.length;i<len;i++)evts[i].fn!==callback&&evts[i].fn._!==callback&&liveEvents.push(evts[i]);return liveEvents.length?e[name]=liveEvents:delete e[name],this}},module.exports=E,module.exports.TinyEmitter=E}}]);