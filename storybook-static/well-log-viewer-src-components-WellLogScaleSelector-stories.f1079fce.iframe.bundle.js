"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[1789],{"./packages/well-log-viewer/src/components/WellLogScaleSelector.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:function(){return Default},WithCustomValues:function(){return WithCustomValues},WithJSXLabel:function(){return WithJSXLabel},WithRoundingStep:function(){return WithRoundingStep},WithoutLabel:function(){return WithoutLabel},__namedExportsOrder:function(){return __namedExportsOrder},default:function(){return WellLogScaleSelector_stories}});var dist=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs"),react=__webpack_require__("./node_modules/react/index.js"),ScaleSelector=__webpack_require__("./packages/well-log-viewer/src/components/ScaleSelector.tsx");const WellLogScaleSelector=({callbackManager:callbackManager,label:label,values:values,round:round})=>{const[value,setValue]=(0,react.useState)(1),onContentRescale=(0,react.useCallback)((()=>{const controller=callbackManager?.controller;if(!controller)return;const newValue=controller.getContentScale();setValue((currentValue=>Math.abs(currentValue-newValue)<1?currentValue:newValue))}),[callbackManager]),onChange=(0,react.useCallback)((newValue=>{const controller=callbackManager?.controller;controller&&controller.setContentScale(newValue)}),[callbackManager]);return(0,react.useEffect)((()=>{if(callbackManager)return callbackManager.registerCallback("onContentRescale",onContentRescale),()=>{callbackManager.unregisterCallback("onContentRescale",onContentRescale)}}),[callbackManager,onContentRescale]),react.createElement("div",{className:"scale"},label&&react.createElement("span",{className:"scale-label"},label),react.createElement("span",{className:"scale-value"},react.createElement(ScaleSelector.A,{onChange:onChange,values:values,value:value,round:round})))};var components_WellLogScaleSelector=WellLogScaleSelector;WellLogScaleSelector.__docgenInfo={description:"",methods:[],displayName:"WellLogScaleSelector",props:{callbackManager:{required:!0,tsType:{name:"union",raw:"CallbackManager | undefined",elements:[{name:"CallbackManager"},{name:"undefined"}]},description:""},label:{required:!1,tsType:{name:"union",raw:"string | JSX.Element",elements:[{name:"string"},{name:"JSX.Element"}]},description:""},values:{required:!1,tsType:{name:"Array",elements:[{name:"number"}],raw:"number[]"},description:""},round:{required:!1,tsType:{name:"union",raw:"boolean | number",elements:[{name:"boolean"},{name:"number"}]},description:""}}};class MockCallbackManager{controller={setContentScale:value=>{console.log("Scale set to:",value)},getContentScale:()=>1};callbacks=(()=>new Map)();registerCallback(eventName,callback){this.callbacks.has(eventName)||this.callbacks.set(eventName,[]),this.callbacks.get(eventName)?.push(callback)}unregisterCallback(eventName,callback){const callbacks=this.callbacks.get(eventName);if(callbacks){const index=callbacks.indexOf(callback);index>-1&&callbacks.splice(index,1)}}triggerCallback(eventName){const callbacks=this.callbacks.get(eventName);callbacks&&callbacks.forEach((callback=>callback()))}}var WellLogScaleSelector_stories={component:components_WellLogScaleSelector,title:"WellLogViewer/Components/WellLogScaleSelector",parameters:{docs:{description:{component:"A scale selector component for WellLogViewer that allows users to change the content scale/zoom level. Integrates with CallbackManager to communicate scale changes."}}},argTypes:{callbackManager:{description:"CallbackManager instance to handle scale changes",control:!1},label:{description:"Label to display next to the scale selector",control:{type:"text"}},values:{description:"Available scale values array",control:{type:"object"}},round:{description:'Round the value to a "good" number (true for auto or number for rounding step)',control:{type:"boolean"}}}};const Template=args=>{const[mockManager]=(0,react.useState)((()=>new MockCallbackManager)),[info,setInfo]=(0,react.useState)("Current scale: 1.0"),[currentScaleIndex,setCurrentScaleIndex]=(0,react.useState)(0),defaultScaleValues=[.5,1,2,4,8];react.useEffect((()=>{const originalSetScale=mockManager.controller.setContentScale;mockManager.controller.setContentScale=function(value){originalSetScale.call(this,value),setInfo(`Current scale: ${value}`)}}),[mockManager]);return react.createElement("div",{style:{padding:"20px",fontFamily:"Arial, sans-serif"}},react.createElement("div",{style:{marginBottom:"10px"}},react.createElement(components_WellLogScaleSelector,{callbackManager:mockManager,label:args.label,values:args.values,round:args.round})),react.createElement("div",{style:{padding:"10px",backgroundColor:"#f5f5f5",borderRadius:"4px",fontSize:"14px",color:"#666"}},info),react.createElement("div",{style:{marginTop:"20px"}},react.createElement("button",{onClick:()=>{const scaleValues=args.values||defaultScaleValues,nextIndex=(currentScaleIndex+1)%scaleValues.length,newScale=scaleValues[nextIndex];mockManager.controller.getContentScale=()=>newScale,mockManager.controller.setContentScale(newScale),mockManager.triggerCallback("onContentRescale"),setCurrentScaleIndex(nextIndex)},style:{padding:"8px 16px",backgroundColor:"#007acc",color:"white",border:"none",borderRadius:"4px",cursor:"pointer"}},"Simulate External Scale Change")))},Default={args:{label:"Zoom Level:",round:!0},render:args=>react.createElement(Template,args),play:async({canvasElement:canvasElement})=>{const canvas=(0,dist.ux)(canvasElement);await new Promise((resolve=>setTimeout(resolve,100)));const externalButton=canvas.getByText("Simulate External Scale Change");await dist.Q4.click(externalButton),await(0,dist.E3)(canvas.getByText(/Current scale: 0\.5/)).toBeInTheDocument(),await dist.Q4.click(externalButton),await(0,dist.E3)(canvas.getByText(/Current scale: 2/)).toBeInTheDocument()}},WithJSXLabel={args:{label:react.createElement("strong",{style:{color:"#007acc"}},"Custom Scale:"),round:!0},render:args=>react.createElement(Template,args),play:async({canvasElement:canvasElement})=>{const canvas=(0,dist.ux)(canvasElement);await(0,dist.E3)(canvas.getByText("Custom Scale:")).toBeInTheDocument();const externalButton=canvas.getByText("Simulate External Scale Change");await dist.Q4.click(externalButton),await(0,dist.E3)(canvas.getByText(/Current scale: 0\.5/)).toBeInTheDocument()}},WithCustomValues={args:{label:"Scale:",values:[.5,1,2,4,8,16,32],round:!1},render:args=>react.createElement(Template,args),play:async({canvasElement:canvasElement})=>{const canvas=(0,dist.ux)(canvasElement),externalButton=canvas.getByText("Simulate External Scale Change");await dist.Q4.click(externalButton),await(0,dist.E3)(canvas.getByText(/Current scale: 2/)).toBeInTheDocument(),await dist.Q4.click(externalButton),await(0,dist.E3)(canvas.getByText(/Current scale: 4/)).toBeInTheDocument();for(let i=0;i<5;i++)await dist.Q4.click(externalButton);await(0,dist.E3)(canvas.getByText(/Current scale: 0\.5/)).toBeInTheDocument()}},WithoutLabel={args:{round:!0},render:args=>react.createElement(Template,args),play:async({canvasElement:canvasElement})=>{const canvas=(0,dist.ux)(canvasElement),externalButton=canvas.getByText("Simulate External Scale Change");await dist.Q4.click(externalButton),await(0,dist.E3)(canvas.getByText(/Current scale: 0\.5/)).toBeInTheDocument()}},WithRoundingStep={args:{label:"Scale:",round:.1,values:[.01,.11,.12,100.01]},render:args=>react.createElement(Template,args),play:async({canvasElement:canvasElement})=>{const canvas=(0,dist.ux)(canvasElement),externalButton=canvas.getByText("Simulate External Scale Change");await dist.Q4.click(externalButton),await(0,dist.E3)(canvas.getByText(/Current scale: 0\.11/)).toBeInTheDocument(),await dist.Q4.click(externalButton),await(0,dist.E3)(canvas.getByText(/Current scale: 0\.12/)).toBeInTheDocument(),await dist.Q4.click(externalButton),await(0,dist.E3)(canvas.getByText(/Current scale: 100\.01/)).toBeInTheDocument()}},__namedExportsOrder=["Default","WithJSXLabel","WithCustomValues","WithoutLabel","WithRoundingStep"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Zoom Level:",\n    round: true\n  },\n  render: args => <Template {...args} />,\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Wait for component to render\n    await new Promise(resolve => setTimeout(resolve, 100));\n\n    // Test external scale change button\n    const externalButton = canvas.getByText("Simulate External Scale Change");\n    await userEvent.click(externalButton);\n\n    // Check that the info display updated\n    await expect(canvas.getByText(/Current scale: 0\\.5/)).toBeInTheDocument();\n\n    // Click again to cycle to next value\n    await userEvent.click(externalButton);\n    await expect(canvas.getByText(/Current scale: 2/)).toBeInTheDocument();\n  }\n}',...Default.parameters?.docs?.source}}},WithJSXLabel.parameters={...WithJSXLabel.parameters,docs:{...WithJSXLabel.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: <strong style={{\n      color: "#007acc"\n    }}>Custom Scale:</strong>,\n    round: true\n  },\n  render: args => <Template {...args} />,\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Verify the custom JSX label is rendered\n    await expect(canvas.getByText("Custom Scale:")).toBeInTheDocument();\n\n    // Test interaction\n    const externalButton = canvas.getByText("Simulate External Scale Change");\n    await userEvent.click(externalButton);\n    await expect(canvas.getByText(/Current scale: 0\\.5/)).toBeInTheDocument();\n  }\n}',...WithJSXLabel.parameters?.docs?.source}}},WithCustomValues.parameters={...WithCustomValues.parameters,docs:{...WithCustomValues.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Scale:",\n    values: [0.5, 1, 2, 4, 8, 16, 32],\n    round: false\n  },\n  render: args => <Template {...args} />,\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Test cycling through custom values\n    const externalButton = canvas.getByText("Simulate External Scale Change");\n\n    // Start at scale 1, click to go to next value (2)\n    await userEvent.click(externalButton);\n    await expect(canvas.getByText(/Current scale: 2/)).toBeInTheDocument();\n\n    // Click again to go to next value (4)\n    await userEvent.click(externalButton);\n    await expect(canvas.getByText(/Current scale: 4/)).toBeInTheDocument();\n\n    // Click multiple times to test cycling back to beginning\n    for (let i = 0; i < 5; i++) {\n      await userEvent.click(externalButton);\n    }\n    await expect(canvas.getByText(/Current scale: 0\\.5/)).toBeInTheDocument();\n  }\n}',...WithCustomValues.parameters?.docs?.source}}},WithoutLabel.parameters={...WithoutLabel.parameters,docs:{...WithoutLabel.parameters?.docs,source:{originalSource:'{\n  args: {\n    round: true\n  },\n  render: args => <Template {...args} />,\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Test that the component works without a label\n    const externalButton = canvas.getByText("Simulate External Scale Change");\n    await userEvent.click(externalButton);\n    await expect(canvas.getByText(/Current scale: 0\\.5/)).toBeInTheDocument();\n  }\n}',...WithoutLabel.parameters?.docs?.source}}},WithRoundingStep.parameters={...WithRoundingStep.parameters,docs:{...WithRoundingStep.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Scale:",\n    round: 0.1,\n    // Round to nearest 0.1\n    values: [0.01, 0.11, 0.12, 100.01]\n  },\n  render: args => <Template {...args} />,\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Test rounding behavior with custom values\n    const externalButton = canvas.getByText("Simulate External Scale Change");\n\n    // Click to cycle through values and verify they appear\n    await userEvent.click(externalButton);\n    await expect(canvas.getByText(/Current scale: 0\\.11/)).toBeInTheDocument();\n    await userEvent.click(externalButton);\n    await expect(canvas.getByText(/Current scale: 0\\.12/)).toBeInTheDocument();\n    await userEvent.click(externalButton);\n    await expect(canvas.getByText(/Current scale: 100\\.01/)).toBeInTheDocument();\n  }\n}',...WithRoundingStep.parameters?.docs?.source}}}},"./packages/well-log-viewer/src/components/ScaleSelector.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function addOption(value){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option",{key:value,value:value},"1:"+value)}const defValues=[100,200,500,1e3,2e3,5e3,1e4,2e4,5e4];function ScaleSelector(props){const[value,setValue]=react__WEBPACK_IMPORTED_MODULE_0__.useState(props.value);react__WEBPACK_IMPORTED_MODULE_0__.useEffect((()=>{setValue(props.value)}),[props.value]);const values=props.values||defValues,{shouldAddCustomValue:shouldAddCustomValue,valueRound:valueRound}=function getScale(value,values,round){let nearestValue;const len=values.length;if(len){nearestValue=values[len-1];for(let i=1;i<len;i++)if(value<.5*(values[i-1]+values[i])){nearestValue=values[i-1];break}}if(round){let r=1;if(!0===round){const ticks=[1e4,5e3,2e3,1e3,500,200,100,50,20,10,5,2,1],n=ticks.length;for(let i=0;i+2<n;i++)if(!(value<ticks[i])){r=ticks[i+2];break}}else r=round;value=Number((value/r).toFixed(0))*r}return{shouldAddCustomValue:nearestValue!==value,valueRound:value}}(value,values,props.round);return react__WEBPACK_IMPORTED_MODULE_0__.createElement("select",{onChange:event=>{event.preventDefault();const value=parseFloat(event.target.value);props.onChange?.(value),setValue(value)},value:valueRound},shouldAddCustomValue&&addOption(valueRound),values.map((value=>addOption(value))))}__webpack_exports__.A=ScaleSelector,ScaleSelector.__docgenInfo={description:"",methods:[],displayName:"ScaleSelector",props:{values:{required:!1,tsType:{name:"Array",elements:[{name:"number"}],raw:"number[]"},description:""},value:{required:!0,tsType:{name:"number"},description:""},round:{required:!1,tsType:{name:"union",raw:"boolean | number",elements:[{name:"boolean"},{name:"number"}]},description:""}}}}}]);