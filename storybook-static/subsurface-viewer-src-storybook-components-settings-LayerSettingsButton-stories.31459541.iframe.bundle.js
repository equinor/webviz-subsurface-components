"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[1812],{"./packages/subsurface-viewer/src/storybook/components/settings/LayerSettingsButton.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DrawingSettings:function(){return DrawingSettings},WellsSettings:function(){return WellsSettings},__namedExportsOrder:function(){return __namedExportsOrder},default:function(){return LayerSettingsButton_stories}});var react=__webpack_require__("./node_modules/react/index.js"),Tooltip=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-core-react/dist/esm/components/Tooltip/Tooltip.js"),Icon=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-core-react/dist/esm/components/Icon/index.js"),Menu=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-core-react/dist/esm/components/Menu/index.js"),styled=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),Fab=__webpack_require__("./node_modules/@mui/material/Fab/Fab.js"),esm=__webpack_require__("./node_modules/@equinor/eds-icons/dist/esm/index.js");Icon.J.add({map:esm.UID,well:esm.J6Y,brush:esm.DmU,fault:esm._4H,pie_chart:esm.EyD,hill_shading:esm.sO2,surface_layer:esm.HYs});const DrawModes=[{id:"view",displayName:"View"},{id:"modify",displayName:"Edit"},{id:"drawPoint",displayName:"Create point"},{id:"drawLineString",displayName:"Create polyline"},{id:"drawPolygon",displayName:"Create polygon"}],SliderTypeProps=[{id:"opacity",displayName:"Opacity",min:0,max:100,step:1}],ToggleTypeProps=[{id:"wellNameVisible",displayName:"Well name"},{id:"wellNameAtTop",displayName:"Well name at top"},{id:"logCurves",displayName:"Log curves",dependentOnProp:"logData"},{id:"isReadoutDepth",displayName:"Depth readout"}],MenuTypeProps=[{id:"mode",displayName:"Draw mode"}],NumericTypeProps=[{id:"lineWidthScale",displayName:"Trajectory thickness scale",step:.1},{id:"logRadius",displayName:"Log radius",dependentOnProp:"logData"},{id:"pointRadiusScale",displayName:"Well head radius scale",step:.1},{id:"lineWidthMinPixels",displayName:"Line thickness"},{id:"wellNameSize",displayName:"Well name size"}],LayerIcons={ColormapLayer:"surface_layer",Hillshading2DLayer:"hill_shading",WellsLayer:"well",Map3DLayer:"map",PieChartLayer:"pie_chart",FaultPolygonsLayer:"fault",DrawingLayer:"brush",AxesLayer:"brush",NorthArrow3D:"brush"};__webpack_require__("./node_modules/lodash/lodash.js");var es=__webpack_require__("./node_modules/react-redux/es/index.js"),redux_toolkit_esm=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js"),redux=__webpack_require__("./node_modules/redux/es/redux.js");const specSlice=(0,redux_toolkit_esm.oM)({name:"spec",initialState:{},reducers:{setSpec:(_,action)=>action.payload,updateVisibleLayers:(state,action)=>{const layer=state.layers.find((layer=>layer.id===action.payload[0]));layer&&(layer.visible=action.payload[1])},updateDrawingMode:(state,action)=>{const layer=state.layers.find((layer=>layer.id===action.payload[0]));layer&&"DrawingLayer"===layer["@@type"]&&(layer.mode=action.payload[1])},updateLayerProp:(state,action)=>{const layer=state.layers.find((layer=>layer.id===action.payload[0]));layer&&(layer[action.payload[1]]=action.payload[2])}}}),{setSpec:setSpec,updateVisibleLayers:updateVisibleLayers,updateDrawingMode:updateDrawingMode,updateLayerProp:updateLayerProp}=((0,redux.UY)({spec:specSlice.reducer}),specSlice.actions);var NativeSelect=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-core-react/dist/esm/components/Select/NativeSelect.js");const DrawModeSelector=react.memo((({layerId:layerId,label:label,value:value})=>{const dispatch=(0,es.I0)(),handleSelectedItemChange=(0,react.useCallback)((event=>{const selection=DrawModes.find((mode=>mode.displayName===event.target.value));dispatch(updateDrawingMode([layerId,selection?.id]))}),[dispatch]),cur_selection=DrawModes.find((mode=>mode.id===value));return react.createElement(NativeSelect.p,{id:`${layerId}-mode-selector`,label:label,value:cur_selection?.displayName,onChange:handleSelectedItemChange},DrawModes.map((mode=>react.createElement("option",{key:mode.id},mode.displayName))))}));DrawModeSelector.displayName="DrawModeSelector";var settings_DrawModeSelector=DrawModeSelector;try{DrawModeSelector.displayName="DrawModeSelector",DrawModeSelector.__docgenInfo={description:"",displayName:"DrawModeSelector",props:{layerId:{defaultValue:null,description:"It defines the mode that are available for a particular layer based on layer ID.",name:"layerId",required:!0,type:{name:"string"}},label:{defaultValue:null,description:"Label for the component.",name:"label",required:!0,type:{name:"string"}},value:{defaultValue:null,description:"Initial state of the component.",name:"value",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/components/settings/DrawModeSelector.tsx#DrawModeSelector"]={docgenInfo:DrawModeSelector.__docgenInfo,name:"DrawModeSelector",path:"packages/subsurface-viewer/src/components/settings/DrawModeSelector.tsx#DrawModeSelector"})}catch(__react_docgen_typescript_loader_error){}var NumericInput=__webpack_require__("./packages/subsurface-viewer/src/components/settings/NumericInput.tsx"),ToggleButton=__webpack_require__("./packages/subsurface-viewer/src/components/settings/ToggleButton.tsx"),Label=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-core-react/dist/esm/components/Label/Label.js"),Slider=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-core-react/dist/esm/components/Slider/Slider.js");const SliderInput=react.memo((({label:label,value:value,min:min,max:max,step:step,onChange:onChange})=>react.createElement("div",{style:{display:"flex",justifyContent:"space-between"}},react.createElement(Label._,{id:`${label}-slider-label`,label:label,style:{paddingTop:5,fontSize:15}}),react.createElement(Slider.i,{ariaLabelledby:`${label}-slider-label`,id:`${label}-slider`,value:100*value,min:min,max:max,step:step,minMaxDots:!1,minMaxValues:!1,onChange:onChange,style:{paddingTop:5,paddingRight:10,paddingBottom:25,width:"3rem"}}))));SliderInput.displayName="SliderInput";var settings_SliderInput=SliderInput;try{SliderInput.displayName="SliderInput",SliderInput.__docgenInfo={description:"",displayName:"SliderInput",props:{label:{defaultValue:null,description:"Label for the component.",name:"label",required:!0,type:{name:"string"}},value:{defaultValue:null,description:"Initial state of the component.",name:"value",required:!0,type:{name:"number"}},min:{defaultValue:null,description:"Min value.",name:"min",required:!1,type:{name:"number"}},max:{defaultValue:null,description:"Max value.",name:"max",required:!1,type:{name:"number"}},step:{defaultValue:null,description:"Stepping interval.",name:"step",required:!1,type:{name:"number"}},onChange:{defaultValue:null,description:"Callback to update the state of the component.",name:"onChange",required:!0,type:{name:"(e: FormEvent<HTMLDivElement>, value: number | number[]) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/components/settings/SliderInput.tsx#SliderInput"]={docgenInfo:SliderInput.__docgenInfo,name:"SliderInput",path:"packages/subsurface-viewer/src/components/settings/SliderInput.tsx#SliderInput"})}catch(__react_docgen_typescript_loader_error){}const LayerProperty=react.memo((({layer:layer})=>{const dispatch=(0,es.I0)(),updateProp=(0,react.useCallback)(((layer_id,prop_name,state)=>dispatch(updateLayerProp([layer_id,prop_name,state]))),[dispatch]),isControlDisplayable=(propId,dependentOnProp)=>!!layer&&(dependentOnProp?dependentOnProp in layer&&propId in layer:propId in layer);return layer&&react.createElement(react.Fragment,null,ToggleTypeProps.map((prop=>isControlDisplayable(prop.id,prop.dependentOnProp)&&react.createElement(ToggleButton.Z,{label:prop.displayName,checked:layer[prop.id],onChange:e=>{updateProp(layer.id,prop.id,e.target.checked)},key:`prop-toggle-${layer.id}-${prop.id}`}))),NumericTypeProps.map((prop=>isControlDisplayable(prop.id,prop.dependentOnProp)&&react.createElement(NumericInput.Z,{label:prop.displayName,value:layer[prop.id],step:prop.step,onChange:e=>{updateProp(layer.id,prop.id,Number(e.target.value))},key:`prop-numeric-input-${layer.id}-${prop.id}`}))),SliderTypeProps.map((prop=>isControlDisplayable(prop.id,prop.dependentOnProp)&&react.createElement(settings_SliderInput,{label:prop.displayName,min:prop.min,max:prop.max,step:prop.step,value:layer[prop.id],onChange:(_,value)=>{updateProp(layer.id,prop.id,value/100)},key:`prop-slider-${layer.id}-${prop.id}`}))),MenuTypeProps.map((prop=>isControlDisplayable(prop.id,prop.dependentOnProp)&&react.createElement(settings_DrawModeSelector,{layerId:layer.id,label:prop.displayName,value:layer[prop.id],key:`prop-menu-${layer.id}-${prop.id}`}))))}));LayerProperty.displayName="LayerProperty";var settings_LayerProperty=LayerProperty;try{LayerProperty.displayName="LayerProperty",LayerProperty.__docgenInfo={description:"",displayName:"LayerProperty",props:{layer:{defaultValue:null,description:"",name:"layer",required:!0,type:{name:"Record<string, unknown>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/components/settings/LayerProperty.tsx#LayerProperty"]={docgenInfo:LayerProperty.__docgenInfo,name:"LayerProperty",path:"packages/subsurface-viewer/src/components/settings/LayerProperty.tsx#LayerProperty"})}catch(__react_docgen_typescript_loader_error){}const PREFIX="LayerSettingsButton",classes={root:`${PREFIX}-root`,menu:`${PREFIX}-menu`},Root=(0,styled.ZP)("div")((({theme:theme})=>({[`& .${classes.root}`]:{marginBottom:theme.spacing(1)},[`& .${classes.menu}`]:{display:"flex",flexDirection:"column"}}))),LayerSettingsButton=react.memo((({layer:layer})=>{const dispatch=(0,es.I0)(),[anchorEl,setAnchorEl]=react.useState(null),handleClick=(0,react.useCallback)((event=>{dispatch(updateLayerProp(["drawing-layer","mode","view"])),setAnchorEl(anchorEl?null:event.currentTarget)}),[anchorEl]),handleClose=(0,react.useCallback)((()=>{setAnchorEl(null)}),[]),propVisibility=(0,react.useMemo)((()=>(layer=>null!=layer&&[...MenuTypeProps,...NumericTypeProps,...SliderTypeProps,...ToggleTypeProps].reduce(((acc,current)=>acc||current.id in layer),!1))(layer)),[layer]);return LayerIcons[layer["@@type"]]&&layer.visible&&propVisibility?react.createElement(Root,null,react.createElement(Fab.Z,{id:`${layer.id}-button`,size:"medium",onClick:handleClick,className:classes.root},react.createElement(Tooltip.u,{title:layer.name},react.createElement(Icon.J,{color:"currentColor",name:LayerIcons[layer["@@type"]]}))),react.createElement(Menu.v,{className:classes.menu,anchorEl:anchorEl,"aria-labelledby":`${layer.id}-button`,onClose:handleClose,placement:"left",open:Boolean(anchorEl)},react.createElement(settings_LayerProperty,{layer:layer,key:`layer-property-${layer.id}`}))):null}));LayerSettingsButton.displayName="LayerSettingsButton";var settings_LayerSettingsButton=LayerSettingsButton;try{LayerSettingsButton.displayName="LayerSettingsButton",LayerSettingsButton.__docgenInfo={description:"",displayName:"LayerSettingsButton",props:{layer:{defaultValue:null,description:"",name:"layer",required:!0,type:{name:"Record<string, unknown>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/components/settings/LayerSettingsButton.tsx#LayerSettingsButton"]={docgenInfo:LayerSettingsButton.__docgenInfo,name:"LayerSettingsButton",path:"packages/subsurface-viewer/src/components/settings/LayerSettingsButton.tsx#LayerSettingsButton"})}catch(__react_docgen_typescript_loader_error){}var LayerSettingsButton_stories={parameters:{storySource:{source:'import React from "react";\nimport LayerSettingsButton from "../../../components/settings/LayerSettingsButton";\nexport default {\n  component: LayerSettingsButton,\n  title: "SubsurfaceViewer/Components/Settings/LayerSettingsButton"\n};\nconst Template = args => {\n  return /*#__PURE__*/React.createElement(LayerSettingsButton, {\n    layer: args.layer\n  });\n};\nexport const DrawingSettings = Template.bind({});\nDrawingSettings.args = {\n  layer: {\n    name: "Drawing",\n    "@@type": "DrawingLayer",\n    id: "drawing-layer",\n    visible: true,\n    mode: "drawLineString"\n  }\n};\nexport const WellsSettings = Template.bind({});\nWellsSettings.args = {\n  layer: {\n    name: "Wells",\n    "@@type": "WellsLayer",\n    id: "wells-layer",\n    opacity: 1,\n    pointRadiusScale: 8,\n    visible: true\n  }\n};\nDrawingSettings.parameters = {\n  ...DrawingSettings.parameters,\n  docs: {\n    ...DrawingSettings.parameters?.docs,\n    source: {\n      originalSource: "args => {\\n  return <LayerSettingsButton layer={args.layer} />;\\n}",\n      ...DrawingSettings.parameters?.docs?.source\n    }\n  }\n};\nWellsSettings.parameters = {\n  ...WellsSettings.parameters,\n  docs: {\n    ...WellsSettings.parameters?.docs,\n    source: {\n      originalSource: "args => {\\n  return <LayerSettingsButton layer={args.layer} />;\\n}",\n      ...WellsSettings.parameters?.docs?.source\n    }\n  }\n};',locationsMap:{"drawing-settings":{startLoc:{col:17,line:7},endLoc:{col:1,line:11},startBody:{col:17,line:7},endBody:{col:1,line:11}},"wells-settings":{startLoc:{col:17,line:7},endLoc:{col:1,line:11},startBody:{col:17,line:7},endBody:{col:1,line:11}}}}},component:settings_LayerSettingsButton,title:"SubsurfaceViewer/Components/Settings/LayerSettingsButton"};const Template=args=>react.createElement(settings_LayerSettingsButton,{layer:args.layer}),DrawingSettings=Template.bind({});DrawingSettings.args={layer:{name:"Drawing","@@type":"DrawingLayer",id:"drawing-layer",visible:!0,mode:"drawLineString"}};const WellsSettings=Template.bind({});WellsSettings.args={layer:{name:"Wells","@@type":"WellsLayer",id:"wells-layer",opacity:1,pointRadiusScale:8,visible:!0}},DrawingSettings.parameters={...DrawingSettings.parameters,docs:{...DrawingSettings.parameters?.docs,source:{originalSource:"args => {\n  return <LayerSettingsButton layer={args.layer} />;\n}",...DrawingSettings.parameters?.docs?.source}}},WellsSettings.parameters={...WellsSettings.parameters,docs:{...WellsSettings.parameters?.docs,source:{originalSource:"args => {\n  return <LayerSettingsButton layer={args.layer} />;\n}",...WellsSettings.parameters?.docs?.source}}};const __namedExportsOrder=["DrawingSettings","WellsSettings"];try{DrawingSettings.displayName="DrawingSettings",DrawingSettings.__docgenInfo={description:"",displayName:"DrawingSettings",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/components/settings/LayerSettingsButton.stories.tsx#DrawingSettings"]={docgenInfo:DrawingSettings.__docgenInfo,name:"DrawingSettings",path:"packages/subsurface-viewer/src/storybook/components/settings/LayerSettingsButton.stories.tsx#DrawingSettings"})}catch(__react_docgen_typescript_loader_error){}try{WellsSettings.displayName="WellsSettings",WellsSettings.__docgenInfo={description:"",displayName:"WellsSettings",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/components/settings/LayerSettingsButton.stories.tsx#WellsSettings"]={docgenInfo:WellsSettings.__docgenInfo,name:"WellsSettings",path:"packages/subsurface-viewer/src/storybook/components/settings/LayerSettingsButton.stories.tsx#WellsSettings"})}catch(__react_docgen_typescript_loader_error){}},"./packages/subsurface-viewer/src/components/settings/NumericInput.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_equinor_eds_core_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-core-react/dist/esm/components/Label/Label.js"),_equinor_eds_core_react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-core-react/dist/esm/components/Input/Input.js");const NumericInput=react__WEBPACK_IMPORTED_MODULE_0__.memo((({label:label,value:value,min:min,max:max,step:step,onChange:onChange})=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{display:"flex",justifyContent:"space-between"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_equinor_eds_core_react__WEBPACK_IMPORTED_MODULE_1__._,{label:label,id:`${label}-input-label`,style:{paddingTop:5,paddingBottom:5,fontSize:15}}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_equinor_eds_core_react__WEBPACK_IMPORTED_MODULE_2__.I,{id:`${label}-input`,type:"number",value:value,onChange:onChange,min:min,max:max,step:step,style:{fontSize:15,textAlign:"right",width:"3rem"}}))));NumericInput.defaultProps={min:0,step:1},NumericInput.displayName="NumericInput",__webpack_exports__.Z=NumericInput;try{NumericInput.displayName="NumericInput",NumericInput.__docgenInfo={description:"",displayName:"NumericInput",props:{label:{defaultValue:null,description:"Label for the component.",name:"label",required:!0,type:{name:"string"}},value:{defaultValue:null,description:"Initial state of the component.",name:"value",required:!0,type:{name:"number"}},min:{defaultValue:{value:"0"},description:"",name:"min",required:!1,type:{name:"number"}},max:{defaultValue:null,description:"",name:"max",required:!1,type:{name:"number"}},step:{defaultValue:{value:"1"},description:"",name:"step",required:!1,type:{name:"number"}},onChange:{defaultValue:null,description:"Callback to update the state of the component.",name:"onChange",required:!0,type:{name:"(e: ChangeEvent<HTMLInputElement>) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/components/settings/NumericInput.tsx#NumericInput"]={docgenInfo:NumericInput.__docgenInfo,name:"NumericInput",path:"packages/subsurface-viewer/src/components/settings/NumericInput.tsx#NumericInput"})}catch(__react_docgen_typescript_loader_error){}},"./packages/subsurface-viewer/src/components/settings/ToggleButton.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_equinor_eds_core_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-core-react/dist/esm/components/Label/Label.js"),_equinor_eds_core_react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-core-react/dist/esm/components/Switch/Switch.js");const ToggleButton=react__WEBPACK_IMPORTED_MODULE_0__.memo((({label:label,checked:checked,onChange:onChange})=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{display:"flex",justifyContent:"space-between"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_equinor_eds_core_react__WEBPACK_IMPORTED_MODULE_1__._,{label:label,id:`${label}-switch-label`,style:{paddingTop:15,fontSize:15}}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_equinor_eds_core_react__WEBPACK_IMPORTED_MODULE_2__.r,{id:`${label}-switch`,"aria-label":label,label:"",onChange:onChange,checked:checked,style:{paddingRight:10,width:"3rem"}}))));ToggleButton.displayName="ToggleButton",__webpack_exports__.Z=ToggleButton;try{ToggleButton.displayName="ToggleButton",ToggleButton.__docgenInfo={description:"",displayName:"ToggleButton",props:{label:{defaultValue:null,description:"Label for the component.",name:"label",required:!0,type:{name:"string"}},checked:{defaultValue:null,description:"Initial state of the component.",name:"checked",required:!0,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Callback to update the state of the component.",name:"onChange",required:!0,type:{name:"(e: ChangeEvent<HTMLInputElement>) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/components/settings/ToggleButton.tsx#ToggleButton"]={docgenInfo:ToggleButton.__docgenInfo,name:"ToggleButton",path:"packages/subsurface-viewer/src/components/settings/ToggleButton.tsx#ToggleButton"})}catch(__react_docgen_typescript_loader_error){}}}]);