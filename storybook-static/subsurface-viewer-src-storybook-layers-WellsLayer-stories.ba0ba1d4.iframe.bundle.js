"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[9567],{"./packages/subsurface-viewer/src/storybook/layers/WellsLayer.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllTrajectoryHidden:function(){return AllTrajectoryHidden},AllWellHeadsHidden:function(){return AllWellHeadsHidden},CallbackStyledWells:function(){return CallbackStyledWells},ContinuousColorTable:function(){return ContinuousColorTable},ContinuousWellLogs:function(){return ContinuousWellLogs},CustomColoredWells:function(){return CustomColoredWells},CustomWidthWells:function(){return CustomWidthWells},DashedWells:function(){return DashedWells},DiscreteWellLogs:function(){return DiscreteWellLogs},LegendWithColorSelector:function(){return LegendWithColorSelector},MultipleVolveWells:function(){return MultipleVolveWells},SimplifiedRendering:function(){return SimplifiedRendering},UnfoldedProjection:function(){return UnfoldedProjection},VerticalWellWithDuplicates:function(){return VerticalWellWithDuplicates},VolveWells:function(){return VolveWells},VolveWellsWithResetButton:function(){return VolveWellsWithResetButton},Wells3d:function(){return Wells3d},Wells3dDashed:function(){return Wells3dDashed},WellsRefine:function(){return WellsRefine},__namedExportsOrder:function(){return __namedExportsOrder},default:function(){return WellsLayer_stories},volveWells2:function(){return volveWells2}});var react=__webpack_require__("./node_modules/react/index.js"),Slider=__webpack_require__("./node_modules/@mui/material/Slider/Slider.js"),styled=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),dist=__webpack_require__("./node_modules/@emerson-eps/color-tables/dist/index.js"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),esm=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-tokens/dist/esm/index.mjs");const{colors:colors,spacings:{comfortable:{small:small,x_small:x_small}},typography:typography,shape:shape}=esm.L,nativeselect={background:colors.ui.background__light.rgba,typography:{...typography.input.text,color:colors.text.static_icons__default.rgba},entities:{input:{spacings:{left:small,right:small,top:"6px",bottom:"6px"}},icon:{width:"24px"}},boxShadow:"inset 0 -1px 0 0 "+colors.text.static_icons__tertiary.rgba,states:{focus:{outline:{type:"outline",width:"2px",color:colors.interactive.primary__resting.rgba,style:"solid",offset:"0px"}},disabled:{typography:{color:colors.interactive.disabled__text.rgba}}},modes:{compact:{minHeight:shape._modes.compact.straight.minHeight,entities:{input:{spacings:{left:x_small,right:x_small,top:"0",bottom:"0"}}}}}};var templates=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-utils/dist/esm/utils/templates/index.mjs"),templates_focus=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-utils/dist/esm/utils/templates/focus.mjs"),useToken=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-utils/dist/esm/hooks/useToken.mjs"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),eds_context=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-core-react/dist/esm/components/EdsProvider/eds.context.js"),Label=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-core-react/dist/esm/components/Label/Label.js");const Container=styled_components_browser_esm.Ay.div.withConfig({displayName:"NativeSelect__Container",componentId:"sc-82vb16-0"})(["min-width:100px;width:100%;"]),StyledSelect=styled_components_browser_esm.Ay.select.withConfig({displayName:"NativeSelect__StyledSelect",componentId:"sc-82vb16-1"})(["border:none;border-radius:0;box-shadow:",";"," "," padding-right:calc("," *2 + ",");display:block;margin:0;appearance:none;background-image:url(\"data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='%236f6f6f' d='M7 9.5l5 5 5-5H7z'/%3E%3C/svg%3E\"),linear-gradient( to bottom,"," 0%,"," 100% );background-repeat:no-repeat,repeat;background-position:right "," top 50%;width:100%;&:active,&:focus{box-shadow:none;","}&:disabled{color:",";background-image:url(\"data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='%23bebebe' d='M7 9.5l5 5 5-5H7z'/%3E%3C/svg%3E\"),linear-gradient( to bottom,"," 0%,"," 100% );cursor:not-allowed;box-shadow:none;outline:none;.arrow-icon{fill:red;}&:focus,&:active{outline:none;}}"],nativeselect.boxShadow,(0,templates.Sz)(nativeselect.typography),(({theme:theme})=>(0,styled_components_browser_esm.AH)(["height:",";",""],theme.minHeight,(0,templates.vF)(theme.entities.input.spacings))),nativeselect.entities.input.spacings.right,nativeselect.entities.icon.width,nativeselect.background,nativeselect.background,nativeselect.entities.input.spacings.right,(0,templates_focus.d)(nativeselect.states.focus.outline),nativeselect.states.disabled.typography.color,nativeselect.background,nativeselect.background),NativeSelect=(0,react.forwardRef)((function NativeSelect({label:label,children:children,className:className,style:style,selectRef:selectRef,id:id,meta:meta,disabled:disabled=!1,multiple:multiple=!1,...other},ref){const{density:density}=(0,eds_context.u)(),token=(0,useToken.r)({density:density},nativeselect),containerProps={ref:ref,className:className,style:style},selectProps={ref:selectRef,id:id,disabled:disabled,multiple:multiple,...other},labelProps={htmlFor:id,label:label,meta:meta,disabled:disabled},showLabel=label||meta;return(0,jsx_runtime.jsx)(styled_components_browser_esm.NP,{theme:token,children:(0,jsx_runtime.jsxs)(Container,{...containerProps,children:[showLabel&&(0,jsx_runtime.jsx)(Label.J,{...labelProps}),(0,jsx_runtime.jsx)(StyledSelect,{...selectProps,children:children})]})})}));var SubsurfaceViewer=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),axesLayer=__webpack_require__("./packages/subsurface-viewer/src/layers/axes/axesLayer.ts"),wellsLayer=__webpack_require__("./packages/subsurface-viewer/src/layers/wells/wellsLayer.ts"),src_layers=__webpack_require__("./packages/subsurface-viewer/src/layers/index.ts"),sharedSettings=__webpack_require__("./packages/subsurface-viewer/src/storybook/sharedSettings.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}var WellsLayer_stories={component:SubsurfaceViewer.A,title:"SubsurfaceViewer / Wells Layer",args:{triggerHome:0}};const classes={main:"VolveWells-main"},Root=(0,styled.Ay)("div")({[`& .${classes.main}`]:{height:500,border:"1px solid black",position:"relative"}}),defaultProps={id:"some id",resources:{...sharedSettings.FS.resources},bounds:sharedSettings.zJ},continuousLogsLayer={...sharedSettings.c8,refine:!1,outline:!1,logData:"./volve_logs.json",logrunName:"BLOCKING",logName:"PORO",logColor:"Physics"},VolveWells={args:{...defaultProps,layers:[sharedSettings.c8]},parameters:{docs:{...sharedSettings.dr.docs,description:{story:"Volve wells example"}}}},VolveWellsWithMouseCallback=props=>{const onMouseEvent=react.useCallback((event=>{console.log(event)}),[]);return react.createElement(react.Fragment,null,react.createElement(SubsurfaceViewer.A,_extends({},props,{onMouseEvent:onMouseEvent})),react.createElement("div",{style:{position:"absolute",marginLeft:200}}))},volveWells2={args:{id:"volve-wells",resources:{wellsData:"./volve_wells.json"},bounds:sharedSettings.zJ,layers:[{"@@type":"WellsLayer",data:"@@#resources.wellsData"},{"@@type":"Axes2DLayer",id:"axes-layer2D",axisColor:[100,100,255],marginH:100,marginV:40}]},render:args=>react.createElement(VolveWellsWithMouseCallback,args),tags:["no-test"]},DiscreteWellLogs={args:{...defaultProps,layers:[{...sharedSettings.c8,refine:!1,outline:!1,logData:"volve_blocking_zonelog_logs.json",logrunName:"BLOCKING",logName:"ZONELOG",logColor:"Stratigraphy"}]},parameters:{docs:{...sharedSettings.dr.docs,description:{story:"Volve wells example with well logs."}}}},ContinuousWellLogs={args:{...defaultProps,layers:[continuousLogsLayer]},parameters:{docs:{...sharedSettings.dr.docs,description:{story:"Volve wells example with well logs."}}}},DashedWells={args:{...defaultProps,layers:[{...sharedSettings.c8,lineStyle:{dash:!0},refine:!1,outline:!1}]},parameters:{docs:{...sharedSettings.dr.docs,description:{story:"Volve wells example with default dashed well trajectories."}}}},MultipleVolveWells={args:{id:"volve-wells",resources:{wellsData:"./volve_wells_1.json",wellsData2:"./volve_wells_2.json"},bounds:sharedSettings.zJ,layers:[{"@@type":"WellsLayer",data:"@@#resources.wellsData",id:"id1"},{"@@type":"WellsLayer",data:"@@#resources.wellsData2",id:"id2"}]},parameters:{docs:{...sharedSettings.dr.docs,description:{story:"Multiple Volve wells example"}}}},CustomColoredWells={args:{...defaultProps,layers:[{...sharedSettings.c8,lineStyle:{color:[255,0,0,255],dash:[10,3]},wellHeadStyle:{color:[255,0,0,255]},refine:!1,outline:!1}]},parameters:{docs:{...sharedSettings.dr.docs,description:{story:"Volve wells example with dashed style and red trajectories, with custom style."}}}},CustomWidthWells={args:{...defaultProps,layers:[{...sharedSettings.c8,lineStyle:{width:10},refine:!1,outline:!1}]}},WellsWithResetButton=props=>{const[editedData,setEditedData]=react.useState(props.editedData),[triggerResetMultipleWells,setTriggerResetMultipleWells]=react.useState(0);return react.useEffect((()=>{setEditedData(props.editedData)}),[props.editedData]),react.createElement(Root,null,react.createElement("div",{className:classes.main},react.createElement(SubsurfaceViewer.A,_extends({},props,{editedData:editedData,setProps:updatedProps=>{setEditedData(updatedProps)},triggerResetMultipleWells:triggerResetMultipleWells}))),react.createElement("button",{onClick:()=>{setTriggerResetMultipleWells(triggerResetMultipleWells+1)}}," Reset Multiple Wells "))},VolveWellsWithResetButton={args:{id:"volve-wells",resources:{wellsData:"./volve_wells.json"},bounds:sharedSettings.zJ,layers:[{"@@type":"WellsLayer",data:"@@#resources.wellsData"}]},render:args=>react.createElement(WellsWithResetButton,args)};const CallbackStyledWells={args:{...defaultProps,layers:[{...sharedSettings.c8,lineStyle:{color:function colorCallback(object){return object.properties.name.match("15/9-F-10")?[0,0,0,0]:object.properties.color},dash:function dashCallback(object){return object.properties.name.match("15/9-19")?[1.5,1.5]:"15/9-F-15"===object.properties.name},width:function widthCallback(object){return object.properties.name.match("15/9-F-1")?3:"15/9-F-4"===object.properties.name?8:5}},wellHeadStyle:{size:function wellheadSizeCallback(object){return object.properties.name.match("15/9-19")?0:8}},refine:!1,outline:!1}]},parameters:{docs:{...sharedSettings.dr.docs,description:{story:"Volve wells example with trajectory color, width and dash style supplied as callback."}}}},AllTrajectoryHidden={args:{...defaultProps,layers:[{...sharedSettings.c8,lineStyle:{color:[0,0,0,0]},refine:!1,outline:!1}]},parameters:{docs:{...sharedSettings.dr.docs,description:{story:"Volve wells example with all trajectory hidden."}}}},AllWellHeadsHidden={args:{...defaultProps,layers:[{...sharedSettings.c8,wellHeadStyle:{size:0},refine:!1,outline:!1}]},parameters:{docs:{...sharedSettings.dr.docs,description:{story:"Volve wells example with all well heads hidden."}}}},testWell={type:"FeatureCollection",features:[{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"Point",coordinates:[0,0]},{type:"LineString",coordinates:[[0,0,0],[0,0,1],[0,0,2],[0,50,-50],[0,0,-100],[99,99,-150],[99,0,-250]]}]},properties:{name:"well99",color:[255,255,0,255],md:[[0,1,2,3,4,5,8,9]]}}]},BBox=[-100,-100,-250,100,100,0],WellsRefineComponent=props=>{const[refineNumber,setRefineNumber]=react.useState(1),propsWithLayers={...props,layers:[{"@@type":"WellsLayer",data:testWell,refine:refineNumber,ZIncreasingDownwards:!1},{"@@type":"AxesLayer",ZIncreasingDownwards:!1,bounds:BBox}]},handleChange=react.useCallback(((_event,value)=>{setRefineNumber(value)}),[]);return react.createElement(Root,null,react.createElement("div",{className:classes.main},react.createElement(SubsurfaceViewer.A,propsWithLayers)),react.createElement(Slider.Ay,{min:1,max:10,defaultValue:1,step:1,onChange:handleChange,valueLabelDisplay:"auto"}))},WellsRefine={args:{id:"refine-wells",cameraPosition:{rotationOrbit:-45,rotationX:15,zoom:BBox,target:[]},views:sharedSettings.Hf},parameters:{docs:{...sharedSettings.dr.docs,description:{story:"3D wells example"}}},render:args=>react.createElement(WellsRefineComponent,args),tags:["no-test"]},Wells3d={args:{...defaultProps,layers:[sharedSettings.c8],views:sharedSettings.Hf},parameters:{docs:{...sharedSettings.dr.docs,description:{story:"3D wells example"}}}},VerticalWellWithDuplicates={args:{id:"well_176",bounds:[-150,-150,150,150],layers:[new wellsLayer.Ay({data:{type:"FeatureCollection",features:[{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"Point",coordinates:[0,0]},{type:"LineString",coordinates:[[0,0,-100],[0,0,-200],[0,0,-300],[0,0,-400],[0,0,-400],[0,0,-400],[0,0,-500],[0,0,-600],[0,0,-700],[0,0,-800]]}]},properties:{name:"wl6",color:[255,255,0,255],md:[[0,1,2,3,4,5,8,9]]}}]},ZIncreasingDownwards:!1}),new axesLayer.A({id:"axes-layer",bounds:[-100,-100,-500,100,100,0],ZIncreasingDownwards:!1})],views:sharedSettings.Hf},parameters:{docs:{...sharedSettings.dr.docs,description:{story:"One single vertical well"}}}},SimplifiedRenderingComponent=props=>{const[simplifiedRendering,setSimplifiedRendering]=react.useState(!1),propsWithLayers={...props,onDragStart:()=>setSimplifiedRendering(!0),onDragEnd:()=>setSimplifiedRendering(!1),layers:[new wellsLayer.Ay({data:"./gullfaks.json",wellHeadStyle:{size:4},refine:!0,outline:!0,simplifiedRendering:simplifiedRendering,ZIncreasingDownwards:!1}),new axesLayer.A({id:"axes-layer",bounds:[45e4,6781e3,0,464e3,6791e3,3500]})]};return react.createElement(SubsurfaceViewer.A,propsWithLayers)},SimplifiedRendering={args:{id:"gullfaks",bounds:[45e4,6781e3,464e3,6791e3],views:sharedSettings.Hf},parameters:{docs:{...sharedSettings.dr.docs,description:{story:"3D gullfaks wells example"}}},render:args=>react.createElement(SimplifiedRenderingComponent,args)},Wells3dDashed={args:{...defaultProps,layers:[{...sharedSettings.c8,lineStyle:{dash:!0},refine:!1,outline:!1}],views:sharedSettings.Hf},parameters:{docs:{description:{story:"3D dashed wells example"},...sharedSettings.dr.docs}}},ContinuousColorTableComponent=()=>{const[colorTable,setColorTable]=(0,react.useState)("Physics"),mapProps=react.useMemo((()=>({...defaultProps,layers:[{...continuousLogsLayer,logColor:colorTable}]})),[colorTable]);return react.createElement(react.Fragment,null,react.createElement(NativeSelect,{id:"test",label:"Color table",value:colorTable,onChange:event=>{setColorTable(event.target?.value)}},react.createElement("option",{key:"Physics"},"Physics"),react.createElement("option",{key:"Rainbow"},"Rainbow")),react.createElement("div",{style:{height:"80vh",position:"relative"}},react.createElement(SubsurfaceViewer.A,mapProps)))},ContinuousColorTable={render:()=>react.createElement(ContinuousColorTableComponent,null)},wellLayers=[{...sharedSettings.c8,refine:!1,outline:!1,logData:"./volve_logs.json",logrunName:"BLOCKING",logName:"ZONELOG",logColor:"Stratigraphy",colorMappingFunction:(0,dist.A2)("Stratigraphy",!0,!0,[])}],WellLayerTemplate=args=>{const[colorName,setColorName]=react.useState("Rainbow"),[isLog,setIsLog]=react.useState(!1),wellLayerData=react.useCallback((data=>{setColorName(data)}),[]),getInterpolateMethod=react.useCallback((data=>{setIsLog(data.isLog)}),[]),layers=[{...args.wellLayers[0],colorMappingFunction:(0,dist.A2)(colorName,!0,!0,[]),logColor:colorName||wellLayers[0].logColor,isLog:isLog}];return react.createElement("div",null,react.createElement("div",{style:{float:"right",zIndex:999,opacity:1,position:"relative"}},react.createElement(dist.jl,_extends({},args,{getColorName:wellLayerData,getInterpolateMethod:getInterpolateMethod}))),react.createElement(SubsurfaceViewer.A,_extends({},args,{layers:layers})))},LegendWithColorSelector={args:{min:0,max:.35,dataObjectName:"ZONELOG",position:[16,10],horizontal:!0,colorTables:dist.$d,discreteData:{Above_BCU:[[],0],ABOVE:[[],1],H12:[[],2],H11:[[],3],H10:[[],4],H9:[[],5],H8:[[],6],H7:[[],7],H6:[[],8],H5:[[],9],H4:[[],10],H3:[[],11],H2:[[],12],H1:[[],13],BELOW:[[],14]},...defaultProps,id:defaultProps.id,wellLayers:wellLayers,legend:{visible:!1},reverseRange:!1},parameters:{docs:{...sharedSettings.dr.docs,description:{story:"Clicking on legend opens(toggle) the color selector component and then click on the color scale to update the layer."}}},render:args=>react.createElement(WellLayerTemplate,args)},UnfoldedProjection={args:{id:"some-id",layers:[new wellsLayer.Ay({id:"volve",data:"./volve_wells.json",ZIncreasingDownwards:!1,id:"unfolded",section:!0}),new src_layers.Axes2DLayer],views:{...sharedSettings.eD,viewports:[{id:"viewport1",target:[2e3,-1500],zoom:-2.5}]},bounds:[0,-1e3,4e3,0]},parameters:{docs:{...sharedSettings.dr.docs,description:{story:"Unfolded projection"}}}},__namedExportsOrder=["VolveWells","volveWells2","DiscreteWellLogs","ContinuousWellLogs","DashedWells","MultipleVolveWells","CustomColoredWells","CustomWidthWells","VolveWellsWithResetButton","CallbackStyledWells","AllTrajectoryHidden","AllWellHeadsHidden","WellsRefine","Wells3d","VerticalWellWithDuplicates","SimplifiedRendering","Wells3dDashed","ContinuousColorTable","LegendWithColorSelector","UnfoldedProjection"];VolveWells.parameters={...VolveWells.parameters,docs:{...VolveWells.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [volveWellsFromResourcesLayer]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example"\n      }\n    }\n  }\n}',...VolveWells.parameters?.docs?.source}}},volveWells2.parameters={...volveWells2.parameters,docs:{...volveWells2.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "volve-wells",\n    resources: {\n      wellsData: "./volve_wells.json"\n    },\n    bounds: volveWellsBounds,\n    layers: [{\n      "@@type": "WellsLayer",\n      data: "@@#resources.wellsData"\n    }, {\n      "@@type": "Axes2DLayer",\n      id: "axes-layer2D",\n      axisColor: [100, 100, 255],\n      marginH: 100,\n      // Horizontal margin (in pixels)\n      marginV: 40 // Vertical margin (in pixels)\n    }]\n  },\n  render: args => <VolveWellsWithMouseCallback {...args} />,\n  tags: ["no-test"]\n}',...volveWells2.parameters?.docs?.source}}},DiscreteWellLogs.parameters={...DiscreteWellLogs.parameters,docs:{...DiscreteWellLogs.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      refine: false,\n      outline: false,\n      logData: "volve_blocking_zonelog_logs.json",\n      logrunName: "BLOCKING",\n      logName: "ZONELOG",\n      logColor: "Stratigraphy"\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with well logs."\n      }\n    }\n  }\n}',...DiscreteWellLogs.parameters?.docs?.source}}},ContinuousWellLogs.parameters={...ContinuousWellLogs.parameters,docs:{...ContinuousWellLogs.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [continuousLogsLayer]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with well logs."\n      }\n    }\n  }\n}',...ContinuousWellLogs.parameters?.docs?.source}}},DashedWells.parameters={...DashedWells.parameters,docs:{...DashedWells.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      lineStyle: {\n        dash: true\n      },\n      refine: false,\n      outline: false\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with default dashed well trajectories."\n      }\n    }\n  }\n}',...DashedWells.parameters?.docs?.source}}},MultipleVolveWells.parameters={...MultipleVolveWells.parameters,docs:{...MultipleVolveWells.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "volve-wells",\n    resources: {\n      wellsData: "./volve_wells_1.json",\n      wellsData2: "./volve_wells_2.json"\n    },\n    bounds: volveWellsBounds,\n    layers: [{\n      "@@type": "WellsLayer",\n      data: "@@#resources.wellsData",\n      id: "id1"\n    }, {\n      "@@type": "WellsLayer",\n      data: "@@#resources.wellsData2",\n      id: "id2"\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Multiple Volve wells example"\n      }\n    }\n  }\n}',...MultipleVolveWells.parameters?.docs?.source}}},CustomColoredWells.parameters={...CustomColoredWells.parameters,docs:{...CustomColoredWells.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      lineStyle: {\n        color: [255, 0, 0, 255],\n        dash: [10, 3]\n      },\n      wellHeadStyle: {\n        color: [255, 0, 0, 255]\n      },\n      refine: false,\n      outline: false\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with dashed style and red trajectories, with custom style."\n      }\n    }\n  }\n}',...CustomColoredWells.parameters?.docs?.source}}},CustomWidthWells.parameters={...CustomWidthWells.parameters,docs:{...CustomWidthWells.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      lineStyle: {\n        width: 10\n      },\n      refine: false,\n      outline: false\n    }]\n  }\n}",...CustomWidthWells.parameters?.docs?.source}}},VolveWellsWithResetButton.parameters={...VolveWellsWithResetButton.parameters,docs:{...VolveWellsWithResetButton.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "volve-wells",\n    resources: {\n      wellsData: "./volve_wells.json"\n    },\n    bounds: volveWellsBounds,\n    layers: [{\n      "@@type": "WellsLayer",\n      data: "@@#resources.wellsData"\n    }]\n  },\n  render: args => <WellsWithResetButton {...args} />\n}',...VolveWellsWithResetButton.parameters?.docs?.source}}},CallbackStyledWells.parameters={...CallbackStyledWells.parameters,docs:{...CallbackStyledWells.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      lineStyle: {\n        color: colorCallback,\n        dash: dashCallback,\n        width: widthCallback\n      },\n      wellHeadStyle: {\n        size: wellheadSizeCallback\n      },\n      refine: false,\n      outline: false\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with trajectory color, width and dash style supplied as callback."\n      }\n    }\n  }\n}',...CallbackStyledWells.parameters?.docs?.source}}},AllTrajectoryHidden.parameters={...AllTrajectoryHidden.parameters,docs:{...AllTrajectoryHidden.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      lineStyle: {\n        color: [0, 0, 0, 0]\n      },\n      refine: false,\n      outline: false\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with all trajectory hidden."\n      }\n    }\n  }\n}',...AllTrajectoryHidden.parameters?.docs?.source}}},AllWellHeadsHidden.parameters={...AllWellHeadsHidden.parameters,docs:{...AllWellHeadsHidden.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      wellHeadStyle: {\n        size: 0\n      },\n      refine: false,\n      outline: false\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with all well heads hidden."\n      }\n    }\n  }\n}',...AllWellHeadsHidden.parameters?.docs?.source}}},WellsRefine.parameters={...WellsRefine.parameters,docs:{...WellsRefine.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "refine-wells",\n    cameraPosition: {\n      rotationOrbit: -45,\n      rotationX: 15,\n      zoom: BBox,\n      target: []\n    },\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "3D wells example"\n      }\n    }\n  },\n  render: args => <WellsRefineComponent {...args} />,\n  tags: ["no-test"]\n}',...WellsRefine.parameters?.docs?.source}}},Wells3d.parameters={...Wells3d.parameters,docs:{...Wells3d.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [volveWellsFromResourcesLayer],\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "3D wells example"\n      }\n    }\n  }\n}',...Wells3d.parameters?.docs?.source}}},VerticalWellWithDuplicates.parameters={...VerticalWellWithDuplicates.parameters,docs:{...VerticalWellWithDuplicates.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "well_176",\n    bounds: [-150, -150, 150, 150],\n    layers: [new WellsLayer({\n      data: testWellWithDuplicates,\n      ZIncreasingDownwards: false\n    }), new AxesLayer({\n      id: "axes-layer",\n      bounds: [-100, -100, -500, 100, 100, 0],\n      ZIncreasingDownwards: false\n    })],\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "One single vertical well"\n      }\n    }\n  }\n}',...VerticalWellWithDuplicates.parameters?.docs?.source}}},SimplifiedRendering.parameters={...SimplifiedRendering.parameters,docs:{...SimplifiedRendering.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "gullfaks",\n    bounds: ([450000, 6781000, 464000, 6791000] as [number, number, number, number]),\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "3D gullfaks wells example"\n      }\n    }\n  },\n  render: args => <SimplifiedRenderingComponent {...args} />\n}',...SimplifiedRendering.parameters?.docs?.source}}},Wells3dDashed.parameters={...Wells3dDashed.parameters,docs:{...Wells3dDashed.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      lineStyle: {\n        dash: true\n      },\n      refine: false,\n      outline: false\n    }],\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "3D dashed wells example"\n      },\n      ...defaultStoryParameters.docs\n    }\n  }\n}',...Wells3dDashed.parameters?.docs?.source}}},ContinuousColorTable.parameters={...ContinuousColorTable.parameters,docs:{...ContinuousColorTable.parameters?.docs,source:{originalSource:"{\n  render: () => <ContinuousColorTableComponent />\n}",...ContinuousColorTable.parameters?.docs?.source}}},LegendWithColorSelector.parameters={...LegendWithColorSelector.parameters,docs:{...LegendWithColorSelector.parameters?.docs,source:{originalSource:'{\n  args: {\n    min,\n    max,\n    dataObjectName,\n    position,\n    horizontal,\n    colorTables,\n    discreteData,\n    ...defaultProps,\n    id: defaultProps.id,\n    wellLayers,\n    legend: {\n      visible: false\n    },\n    reverseRange\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Clicking on legend opens(toggle) the color selector component and then click on the color scale to update the layer."\n      }\n    }\n  },\n  render: args => <WellLayerTemplate {...args} />\n}',...LegendWithColorSelector.parameters?.docs?.source}}},UnfoldedProjection.parameters={...UnfoldedProjection.parameters,docs:{...UnfoldedProjection.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "some-id",\n    layers: [WELLS_UNFOLDED, new Axes2DLayer()],\n    views: {\n      ...default2DViews,\n      viewports: [{\n        id: "viewport1",\n        target: [2000, -1500],\n        zoom: -2.5\n      }]\n    },\n    bounds: [0, -1000, 4000, 0]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Unfolded projection"\n      }\n    }\n  }\n}',...UnfoldedProjection.parameters?.docs?.source},description:{story:"Example well with unfolded projection",...UnfoldedProjection.parameters?.docs?.description}}}},"./packages/subsurface-viewer/src/storybook/sharedSettings.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{C9:function(){return hugin25mDepthMapLayer},Cp:function(){return hugin3DBounds},D8:function(){return hugin2DBounds},FS:function(){return volveWellsResources},HU:function(){return hugin25mKhNetmapMapLayer},Hf:function(){return default3DViews},Ly:function(){return classes},OU:function(){return customLayerWithTextData},Or:function(){return EditedDataTemplate},RT:function(){return colormapLayer},Uz:function(){return volveWellsWithLogsLayer},XC:function(){return customLayerWithPolylineData},bL:function(){return Root},c8:function(){return volveWellsFromResourcesLayer},d6:function(){return hugin5mKhNetmapMapLayer},dr:function(){return defaultStoryParameters},eD:function(){return default2DViews},j1:function(){return mainStyle},kn:function(){return redAxes2DLayer},lC:function(){return hillshadingLayer},oS:function(){return subsufaceProps},rz:function(){return volveWellsLayer},un:function(){return northArrowLayer},vq:function(){return huginAxes3DLayer},wi:function(){return hugin25mKhNetmapMapLayerPng},xR:function(){return customLayerWithPolygonData},z6:function(){return customLayerWithPolygonDataProps},zJ:function(){return volveWellsBounds}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../example-data/deckgl-map.json");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const defaultStoryParameters={docs:{inlineStories:!1,iframeHeight:500}},classes={main:"default-main"},mainStyle={[`& .${classes.main}`]:{width:750,height:500,top:"50%",left:"50%",transform:"translate(-50%, -50%)",border:"1px solid black",background:"azure",position:"absolute"}},Root=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__.Ay)("div")(mainStyle),subsufaceProps=_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0],colormapLayer={..._example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].layers[0],id:"colormap-layer"},hillshadingLayer={..._example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].layers[1],id:"hillshading-layer"},redAxes2DLayer={"@@type":"Axes2DLayer",id:"axes-layer",marginH:80,marginV:30,isLeftRuler:!0,isRightRuler:!1,isBottomRuler:!0,isTopRuler:!1,backgroundColor:[155,0,0,255]},hugin2DOrigin=[432150,6475800],hugin2DBounds=[432150,6475800,439400,6481500],hugin3DBounds=[432150,6475800,-2e3,439400,6481500,-3500],huginAxes3DLayer={"@@type":"AxesLayer",id:"axes-layer2",bounds:[432150,6475800,2e3,439400,6481500,3500]},northArrowLayer={"@@type":"NorthArrow3DLayer",id:"north-arrow-layer"},volveWellsResources={resources:{wellsData:"./volve_wells.json"}},volveWellsFromResourcesLayer={"@@type":"WellsLayer",id:"volve-wells",data:"@@#resources.wellsData",ZIncreasingDownwards:!1},volveWellsLayer={"@@type":"WellsLayer",id:"volve-wells",data:"./volve_wells.json",ZIncreasingDownwards:!1},volveWellsBounds=[432150,6475800,439400,6481500],volveWellsWithLogsLayer={"@@type":"WellsLayer",id:"volve-wells-with-logs",data:"./volve_wells.json",logData:"./volve_logs.json",logrunName:"BLOCKING",logName:"ZONELOG",logColor:"Stratigraphy",ZIncreasingDownwards:!1},hugin25mDepthMapLayer={"@@type":"MapLayer",id:"hugin_depth",meshData:"hugin_depth_25_m.float32",frame:{origin:hugin2DOrigin,count:[291,229],increment:[25,25],rotDeg:0},propertiesData:"hugin_depth_25_m.float32",contours:[0,100],isContoursDepth:!0,gridLines:!1,smoothShading:!0,material:!0},hugin25mKhNetmapMapLayer={...hugin25mDepthMapLayer,id:"hugin_kh_netmap",propertiesData:"kh_netmap_25_m.float32",colorMapName:"Physics"},hugin25mKhNetmapMapLayerPng={...hugin25mDepthMapLayer,meshData:"hugin_depth_25_m.png",propertiesData:"kh_netmap_25_m.png",colorMapName:"Physics"},hugin5mKhNetmapMapLayer={"@@type":"MapLayer",id:"mesh-layer",meshUrl:"hugin_depth_5_m.float32",frame:{origin:hugin2DOrigin,count:[1451,1141],increment:[5,5],rotDeg:0},propertiesUrl:"kh_netmap_5_m.float32",contours:[0,100],colorMapName:"Physics"},default2DViews={layout:[1,1],viewports:[{id:"view_1",show3D:!1}]},default3DViews={layout:[1,1],viewports:[{id:"view_1",show3D:!0}]},customLayerWithPolylineData={"@@type":"GeoJsonLayer",id:"geojson-line-layer",name:"Line",data:{type:"FeatureCollection",features:[{type:"Feature",properties:{},geometry:{type:"LineString",coordinates:[[434e3,6477500],[435500,6477500]]}}]},getLineWidth:20,lineWidthMinPixels:2},customLayerWithPolygonDataProps={id:"geojson-layer",data:{type:"Feature",properties:{},geometry:{type:"Polygon",coordinates:[[[434562,6477595],[434562,6478595],[435062,6478595],[435062,6477595],[434562,6477595]]]}},getLineWidth:1,lineWidthMinPixels:1,lineWidthMaxPixels:1,getLineColor:[0,0,0],getFillColor:[255,255,0],opacity:1},customLayerWithPolygonData={...customLayerWithPolygonDataProps,"@@type":"GeoJsonLayer"},customLayerWithTextData={"@@type":"TextLayer",id:"text-layer",name:"Text",data:[{name:"Custom GeoJson layer",coordinates:[434800,6478695]}],pickable:!0,getPosition:d=>d.coordinates,getText:d=>d.name,getColor:[255,0,0],getSize:16,getAngle:0,getTextAnchor:"middle",getAlignmentBaseline:"center"},EditedDataTemplate=args=>{const[editedData,setEditedData]=react__WEBPACK_IMPORTED_MODULE_0__.useState(args.editedData);return react__WEBPACK_IMPORTED_MODULE_0__.useEffect((()=>{setEditedData(args.editedData)}),[args.editedData]),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.A,_extends({},args,{editedData:editedData,setProps:updatedProps=>{setEditedData(updatedProps.editedData)}}))};EditedDataTemplate.__docgenInfo={description:"",methods:[],displayName:"EditedDataTemplate",props:{layers:{required:!1,tsType:{name:"Array",elements:[{name:"union",raw:"| Record<string, unknown>\n| Layer\n| false\n| null\n| undefined",elements:[{name:"Record",elements:[{name:"string"},{name:"unknown"}],raw:"Record<string, unknown>"},{name:"Layer"},{name:"literal",value:"false"},{name:"null"},{name:"undefined"}]}],raw:"TLayerDefinition[]"},description:"Array of externally created layers or layer definition records or JSON strings.\nAdd '@@typedArraySupport' : true in a layer definition in order to\nuse typed arrays as inputs."},setProps:{required:!1,tsType:{name:"signature",type:"function",raw:"(data: Record<string, unknown>) => void",signature:{arguments:[{type:{name:"Record",elements:[{name:"string"},{name:"unknown"}],raw:"Record<string, unknown>"},name:"data"}],return:{name:"void"}}},description:"@deprecated Used by layers to propagate state to component, eg. selected\nwells from the Wells layer. Use client code to handle layer state\ninstead."}},composes:["Omit"]}},"./packages/subsurface-viewer/node_modules/@equinor/eds-core-react/dist/esm/components/Label/Label.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{J:function(){return Label}});var react=__webpack_require__("./node_modules/react/index.js"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),templates=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-utils/dist/esm/utils/templates/index.mjs"),esm=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-tokens/dist/esm/index.mjs");const{colors:colors,spacings:{comfortable:comfortable},typography:typography}=esm.L,label={background:colors.ui.background__light.rgba,typography:{...typography.input.label,color:colors.text.static_icons__tertiary.rgba},spacings:{left:comfortable.small,right:comfortable.small,top:"6px",bottom:"6px"},states:{disabled:{typography:{color:colors.interactive.disabled__text.rgba}}}};var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const LabelBase=styled_components_browser_esm.Ay.label.withConfig({displayName:"Label__LabelBase",componentId:"sc-1gi2bcn-0"})(["display:flex;justify-content:space-between;position:relative;"," margin-left:",";margin-right:",";color:",";"],(0,templates.Sz)(label.typography),label.spacings.left,label.spacings.right,(({$disabledText:$disabledText})=>$disabledText?label.states.disabled.typography.color:label.typography.color)),Text=styled_components_browser_esm.Ay.span.withConfig({displayName:"Label__Text",componentId:"sc-1gi2bcn-1"})(["margin:0;"]),Label=(0,react.forwardRef)((function Label(props,ref){const{label:label="",meta:meta,disabled:disabled=!1,...other}=props;return(0,jsx_runtime.jsxs)(LabelBase,{ref:ref,$disabledText:disabled,...other,children:[(0,jsx_runtime.jsx)(Text,{children:label}),meta&&(0,jsx_runtime.jsx)(Text,{children:meta})]})}))},"../example-data/deckgl-map.json":function(module){module.exports=JSON.parse('[{"id":"DeckGL-Map","coords":{"visible":true,"multiPicking":true,"pickDepth":10},"scale":{"visible":true,"incrementValue":100,"widthPerUnit":100,"cssStyle":{"left":10,"top":10}},"coordinateUnit":"m","resources":{"propertyMap":"propertyMap.png","depthMap":"propertyMap.png","wellsData":"volve_wells.json","logData":"volve_logs.json"},"bounds":[432205,6475078,437720,6481113],"layers":[{"@@type":"ColormapLayer","image":"@@#resources.propertyMap","rotDeg":0,"bounds":[432205,6475078,437720,6481113],"colorMapName":"Rainbow","valueRange":[2782,3513],"colorMapRange":[2782,3513]},{"@@type":"Hillshading2DLayer","bounds":[432205,6475078,437720,6481113],"valueRange":[2782,3513],"rotDeg":0,"image":"@@#resources.depthMap"},{"@@type":"WellsLayer","data":"@@#resources.wellsData","logData":"@@#resources.logData","logrunName":"BLOCKING","logName":"ZONELOG","logColor":"Stratigraphy"},{"@@type":"FaultPolygonsLayer","data":"fault_polygons.geojson"},{"@@type":"PieChartLayer","data":"piechart.json"},{"@@type":"NorthArrow3DLayer","visible":true},{"@@type":"DrawingLayer"}],"editedData":{},"views":{"layout":[1,1],"showLabel":false,"viewports":[{"id":"view_1","show3D":false,"layerIds":[]}]}}]')}}]);