"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[5123],{"./packages/subsurface-viewer/src/layers/points/pointsLayer.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{HugePointsLayer:function(){return HugePointsLayer},SmallPointsLayer:function(){return SmallPointsLayer},__namedExportsOrder:function(){return __namedExportsOrder}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),mathjs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/mathjs/lib/esm/core/create.js"),mathjs__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/mathjs/lib/esm/entry/allFactoriesAny.js"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx");__webpack_exports__.default={parameters:{storySource:{source:'import React from "react";\nimport { create, all } from "mathjs";\nimport SubsurfaceViewer from "../../SubsurfaceViewer";\nexport default {\n  component: SubsurfaceViewer,\n  title: "SubsurfaceViewer / Points Layer"\n};\nconst defaultParameters = {\n  docs: {\n    inlineStories: false,\n    iframeHeight: 500\n  }\n};\n\n// Small example using PointsLayer.\nconst smallPointsLayer = {\n  "@@type": "PointsLayer",\n  id: "small_points_layer",\n  \n  pointsData: [0, 0, 5,\n  // Vertex 1, x, y, z\n  10, 0, 5,\n  // Vertex 2, x, y, z\n  10, 10, 5,\n  // ...\n  0, 10, 0, 5, -5, 10, 11, -4, 6, 11, 0, 7, 17, 0, 8],\n  \n  color: [255, 0, 100],\n  pointRadius: 10,\n  radiusUnits: "pixels",\n  ZIncreasingDownwards: true\n};\nconst smallAxesLayer = {\n  "@@type": "AxesLayer",\n  id: "small_axes_layer",\n  bounds: [-10, -10, 0, 20, 10, 10]\n};\nexport const SmallPointsLayer = args => {\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nSmallPointsLayer.args = {\n  id: "small-points-map",\n  layers: [smallAxesLayer, smallPointsLayer],\n  bounds: [-20, -20, 20, 20],\n  views: {\n    layout: [1, 1],\n    viewports: [{\n      id: "view_1",\n      show3D: true\n    }]\n  }\n};\nSmallPointsLayer.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Point coordinates are given as native javascript array."\n    }\n  }\n};\n\n// Huge example using PointsLayer.\nconst sideSize = 10000;\nconst pointsCount = 100000;\nconst math = create(all, {\n  randomSeed: "1234"\n});\nconst randomFunc = (() => {\n  if (math?.random) {\n    return () => {\n      const val = math.random?.(sideSize);\n      return val ? val : 0.0;\n    };\n  }\n  return () => Math.random() * sideSize;\n})();\nconst hugePointsLayer = {\n  "@@type": "PointsLayer",\n  id: "huge_points_layer",\n  pointsData: Array(pointsCount * 3).fill(0).map(() => randomFunc()),\n  color: [255, 100, 100],\n  pointRadius: 1,\n  radiusUnits: "pixels",\n  ZIncreasingDownwards: true\n};\nconst hugeAxesLayer = {\n  "@@type": "AxesLayer",\n  id: "huge_axes_layer",\n  bounds: [0, 0, 0, sideSize, sideSize, sideSize]\n};\nexport const HugePointsLayer = args => {\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nHugePointsLayer.args = {\n  id: "huge-points-map",\n  layers: [hugeAxesLayer, hugePointsLayer],\n  bounds: [0, 0, sideSize, sideSize],\n  coords: {\n    visible: false\n  },\n  views: {\n    layout: [1, 1],\n    viewports: [{\n      id: "view_1",\n      show3D: true\n    }]\n  }\n};\nHugePointsLayer.parameters = {\n  docs: {\n    ...defaultParameters.docs,\n    description: {\n      story: "Point coordinates are randomly generated in runtime and given as native javascript array."\n    }\n  }\n};',locationsMap:{"small-points-layer":{startLoc:{col:32,line:38},endLoc:{col:1,line:40},startBody:{col:32,line:38},endBody:{col:1,line:40}},"huge-points-layer":{startLoc:{col:31,line:91},endLoc:{col:1,line:93},startBody:{col:31,line:91},endBody:{col:1,line:93}}}}},component:_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,title:"SubsurfaceViewer / Points Layer"};const defaultParameters_docs={inlineStories:!1,iframeHeight:500},SmallPointsLayer=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,args);SmallPointsLayer.args={id:"small-points-map",layers:[{"@@type":"AxesLayer",id:"small_axes_layer",bounds:[-10,-10,0,20,10,10]},{"@@type":"PointsLayer",id:"small_points_layer",pointsData:[0,0,5,10,0,5,10,10,5,0,10,0,5,-5,10,11,-4,6,11,0,7,17,0,8],color:[255,0,100],pointRadius:10,radiusUnits:"pixels",ZIncreasingDownwards:!0}],bounds:[-20,-20,20,20],views:{layout:[1,1],viewports:[{id:"view_1",show3D:!0}]}},SmallPointsLayer.parameters={docs:{...defaultParameters_docs,description:{story:"Point coordinates are given as native javascript array."}}};const math=(0,mathjs__WEBPACK_IMPORTED_MODULE_2__.U)(mathjs__WEBPACK_IMPORTED_MODULE_3__.$,{randomSeed:"1234"}),randomFunc=math?.random?()=>{const val=math.random?.(1e4);return val||0}:()=>1e4*Math.random(),hugePointsLayer={"@@type":"PointsLayer",id:"huge_points_layer",pointsData:Array(3e5).fill(0).map((()=>randomFunc())),color:[255,100,100],pointRadius:1,radiusUnits:"pixels",ZIncreasingDownwards:!0},hugeAxesLayer={"@@type":"AxesLayer",id:"huge_axes_layer",bounds:[0,0,0,1e4,1e4,1e4]},HugePointsLayer=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,args);HugePointsLayer.args={id:"huge-points-map",layers:[hugeAxesLayer,hugePointsLayer],bounds:[0,0,1e4,1e4],coords:{visible:!1},views:{layout:[1,1],viewports:[{id:"view_1",show3D:!0}]}},HugePointsLayer.parameters={docs:{...defaultParameters_docs,description:{story:"Point coordinates are randomly generated in runtime and given as native javascript array."}}},SmallPointsLayer.parameters={...SmallPointsLayer.parameters,docs:{...SmallPointsLayer.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...SmallPointsLayer.parameters?.docs?.source}}},HugePointsLayer.parameters={...HugePointsLayer.parameters,docs:{...HugePointsLayer.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...HugePointsLayer.parameters?.docs?.source}}};const __namedExportsOrder=["SmallPointsLayer","HugePointsLayer"]}}]);