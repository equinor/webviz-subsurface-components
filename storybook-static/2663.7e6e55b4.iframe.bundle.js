(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[2663],{"./packages/well-log-viewer/src/components/CommonPropTypes.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{QO:function(){return PatternsType},YH:function(){return ColorFunctionType},_7:function(){return PatternsTableType},nY:function(){return TemplateType}});var prop_types__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_0__);const PatternsType=prop_types__WEBPACK_IMPORTED_MODULE_0___default().array,PatternsTableType=prop_types__WEBPACK_IMPORTED_MODULE_0___default().shape({patternSize:prop_types__WEBPACK_IMPORTED_MODULE_0___default().number.isRequired,patternImages:prop_types__WEBPACK_IMPORTED_MODULE_0___default().arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_0___default().string).isRequired,patternNames:prop_types__WEBPACK_IMPORTED_MODULE_0___default().arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_0___default().string)}),ColorFunctionType=prop_types__WEBPACK_IMPORTED_MODULE_0___default().oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_0___default().func,prop_types__WEBPACK_IMPORTED_MODULE_0___default().object]),TemplatePlotScaleType=prop_types__WEBPACK_IMPORTED_MODULE_0___default().oneOf(["linear","log"]),TemplatePlotTypeType=prop_types__WEBPACK_IMPORTED_MODULE_0___default().oneOf(["","line","linestep","dot","area","differential","gradientfill","stacked"]),CSSColorType=prop_types__WEBPACK_IMPORTED_MODULE_0___default().string,templatePlotPropsType={type:TemplatePlotTypeType,scale:TemplatePlotScaleType,domain:prop_types__WEBPACK_IMPORTED_MODULE_0___default().arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_0___default().number),color:CSSColorType,inverseColor:CSSColorType,fill:CSSColorType,fillOpacity:prop_types__WEBPACK_IMPORTED_MODULE_0___default().number,colorMapFunctionName:prop_types__WEBPACK_IMPORTED_MODULE_0___default().string,inverseColorMapFunctionName:prop_types__WEBPACK_IMPORTED_MODULE_0___default().string,colorScale:TemplatePlotScaleType,inverseColorScale:TemplatePlotScaleType,color2:CSSColorType,fill2:CSSColorType,showLabels:prop_types__WEBPACK_IMPORTED_MODULE_0___default().bool,showLines:prop_types__WEBPACK_IMPORTED_MODULE_0___default().bool,labelRotation:prop_types__WEBPACK_IMPORTED_MODULE_0___default().number},TemplatePlotType=(prop_types__WEBPACK_IMPORTED_MODULE_0___default().shape(templatePlotPropsType),prop_types__WEBPACK_IMPORTED_MODULE_0___default().shape({...templatePlotPropsType,name:prop_types__WEBPACK_IMPORTED_MODULE_0___default().string.isRequired,style:prop_types__WEBPACK_IMPORTED_MODULE_0___default().string,scale:TemplatePlotScaleType,name2:prop_types__WEBPACK_IMPORTED_MODULE_0___default().string})),TemplateStyleType=prop_types__WEBPACK_IMPORTED_MODULE_0___default().shape({...templatePlotPropsType,name:prop_types__WEBPACK_IMPORTED_MODULE_0___default().string}),TemplateTrackType=prop_types__WEBPACK_IMPORTED_MODULE_0___default().shape({title:prop_types__WEBPACK_IMPORTED_MODULE_0___default().string,required:prop_types__WEBPACK_IMPORTED_MODULE_0___default().bool,width:prop_types__WEBPACK_IMPORTED_MODULE_0___default().number,plots:prop_types__WEBPACK_IMPORTED_MODULE_0___default().arrayOf(TemplatePlotType).isRequired,scale:TemplatePlotScaleType,domain:prop_types__WEBPACK_IMPORTED_MODULE_0___default().arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_0___default().number)}),TemplateType=prop_types__WEBPACK_IMPORTED_MODULE_0___default().shape({name:prop_types__WEBPACK_IMPORTED_MODULE_0___default().string.isRequired,scale:prop_types__WEBPACK_IMPORTED_MODULE_0___default().shape({primary:prop_types__WEBPACK_IMPORTED_MODULE_0___default().string.isRequired,allowSecondary:prop_types__WEBPACK_IMPORTED_MODULE_0___default().bool}).isRequired,tracks:prop_types__WEBPACK_IMPORTED_MODULE_0___default().arrayOf(TemplateTrackType).isRequired,styles:prop_types__WEBPACK_IMPORTED_MODULE_0___default().arrayOf(TemplateStyleType)})},"./packages/well-log-viewer/src/components/WellLogView.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{MO:function(){return WellPickPropsType},Hw:function(){return _propTypesWellLogView},uB:function(){return argTypesWellLogViewProp},Ay:function(){return components_WellLogView},N7:function(){return getWellPicks},cm:function(){return shouldUpdateWellLogView}});__webpack_require__("./packages/well-log-viewer/src/components/styles.scss");var src=__webpack_require__("./node_modules/d3/src/index.js"),react=__webpack_require__("./node_modules/react/index.js"),client=__webpack_require__("./node_modules/react-dom/client.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),index_umd=__webpack_require__("./node_modules/@equinor/videx-wellog/dist/index.umd.js"),dist=__webpack_require__("./packages/wsc-common/dist/index.js"),deepcopy=__webpack_require__("./packages/well-log-viewer/src/utils/deepcopy.ts"),well_log=__webpack_require__("./packages/well-log-viewer/src/utils/well-log.ts"),utils_tracks=__webpack_require__("./packages/well-log-viewer/src/utils/tracks.ts"),arrays=__webpack_require__("./packages/well-log-viewer/src/utils/arrays.ts");function setContentBaseDomain(logViewer,domain){const[b1,b2]=logViewer.scaleHandler.baseDomain();return(b1!==domain[0]||b2!==domain[1])&&(logViewer.domain=domain,!0)}function showTrack(track,visible){const newDisplayValue=visible?"flex":"none",trackParentElm=track.elm?.parentElement;return!(!trackParentElm||trackParentElm.style.display===newDisplayValue)&&(trackParentElm.style.display=newDisplayValue,!0)}function isTrackSelected(_logViewer,track){const trackParentElm=track.elm?.parentElement;return!!trackParentElm&&trackParentElm.classList.contains("selected")}function selectTrack(logViewer,track,selected){const trackParentElm=track.elm?.parentElement;return!(!trackParentElm||isTrackSelected(0,track)===selected)&&(trackParentElm.classList.toggle("selected"),!0)}function zoomContentTo(logViewer,domain){return!(0,arrays.q_)(logViewer.domain,domain)&&(logViewer.zoomTo(domain),(0,arrays.q_)(logViewer.domain,domain)||(logViewer.zoomTo(domain),(0,arrays.q_)(logViewer.domain,domain)||(console.warn("zoomContentTo failed. Try to set "+domain+" but get "+logViewer.domain),logViewer.zoomTo(domain))),!0)}function setSelectedTrackIndices(logViewer,selectedTrackIndices){let changed=!1;if(logViewer&&selectedTrackIndices){let iTrack=0;for(const track of logViewer.tracks){selectTrack(0,track,selectedTrackIndices.indexOf(iTrack)>=0)&&(changed=!0),iTrack++}}return changed}function adjustControllerToModifiedTrack(logViewer,modifiedTrack){modifiedTrack&&(!function updateLegendRows(logViewer){logViewer.updateLegendRows()}(logViewer),logViewer.updateTracks())}function createInterpolator(from,to){const mul=new Float32Array(from.length),n=from.length;for(let i=0;i<n;i++)if(i){const d=from[i]-from[i-1];mul[i]=d?(to[i]-to[i-1])/d:1}else mul[i]=0;return(x,expand)=>{for(let i=0;i<n;i++)if(x<from[i])return i?(x-from[i])*mul[i]+to[i]:expand?to[0]:Number.NaN;return expand?to[n?n-1:0]:Number.NaN}}function setUpScaleInterpolator(logViewer,wellLogSet,axesInfo){const{primaries:primaries,secondaries:secondaries}=function computeInterpolationArrays(wellLogSet,axesInfo){const axisIndices=(0,well_log.FH)(wellLogSet?.curves??[],axesInfo),idxPrimary=axisIndices.primary,idxSecondary=axisIndices.secondary;if(idxPrimary<0||idxSecondary<0)return{primaries:new Float32Array(0),secondaries:new Float32Array(0)};let entryCount=0,primaries=new Float32Array(wellLogSet.data.length),secondaries=new Float32Array(wellLogSet.data.length);for(const row of wellLogSet.data){const primary=row[idxPrimary],secondary=row[idxSecondary];null!==primary&&null!==secondary&&(secondaries[entryCount]=secondary,primaries[entryCount]=primary,entryCount++)}return entryCount<primaries.length&&(primaries=primaries.subarray(0,entryCount),secondaries=secondaries.subarray(0,entryCount)),{primaries:primaries,secondaries:secondaries}}(wellLogSet,axesInfo),scaleInterpolator=function createScaleInterpolator(primaries,secondaries){const primary2secondary=createInterpolator(primaries,secondaries),secondary2primary=createInterpolator(secondaries,primaries);return{forward:v=>secondary2primary(v,!1),reverse:v=>primary2secondary(v,!1),forwardInterpolatedDomain:domain=>domain.map((v=>secondary2primary(v,!0))),reverseInterpolatedDomain:domain=>domain.map((v=>primary2secondary(v,!0)))}}(primaries,secondaries);return logViewer.scaleHandler=new index_umd.InterpolatedScaleHandler(scaleInterpolator),scaleInterpolator}var plots=__webpack_require__("./packages/well-log-viewer/src/utils/plots.ts"),template=__webpack_require__("./packages/well-log-viewer/src/utils/template.ts"),CommonPropTypes=__webpack_require__("./packages/well-log-viewer/src/components/CommonPropTypes.ts"),FormControl=__webpack_require__("./node_modules/@mui/material/FormControl/FormControl.js"),InputLabel=__webpack_require__("./node_modules/@mui/material/InputLabel/InputLabel.js"),NativeSelect=__webpack_require__("./node_modules/@mui/material/NativeSelect/NativeSelect.js"),Dialog=__webpack_require__("./node_modules/@mui/material/Dialog/Dialog.js"),DialogTitle=__webpack_require__("./node_modules/@mui/material/DialogTitle/DialogTitle.js"),DialogContent=__webpack_require__("./node_modules/@mui/material/DialogContent/DialogContent.js"),DialogActions=__webpack_require__("./node_modules/@mui/material/DialogActions/DialogActions.js"),Button=__webpack_require__("./node_modules/@mui/material/Button/Button.js");const typeItems={line:"Line",linestep:"Line Step",dot:"Dot",area:"Area",gradientfill:"Gradient Fill",differential:"Differential"},scaleItems={linear:"Linear",log:"Logarithmic"},colorItems={black:"Black",red:"Red",green:"Green",blue:"Blue",brown:"Brown",magenta:"Magenta",orange:"Orange",gray:"Gray",darkred:"Dark red",lightgreen:"Light green",lightblue:"Light blue",yellow:"Yellow",white:"White"},booleanItems={false:"No",true:"Yes"};function _createItems(items){const nodes=[];for(const key in items)nodes.push(react.createElement("option",{key:key,value:key},items[key]));return nodes}function createScaleItems(){return _createItems(scaleItems)}function createColorItems(){return _createItems(colorItems)}function createBooleanItems(){return _createItems(booleanItems)}function createColorFunctionItems(colorMapFunctions){const nodes=[];if(colorMapFunctions&&colorMapFunctions.length)for(const colorMapFunction of colorMapFunctions){const name=colorMapFunction.name;name||console.error("colorMapFunction.name is empty in createColorFunctionItems()"),nodes.push(react.createElement("option",{key:name},name))}else console.error("colorMapFunctions are missed or empty in createColorFunctionItems()");return nodes}function createDataItem(item){return react.createElement("option",{key:item,value:item},item)}function dataNames(wellLogSets,track,discrete){const names=new Set;for(const logSet of wellLogSets){const skipUsed=!!track,plots=track?track.plots:void 0,abbr=track?track.options.abbr:void 0,curves=logSet.curves;let iCurve=0;for(const curve of curves){if(discrete&&"string"!==curve.valueType&&"integer"!==curve.valueType)continue;let bUsed=!1;if(plots){for(const plot of plots)if(plot.id===iCurve){bUsed=!0;break}}else abbr===curve.name&&(bUsed=!0);bUsed&&skipUsed||names.add(curve.name),iCurve++}}return Array.from(names)}const dialogContentStyle={display:"grid",gridTemplateColumns:"1fr 1fr 1fr",paddingTop:20,gap:10};class PlotPropertiesDialog extends react.Component{constructor(props){super(props);let name="",name2="";const names=this.dataNames(!0);names[0]&&(name2=name=names[0]),names[1]&&(name2=names[1]);const trackTemplate=(0,utils_tracks.Qv)(this.props.track),templatePlot=this.props.templatePlot;this.state=templatePlot?{...templatePlot,open:!0}:{type:trackTemplate.scale?"":"line",name:name,name2:name2,scale:void 0,color:"black",fill:"red",fillOpacity:.25,inverseColor:"",colorMapFunctionName:this.props.wellLogView.props.colorMapFunctions?.[0]?.name,inverseColorMapFunctionName:void 0,colorScale:void 0,inverseColorScale:void 0,color2:"black",fill2:"green",open:!0},this.closeDialog=this.closeDialog.bind(this),this.onOK=this.onOK.bind(this)}componentDidUpdate(_prevProps,prevState){if(this.state.type!==prevState.type)if("area"===this.state.type)this.state.fill||this.setState({fill:"black"});else if("gradientfill"===this.state.type)this.state.inverseColor&&this.setState({inverseColor:""});else if("differential"===this.state.type&&!this.state.name2){const skipUsed=!this.props.templatePlot;this.setState({name2:this.dataNames(skipUsed)[0]})}}onOK(){this.props.onOK(this.state),this.closeDialog()}closeDialog(){this.setState({open:!1})}dataNames(skipUsed){return dataNames(this.props.wellLogView.wellLogSets,skipUsed?this.props.track:null)}createDataItems(skipUsed){return this.dataNames(skipUsed).map((name=>createDataItem(name)))}createSelectControl(valueName,label,nodes,insertEmpty){let value=this.state[valueName];return insertEmpty&&(value||(value="-"),nodes.unshift(react.createElement("option",{key:"-",value:"-"},!0===insertEmpty?"—":insertEmpty))),react.createElement(FormControl.A,{fullWidth:!0,key:valueName},react.createElement(InputLabel.A,null,label),react.createElement(NativeSelect.A,{value:value,onChange:event=>{const value="-"===event.currentTarget.value?"":event.currentTarget.value,values=new Object;values[valueName]=value,this.setState(values)}},nodes))}createSelectControlFromType(type){if("area"===type||"differential"===type)return[this.createSelectControl("fill","Fill Color",createColorItems()),react.createElement(FormControl.A,{fullWidth:!0,key:"112"}),react.createElement(FormControl.A,{fullWidth:!0,key:"113"}),"area"===this.state.type?this.createSelectControl("inverseColor","Inverse Color",createColorItems(),!0):react.createElement(FormControl.A,{fullWidth:!0,key:"114"})];if("gradientfill"===type){const colorMapFunctions=this.props.wellLogView.props.colorMapFunctions;return[this.createSelectControl("colorMapFunctionName","Fill Color function/table",createColorFunctionItems(colorMapFunctions)),react.createElement(FormControl.A,{fullWidth:!0,key:"211"}),react.createElement(FormControl.A,{fullWidth:!0,key:"212"}),this.createSelectControl("inverseColorMapFunctionName","Inverse Color function/table",createColorFunctionItems(colorMapFunctions),!0)]}return[]}render(){const trackTemplate=(0,utils_tracks.Qv)(this.props.track),title=this.props.templatePlot?"Edit plot":"Add New Plot",skipUsed=!this.props.templatePlot,scale=this.state.scale||trackTemplate.scale;return react.createElement(Dialog.A,{open:this.state.open,maxWidth:"sm",fullWidth:!0,onClose:()=>this.setState({open:!1})},react.createElement(DialogTitle.A,null,title),react.createElement(DialogContent.A,{style:dialogContentStyle},this.createSelectControl("type","Type",function createTypeItems(){return _createItems(typeItems)}()),this.createSelectControl("scale","Scale",createScaleItems(),"Track scale"),"gradientfill"===this.state.type&&"linear"===scale?[this.createSelectControl("colorScale","Color Scale",createScaleItems())]:[react.createElement(FormControl.A,{fullWidth:!0,key:"12"})],this.createSelectControl("name","Data",this.createDataItems(skipUsed)),this.createSelectControl("color","dot"===this.state.type?"Dot Color":"Line Color",createColorItems()),this.createSelectControlFromType(this.state.type),"differential"===this.state.type?[this.createSelectControl("name2","Data 2",this.createDataItems(skipUsed)),this.createSelectControl("color2","Line Color 2",createColorItems()),this.createSelectControl("fill2","Fill Color 2",createColorItems())]:[]),react.createElement(DialogActions.A,null,react.createElement(Button.A,{color:"secondary",variant:"contained",onClick:this.closeDialog},"Cancel"),react.createElement(Button.A,{color:"primary",variant:"contained",onClick:this.onOK},"OK")))}}PlotPropertiesDialog.__docgenInfo={description:"",methods:[{name:"onOK",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"closeDialog",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"dataNames",docblock:null,modifiers:[],params:[{name:"skipUsed",optional:!1,type:{name:"boolean"}}],returns:{type:{name:"Array",elements:[{name:"string"}],raw:"string[]"}}},{name:"createDataItems",docblock:null,modifiers:[],params:[{name:"skipUsed",optional:!1,type:{name:"boolean"}}],returns:{type:{name:"Array",elements:[{name:"ReactNode"}],raw:"ReactNode[]"}}},{name:"createSelectControl",docblock:null,modifiers:[],params:[{name:"valueName",optional:!1,type:{name:"string"}},{name:"label",optional:!1,type:{name:"string"}},{name:"nodes",optional:!1,type:{name:"Array",elements:[{name:"ReactNode"}],raw:"ReactNode[]"}},{name:"insertEmpty",optional:!0,type:{name:"union",raw:"string | boolean",elements:[{name:"string"},{name:"boolean"}]}}],returns:{type:{name:"ReactNode"}}},{name:"createSelectControlFromType",docblock:null,modifiers:[],params:[{name:"type",optional:!0,type:{name:"union",raw:'| ""\n| "line"\n| "linestep"\n| "dot"\n| "area"\n| "differential"\n| "gradientfill"\n| "stacked"',elements:[{name:"literal",value:'""'},{name:"literal",value:'"line"'},{name:"literal",value:'"linestep"'},{name:"literal",value:'"dot"'},{name:"literal",value:'"area"'},{name:"literal",value:'"differential"'},{name:"literal",value:'"gradientfill"'},{name:"literal",value:'"stacked"'}],alias:"TemplatePlotType"}}],returns:{type:{name:"ReactNode"}}}],displayName:"PlotPropertiesDialog",props:{templatePlot:{required:!1,tsType:{name:"TemplatePlot"},description:""},onOK:{required:!0,tsType:{name:"signature",type:"function",raw:"(templatePlot: TemplatePlot) => void",signature:{arguments:[{type:{name:"TemplatePlot"},name:"templatePlot"}],return:{name:"void"}}},description:""},wellLogView:{required:!0,tsType:{name:"WellLogView"},description:""},track:{required:!0,tsType:{name:"Track"},description:""}}};var TextField=__webpack_require__("./node_modules/@mui/material/TextField/TextField.js");class TrackPropertiesDialog extends react.Component{constructor(props){super(props);let name="";const names=dataNames(this.props.wellLogView.wellLogSets,null,!0);names[0]&&(name=names[0]);const templateTrack=this.props.templateTrack;this.bStacked=templateTrack&&templateTrack.plots&&templateTrack.plots[0]&&"stacked"===templateTrack.plots[0].type,this.state=templateTrack?{...templateTrack,stacked:this.bStacked?"1":"0",stackedName:templateTrack.plots[0]?.name,showLabels:!1!==templateTrack.plots[0]?.showLabels?"true":"false",showLines:!1!==templateTrack.plots[0]?.showLines?"true":"false",labelRotation:templateTrack.plots[0]?.labelRotation||0,open:!0}:{title:"New Track",scale:void 0,domain:void 0,plots:[],stacked:"0",stackedName:name,showLabels:"true",showLines:"true",labelRotation:0,open:!0},this.closeDialog=this.closeDialog.bind(this),this.onOK=this.onOK.bind(this),this.onChange=this.onChange.bind(this),this.onChangeChecked=this.onChangeChecked.bind(this)}onOK(){if(parseInt(this.state.stacked)){const plot0=this.state.plots[0];this.state.plots.splice(0,this.state.plots.length);const plot={...plot0,type:"stacked",name:this.state.stackedName,showLabels:"true"===this.state.showLabels,showLines:"true"===this.state.showLines,labelRotation:this.state.labelRotation||0};this.state.plots.push(plot)}this.props.onOK(this.state),this.closeDialog()}onChange(e){this.setState({[e.target.id]:e.target.value})}onChangeChecked(e){this.setState({[e.target.id]:e.target.checked})}closeDialog(){this.setState({open:!1})}createSelectControl(valueName,label,nodes,insertEmpty){let value=this.state[valueName];return insertEmpty&&(value||(value="-"),nodes.unshift(react.createElement("option",{key:"-",value:"-"},"—"))),react.createElement(FormControl.A,{fullWidth:!0,key:valueName},react.createElement(InputLabel.A,null,label),react.createElement(NativeSelect.A,{value:value,onChange:event=>{const value="-"===event.currentTarget.value?"":event.currentTarget.value,values=new Object;values[valueName]=value,this.setState(values)}},nodes))}render(){const templateTrack=this.props.templateTrack,title=templateTrack?"Edit track":"Add New Track";return react.createElement(Dialog.A,{open:this.state.open,maxWidth:"sm",fullWidth:!0,onClose:()=>this.setState({open:!1})},react.createElement(DialogTitle.A,null,title),react.createElement(DialogContent.A,{style:dialogContentStyle},react.createElement(TextField.A,{id:"title",label:"Title",value:this.state.title,onChange:this.onChange,variant:"standard"}),templateTrack?react.createElement(react.Fragment,null):this.createSelectControl("stacked","Type",_createItems({0:"Graph",1:"Stacked"}),!1),parseInt(this.state.stacked)?[this.createSelectControl("stackedName","Data",(wellLogSets=this.props.wellLogView.wellLogSets,track=null,discrete=!0,dataNames(wellLogSets,track,discrete).map((name=>createDataItem(name))))),this.createSelectControl("showLines","Lines",createBooleanItems()),this.createSelectControl("showLabels","Labels",createBooleanItems()),react.createElement(TextField.A,{type:"number",id:"labelRotation",label:"Labels Rotation",key:"labelRotation",value:this.state.labelRotation,onChange:e=>{this.setState({[e.target.id]:Number(e.target.value)})},variant:"standard",InputProps:{inputProps:{min:-180,max:180,step:10}}})]:[this.createSelectControl("scale","Scale",createScaleItems(),!0)]),react.createElement(DialogActions.A,null,react.createElement(Button.A,{color:"secondary",variant:"contained",onClick:this.closeDialog},"Cancel"),react.createElement(Button.A,{color:"primary",variant:"contained",onClick:this.onOK},"OK")));var wellLogSets,track,discrete}}TrackPropertiesDialog.__docgenInfo={description:"",methods:[{name:"onOK",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"onChange",docblock:null,modifiers:[],params:[{name:"e",optional:!1,type:{name:"ReactChangeEvent",raw:"React.ChangeEvent<HTMLInputElement>",elements:[{name:"HTMLInputElement"}],alias:"React.ChangeEvent"}}],returns:{type:{name:"void"}}},{name:"onChangeChecked",docblock:null,modifiers:[],params:[{name:"e",optional:!1,type:{name:"ReactChangeEvent",raw:"React.ChangeEvent<HTMLInputElement>",elements:[{name:"HTMLInputElement"}],alias:"React.ChangeEvent"}}],returns:{type:{name:"void"}}},{name:"closeDialog",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"createSelectControl",docblock:null,modifiers:[],params:[{name:"valueName",optional:!1,type:{name:"string"}},{name:"label",optional:!1,type:{name:"string"}},{name:"nodes",optional:!1,type:{name:"Array",elements:[{name:"ReactNode"}],raw:"ReactNode[]"}},{name:"insertEmpty",optional:!0,type:{name:"boolean"}}],returns:{type:{name:"ReactNode"}}}],displayName:"TrackPropertiesDialog",props:{templateTrack:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    title?: string; // if it is missed then a name or description of the first plot is used (see makeTrackHeader())\n    titleTooltip?: string; // tooltip for mouse hover over title\n    required?: boolean;\n    /**\n     * Relative track width when used in a LogController, i.e. a track with width set to\n     * 3 will be three times wider than tracks set to width 1.\n     *\n     * Default is 1\n     */\n    width?: number;\n    plots: TemplatePlot[];\n    scale?: TemplatePlotScale; // 'linear' or 'log', default first plot scale\n    domain?: [number, number]; // min, max values, default all plots domain\n}",signature:{properties:[{key:"title",value:{name:"string",required:!1}},{key:"titleTooltip",value:{name:"string",required:!1}},{key:"required",value:{name:"boolean",required:!1}},{key:"width",value:{name:"number",required:!1},description:"Relative track width when used in a LogController, i.e. a track with width set to\n3 will be three times wider than tracks set to width 1.\n\nDefault is 1"},{key:"plots",value:{name:"Array",elements:[{name:"TemplatePlot"}],raw:"TemplatePlot[]",required:!0}},{key:"scale",value:{name:"union",raw:'"linear" | "log"',elements:[{name:"literal",value:'"linear"'},{name:"literal",value:'"log"'}],required:!1}},{key:"domain",value:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}],required:!1}}]}},description:""},onOK:{required:!0,tsType:{name:"signature",type:"function",raw:"(templateTrack: TemplateTrack) => void",signature:{arguments:[{type:{name:"signature",type:"object",raw:"{\n    title?: string; // if it is missed then a name or description of the first plot is used (see makeTrackHeader())\n    titleTooltip?: string; // tooltip for mouse hover over title\n    required?: boolean;\n    /**\n     * Relative track width when used in a LogController, i.e. a track with width set to\n     * 3 will be three times wider than tracks set to width 1.\n     *\n     * Default is 1\n     */\n    width?: number;\n    plots: TemplatePlot[];\n    scale?: TemplatePlotScale; // 'linear' or 'log', default first plot scale\n    domain?: [number, number]; // min, max values, default all plots domain\n}",signature:{properties:[{key:"title",value:{name:"string",required:!1}},{key:"titleTooltip",value:{name:"string",required:!1}},{key:"required",value:{name:"boolean",required:!1}},{key:"width",value:{name:"number",required:!1},description:"Relative track width when used in a LogController, i.e. a track with width set to\n3 will be three times wider than tracks set to width 1.\n\nDefault is 1"},{key:"plots",value:{name:"Array",elements:[{name:"TemplatePlot"}],raw:"TemplatePlot[]",required:!0}},{key:"scale",value:{name:"union",raw:'"linear" | "log"',elements:[{name:"literal",value:'"linear"'},{name:"literal",value:'"log"'}],required:!1}},{key:"domain",value:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}],required:!1}}]}},name:"templateTrack"}],return:{name:"void"}}},description:""},wellLogView:{required:!0,tsType:{name:"WellLogView"},description:""}}};function showSelection(rbelm,pinelm,vCur,vPin,horizontal,logViewer){if(void 0===vCur)return rbelm.style.visibility="hidden",void(pinelm.style.visibility="hidden");const v=logViewer.scale(vCur);if(!Number.isFinite(v))return rbelm.style.visibility="hidden",void(pinelm.style.visibility="hidden");if(rbelm.style[horizontal?"left":"top"]=v-4.5+"px",rbelm.style.visibility="visible",void 0!==vPin&&Number.isFinite(vPin)){const pinelm1=pinelm.firstElementChild;let min,max;vPin<vCur?(pinelm1.style[horizontal?"left":"top"]="4.5px",pinelm1.style[horizontal?"right":"bottom"]="",min=vPin,max=vCur):(pinelm1.style[horizontal?"right":"bottom"]="4.5px",pinelm1.style[horizontal?"left":"top"]="",min=vCur,max=vPin),min=logViewer.scale(min),max=logViewer.scale(max);const x=min-4.5,w=max-min+9;pinelm.style[horizontal?"left":"top"]=`${x}px`,pinelm.style[horizontal?"width":"height"]=`${w}px`}else pinelm.style.visibility="hidden"}const WellPickPropsType=prop_types_default().shape({wellpick:prop_types_default().object.isRequired,name:prop_types_default().string.isRequired,md:prop_types_default().string,colorMapFunctions:prop_types_default().arrayOf(CommonPropTypes.YH).isRequired,colorMapFunctionName:prop_types_default().string.isRequired});function showWellPick(elm,vCur,horizontal,logViewer){if(void 0===vCur)return void(elm.style.visibility="hidden");const v=logViewer.scale(vCur);Number.isFinite(v)?(elm.style[horizontal?"left":"top"]=v-1.5+"px",elm.style.visibility="visible"):elm.style.visibility="hidden"}function fillWellPicks(elm,vCur,vCur2,horizontal,logViewer){if(void 0===vCur)return void(elm.style.visibility="hidden");const v=logViewer.scale(vCur);if(!Number.isFinite(v))return void(elm.style.visibility="hidden");if(void 0===vCur2)return void(elm.style.visibility="hidden");const v2=logViewer.scale(vCur2);if(!Number.isFinite(v2))return void(elm.style.visibility="hidden");elm.style[horizontal?"left":"top"]=`${v}px`,elm.style[horizontal?"width":"height"]=v2-v+"px",elm.style.visibility="visible";const elm1=elm.querySelector("div.wellpick-pattern");if(elm1){const backgroundPosition="background-position-"+(horizontal?"x":"y");elm1.style[backgroundPosition]=-v+"px"}}function getWellPicks(wellLogView){const wps=[],wellpick=wellLogView.props.wellpick;if(!wellpick)return wps;if(!wellpick.wellpick)return console.error("No WellLog object in WellLogView prop.wellpick given"),wps;const curves=wellpick.wellpick.curves,mnemo=wellpick.md?wellpick.md:"MD",md=function _getLogIndexByNames(curves,names){for(const name of names){const n=name.toLowerCase(),index=curves.findIndex((item=>item.name.toLowerCase()===n));if(index>=0)return index}return-1}(curves,[mnemo]);if(md<0)return console.error("Depth log '"+mnemo+"' is not found for wellpicks"),wps;const primaryAxis=wellLogView.props.primaryAxis,scaleInterpolator=wellLogView.scaleInterpolator;for(const c in curves){if(curves[c].name!==wellpick.name)continue;const data=wellpick.wellpick.data;for(const d of data){if(null===d[md])continue;const horizon=d[c];if(null===horizon)continue;const vMD=d[md],vPrimary="md"===primaryAxis?vMD:scaleInterpolator?.forward(vMD),vSecondary="md"===primaryAxis?scaleInterpolator?.reverse(vMD):vMD,colorMapFunction=wellpick.colorMapFunctions.find((colorMapFunction=>colorMapFunction.name===wellpick.colorMapFunctionName)),meta=(0,well_log.P5)(wellpick.wellpick,wellpick.name),{color:color}=(0,well_log.VN)(d[c],colorMapFunction,meta),wp={vMD:vMD,vPrimary:vPrimary,vSecondary:vSecondary,horizon:horizon,color:color};wps.push(wp)}break}return wps}function posWellPickTitles(instance,parent){if(parent.logController&&parent.props.wellpick){const element=instance.overlay.elm.node();if(element){const horizontal=parent.props.horizontal;let i=0;for(const track of parent.logController.tracks){if(!(0,utils_tracks.Q1)(track))continue;const elm=track.elm,style="wp-title-"+i;for(const _td of element.querySelectorAll("td."+style)){const td=_td;td.style.position="absolute",horizontal?td.style.top=elm.offsetTop+"px":(td.style.left=elm.offsetLeft+"px",elm.offsetWidth<38?(td.style.width="",td.style.top="-11px",td.classList.add("vertical-text")):(td.style.width=elm.offsetWidth+"px",td.style.top="",td.classList.remove("vertical-text")))}i++}}}}function addWellPickOverlay(instance,parent){for(const elmName in instance.overlay.elements)"wp"===elmName.substring(0,2)&&instance.overlay.remove(elmName);if(!parent.props.wellpick)return;const wps=getWellPicks(parent);if(!wps.length)return;const horizontal=parent.props.horizontal,wellpickColorFill=parent.props.options?.wellpickColorFill,patternsTable=parent.props.patternsTable,patterns=parent.props.patterns,wellpickPatternFill=patternsTable&&patterns&&parent.props.options?.wellpickPatternFill,patternSize=patternsTable?.patternSize,patternImages=patternsTable?.patternImages;for(const wp of wps){const horizon=wp.horizon,vPrimary=wp.vPrimary,vSecondary=wp.vSecondary,color=wp.color,txtPrimary=Number.isFinite(vPrimary)?vPrimary?.toFixed(0):"",txtSecondary=Number.isFinite(vSecondary)?vSecondary?.toFixed(0):"",elmName="wp"+horizon,pinelm=instance.overlay.create(elmName,{}),rgba="rgba("+color[0]+","+color[1]+","+color[2]+",0.8)",styleText="style='background-color:rgba("+color[0]+","+color[1]+","+color[2]+",0.16)'";(0,src.Ltv)(pinelm).classed("wellpick",!0).style(horizontal?"width":"height","3px").style(horizontal?"height":"width","100%").style(horizontal?"top":"left","0px").style("position","absolute").style("background-color",rgba).style("visibility","false").append("div").html(horizontal?"<table height=100%'><tr><td class='wp-title-0'><span "+styleText+">"+txtPrimary+"</span></td></tr><tr><td class='wp-title-1'><span "+styleText+">"+txtSecondary+"</span></td></tr><tr><td height=100%><span "+styleText+">"+horizon+"</span></td></tr></table>":"<table width=100% style='position:relative; top:-1.5em;'><tr><td class='wp-title-0'><span "+styleText+">"+txtPrimary+"</span></td><td class='wp-title-1'><span "+styleText+">"+txtSecondary+"</span></td><td align=center><span "+styleText+">"+horizon+"</span></td></tr></table>").style("position","absolute").style(horizontal?"width":"height","1px").style(horizontal?"height":"width","100%").style("background-color",rgba);{const elmName="wpFill"+horizon;if(wellpickPatternFill||wellpickColorFill){const pinelm=instance.overlay.create(elmName,{}),pin=(0,src.Ltv)(pinelm).style("position","absolute").style(horizontal?"width":"height","3px").style(horizontal?"height":"width","100%").style(horizontal?"top":"left","0px").style("visibility","false");if(wellpickColorFill&&pin.append("div").classed("wellpick-fill",!0).style("width","100%").style("height","100%").style("background-color",rgba),wellpickPatternFill){const pattern=patterns.find((value=>value[0]===horizon));if(void 0!==pattern){const patternImage=patternImages[pattern[1]];pin.append("div").classed("wellpick-pattern",!0).style("position","absolute").style("left","0px").style("top","0px").style("width","100%").style("height","100%").style("background-size",patternSize+"px "+patternSize+"px").style("background-image","url('"+patternImage+"')")}}}}}}function initOverlays(instance,parent){instance.overlay.elm.style("overflow","hidden"),function addReadoutOverlay(instance,parent){const horizontal=parent.props.horizontal,elm=instance.overlay.create("depth",{onClick:event=>{if(parent.props.options?.hideCurrentPosition||parent.props.options?.hideSelectionInterval)return;const{caller:caller,x:x,y:y}=event,value=caller.scale.invert(horizontal?x:y),elem=event.target;if(elem){const axisTitle=parent.props.axisTitles&&parent.props.primaryAxis?parent.props.axisTitles[parent.props.primaryAxis]:void 0;elem.textContent=Number.isFinite(value)?`Pinned ${axisTitle||""}: ${value.toFixed(1)}`:"-",elem.style.visibility="visible"}},onMouseMove:event=>{if(parent.selPersistent)return;const{caller:caller,x:x,y:y}=event,value=caller.scale.invert(parent.props.horizontal?x:y),elem=event.target;if(elem){const axisTitles=parent.props.axisTitles;let axisTitle;axisTitles&&(axisTitle=parent.props.primaryAxis?axisTitles[parent.props.primaryAxis]:axisTitles[0]),elem.textContent=Number.isFinite(value)?`${axisTitle||""}: ${value.toFixed(1)}`:"-",elem.style.visibility="visible"}},onMouseExit:event=>{const elem=event.target;elem&&(elem.style.visibility="hidden"),parent.onTrackMouseLeaveEvent()},onRescale:event=>{const elem=event.target;if(elem&&event.transform){parent.onContentRescale();const k=event.transform.k;Number.isFinite(k)?(elem.style.visibility="visible",elem.textContent=`Zoom: x${k.toFixed(1)}`):elem.style.visibility="hidden"}}});elm.className="depth",elm.style.visibility="hidden",elm.style.position="absolute"}(instance,parent),function addRubberbandOverlay(instance,parent){const horizontal=parent.props.horizontal,rbelm=instance.overlay.create("rubber-band",{onMouseMove:event=>{if(parent.selPersistent)return;const v=horizontal?event.x:event.y;parent.selCurrent=instance.scale.invert(v);const rbelm=event.target,pinelm=instance.overlay.elements.pinned;rbelm&&pinelm&&showSelection(rbelm,pinelm,parent.selCurrent,parent.selPinned,horizontal,instance),parent.setInfo(parent.selCurrent),parent.onContentSelection()},onMouseExit:event=>{event.target}});(0,src.Ltv)(rbelm).classed("rubber-band",!0).style(horizontal?"width":"height","9px").style(horizontal?"height":"width","100%").style("visibility","hidden").append("div").style(horizontal?"width":"height","1px").style(horizontal?"height":"width","100%").style(horizontal?"left":"top","4.5px").style("position","relative")}(instance,parent),function addPinnedValueOverlay(instance,parent){const horizontal=parent.props.horizontal,pinelm=instance.overlay.create("pinned",{onClick:event=>{const v=horizontal?event.x:event.y,pinelm=event.target;if(pinelm)if("visible"===pinelm.style.visibility)parent.selPersistent?(parent.selPersistent=!1,parent.selCurrent=instance.scale.invert(v),pinelm.style.visibility="hidden",parent.selPinned=void 0,parent.onContentSelection()):parent.selPersistent=!0;else{parent.selPinned=instance.scale.invert(v),void 0!==parent.selCurrent||parent.props.options?.hideCurrentPosition||(parent.selCurrent=parent.selPinned);const rbelm=instance.overlay.elements["rubber-band"];rbelm&&pinelm&&showSelection(rbelm,pinelm,parent.selCurrent,parent.selPinned,horizontal,instance)}}});(0,src.Ltv)(pinelm).classed("pinned",!0).style(horizontal?"width":"height","9px").style(horizontal?"height":"width","100%").style(horizontal?"top":"left","0px").style("position","absolute").style("visibility","hidden").append("div").style(horizontal?"width":"height","1px").style(horizontal?"height":"width","100%").style(horizontal?"left":"top","4.5px").style("position","absolute")}(instance,parent),addWellPickOverlay(instance,parent)}function addTrackMouseEventListner(type,area,element,track,func){element.addEventListener(type,(ev=>{func({track:track,plot:null,element:element,ev:ev,type:type,area:area}),ev.preventDefault()}))}const types=["contextmenu","click","dblclick"],areas=["title","legend","container"];function getContentBaseScale(controller,horizontal){if(controller){const base=controller.getContentBaseDomain(),logController=controller.logController;if(logController){const overlay=logController?.overlay,source=overlay?.elm.node();if(source){const m=(horizontal?source.clientWidth:source.clientHeight)*(.0254/96);return(base[1]-base[0])/m}}}return 16e3}const argTypesWellLogViewProp={horizontal:{description:"Orientation of the track plots on the screen."},welllog:{description:"JSON object describing well log data.\n<i>Depreacted — Use <b>wellLogSets</b> instead.</i>"},wellLogSets:{description:"Array from JSON file; describes a series of well log data sets. Assumes each set is for the same well. (For differing wells, use SyncLogViewer instead)"},template:{description:"Prop containing track template data."},colorMapFunctions:{description:"Prop containing color function tablefor discrete well logs and gradient plots."},wellpick:{description:"Well Picks data"},patternsTable:{description:"Patterns table"},patterns:{description:"Horizon to pattern index map"},domain:{description:"Initial visible range"},selection:{description:"Initial selected range"},primaryAxis:{description:"Primary axis id"},axisMnemos:{description:"Log mnemonics for axes"},axisTitles:{description:"Names for axes"},viewTitle:{description:"The view title. Set desired string or react element or true for default value from well log file"},options:{description:"Additional options:<br/>maxContentZoom: The maximum zoom value (default 256)<br/>maxVisibleTrackNum: The maximum number of visible tracks<br/>checkDatafileSchema: Validate JSON datafile against schema<br/>hideTrackTitle: Hide titles on the tracks<br/>hideLegend: Hide legends on the tracks."}};function shouldUpdateWellLogView(props,nextProps){return props.horizontal!==nextProps.horizontal||(props.wellLogSets!==nextProps.wellLogSets||(props.welllog!==nextProps.welllog||(props.template!==nextProps.template||(props.colorMapFunctions!==nextProps.colorMapFunctions||(props.wellpick!==nextProps.wellpick||(props.primaryAxis!==nextProps.primaryAxis||(props.axisTitles!==nextProps.axisTitles||(props.axisMnemos!==nextProps.axisMnemos||(props.viewTitle!==nextProps.viewTitle||(!(0,arrays.hC)(props.domain,nextProps.domain)||(!(0,arrays.hC)(props.selection,nextProps.selection)||(props.options?.hideTrackTitle!==nextProps.options?.hideTrackTitle||(props.options?.hideTrackLegend!==nextProps.options?.hideTrackLegend||(props.options?.maxVisibleTrackNum!==nextProps.options?.maxVisibleTrackNum||(props.options?.maxContentZoom!==nextProps.options?.maxContentZoom||(props.options?.checkDatafileSchema!==nextProps.options?.checkDatafileSchema||(props.options?.wellpickColorFill!==nextProps.options?.wellpickColorFill||props.options?.wellpickPatternFill!==nextProps.options?.wellpickPatternFill)))))))))))))))))}class WellLogView extends react.Component{constructor(props){super(props),this.wellLogSets=(0,well_log.kF)(props),this.container=void 0,this.logController=void 0,this.selCurrent=void 0,this.selPinned=void 0,this.selPersistent=void 0,this.isDefZoom=!1,this.resizeObserver=new ResizeObserver((entries=>{const entry=entries[0];entry&&entry.target&&(this.logController&&posWellPickTitles(this.logController,this),entry.contentRect.width>0&&entry.contentRect.height>0&&this.onContentRescale())})),this.template={name:"",scale:{primary:""},tracks:[],styles:[]},this.scaleInterpolator=void 0,this.state={infos:[],scrollTrackPos:0},this.onTrackMouseEvent=this.onTrackMouseEvent.bind(this),this.props.onCreateController?.(this),this._isMount=!1}componentDidMount(){this._isMount=!0,this.template=(0,deepcopy.A)(this.props.template),this.logController||(this.createLogViewer(),this.setTracks(!0))}componentWillUnmount(){this._isMount=!1}shouldComponentUpdate(nextProps,nextState){return!!shouldUpdateWellLogView(this.props,nextProps)||(this.state.scrollTrackPos!==nextState.scrollTrackPos||this.state.errorText!==nextState.errorText)}componentDidUpdate(prevProps,prevState){this.props.onCreateController!==prevProps.onCreateController&&this.props.onCreateController?.(this);let selection,selectedTrackIndices=[],shouldSetTracks=!1,checkSchema=!1;this.props.horizontal===prevProps.horizontal&&this.props.options?.hideTrackTitle===prevProps.options?.hideTrackTitle&&this.props.options?.hideTrackLegend===prevProps.options?.hideTrackLegend&&this.props.options?.maxContentZoom===prevProps.options?.maxContentZoom||(selection=this.getContentSelection(),selectedTrackIndices=this.getSelectedTrackIndices(),this.createLogViewer(),shouldSetTracks=!0),this.props.welllog===prevProps.welllog&&this.props.wellLogSets===prevProps.wellLogSets&&this.props.options?.checkDatafileSchema===prevProps.options?.checkDatafileSchema||(selection=this.props.selection,selectedTrackIndices=this.getSelectedTrackIndices(),shouldSetTracks=!0,checkSchema=!0,this.wellLogSets=(0,well_log.kF)(this.props)),this.props.template!==prevProps.template&&(this.setTemplate(this.props.template,!0),shouldSetTracks=!0,checkSchema=!0),this.props.primaryAxis!==prevProps.primaryAxis&&(this.selectContent([void 0,void 0]),selectedTrackIndices=this.getSelectedTrackIndices(),shouldSetTracks=!0),this.props.colorMapFunctions!==prevProps.colorMapFunctions&&(selection=this.getContentSelection(),selectedTrackIndices=this.getSelectedTrackIndices(),shouldSetTracks=!0),this.props.axisTitles===prevProps.axisTitles&&this.props.axisMnemos===prevProps.axisMnemos||(selection=this.getContentSelection(),selectedTrackIndices=this.getSelectedTrackIndices(),shouldSetTracks=!0),this.props.wellpick===prevProps.wellpick&&this.props.options?.wellpickPatternFill===prevProps.options?.wellpickPatternFill&&this.props.options?.wellpickColorFill===prevProps.options?.wellpickColorFill||this.logController&&(addWellPickOverlay(this.logController,this),this.showSelection()),shouldSetTracks?(this.setTracks(checkSchema),setSelectedTrackIndices(this.logController,selectedTrackIndices),this.setControllerZoom(),selection&&this.selectContent(selection)):this.state.scrollTrackPos===prevState.scrollTrackPos&&this.props.options?.maxVisibleTrackNum===prevProps.options?.maxVisibleTrackNum||(this.onTrackScroll(),this.onTrackSelection(),this.updateInfo()),!this.props.domain||prevProps.domain&&this.props.domain[0]===prevProps.domain[0]&&this.props.domain[1]===prevProps.domain[1]||this.setControllerZoom(),!this.props.selection||prevProps.selection&&this.props.selection[0]===prevProps.selection[0]&&this.props.selection[1]===prevProps.selection[1]||this.setControllerSelection()}createLogViewer(){this.selPersistent=void 0,this.logController&&(this.logController.reset(),this.logController.onUnmount(),function removeOverlay(logViewer){logViewer.container.select(".overlay").remove()}(this.logController),this.logController=void 0),this.container&&(this.logController=new index_umd.LogViewer({horizontal:this.props.horizontal,showTitles:!this.props.options?.hideTrackTitle,showLegend:!this.props.options?.hideTrackLegend,maxZoom:this.props.options?.maxContentZoom,onTrackEnter:(elm,track)=>function addTrackMouseEventHandlers(elm,track,func){for(const area of areas){const elements=elm.getElementsByClassName("track-"+area);for(const element of elements)for(const type of types)addTrackMouseEventListner(type,area,element,track,func)}}(elm,track,this.onTrackMouseEvent)}),this.logController.init(this.container),this.container&&this.resizeObserver.observe(this.container),initOverlays(this.logController,this)),this.updateInfo()}getAxesInfo(){const axes=(0,well_log.Dy)(this.wellLogSets,this.props.axisMnemos),primaryAxisIndex=axes.findIndex((value=>value===this.props.primaryAxis));return{primaryAxis:this.props.primaryAxis||"",secondaryAxis:this.props.template&&this.props.template.scale&&this.props.template.scale.allowSecondary&&axes.length>1?axes[primaryAxisIndex+1]||axes[0]:"",titles:this.props.axisTitles,mnemos:this.props.axisMnemos}}setTracks(checkSchema){if(this.selCurrent=this.selPinned=void 0,checkSchema)try{(0,dist.i6)(this.template,"WellLogTemplate"),this.props.options?.checkDatafileSchema&&this.wellLogSets.forEach((wellLogSet=>(0,dist.i6)(wellLogSet,"WellLog")))}catch(e){this.setState({errorText:String(e)})}if(this.logController){const axes=this.getAxesInfo();this.scaleInterpolator=function setTracksToController(logController,axes,wellLogSets,templateTracks,colorMapFunctions){const{tracks:tracks,minmaxPrimaryAxis:minmaxPrimaryAxis}=(0,utils_tracks.b1)(wellLogSets,axes,templateTracks,colorMapFunctions);logController.reset();const scaleInterpolator=setUpScaleInterpolator(logController,wellLogSets[0],axes);return setContentBaseDomain(logController,minmaxPrimaryAxis),logController.setTracks(tracks),scaleInterpolator}(this.logController,axes,this.wellLogSets,this.getStyledTemplate().tracks,this.props.colorMapFunctions),addWellPickOverlay(this.logController,this),this._updateWellLogTitle()}this.setControllerZoom(),this.setControllerSelection(),this.setControllerZoom(),this.onTrackScroll(),this.onTrackSelection(),this.updateInfo()}findTrackById(trackId){return this.logController?.tracks.find((function(track){return track.id===trackId}))}setControllerZoom(){this.props.domain&&this.zoomContentTo(this.props.domain)}setControllerSelection(){this.props.selection&&this.selectContent(this.props.selection)}setControllerDefaultZoom(){this.props.domain?this.zoomContentTo(this.props.domain):this.zoomContentTo(this.getContentBaseDomain()),this.isDefZoom=!0}onTrackScroll(){const iFrom=this.getTrackScrollPos(),iTo=iFrom+this._maxVisibleTrackNum();this.logController&&function scrollTracksTo(logViewer,iFrom,iTo){let visibilityIsChanged=!1,iTrack=0;for(const track of logViewer.tracks)(0,utils_tracks.Q1)(track)||(showTrack(track,iFrom<=iTrack&&iTrack<iTo)&&(visibilityIsChanged=!0),iTrack++);return visibilityIsChanged&&logViewer.updateTracks(),visibilityIsChanged}(this.logController,iFrom,iTo),this.props.onTrackScroll?.()}onTrackSelection(){this.props.onTrackSelection?.()}setInfo(x=Number.NaN){if(!this.props.onInfo)return;if(!this.logController)return;isNaN(x)&&void 0!==this.selCurrent&&(x=this.selCurrent);const iFrom=this.getTrackScrollPos(),iTo=iFrom+this._maxVisibleTrackNum();this.props.onInfo(x,this.logController,iFrom,iTo)}onContentRescale(){this.showSelection(),this.props.onContentRescale?.()}onContentSelection(){this.showSelection(),this.props.onContentSelection?.()}onTrackMouseEvent(ev){this.props.onTrackMouseEvent?.(this,ev)}onTrackMouseLeaveEvent(){this.props.onTrackMouseLeaveEvent?.()}onTemplateChanged(noEmit){this.updateInfo(),noEmit||this.props.onTemplateChanged?.()}zoomContentTo(domain){return!!this.logController&&zoomContentTo(this.logController,domain)}scrollContentTo(f){return this.isDefZoom?(this.isDefZoom=!1,!1):!!this.logController&&function scrollContentTo(logViewer,fraction){const[b1,b2]=logViewer.scaleHandler.baseDomain(),[d1,d2]=logViewer.domain,d=d2-d1,c=b1+fraction*(b2-b1-d);return zoomContentTo(logViewer,[c,c+d])}(this.logController,f)}zoomContent(zoom){return!!this.logController&&function zoomContent(logViewer,zoom){zoom||(zoom=1);const[b1,b2]=logViewer.scaleHandler.baseDomain(),[d1,d2]=logViewer.domain,currentZoom=Math.abs(b2-b1)/Math.abs(d2-d1);if(Math.abs(Math.log(currentZoom/zoom))>.01){let d=.5*(d2-d1),c=d1+d;return d*=currentZoom/zoom,c+d>b2&&(c=b2-d),c-d<b1&&(c=b1+d),zoomContentTo(logViewer,[c-d,c+d])}return!1}(this.logController,zoom)}showSelection(){if(!this.logController)return;this.props.options?.hideCurrentPosition&&(this.selCurrent=void 0),this.props.options?.hideSelectionInterval&&(this.selPinned=void 0);const horizontal=this.props.horizontal,elements=this.logController.overlay.elements,rbelm=elements["rubber-band"],pinelm=elements.pinned;rbelm&&pinelm&&(rbelm.style.visibility=void 0===this.selCurrent?"hidden":"visible",pinelm.style.visibility=void 0===this.selPinned?"hidden":"visible",showSelection(rbelm,pinelm,this.selCurrent,this.selPinned,horizontal,this.logController));if(this.props.wellpick){const wps=getWellPicks(this);if(!wps.length)return;let i=0;for(const wp of wps){const horizon=wp.horizon,vPrimary=wp.vPrimary,pinelm=elements["wp"+horizon];if(pinelm){if(showWellPick(pinelm,vPrimary,horizontal,this.logController),this.props.patterns){const pinelm1=elements["wpFill"+horizon];if(pinelm1){const wp2=wps[i+1],vPrimary2=wp2?.vPrimary;fillWellPicks(pinelm1,vPrimary,vPrimary2,horizontal,this.logController)}}i++}}posWellPickTitles(this.logController,this)}}selectContent(selection){const selPinned=selection[1];this.selCurrent===selection[0]&&this.selPinned===selPinned||(this.selCurrent=selection[0],this.selPinned=selPinned,this.selPersistent=void 0!==this.selPinned,this.showSelection(),this.updateInfo())}setContentBaseDomain(domain){return!!this.logController&&setContentBaseDomain(this.logController,domain)}getContentBaseDomain(){return this.logController?function getContentBaseDomain(logViewer){const[b1,b2]=logViewer.scaleHandler.baseDomain();return[b1,b2]}(this.logController):[0,0]}getContentDomain(){return this.logController?function getContentDomain(logViewer){const[d1,d2]=logViewer.domain;return[d1,d2]}(this.logController):[0,0]}getContentZoom(){return this.logController?function getContentZoom(logViewer){const[b1,b2]=logViewer.scaleHandler.baseDomain(),[d1,d2]=logViewer.domain;return Math.abs(b2-b1)/Math.abs(d2-d1)}(this.logController):1}getContentSelection(){return this.logController?[this.selCurrent,this.selPinned]:[void 0,void 0]}setContentScale(value){return function setContentScale(controller,horizontal,value){if(controller){const zoom=getContentBaseScale(controller,horizontal)/value;controller.zoomContent(zoom)}}(this,this.props.horizontal,value)}getContentScale(){const zoomValue=this.getContentZoom();return getContentBaseScale(this,this.props.horizontal)/zoomValue}_graphTrackMax(){if(!this.logController)return 0;const nScaleTracks=(0,utils_tracks.C9)(this.logController.tracks);return this.logController.tracks.length-nScaleTracks}_newTrackScrollPos(pos){let newPos=pos;const posMax=this.getTrackScrollPosMax();return newPos>posMax&&(newPos=posMax),newPos<0&&(newPos=0),newPos}_maxVisibleTrackNum(){return this.props.options?.maxVisibleTrackNum?this.props.options?.maxVisibleTrackNum:this.props.horizontal?3:5}_forceUpdateTitleTooltips(){if(!this.container)return;const elements=this.container.getElementsByClassName("track-title");for(const element of elements)element.textContent&&element.setAttribute("title",element.textContent)}_updateWellLogTitle(){this.title&&!0===this.props.viewTitle&&(this.title.textContent=this.wellLogSets[0]?.header.well??null)}scrollTrackBy(delta){this.setState((state=>({scrollTrackPos:this._newTrackScrollPos(state.scrollTrackPos+delta)})))}scrollTrackTo(pos){this._isMount&&this.setState((state=>{const newPos=this._newTrackScrollPos(pos);return state.scrollTrackPos===newPos?null:{scrollTrackPos:newPos}}))}getTrackScrollPos(){return this.state.scrollTrackPos}getTrackScrollPosMax(){let posMax=this._graphTrackMax()-this._maxVisibleTrackNum();return posMax<0&&(posMax=0),posMax}getTrackZoom(){return this._graphTrackMax()/this._maxVisibleTrackNum()}getSelectedTrackIndices(){return function getSelectedTrackIndices(logViewer){return logViewer?logViewer.tracks.reduce(((indices,track,idx)=>isTrackSelected(0,track)?[...indices,idx]:indices),[]):[]}(this.logController)}setSelectedTrackIndices(selection){const changed=setSelectedTrackIndices(this.logController,selection);return changed&&this.onTrackSelection(),changed}updateInfo(){this.setInfo()}getWellLog(){return this.props.wellLogSets??this.props.welllog}getWellLogSets(){return this.props.wellLogSets?this.props.wellLogSets:Array.isArray(this.props.welllog)?this.props.welllog:this.props.welllog?[this.props.welllog]:void 0}getTemplate(){return this.template}getStyledTemplate(){return{...this.template,tracks:(0,template.Ao)(this.template),styles:[]}}setTemplate(template,noEmit){const tNew=JSON.stringify(template);JSON.stringify(this.template)!==tNew&&(this.template=JSON.parse(tNew),this.setTracks(!0),this.onTemplateChanged(noEmit))}_recomputeTemplateFromController(){const template=this.template,tracks=[];if(this.logController)for(const track of this.logController.tracks){if((0,utils_tracks.Q1)(track))continue;const templateTrack=(0,utils_tracks.Qv)(track);tracks.push((0,deepcopy.A)(templateTrack))}const axes=(0,well_log.Dy)(this.wellLogSets,this.props.axisMnemos);this.setTemplate({name:template.name,scale:{primary:this.props.primaryAxis||"",allowSecondary:template.scale?.allowSecondary&&axes.length>1},tracks:tracks,styles:template.styles})}_addTrack(clickedTrack,templateTrack){if(!this.logController)return console.warn("Log controller not initialized");templateTrack.required=!0;const iNewTrack=function getTrackIndex(logViewer,track){return logViewer.tracks.findIndex((t=>t.id===track.id))}(this.logController,clickedTrack)+1,newTrack=function createNewViewTrack(logViewer,template,position,axesInfo,wellLogSets,colorMapFunctions=[]){const newTrack=(0,utils_tracks.sN)(wellLogSets,axesInfo,template,colorMapFunctions);return newTrack?(function addTrackAtIndex(logViewer,track,position){const newTracks=[...logViewer.tracks];newTracks.splice(position,0,track),logViewer.setTracks(newTracks),logViewer.updateTracks()}(logViewer,newTrack,position),adjustControllerToModifiedTrack(logViewer,newTrack),newTrack):null}(this.logController,templateTrack,iNewTrack,this.getAxesInfo(),this.getWellLogSets()??[]);newTrack&&(this._recomputeTemplateFromController(),this.selectTrack(newTrack,!0),this.scrollTrackBy(1),this.onTrackScroll())}_editTrack(track,newTemplateTrack){if(!this.logController)return console.warn("Log controller not initialized");const oldTitle=track.options.label??"",newTitle=newTemplateTrack.title??"",titleChanged=!oldTitle.localeCompare(newTitle);!function editViewTrack(logViewer,track,newTemplate,axesInfo,wellLogSets,colorMapFunctions=[]){return(0,utils_tracks.OG)(track,newTemplate,wellLogSets,axesInfo,colorMapFunctions),adjustControllerToModifiedTrack(logViewer,track),track}(this.logController,track,newTemplateTrack,this.getAxesInfo(),this.getWellLogSets()??[],this.props.colorMapFunctions),titleChanged&&this._forceUpdateTitleTooltips(),this._recomputeTemplateFromController()}removeTrack(track){if(!this.logController)return console.warn("Log controller not initialized");!function removeViewTrack(logViewer,track){logViewer.removeTrack(track)}(this.logController,track),this.onTrackScroll(),this.onTrackSelection(),this._recomputeTemplateFromController()}isTrackSelected(track){return!!this.logController&&isTrackSelected(this.logController,track)}selectTrack(track,selected){let changed=!1;if(this.logController)for(const _track of this.logController.tracks)selectTrack(this.logController,_track,selected&&track===_track)&&(changed=!0);return changed&&this.onTrackSelection(),changed}addTrackPlot(track,templatePlot){if(!this.logController)return console.warn("Log controller not initialized");(0,utils_tracks.d6)(track,templatePlot,this.getWellLogSets()??[],this.getAxesInfo(),this.props.colorMapFunctions),adjustControllerToModifiedTrack(this.logController,track),this._recomputeTemplateFromController()}_editTrackPlot(track,plot,templatePlot){if(!this.logController)return console.warn("Log controller not initialized");(0,utils_tracks.R3)(track,plot,templatePlot,this.getWellLogSets()??[],this.getAxesInfo(),this.props.colorMapFunctions),adjustControllerToModifiedTrack(this.logController,track),this._recomputeTemplateFromController()}removeTrackPlot(track,plot){if(!this.logController)return console.warn("Log controller not initialized");(0,utils_tracks.Rb)(track,plot),adjustControllerToModifiedTrack(this.logController,track),this._recomputeTemplateFromController()}addTrack(parent,trackCurrent){parent&&function addTrack(parent,wellLogView,onOK){const el=document.createElement("div");el.style.width="10px",el.style.height="13px",parent.appendChild(el),(0,client.H)(el).render(react.createElement(TrackPropertiesDialog,{wellLogView:wellLogView,onOK:onOK}))}(parent,this,this._addTrack.bind(this,trackCurrent))}editTrack(parent,track){if(parent){!function editTrack(parent,wellLogView,templateTrack,onOK){const el=document.createElement("div");el.style.width="10px",el.style.height="13px",parent.appendChild(el),(0,client.H)(el).render(react.createElement(TrackPropertiesDialog,{templateTrack:templateTrack,wellLogView:wellLogView,onOK:onOK}))}(parent,this,(0,utils_tracks.Qv)(track),this._editTrack.bind(this,track))}}addPlot(parent,track){parent&&function addPlot(parent,wellLogView,track){const el=document.createElement("div");el.style.width="10px",el.style.height="13px",parent.appendChild(el),(0,client.H)(el).render(react.createElement(PlotPropertiesDialog,{wellLogView:wellLogView,track:track,onOK:wellLogView.addTrackPlot.bind(wellLogView,track)}))}(parent,this,track)}editPlot(parent,track,plot){if(parent){const templatePlot=function fillPlotTemplate(templateTrack,plot){const options=plot.options,optionsDifferential=plot.options,options1=optionsDifferential.serie1,options2=optionsDifferential.serie2,legend=options.legendInfo(),legendDifferential=legend,legend1=legendDifferential.serie1,legend2=legendDifferential.serie2,scale=templateTrack?.scale!==options.scale?options.scale:void 0;return{style:void 0,type:(0,plots.Kc)(plot),scale:"log"===scale||"linear"===scale?scale:void 0,name:(legend1&&legend1.label?legend1.label:legend.label)||"",name2:legend2&&legend2.label?legend2.label:"",color:(options1?options1.color:options.color)||"",color2:options2?options2.color:"",inverseColor:options.inverseColor||"",fill:(options1?options1.fill:options.fill)||"",fill2:options2?options2.fill:"",colorMapFunctionName:options.colorMapFunction?.name??"",inverseColorMapFunctionName:options.inverseColorMapFunction?.name??"",colorScale:options.colorScale,inverseColorScale:options.inverseColorScale}}((0,utils_tracks.Qv)(track),plot);!function editPlot(parent,wellLogView,track,templatePlot,onOK){const el=document.createElement("div");el.style.width="10px",el.style.height="13px",parent.appendChild(el),(0,client.H)(el).render(react.createElement(PlotPropertiesDialog,{templatePlot:templatePlot,wellLogView:wellLogView,track:track,onOK:onOK}))}(parent,this,track,templatePlot,this._editTrackPlot.bind(this,track,plot))}}createViewTitle(viewTitle){return"object"==typeof viewTitle?viewTitle:!0===viewTitle?this.wellLogSets[0]?.header.well:viewTitle}render(){const horizontal=this.props.horizontal,viewTitle=this.props.viewTitle;return react.createElement("div",{className:"welllogview",style:{flexDirection:horizontal?"row":"column"}},viewTitle&&react.createElement("div",{className:horizontal?"title title-horizontal":"title",ref:el=>this.title=el},this.createViewTitle(viewTitle)),react.createElement("div",{className:"view"},react.createElement("div",{className:"container",ref:el=>this.container=el}),this.state.errorText&&react.createElement("div",{className:"error"},this.state.errorText)))}}const WellLogViewOptionsTypes=prop_types_default().shape({maxContentZoom:prop_types_default().number,maxVisibleTrackNum:prop_types_default().number,checkDatafileSchema:prop_types_default().bool,hideTrackTitle:prop_types_default().bool,hideTrackLegend:prop_types_default().bool,hideCurrentPosition:prop_types_default().bool,hideSelectionInterval:prop_types_default().bool});function _propTypesWellLogView(){return{id:prop_types_default().string,welllog:prop_types_default().oneOfType([prop_types_default().object,prop_types_default().array]),wellLogSets:prop_types_default().arrayOf(prop_types_default().object),template:CommonPropTypes.nY.isRequired,colorMapFunctions:prop_types_default().arrayOf(CommonPropTypes.YH).isRequired,wellpicks:prop_types_default().arrayOf(WellPickPropsType),patternsTable:CommonPropTypes._7,patterns:prop_types_default().arrayOf(CommonPropTypes.QO),horizontal:prop_types_default().bool,primaryAxis:prop_types_default().string,axisTitles:prop_types_default().object,axisMnemos:prop_types_default().object,viewTitle:prop_types_default().oneOfType([prop_types_default().bool,prop_types_default().string,prop_types_default().element]),domain:prop_types_default().arrayOf(prop_types_default().number),selection:prop_types_default().arrayOf(prop_types_default().number),options:WellLogViewOptionsTypes}}WellLogView.propTypes=_propTypesWellLogView();var components_WellLogView=WellLogView;WellLogView.__docgenInfo={description:"",methods:[{name:"createLogViewer",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"getAxesInfo",docblock:null,modifiers:[],params:[],returns:{type:{name:"AxesInfo"}}},{name:"setTracks",docblock:null,modifiers:[],params:[{name:"checkSchema",optional:!0,type:{name:"boolean"}}],returns:{type:{name:"void"}}},{name:"findTrackById",docblock:null,modifiers:[],params:[{name:"trackId",optional:!1,type:{name:"union",raw:"string | number",elements:[{name:"string"},{name:"number"}]}}],returns:{type:{name:"union",raw:"Track | undefined",elements:[{name:"Track"},{name:"undefined"}]}}},{name:"setControllerZoom",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"setControllerSelection",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"setControllerDefaultZoom",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"onTrackScroll",docblock:"Display current state of track scrolling",modifiers:[],params:[],returns:{type:{name:"void"}},description:"Display current state of track scrolling"},{name:"onTrackSelection",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"setInfo",docblock:null,modifiers:[],params:[{name:"x",optional:!0,type:null}],returns:{type:{name:"void"}}},{name:"onContentRescale",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"onContentSelection",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"onTrackMouseEvent",docblock:null,modifiers:[],params:[{name:"ev",optional:!1,type:{name:"TrackMouseEvent",alias:"TrackMouseEvent"}}],returns:{type:{name:"void"}}},{name:"onTrackMouseLeaveEvent",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"onTemplateChanged",docblock:null,modifiers:[],params:[{name:"noEmit",optional:!0,type:{name:"boolean"}}],returns:{type:{name:"void"}}},{name:"zoomContentTo",docblock:null,modifiers:[],params:[{name:"domain",optional:!1,type:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]}}],returns:{type:{name:"boolean"}}},{name:"scrollContentTo",docblock:null,modifiers:[],params:[{name:"f",optional:!1,type:{name:"number"}}],returns:{type:{name:"boolean"}}},{name:"zoomContent",docblock:null,modifiers:[],params:[{name:"zoom",optional:!1,type:{name:"number"}}],returns:{type:{name:"boolean"}}},{name:"showSelection",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"selectContent",docblock:null,modifiers:[],params:[{name:"selection",optional:!1,type:{name:"tuple",raw:"[number | undefined, number | undefined]",elements:[{name:"union",raw:"number | undefined",elements:[{name:"number"},{name:"undefined"}]},{name:"union",raw:"number | undefined",elements:[{name:"number"},{name:"undefined"}]}]}}],returns:{type:{name:"void"}}},{name:"setContentBaseDomain",docblock:null,modifiers:[],params:[{name:"domain",optional:!1,type:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]}}],returns:{type:{name:"boolean"}}},{name:"getContentBaseDomain",docblock:null,modifiers:[],params:[],returns:{type:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]}}},{name:"getContentDomain",docblock:null,modifiers:[],params:[],returns:{type:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]}}},{name:"getContentZoom",docblock:null,modifiers:[],params:[],returns:{type:{name:"number"}}},{name:"getContentSelection",docblock:null,modifiers:[],params:[],returns:{type:{name:"tuple",raw:"[number | undefined, number | undefined]",elements:[{name:"union",raw:"number | undefined",elements:[{name:"number"},{name:"undefined"}]},{name:"union",raw:"number | undefined",elements:[{name:"number"},{name:"undefined"}]}]}}},{name:"setContentScale",docblock:null,modifiers:[],params:[{name:"value",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"getContentScale",docblock:null,modifiers:[],params:[],returns:{type:{name:"number"}}},{name:"_graphTrackMax",docblock:null,modifiers:[],params:[],returns:{type:{name:"number"}}},{name:"_newTrackScrollPos",docblock:null,modifiers:[],params:[{name:"pos",optional:!1,type:{name:"number"}}],returns:{type:{name:"number"}}},{name:"_maxVisibleTrackNum",docblock:null,modifiers:[],params:[],returns:{type:{name:"number"}}},{name:"_forceUpdateTitleTooltips",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"_updateWellLogTitle",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"scrollTrackBy",docblock:null,modifiers:[],params:[{name:"delta",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"scrollTrackTo",docblock:null,modifiers:[],params:[{name:"pos",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"getTrackScrollPos",docblock:null,modifiers:[],params:[],returns:{type:{name:"number"}}},{name:"getTrackScrollPosMax",docblock:null,modifiers:[],params:[],returns:{type:{name:"number"}}},{name:"getTrackZoom",docblock:null,modifiers:[],params:[],returns:{type:{name:"number"}}},{name:"getSelectedTrackIndices",docblock:null,modifiers:[],params:[],returns:{type:{name:"Array",elements:[{name:"number"}],raw:"number[]"}}},{name:"setSelectedTrackIndices",docblock:null,modifiers:[],params:[{name:"selection",optional:!1,type:{name:"Array",elements:[{name:"number"}],raw:"number[]"}}],returns:{type:{name:"boolean"}}},{name:"updateInfo",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"getWellLog",docblock:"@deprecated Use getWellLogSets instead",modifiers:[],params:[],returns:{type:{name:"union",raw:"WellLogSet[] | WellLogSet | undefined",elements:[{name:"Array",elements:[{name:"signature",type:"object",raw:"{\n    header: WellLogHeader;\n    curves: WellLogCurve[];\n    data: WellLogDataRow[];\n\n    metadata_discrete?: Record<string, WellLogMetadataDiscrete>;\n}",signature:{properties:[{key:"header",value:{name:"signature",type:"object",raw:"{\n    name?: string; // Log name\n    description?: string; // Log description\n    externalIds?: Record<string, string>; // IDs within external storage, key being the storage name, and value being the ID.\n    well?: string; // Well name\n    wellbore?: string; // Wellbore name\n    filed?: string; // Field name\n    country?: string; // Country of operation\n    date?: datetime; // Logging date\n    operator?: string; // Operator company name\n    serviceCompany?: string; // Service company name\n    runNumber?: string; // Run number\n    elevation?: float; // Vertical distance between measured depth 0.0 and mean sea level in SI unit (meters)\n    source?: string; // Source system or process of this log\n    startIndex?: number /*According to index value type*/; // Value of the first index. Unit according to index curve.\n    endIndex?: number /*According to index value type*/; // Value of the last index. Unit according to index curve.\n    step?: number /*According to index value type*/; // Distance between indices if regularly sampled. Unit according to index curve. If log is time based, milliseconds assumed.\n    dataUri?: string; //\tPoint to data source in case this is kept separate. Can be absolute or relative according to the URI specification.\n    //...\n}",signature:{properties:[{key:"name",value:{name:"string",required:!1}},{key:"description",value:{name:"string",required:!1}},{key:"externalIds",value:{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>",required:!1}},{key:"well",value:{name:"string",required:!1}},{key:"wellbore",value:{name:"string",required:!1}},{key:"filed",value:{name:"string",required:!1}},{key:"country",value:{name:"string",required:!1}},{key:"date",value:{name:"string",required:!1}},{key:"operator",value:{name:"string",required:!1}},{key:"serviceCompany",value:{name:"string",required:!1}},{key:"runNumber",value:{name:"string",required:!1}},{key:"elevation",value:{name:"number",required:!1}},{key:"source",value:{name:"string",required:!1}},{key:"startIndex",value:{name:"number",required:!1}},{key:"endIndex",value:{name:"number",required:!1}},{key:"step",value:{name:"number",required:!1}},{key:"dataUri",value:{name:"string",required:!1}}]},required:!0}},{key:"curves",value:{name:"Array",elements:[{name:"signature",type:"object",raw:"{\n    name: string; // Curve name or mnemonic. Mandatory. Non-null.\n    description?: string | null; // Curve description. Optional.\n    quantity?: string | null; // Curve quantity such as length, pressure, force etc. Optional.\n    unit?: string | null; // Unit of measurement such as m, ft, bar, etc. Optional.\n    valueType?: string | null; // Curve value type: float, integer, string, datetime or boolean. Non-null. Optional. float assumed if not present.\n    dimensions?: integer; //  \tNumber of dimensions. [1,>. Non-null. Optional. 1 assumed if not present.\n    // Not supported yet:\n    //axis?: \tarray of curve definition; \t// A detailed description of the multi-dimensional structure of the curve in case this spans multiple axes. One element per axis. The combined product of the axis diemsnsions elements must equal the dimensions of the curve. Optional.\n    //maxSize?: integer; \t// Maximum storage size (number of bytes) for UTF-8 string data. Used with binary storage in order to align the curve data. [0,>. Optional. 20 assumed if not present. Ignored for curves where valueType is other than string.\n}",signature:{properties:[{key:"name",value:{name:"string",required:!0}},{key:"description",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"quantity",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"unit",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"valueType",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"dimensions",value:{name:"number",required:!1}}]}}],raw:"WellLogCurve[]",required:!0}},{key:"data",value:{name:"Array",elements:[{name:"Array",elements:[{name:"unknown"}],raw:"(number | string | null)[]"}],raw:"WellLogDataRow[]",required:!0}},{key:"metadata_discrete",value:{name:"Record",elements:[{name:"string"},{name:"signature",type:"object",raw:'{\n    attributes: string[] /* ["color", "code" ] */;\n    objects: WellLogMetadataDiscreteObjects;\n}',signature:{properties:[{key:"attributes",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!0}},{key:"objects",value:{name:"Record",elements:[{name:"string"},{name:"Array",elements:[{name:"unknown"}],raw:"(number[] | number)[]"}],raw:"Record<\n    string,\n    (number[] | number)[]\n>",required:!0}}]}}],raw:"Record<string, WellLogMetadataDiscrete>",required:!1}}]}}],raw:"WellLogSet[]"},{name:"signature",type:"object",raw:"{\n    header: WellLogHeader;\n    curves: WellLogCurve[];\n    data: WellLogDataRow[];\n\n    metadata_discrete?: Record<string, WellLogMetadataDiscrete>;\n}",signature:{properties:[{key:"header",value:{name:"signature",type:"object",raw:"{\n    name?: string; // Log name\n    description?: string; // Log description\n    externalIds?: Record<string, string>; // IDs within external storage, key being the storage name, and value being the ID.\n    well?: string; // Well name\n    wellbore?: string; // Wellbore name\n    filed?: string; // Field name\n    country?: string; // Country of operation\n    date?: datetime; // Logging date\n    operator?: string; // Operator company name\n    serviceCompany?: string; // Service company name\n    runNumber?: string; // Run number\n    elevation?: float; // Vertical distance between measured depth 0.0 and mean sea level in SI unit (meters)\n    source?: string; // Source system or process of this log\n    startIndex?: number /*According to index value type*/; // Value of the first index. Unit according to index curve.\n    endIndex?: number /*According to index value type*/; // Value of the last index. Unit according to index curve.\n    step?: number /*According to index value type*/; // Distance between indices if regularly sampled. Unit according to index curve. If log is time based, milliseconds assumed.\n    dataUri?: string; //\tPoint to data source in case this is kept separate. Can be absolute or relative according to the URI specification.\n    //...\n}",signature:{properties:[{key:"name",value:{name:"string",required:!1}},{key:"description",value:{name:"string",required:!1}},{key:"externalIds",value:{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>",required:!1}},{key:"well",value:{name:"string",required:!1}},{key:"wellbore",value:{name:"string",required:!1}},{key:"filed",value:{name:"string",required:!1}},{key:"country",value:{name:"string",required:!1}},{key:"date",value:{name:"string",required:!1}},{key:"operator",value:{name:"string",required:!1}},{key:"serviceCompany",value:{name:"string",required:!1}},{key:"runNumber",value:{name:"string",required:!1}},{key:"elevation",value:{name:"number",required:!1}},{key:"source",value:{name:"string",required:!1}},{key:"startIndex",value:{name:"number",required:!1}},{key:"endIndex",value:{name:"number",required:!1}},{key:"step",value:{name:"number",required:!1}},{key:"dataUri",value:{name:"string",required:!1}}]},required:!0}},{key:"curves",value:{name:"Array",elements:[{name:"signature",type:"object",raw:"{\n    name: string; // Curve name or mnemonic. Mandatory. Non-null.\n    description?: string | null; // Curve description. Optional.\n    quantity?: string | null; // Curve quantity such as length, pressure, force etc. Optional.\n    unit?: string | null; // Unit of measurement such as m, ft, bar, etc. Optional.\n    valueType?: string | null; // Curve value type: float, integer, string, datetime or boolean. Non-null. Optional. float assumed if not present.\n    dimensions?: integer; //  \tNumber of dimensions. [1,>. Non-null. Optional. 1 assumed if not present.\n    // Not supported yet:\n    //axis?: \tarray of curve definition; \t// A detailed description of the multi-dimensional structure of the curve in case this spans multiple axes. One element per axis. The combined product of the axis diemsnsions elements must equal the dimensions of the curve. Optional.\n    //maxSize?: integer; \t// Maximum storage size (number of bytes) for UTF-8 string data. Used with binary storage in order to align the curve data. [0,>. Optional. 20 assumed if not present. Ignored for curves where valueType is other than string.\n}",signature:{properties:[{key:"name",value:{name:"string",required:!0}},{key:"description",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"quantity",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"unit",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"valueType",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"dimensions",value:{name:"number",required:!1}}]}}],raw:"WellLogCurve[]",required:!0}},{key:"data",value:{name:"Array",elements:[{name:"Array",elements:[{name:"unknown"}],raw:"(number | string | null)[]"}],raw:"WellLogDataRow[]",required:!0}},{key:"metadata_discrete",value:{name:"Record",elements:[{name:"string"},{name:"signature",type:"object",raw:'{\n    attributes: string[] /* ["color", "code" ] */;\n    objects: WellLogMetadataDiscreteObjects;\n}',signature:{properties:[{key:"attributes",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!0}},{key:"objects",value:{name:"Record",elements:[{name:"string"},{name:"Array",elements:[{name:"unknown"}],raw:"(number[] | number)[]"}],raw:"Record<\n    string,\n    (number[] | number)[]\n>",required:!0}}]}}],raw:"Record<string, WellLogMetadataDiscrete>",required:!1}}]}},{name:"undefined"}]}},description:null},{name:"getWellLogSets",docblock:null,modifiers:[],params:[],returns:{type:{name:"union",raw:"WellLogSet[] | undefined",elements:[{name:"Array",elements:[{name:"signature",type:"object",raw:"{\n    header: WellLogHeader;\n    curves: WellLogCurve[];\n    data: WellLogDataRow[];\n\n    metadata_discrete?: Record<string, WellLogMetadataDiscrete>;\n}",signature:{properties:[{key:"header",value:{name:"signature",type:"object",raw:"{\n    name?: string; // Log name\n    description?: string; // Log description\n    externalIds?: Record<string, string>; // IDs within external storage, key being the storage name, and value being the ID.\n    well?: string; // Well name\n    wellbore?: string; // Wellbore name\n    filed?: string; // Field name\n    country?: string; // Country of operation\n    date?: datetime; // Logging date\n    operator?: string; // Operator company name\n    serviceCompany?: string; // Service company name\n    runNumber?: string; // Run number\n    elevation?: float; // Vertical distance between measured depth 0.0 and mean sea level in SI unit (meters)\n    source?: string; // Source system or process of this log\n    startIndex?: number /*According to index value type*/; // Value of the first index. Unit according to index curve.\n    endIndex?: number /*According to index value type*/; // Value of the last index. Unit according to index curve.\n    step?: number /*According to index value type*/; // Distance between indices if regularly sampled. Unit according to index curve. If log is time based, milliseconds assumed.\n    dataUri?: string; //\tPoint to data source in case this is kept separate. Can be absolute or relative according to the URI specification.\n    //...\n}",signature:{properties:[{key:"name",value:{name:"string",required:!1}},{key:"description",value:{name:"string",required:!1}},{key:"externalIds",value:{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>",required:!1}},{key:"well",value:{name:"string",required:!1}},{key:"wellbore",value:{name:"string",required:!1}},{key:"filed",value:{name:"string",required:!1}},{key:"country",value:{name:"string",required:!1}},{key:"date",value:{name:"string",required:!1}},{key:"operator",value:{name:"string",required:!1}},{key:"serviceCompany",value:{name:"string",required:!1}},{key:"runNumber",value:{name:"string",required:!1}},{key:"elevation",value:{name:"number",required:!1}},{key:"source",value:{name:"string",required:!1}},{key:"startIndex",value:{name:"number",required:!1}},{key:"endIndex",value:{name:"number",required:!1}},{key:"step",value:{name:"number",required:!1}},{key:"dataUri",value:{name:"string",required:!1}}]},required:!0}},{key:"curves",value:{name:"Array",elements:[{name:"signature",type:"object",raw:"{\n    name: string; // Curve name or mnemonic. Mandatory. Non-null.\n    description?: string | null; // Curve description. Optional.\n    quantity?: string | null; // Curve quantity such as length, pressure, force etc. Optional.\n    unit?: string | null; // Unit of measurement such as m, ft, bar, etc. Optional.\n    valueType?: string | null; // Curve value type: float, integer, string, datetime or boolean. Non-null. Optional. float assumed if not present.\n    dimensions?: integer; //  \tNumber of dimensions. [1,>. Non-null. Optional. 1 assumed if not present.\n    // Not supported yet:\n    //axis?: \tarray of curve definition; \t// A detailed description of the multi-dimensional structure of the curve in case this spans multiple axes. One element per axis. The combined product of the axis diemsnsions elements must equal the dimensions of the curve. Optional.\n    //maxSize?: integer; \t// Maximum storage size (number of bytes) for UTF-8 string data. Used with binary storage in order to align the curve data. [0,>. Optional. 20 assumed if not present. Ignored for curves where valueType is other than string.\n}",signature:{properties:[{key:"name",value:{name:"string",required:!0}},{key:"description",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"quantity",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"unit",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"valueType",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"dimensions",value:{name:"number",required:!1}}]}}],raw:"WellLogCurve[]",required:!0}},{key:"data",value:{name:"Array",elements:[{name:"Array",elements:[{name:"unknown"}],raw:"(number | string | null)[]"}],raw:"WellLogDataRow[]",required:!0}},{key:"metadata_discrete",value:{name:"Record",elements:[{name:"string"},{name:"signature",type:"object",raw:'{\n    attributes: string[] /* ["color", "code" ] */;\n    objects: WellLogMetadataDiscreteObjects;\n}',signature:{properties:[{key:"attributes",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!0}},{key:"objects",value:{name:"Record",elements:[{name:"string"},{name:"Array",elements:[{name:"unknown"}],raw:"(number[] | number)[]"}],raw:"Record<\n    string,\n    (number[] | number)[]\n>",required:!0}}]}}],raw:"Record<string, WellLogMetadataDiscrete>",required:!1}}]}}],raw:"WellLogSet[]"},{name:"undefined"}]}}},{name:"getTemplate",docblock:null,modifiers:[],params:[],returns:{type:{name:"Template"}}},{name:"getStyledTemplate",docblock:null,modifiers:[],params:[],returns:{type:{name:"Template"}}},{name:"setTemplate",docblock:null,modifiers:[],params:[{name:"template",optional:!1,type:{name:"Template",alias:"Template"}},{name:"noEmit",optional:!0,type:{name:"boolean"}}],returns:{type:{name:"void"}}},{name:"_recomputeTemplateFromController",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"_addTrack",docblock:null,modifiers:[],params:[{name:"clickedTrack",optional:!1,type:{name:"Track",alias:"Track"}},{name:"templateTrack",optional:!1,type:{name:"signature",type:"object",raw:"{\n    title?: string; // if it is missed then a name or description of the first plot is used (see makeTrackHeader())\n    titleTooltip?: string; // tooltip for mouse hover over title\n    required?: boolean;\n    /**\n     * Relative track width when used in a LogController, i.e. a track with width set to\n     * 3 will be three times wider than tracks set to width 1.\n     *\n     * Default is 1\n     */\n    width?: number;\n    plots: TemplatePlot[];\n    scale?: TemplatePlotScale; // 'linear' or 'log', default first plot scale\n    domain?: [number, number]; // min, max values, default all plots domain\n}",signature:{properties:[{key:"title",value:{name:"string",required:!1}},{key:"titleTooltip",value:{name:"string",required:!1}},{key:"required",value:{name:"boolean",required:!1}},{key:"width",value:{name:"number",required:!1},description:"Relative track width when used in a LogController, i.e. a track with width set to\n3 will be three times wider than tracks set to width 1.\n\nDefault is 1"},{key:"plots",value:{name:"Array",elements:[{name:"TemplatePlot"}],raw:"TemplatePlot[]",required:!0}},{key:"scale",value:{name:"union",raw:'"linear" | "log"',elements:[{name:"literal",value:'"linear"'},{name:"literal",value:'"log"'}],required:!1}},{key:"domain",value:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}],required:!1}}]},alias:"TemplateTrack"}}],returns:{type:{name:"void"}}},{name:"_editTrack",docblock:null,modifiers:[],params:[{name:"track",optional:!1,type:{name:"Track",alias:"Track"}},{name:"newTemplateTrack",optional:!1,type:{name:"signature",type:"object",raw:"{\n    title?: string; // if it is missed then a name or description of the first plot is used (see makeTrackHeader())\n    titleTooltip?: string; // tooltip for mouse hover over title\n    required?: boolean;\n    /**\n     * Relative track width when used in a LogController, i.e. a track with width set to\n     * 3 will be three times wider than tracks set to width 1.\n     *\n     * Default is 1\n     */\n    width?: number;\n    plots: TemplatePlot[];\n    scale?: TemplatePlotScale; // 'linear' or 'log', default first plot scale\n    domain?: [number, number]; // min, max values, default all plots domain\n}",signature:{properties:[{key:"title",value:{name:"string",required:!1}},{key:"titleTooltip",value:{name:"string",required:!1}},{key:"required",value:{name:"boolean",required:!1}},{key:"width",value:{name:"number",required:!1},description:"Relative track width when used in a LogController, i.e. a track with width set to\n3 will be three times wider than tracks set to width 1.\n\nDefault is 1"},{key:"plots",value:{name:"Array",elements:[{name:"TemplatePlot"}],raw:"TemplatePlot[]",required:!0}},{key:"scale",value:{name:"union",raw:'"linear" | "log"',elements:[{name:"literal",value:'"linear"'},{name:"literal",value:'"log"'}],required:!1}},{key:"domain",value:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}],required:!1}}]},alias:"TemplateTrack"}}],returns:{type:{name:"void"}}},{name:"removeTrack",docblock:null,modifiers:[],params:[{name:"track",optional:!1,type:{name:"Track",alias:"Track"}}],returns:{type:{name:"void"}}},{name:"isTrackSelected",docblock:null,modifiers:[],params:[{name:"track",optional:!1,type:{name:"Track",alias:"Track"}}],returns:{type:{name:"boolean"}}},{name:"selectTrack",docblock:null,modifiers:[],params:[{name:"track",optional:!1,type:{name:"Track",alias:"Track"}},{name:"selected",optional:!1,type:{name:"boolean"}}],returns:{type:{name:"boolean"}}},{name:"addTrackPlot",docblock:null,modifiers:[],params:[{name:"track",optional:!1,type:{name:"Track",alias:"Track"}},{name:"templatePlot",optional:!1,type:{name:"TemplatePlot",alias:"TemplatePlot"}}],returns:{type:{name:"void"}}},{name:"_editTrackPlot",docblock:null,modifiers:[],params:[{name:"track",optional:!1,type:{name:"Track",alias:"Track"}},{name:"plot",optional:!1,type:{name:"Plot",alias:"Plot"}},{name:"templatePlot",optional:!1,type:{name:"TemplatePlot",alias:"TemplatePlot"}}],returns:{type:{name:"void"}}},{name:"removeTrackPlot",docblock:null,modifiers:[],params:[{name:"track",optional:!1,type:{name:"Track",alias:"Track"}},{name:"plot",optional:!1,type:{name:"Plot",alias:"Plot"}}],returns:{type:{name:"void"}}},{name:"addTrack",docblock:null,modifiers:[],params:[{name:"parent",optional:!1,type:{name:"union",raw:"HTMLElement | null",elements:[{name:"HTMLElement"},{name:"null"}]}},{name:"trackCurrent",optional:!1,type:{name:"Track",alias:"Track"}}],returns:{type:{name:"void"}}},{name:"editTrack",docblock:null,modifiers:[],params:[{name:"parent",optional:!1,type:{name:"union",raw:"HTMLElement | null",elements:[{name:"HTMLElement"},{name:"null"}]}},{name:"track",optional:!1,type:{name:"Track",alias:"Track"}}],returns:{type:{name:"void"}}},{name:"addPlot",docblock:null,modifiers:[],params:[{name:"parent",optional:!1,type:{name:"union",raw:"HTMLElement | null",elements:[{name:"HTMLElement"},{name:"null"}]}},{name:"track",optional:!1,type:{name:"Track",alias:"Track"}}],returns:{type:{name:"void"}}},{name:"editPlot",docblock:null,modifiers:[],params:[{name:"parent",optional:!1,type:{name:"union",raw:"HTMLElement | null",elements:[{name:"HTMLElement"},{name:"null"}]}},{name:"track",optional:!1,type:{name:"Track",alias:"Track"}},{name:"plot",optional:!1,type:{name:"Plot",alias:"Plot"}}],returns:{type:{name:"void"}}},{name:"createViewTitle",docblock:null,modifiers:[],params:[{name:"viewTitle",optional:!1,type:{name:"union",raw:"string | boolean | JSX.Element",elements:[{name:"string"},{name:"boolean"},{name:"JSX.Element"}]}}],returns:{type:{name:"ReactNode"}}}],displayName:"WellLogView"}},"./packages/well-log-viewer/src/utils/arrays.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";function indexOfElementByName(array,name){if(array&&name){const nameUpper=name.toUpperCase();let i=0;for(const element of array){if(element.name&&element.name.toUpperCase()===nameUpper)return i;i++}}return-1}function indexOfElementByNames(array,names){if(array&&names){let i=0;for(const element of array){if(element.name&&names.indexOf(element.name.toUpperCase())>=0)return i;i++}}return-1}function elementByName(namedArr,name){return namedArr[indexOfElementByName(namedArr,name)]}function toggleId(trackIds,trackId){const i=trackIds.indexOf(trackId);i<0?trackIds.push(trackId):trackIds.splice(i,1)}function isEqualRanges(d1,d2){return d1?d2?d1[0]===d2[0]&&d1[1]===d2[1]:!d1:!d2}function isEqDomains(d1,d2){if(d1.some(Number.isNaN)&&d2.some(Number.isNaN))return!0;const eps=1e-5*Math.abs(d1[1]-d1[0]+(d2[1]-d2[0]));return Math.abs(d1[0]-d2[0])<eps&&Math.abs(d1[1]-d2[1])<eps}function isEqualArrays(d1,d2){if(!d1)return!d2;if(!d2)return!d1;const n=d1.length;if(n!==d2.length)return!1;for(let i=0;i<n;i++)if(d1[i]!==d2[i])return!1;return!0}__webpack_require__.d(__webpack_exports__,{Bk:function(){return indexOfElementByNames},Sw:function(){return toggleId},Yl:function(){return indexOfElementByName},hC:function(){return isEqualRanges},j1:function(){return isEqualArrays},q_:function(){return isEqDomains},x2:function(){return elementByName}})},"./packages/well-log-viewer/src/utils/axes.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{NR:function(){return axisMnemos},Ws:function(){return getAxisTitle},x7:function(){return axisTitles}});const axisTitles={md:"MD",tvd:"TVD",time:"TIME"},axisMnemos={md:["DEPTH","DEPT","MD","TDEP","MD_RKB"],tvd:["TVD","TVDSS","DVER","TVD_MSL"],time:["TIME"]};function getAxisTitle(axes,axisName){return axes.titles?axes.titles[axisName]:axisName}},"./packages/well-log-viewer/src/utils/color-function.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{T:function(){return isFunction},q:function(){return getColorMapFunction}});var _arrays__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./packages/well-log-viewer/src/utils/arrays.ts");function isFunction(colorMapFunction){return!!colorMapFunction&&!!colorMapFunction.func}function getColorMapFunction(functionName,colorMapFunctions){if(!functionName)return;colorMapFunctions||(console.error("No color functions provided for graph!"),colorMapFunctions=[]);const colorFunction=(0,_arrays__WEBPACK_IMPORTED_MODULE_0__.x2)(colorMapFunctions,functionName);return colorFunction||console.error(`Color function '${functionName}' not found`),colorFunction}},"./packages/well-log-viewer/src/utils/color-table.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{Ar:function(){return color4ToString},BI:function(){return getInterpolatedColor},Gy:function(){return getInterpolatedColorString}});var _color_function__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./packages/well-log-viewer/src/utils/color-function.ts");function binarySearch(array,v){let lo=-1,hi=array.length;for(;1+lo<hi;){const mi=lo+(hi-lo>>1);array[mi][0]>v?hi=mi:lo=mi}return hi}function colorToString(color,cDefault){if(!color)return cDefault;return"#"+(16777216|color[0]<<16|color[1]<<8|color[2]).toString(16).substring(1)}function color4ToString(color){return"#"+(16777216|color[1]<<16|color[2]<<8|color[3]).toString(16).substring(1)}function getInterpolatedColor(colorMapFunction,v){if((0,_color_function__WEBPACK_IMPORTED_MODULE_0__.T)(colorMapFunction)){return colorMapFunction.func(v)}const table=colorMapFunction,cNaN=table.colorNaN?table.colorNaN:[255,255,255];if(Number.isNaN(v))return cNaN;const colors=table.colors,j=binarySearch(colors,v),cBelow=table.colorBelow?table.colorBelow:cNaN;if(j<=0)return cBelow;const cAbove=table.colorAbove?table.colorAbove:cBelow;if(j>=colors.length)return cAbove;const color0=colors[j-1],color=colors[j],f=(v-color0[0])/(color[0]-color0[0]);return[color0[1]+f*(color[1]-color0[1]),color0[2]+f*(color[2]-color0[2]),color0[3]+f*(color[3]-color0[3])]}function getInterpolatedColorString(colorMapFunction,v){if((0,_color_function__WEBPACK_IMPORTED_MODULE_0__.T)(colorMapFunction)){return colorToString(colorMapFunction.func(v),"#ffffff")}const colorTable=colorMapFunction,cNaN=colorToString(colorTable.colorNaN,"#ffffff");if(Number.isNaN(v))return cNaN;const cBelow=colorToString(colorTable.colorBelow,cNaN),cAbove=colorToString(colorTable.colorAbove,cBelow),colors=colorTable.colors,j=binarySearch(colors,v);let c;if(j<=0)c=cBelow;else if(j>=colors.length)c=cAbove;else{const color0=colors[j-1],color=colors[j],f=(v-color0[0])/(color[0]-color0[0]),p=16777216|color0[1]+f*(color[1]-color0[1])<<16|color0[2]+f*(color[2]-color0[2])<<8|color0[3]+f*(color[3]-color0[3]);if(c="#"+p.toString(16).substring(1),7!==c.length)return console.error("wrong color table "),console.log(c,p,p.toString(16),f,color,color0),cNaN}return c}},"./packages/well-log-viewer/src/utils/deepcopy.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";function deepCopy(source){return JSON.parse(JSON.stringify(source))}__webpack_require__.d(__webpack_exports__,{A:function(){return deepCopy}})},"./packages/well-log-viewer/src/utils/gradientfill-plot.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{A:function(){return GradientFillPlot}});var src=__webpack_require__("./node_modules/d3/src/index.js"),index_umd=__webpack_require__("./node_modules/@equinor/videx-wellog/dist/index.umd.js");function renderBasicPlotLegend(g,bounds,label,unit,domain,color,addLabelBg=!1){const x1=bounds.left+2,x2=Math.max(x1,bounds.left+bounds.width-2),lineY=bounds.top+.5*bounds.height,lineWidth=.1*bounds.height,line=g.append("line");(0,index_umd.setProps)(line,{attrs:{x1:x1,x2:x2,y1:lineY,y2:lineY},styles:{"stroke-width":lineWidth,stroke:color,fill:color}}),function renderTextLabels(g,bounds,label,unit,domain,color,addLabelBg=!1){const{height:h,width:w,top:top,left:left}=bounds,textSize=.35*h,subTextSize=.85*textSize,subY=top+.5*h+subTextSize,centerX=left+w/2,[min,max]=domain,labelTransform=`translate(${centerX},${top+textSize})`;let labelBg;addLabelBg&&(labelBg=g.append("rect").classed("label-bg",!0).attr("fill","white"));const labelText=g.append("text").text(label);if((0,index_umd.setProps)(labelText,{styles:{"text-anchor":"middle",fill:color},attrs:{class:"legend-label","font-size":`${textSize}px`,transform:labelTransform}}),addLabelBg){const bbox=labelText.node().getBBox();(0,index_umd.setAttrs)(labelBg,{x:centerX+bbox.x-1,y:top+1,width:bbox.width+2,height:.5*h-2})}if(unit){const unitTransform=`translate(${centerX},${subY})`,unitText=g.append("text").text(unit);(0,index_umd.setProps)(unitText,{styles:{"text-anchor":"middle",fill:color},attrs:{class:"legend-unit","font-size":`${subTextSize}px`,transform:unitTransform}})}const minText=Math.abs(min)>1e3&&min%1e3==0?`${Math.round(min/1e3)}k`:`${min}`,maxText=Math.abs(max)>1e3&&max%1e3==0?`${Math.round(max/1e3)}k`:`${max}`,minDomain=g.append("text").text(minText);(0,index_umd.setProps)(minDomain,{styles:{"text-anchor":"start",fill:color},attrs:{class:"legend-domain","font-size":`${subTextSize}px`,x:left+2,y:subY}});const maxDomain=g.append("text").text(maxText);(0,index_umd.setProps)(maxDomain,{styles:{"text-anchor":"end",fill:color},attrs:{class:"legend-domain","font-size":`${subTextSize}px`,x:left+w-2,y:subY}})}(g,bounds,label,unit,domain,color,addLabelBg)}var color_function=__webpack_require__("./packages/well-log-viewer/src/utils/color-function.ts"),color_table=__webpack_require__("./packages/well-log-viewer/src/utils/color-table.ts");let __idGradient=0;function createGradient(g,colorMapFunction,rLogarithmic){const id="grad"+ ++__idGradient,lg=g.append("defs").append("linearGradient").attr("id",id).attr("x1","0%").attr("x2","100%").attr("y1","0%").attr("y2","0%");if(void 0!==rLogarithmic){const yDelta=Math.log(rLogarithmic),d=rLogarithmic-1,nIntervals=25;for(let i=0;i<=nIntervals;i++){const fraction=i/nIntervals,y=1+fraction*d,v=Math.log(y)/yDelta,c=(0,color_table.Gy)(colorMapFunction,v);lg.append("stop").attr("offset",100*fraction+"%").style("stop-color",c)}}else if((0,color_function.T)(colorMapFunction)){const nIntervals=25;for(let i=0;i<=nIntervals;i++){const fraction=i/nIntervals,c=(0,color_table.Gy)(colorMapFunction,fraction);lg.append("stop").attr("offset",100*fraction+"%").style("stop-color",c)}}else{const colors=colorMapFunction.colors;for(let i=0;i<colors.length;i++){const color=colors[i],c=(0,color_table.Ar)(color);lg.append("stop").attr("offset",100*color[0]+"%").style("stop-color",c)}}return id}function renderGradientFillPlotLegend(g,bounds,legendInfo,plot){const options=plot.options,{top:top,left:left,width:width,height:height}=bounds,shadeH=height/2,shadeY=top,fillOpacity=Math.min((options.fillOpacity||0)+.25,1);if(options.inverseColor||options.inverseColorMapFunction){const[min,max]=plot.scale.domain(),minIsLeft=min<=max,centerX=left+width/2,useMinAsBase=void 0===options.useMinAsBase||options.useMinAsBase,shadeW=Math.max(0,width-2);let fillNrm=useMinAsBase&&minIsLeft?plot.options.color:options.inverseColor,fillInv=useMinAsBase&&minIsLeft?options.inverseColor:plot.options.color,colorMapFunction=useMinAsBase&&minIsLeft?options.colorMapFunction:options.inverseColorMapFunction;if(colorMapFunction){fillNrm="url(#"+createGradient(g,colorMapFunction,"linear"===options.scale&&"log"===options.colorScale?max/min:void 0)+")"}if(colorMapFunction=useMinAsBase&&minIsLeft?options.inverseColorMapFunction:options.colorMapFunction,colorMapFunction){fillInv="url(#"+createGradient(g,colorMapFunction,"linear"===options.scale&&"log"===(options.inverseColorScale||options.colorScale)?max/min:void 0)+")"}(0,index_umd.setAttrs)(g.append("rect"),{x:left+2,y:shadeY,width:shadeW/2,height:shadeH,fill:fillNrm,"fill-opacity":fillOpacity}),(0,index_umd.setAttrs)(g.append("rect"),{x:centerX,y:shadeY,width:shadeW/2,height:shadeH,fill:fillInv,"fill-opacity":fillOpacity})}else{let fillNrm=plot.options.color;const colorMapFunction=options.colorMapFunction;if(colorMapFunction){const[min,max]=plot.scale.domain();fillNrm="url(#"+createGradient(g,colorMapFunction,"linear"===options.scale&&"log"===options.colorScale?max/min:void 0)+")"}(0,index_umd.setAttrs)(g.append("rect"),{x:left+2,y:shadeY,width:Math.max(0,width-4),height:shadeH,fill:fillNrm,"fill-opacity":fillOpacity})}renderBasicPlotLegend(g,bounds,legendInfo.label?legendInfo.label:"",legendInfo.unit?legendInfo.unit:"",plot.scale.domain(),plot.options.color?plot.options.color:"",!0)}function gradientfill_plot_createGradient(ctx,yscale,horizontal,plotdata,xscale,colorMapFunction,scale){const dataFrom=plotdata[0],dataTo=plotdata[plotdata.length-1],sFrom=yscale(dataFrom[0]),sTo=yscale(dataTo[0]),gradient=horizontal?ctx.createLinearGradient(sFrom,0,sTo,0):ctx.createLinearGradient(0,sFrom,0,sTo);if("log"===scale){const[min,max]=xscale.domain(),xFrom=dataFrom[0],xDelta=dataTo[0]-xFrom,yFrom=Math.log(min),yDelta=Math.log(max)-yFrom;for(const data of plotdata){const stop=(data[0]-xFrom)/xDelta;if(0<=stop&&stop<=1){const v=(Math.log(data[1])-yFrom)/yDelta,c=(0,color_table.Gy)(colorMapFunction,v);gradient.addColorStop(stop,c)}}}else{const xFrom=dataFrom[0],xDelta=dataTo[0]-xFrom,yFrom=xscale.domain()[0],yDelta=xscale.domain()[1]-yFrom;for(const data of plotdata){const stop=(data[0]-xFrom)/xDelta;if(0<=stop&&stop<=1){const v=(data[1]-yFrom)/yDelta,c=(0,color_table.Gy)(colorMapFunction,v);gradient.addColorStop(stop,c)}}}return gradient}class GradientFillPlot extends index_umd.Plot{constructor(id,options={}){super(id,options),this.options.renderLegend=renderGradientFillPlotLegend}plot(ctx,scale){const{scale:xscale,data:plotdata}=this;if(!xscale||plotdata.length<2)return;const options=this.options;if(options.hidden)return;const useMinAsBase=void 0===options.useMinAsBase||options.useMinAsBase,[d0,d1]=xscale.domain(),dmin=Math.min(d0,d1),dmax=Math.max(d0,d1),rmin=xscale(dmin),rmax=xscale(dmax),zeroValue=useMinAsBase?rmin:rmax;ctx.save();const areaFunction=(0,src.Wcw)().defined((d=>options.defined(d[1],d[0]))).context(ctx);if(options.horizontal?areaFunction.y1((d=>xscale(d[1]))).y0(zeroValue).x((d=>scale(d[0]))):areaFunction.x1((d=>xscale(d[1]))).x0(zeroValue).y((d=>scale(d[0]))),ctx.globalAlpha=options.fillOpacity||1,options.inverseColor||options.inverseColorMapFunction){const inverseValue=useMinAsBase?rmax:rmin,inverseAreaFunction=(0,src.Wcw)().defined((d=>options.defined(d[1],d[0]))).context(ctx);options.horizontal?inverseAreaFunction.y1((d=>xscale(d[1]))).y0(inverseValue).x((d=>scale(d[0]))):inverseAreaFunction.x1((d=>xscale(d[1]))).x0(inverseValue).y((d=>scale(d[0]))),ctx.beginPath(),inverseAreaFunction(plotdata),ctx.fillStyle=options.inverseColor||"";const colorMapFunction=options.inverseColorMapFunction;colorMapFunction&&(ctx.fillStyle=gradientfill_plot_createGradient(ctx,scale,options.horizontal,plotdata,xscale,colorMapFunction,options.inverseColorScale||options.colorScale||options.scale)),ctx.fill()}ctx.beginPath(),areaFunction(plotdata),ctx.lineWidth=options.width||0,ctx.fillStyle=options.fill||options.color||"";const colorMapFunction=options.colorMapFunction;colorMapFunction&&(ctx.fillStyle=gradientfill_plot_createGradient(ctx,scale,options.horizontal,plotdata,xscale,colorMapFunction,options.colorScale||options.scale)),ctx.fill(),ctx.globalAlpha=1,ctx.strokeStyle=options.color||"",ctx.stroke(),ctx.restore()}}},"./packages/well-log-viewer/src/utils/minmax.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";function checkMinMaxValue(minmax,value){null!==value&&(minmax[0]===Number.POSITIVE_INFINITY?minmax[0]=minmax[1]=value:minmax[0]>value?minmax[0]=value:minmax[1]<value&&(minmax[1]=value))}function checkMinMax(minmax,minmaxSrc){minmax[0]===Number.POSITIVE_INFINITY?(minmax[0]=minmaxSrc[0],minmax[1]=minmaxSrc[1]):(minmax[0]>minmaxSrc[0]&&(minmax[0]=minmaxSrc[0]),minmax[1]<minmaxSrc[1]&&(minmax[1]=minmaxSrc[1]))}function roundMinMax(minmax){let mi=minmax[0],ma=minmax[1];if(!isFinite(mi)||!isFinite(ma))return[mi,ma];if(!mi&&!ma)return[mi,ma];let d=ma-mi;if(d<0)return[mi,ma];d?(ma-=1e-7*d,mi+=1e-7*d,d=ma-mi):d=1;const l0=Math.floor(Math.log10(d));let p=Math.pow(10,l0+1),c=(mi+.5*d)/p;Math.abs(c)>1e9?c*=p:c=Math.floor(c)*p;let q=.5,l=l0,k1=0,k2=0,k=k2-k1;for(;l>-20;l--){for(p*=.1;q>=.5&&(d=p*q,k2=Math.floor((ma-c)/d),ma>=c&&k2++,k1=Math.floor((mi-c)/d),mi<c&&k1--,k=k2-k1,!(k>=9));)q*=.5;if(k>=9)break;q=2}if(k>=9)for(;l<l0;l++){for(;q<=2&&(d=p*q,k2=Math.floor((ma-c)/d),ma>=c&&k2++,k1=Math.floor((mi-c)/d),mi<c&&k1--,k=k2-k1,!(k<=9));)q*=2;if(k<=9)break;q=.5,p*=10}if(k<6){const j=2===q?5:2;k=k1>=0?k1/j*j:(k1-j+1)/j*j,k2-k>6?(k=k2<0?k2/j*j:(k2+j-1)/j*j,k2=k-k1>6?(k2+k1+6)/2:k):(k1=k2-6,k2=k1+6),k1=k}const b=k2*d+c;return[parseFloat((k1*d+c).toPrecision(5)),parseFloat(b.toPrecision(5))]}function roundLogMinMax(minmax){const r=roundMinMax(minmax);return r[0]<=0&&(r[0]=minmax[0],r[0]<=0&&console.error("Wrong data range for logarithm scale "+minmax)),[parseFloat(r[0].toPrecision(5)),parseFloat(r[1].toPrecision(5))]}__webpack_require__.d(__webpack_exports__,{T5:function(){return roundMinMax},nt:function(){return checkMinMax},uN:function(){return checkMinMaxValue},xY:function(){return roundLogMinMax}})},"./packages/well-log-viewer/src/utils/plots.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{Kc:function(){return getPlotType},SF:function(){return setupTrackPlot},hI:function(){return DEFAULT_PLOT_TYPE},mB:function(){return buildPlotConfig},t0:function(){return buildGraphPlotFromTrackOptions},tV:function(){return createStackData}});var _equinor_videx_wellog__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@equinor/videx-wellog/dist/index.umd.js"),_color_function__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./packages/well-log-viewer/src/utils/color-function.ts"),_gradientfill_plot__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/well-log-viewer/src/utils/gradientfill-plot.ts"),_minmax__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./packages/well-log-viewer/src/utils/minmax.ts"),_well_log__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/well-log-viewer/src/utils/well-log.ts");const DEFAULT_SCALE="linear",DEFAULT_PLOT_TYPE="line";class PlotData{constructor(){this.data=[],this.minmax=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY],this.minmaxPrimaryAxis=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY]}}function getPlotType(plot){return plot instanceof _gradientfill_plot__WEBPACK_IMPORTED_MODULE_1__.A?"gradientfill":plot instanceof _equinor_videx_wellog__WEBPACK_IMPORTED_MODULE_0__.LinePlot?"line":plot instanceof _equinor_videx_wellog__WEBPACK_IMPORTED_MODULE_0__.AreaPlot?"area":plot instanceof _equinor_videx_wellog__WEBPACK_IMPORTED_MODULE_0__.DotPlot?"dot":plot instanceof _equinor_videx_wellog__WEBPACK_IMPORTED_MODULE_0__.DifferentialPlot?"differential":plot instanceof _equinor_videx_wellog__WEBPACK_IMPORTED_MODULE_0__.LineStepPlot?"linestep":""}class DataAccessor{constructor(iData,iData2){this.iData=iData,this.iData2=iData2}access(data){return null!=this.iData2?[data[this.iData],data[this.iData2]]:data[this.iData]}}function buildPlotConfig(plotSetup,plotSetup2,trackTemplate,colorMapFunctions,iData,iData2){const{iCurve:iCurve,iSet:iSet,templatePlot:templatePlot}=plotSetup;return{id:`${iSet}-${iCurve}`,type:templatePlot.type??DEFAULT_PLOT_TYPE,options:buildPlotOptions(plotSetup,plotSetup2,trackTemplate,colorMapFunctions,iData,iData2)}}function buildPlotOptions(plotSetup,plotSetup2,trackTemplate,colorMapFunctions,iData,iData2){const{minmax:minmax,templatePlot:templatePlot}=plotSetup,scale=templatePlot.scale||trackTemplate.scale||DEFAULT_SCALE,domain=function getScaledDomain(templatePlot,scale,minmax){return templatePlot.domain?templatePlot.domain:"log"===scale||"gradientfill"===templatePlot.type&&"log"===templatePlot.colorScale?(0,_minmax__WEBPACK_IMPORTED_MODULE_3__.xY)(minmax):(0,_minmax__WEBPACK_IMPORTED_MODULE_3__.T5)(minmax)}(templatePlot,scale,minmax),colorMapFunction=(0,_color_function__WEBPACK_IMPORTED_MODULE_4__.q)(templatePlot.colorMapFunctionName,colorMapFunctions),inverseColorMapFunction=(0,_color_function__WEBPACK_IMPORTED_MODULE_4__.q)(templatePlot.inverseColorMapFunctionName,colorMapFunctions),dataAccessorFunc=function makeDataAccessorFunc(iData,iData2){const _dataAccessor=new DataAccessor(iData,iData2);return _dataAccessor.access.bind(_dataAccessor)}(iData,plotSetup2?iData2:void 0),legendInfoFunc=function makeLegendInfoFunc(curve1,curve2){return()=>({label:curve1.name,unit:curve1.unit??"",serie1:{show:!0,label:curve1.name,unit:curve1.unit??""},serie2:{show:!0,label:curve2?.name??"",unit:curve2?.unit??""}})}(plotSetup.curve,plotSetup2?.curve),fillOpacity=templatePlot.fillOpacity??.25;return{dataAccessor:dataAccessorFunc,legendInfo:legendInfoFunc,scale:scale,domain:domain,color:templatePlot.color,inverseColor:templatePlot.inverseColor,fill:templatePlot.fill,fillOpacity:fillOpacity,useMinAsBase:!0,colorMapFunction:colorMapFunction,inverseColorMapFunction:inverseColorMapFunction,colorScale:templatePlot.colorScale,inverseColorScale:templatePlot.inverseColorScale,serie1:{scale:scale,domain:domain,color:templatePlot.color,fill:templatePlot.fill},serie2:{scale:scale,domain:domain,color:templatePlot.color2,fill:templatePlot.fill2}}}function createAreaData(from,to,value,colorMapFunction,meta){const{color:color,name:name}=(0,_well_log__WEBPACK_IMPORTED_MODULE_2__.VN)(value,colorMapFunction,meta);return{from:from,to:to,name:name,color:{r:color[0],g:color[1],b:color[2]}}}async function createStackData(data,colorMapFunction,meta){const arr=new Array;let prev=null,area=null;for(const p of data){let boundary=p[0];if(null===boundary){area&&(arr.push(area),area=null);continue}if(prev&&(boundary=prev[0],null===boundary))continue;area&&(area.to=boundary);const value=p[1];prev&&value!==prev[1]&&area&&(arr.push(area),area=null),area||null==value||null===p[0]||(area=createAreaData(boundary,p[0],value,colorMapFunction,meta)),prev=p}return area&&arr.push(area),arr}function setupPlot(wellLog,templatePlot,axesInfo,useSecondCurve){const curveName=useSecondCurve?templatePlot.name2:templatePlot.name;if(useSecondCurve&&"differential"!==templatePlot.type)return null;if(!curveName)return null;const{iCurve:iCurve,iSet:iSet}=(0,_well_log__WEBPACK_IMPORTED_MODULE_2__.Ie)(wellLog,curveName);if(iCurve<0)return null;const sourceLogSet=wellLog[iSet],data=sourceLogSet.data,curve=sourceLogSet.curves[iCurve];if(1!==(curve.dimensions??1))return null;if("string"===curve.valueType&&"stacked"!==templatePlot.type)return null;const plotData=function preparePlotData(data,iCurve,iPrimaryAxis){const plot=new PlotData;let i=0;for(const row of data){let value=row[iCurve];"number"==typeof value&&(0,_minmax__WEBPACK_IMPORTED_MODULE_3__.uN)(plot.minmax,value);const primary=iPrimaryAxis>=0?row[iPrimaryAxis]:i++;null===primary&&(value=null),(0,_minmax__WEBPACK_IMPORTED_MODULE_3__.uN)(plot.minmaxPrimaryAxis,primary),plot.data.push([primary,value])}return plot}(data,iCurve,(0,_well_log__WEBPACK_IMPORTED_MODULE_2__.FH)(sourceLogSet.curves,axesInfo).primary);return{iCurve:iCurve,iSet:iSet,sourceLogSet:sourceLogSet,curve:curve,plotData:plotData,minmax:[plotData.minmax[0],plotData.minmax[1]],templatePlot:templatePlot,isSecondary:Boolean(useSecondCurve)}}function setupTrackPlot(templatePlot,wellLogSets,axesInfo){const retArr=[],plotSetup=setupPlot(wellLogSets,templatePlot,axesInfo),plotSetup2=setupPlot(wellLogSets,templatePlot,axesInfo,!0);return plotSetup&&retArr.push(plotSetup),plotSetup2&&retArr.push(plotSetup2),retArr}function buildGraphPlotFromTrackOptions(plotConfig,track){const factory=track.options.plotFactory,scale=track.scale;if(!factory)throw Error("No plot factory found in track!");if(!factory[plotConfig.type])throw Error(`No factory function for creating '${plotConfig.type}'-plot!`);return factory[plotConfig.type](plotConfig,scale)}},"./packages/well-log-viewer/src/utils/template.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{Ao:function(){return getStyledTemplateTracks},xl:function(){return isStackedTrackTemplate},RZ:function(){return makeTrackHeader}});var plots=__webpack_require__("./packages/well-log-viewer/src/utils/plots.ts");const __colors=["red","blue","orange","green","red","magenta","gray","brown"];let __iPlotColor=0;function generateColor(){return __colors[__iPlotColor++%__colors.length]}var arrays=__webpack_require__("./packages/well-log-viewer/src/utils/arrays.ts");function getStyledTemplateTracks(template){return template.styles?template.tracks.map((track=>function applyStylesToTemplateTrack(templateTrack,templateStyles){const styledPlots=templateTrack.plots.map((plot=>function applyTemplateStyle(templatePlot,templateStyles){const styledTemplate=function applyStyleToTemplatePlot(templatePlot,templateStyles){if(!templateStyles||!templatePlot.style)return{...templatePlot};const style=(0,arrays.x2)(templateStyles,templatePlot.style)??{};return{...style,...templatePlot}}(templatePlot,templateStyles);styledTemplate.type||(styledTemplate.type=plots.hI);(function isValidPlotType(plotType){return["line","linestep","dot","area","differential","gradientfill","stacked"].includes(plotType)})(styledTemplate.type)||(console.error("unknown plot type '"+styledTemplate.type+"': use default type '"+plots.hI+"'"),styledTemplate.type=plots.hI);"stacked"!==styledTemplate.type&&(styledTemplate.color||(styledTemplate.color=generateColor()));"area"===styledTemplate.type?styledTemplate.fill||(styledTemplate.fillOpacity=.25):"gradientfill"===styledTemplate.type?styledTemplate.colorMapFunctionName||(styledTemplate.fillOpacity=.25):"differential"===styledTemplate.type&&(styledTemplate.fill||(styledTemplate.fill=generateColor()),styledTemplate.color2||(styledTemplate.color2=generateColor()),styledTemplate.fill2||(styledTemplate.fill2=generateColor()));return styledTemplate}(plot,templateStyles)));return{...templateTrack,plots:styledPlots}}(track,template.styles))):template.tracks}function isStackedTrackTemplate(templateTrack,templateStyles){const firstTrackPlot=templateTrack.plots?.[0]??{};if("stacked"===firstTrackPlot.type)return!0;if(!firstTrackPlot.style||!templateStyles)return!1;const iStyle=(0,arrays.Yl)(templateStyles,firstTrackPlot.style);return!(iStyle<0)&&"stacked"===templateStyles[iStyle]?.type}function makeTrackHeader(curves,templateTrack){if(templateTrack.title)return templateTrack.title;if(!templateTrack.plots[0])return"";const plotTemplate=templateTrack.plots[0],curve=(0,arrays.x2)(curves,plotTemplate.name);return curve?curve.description?function shortDescription(description){return description.replace(/^\d+\s+/,"")}(curve.description):curve.name:plotTemplate.name}},"./packages/well-log-viewer/src/utils/tracks.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{d6:function(){return addPlotToTrack},sN:function(){return createTrack},b1:function(){return createWellLogTracks},OG:function(){return editTrack},R3:function(){return editTrackPlot},C9:function(){return getScaleTrackNum},Qv:function(){return getTrackTemplate},Q1:function(){return isScaleTrack},Rb:function(){return removeTrackPlot}});var index_umd=__webpack_require__("./node_modules/@equinor/videx-wellog/dist/index.umd.js"),color_function=__webpack_require__("./packages/well-log-viewer/src/utils/color-function.ts"),src=__webpack_require__("./node_modules/d3/src/index.js");function onUpdateLegend(elm,bounds,track){const lg=(0,src.Ltv)(elm),{horizontal:horizontal,label:label,abbr:abbr}=track.options,vertText=horizontal;let{height:h,width:w,top:top}=bounds;if(h+=top,horizontal!=vertText){top=0;const tmp=h;h=w,w=tmp}const lineSize=Math.min(12,h/3.3),lsp=.1*lineSize,x=w/2;top=5;let y0=top+h;y0-=(h-3.3*lineSize)/2;const y3=y0-lineSize/1.2,y2=y3-lineSize+lsp,y1=y2-lineSize-lsp,bScaleTrack=!(track instanceof index_umd.StackedTrack);let textSize=lineSize;textSize=Math.max(6,Math.min(textSize,w*(bScaleTrack?.25:.15)));const g=lg.select(".legend"),lbl=g.select("text.scale-title");if((0,index_umd.setAttrs)(lbl,{transform:vertText?`translate(${bScaleTrack?y1:y2}, ${x})rotate(-90)`:`translate(${x},${bScaleTrack?y1:y2})`,"font-size":`${textSize}px`,fill:track instanceof index_umd.DualScaleTrack&&track.isMaster?"black":"#555"}),lbl.text(abbr||label||"???"),bScaleTrack&&track.extent){const val=g.select("text.scale-range");(0,index_umd.setAttrs)(val,{transform:vertText?`translate(${y2},${x})rotate(-90)`:`translate(${x},${y2})`,"font-size":`${textSize}px`});const[min,max]=track.extent,span=Math.round(2*(max-min))/2;val.text(Number.isNaN(span)?"-":span);const unit=g.select("text.scale-units");(0,index_umd.setAttrs)(unit,{transform:vertText?`translate(${y3},${x})rotate(-90)`:`translate(${x},${y3})`,"font-size":textSize/1.2+"px"}),unit.text(track.options.units||"units")}}const scaleLegendConfig={elementType:"svg",getLegendRows:()=>2,onInit:(elm,track,updateTrigger)=>{track.legendUpdate=updateTrigger;const lg=(0,src.Ltv)(elm);lg.selectAll("g.legend").remove();const g=lg.append("g").attr("class","legend");g.append("text").classed("scale-title",!0).attr("font-weight","600").style("text-anchor","middle"),g.append("text").attr("class","scale-range").style("text-anchor","middle"),g.append("text").attr("class","scale-units").style("text-anchor","middle")},onUpdate:onUpdateLegend},stackLegendConfig={elementType:"svg",getLegendRows:()=>2,onInit:(elm,track,updateTrigger)=>{track.legendUpdate=updateTrigger;const lg=(0,src.Ltv)(elm);lg.selectAll("g.legend").remove();lg.append("g").attr("class","legend").append("text").classed("scale-title",!0).style("text-anchor","middle")},onUpdate:onUpdateLegend};var axes=__webpack_require__("./packages/well-log-viewer/src/utils/axes.ts"),minmax=__webpack_require__("./packages/well-log-viewer/src/utils/minmax.ts"),well_log=__webpack_require__("./packages/well-log-viewer/src/utils/well-log.ts"),utils_plots=__webpack_require__("./packages/well-log-viewer/src/utils/plots.ts"),gradientfill_plot=__webpack_require__("./packages/well-log-viewer/src/utils/gradientfill-plot.ts");function newDualScaleTrack(mode,title,abbr,units){return new index_umd.DualScaleTrack(void 0,{mode:mode,maxWidth:50,width:2,label:title,abbr:abbr||title,units:units||"",legendConfig:scaleLegendConfig})}var template=__webpack_require__("./packages/well-log-viewer/src/utils/template.ts");class TracksInfo{tracks=[];minmaxPrimaryAxis=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY];minmaxSecondaryAxis=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY];expandDomainToTrack(track){const trackRange=getTrackIndexRange(track);(0,minmax.nt)(this.minmaxPrimaryAxis,trackRange)}}function updateGraphTrackScale(track){const templateTrack=getTrackTemplate(track);if(templateTrack){if(templateTrack.plots.length){const plotTemplate=templateTrack.plots[0];track.options.scale=plotTemplate.scale,track.options.domain=plotTemplate.domain,track.options.label||(track.options.label=plotTemplate.name)}templateTrack.scale&&(track.options.scale=templateTrack.scale),track.options.scale||(track.options.scale="linear")}if(track.plots?.length){const plot=track.plots[0];track.options.domain=plot.options.domain}if(track.options.domain||(console.warn("Empty track.options.domain!"),track.options.domain="log"===track.options.scale?[1,100]:[0,100]),"log"===track.options.scale&&track.options.domain&&track.options.domain[0]<0&&console.error("wrong data range for logarithm scale "+track.options.domain),!track.options.scale)throw Error("Invalid track.options.scale!");track.trackScale=function createScale(type,domain){if("linear"===type)return(0,src.m4Y)().domain(domain);if("log"===type)return(0,src.ZEH)().domain(domain);throw Error("Invalid input!")}(track.options.scale,track.options.domain)}function updateStackedTrackScale(track){const templateTrack=track.options.__template;if(templateTrack&&templateTrack.plots.length){const plotTemplate=templateTrack.plots[0];track.options.label||(track.options.label=plotTemplate.name)}}function createWellLogTracks(wellLog,axes,templateTracks,colorMapFunctions){if(!wellLog?.length)return new TracksInfo;const info=new TracksInfo,scaleTracks=setUpScaleTracks(axes,wellLog);info.tracks.push(...scaleTracks);for(const templateTrack of templateTracks){const track=createTrack(wellLog,axes,templateTrack,colorMapFunctions);track?(info.expandDomainToTrack(track),info.tracks.push(track)):console.warn("Could not build track",templateTrack)}if(!isFinite(info.minmaxPrimaryAxis[0])){const curves=wellLog[0].curves,data=wellLog[0].data,{primary:primary}=(0,well_log.FH)(curves,axes),firstAxisValue=data[0]?.[primary];"number"==typeof firstAxisValue&&(info.minmaxPrimaryAxis[0]=firstAxisValue)}if(!isFinite(info.minmaxPrimaryAxis[1])){const curves=wellLog[0].curves,data=wellLog[0].data,{primary:primary}=(0,well_log.FH)(curves,axes),lastAxisValue=data[data.length-1]?.[primary];"number"==typeof lastAxisValue&&(info.minmaxPrimaryAxis[1]=lastAxisValue)}return info}function setupTrackPlots(wellLog,templateTrack,axesInfo){const plots=(0,template.xl)(templateTrack)?templateTrack.plots.slice(0,1):templateTrack.plots,plotSetups=[];for(const plotTemplate of plots)plotSetups.push(...(0,utils_plots.SF)(plotTemplate,wellLog,axesInfo));return plotSetups}function applySetupMinMax(setup1,setup2,primaryAxisMinMax){(0,minmax.nt)(primaryAxisMinMax,setup1.plotData.minmaxPrimaryAxis),setup2&&((0,minmax.nt)(setup1.minmax,setup2.minmax),(0,minmax.nt)(primaryAxisMinMax,setup2.plotData.minmaxPrimaryAxis))}function maybeGetSecondaryPlotSetup(plotSetups,currIndex){const setup1=plotSetups[currIndex],setup2=plotSetups[currIndex+1]??null;if(!setup2?.isSecondary)return null;if(setup2&&setup1.templatePlot!==setup2.templatePlot)throw new Error("Expected secondary plot to have the same template-plot");return setup2}function makeGraphTrackOptions(plotSetups,templateTrack,colorMapFunctions,existingOptions={}){const trackData=[],trackPlots=[],curvesUsed=[],indexMinMax=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY];for(let index=0;index<plotSetups.length;index++){const plotSetup=plotSetups[index],plotSetup2=maybeGetSecondaryPlotSetup(plotSetups,index);applySetupMinMax(plotSetup,plotSetup2,indexMinMax);const plotConfig=(0,utils_plots.mB)(plotSetup,plotSetup2,templateTrack,colorMapFunctions,trackData.length,trackData.length+1);trackPlots.push(plotConfig),curvesUsed.push(plotSetup.curve),trackData.push(plotSetup.plotData.data),plotSetup2&&(index++,curvesUsed.push(plotSetup2.curve),trackData.push(plotSetup2.plotData.data))}return{...createTrackOptionsFromTemplate(templateTrack,existingOptions),__indexMinMax:indexMinMax,label:(0,template.RZ)(curvesUsed,templateTrack),data:trackData,plots:trackPlots}}function makeStackedTrackOptions(plotSetups,templateTrack,colorMapFunctions,existingOptions={}){if(!plotSetups.length)throw new Error("Unexpected empty plot list");const{curve:curve,plotData:plotData,sourceLogSet:sourceLogSet,templatePlot:templatePlot}=plotSetups[0],meta=(0,well_log.P5)(sourceLogSet,curve.name),colorFunc=(0,color_function.q)(templatePlot.colorMapFunctionName??"",colorMapFunctions),trackHeader=(0,template.RZ)([curve],templateTrack);return meta||"integer"!==curve.valueType||console.warn(`Discrete meta information for '${curve.name}' not found. Using default`),meta||colorFunc||console.error("No color function/table or metadata given in template plot props"),{...createTrackOptionsFromTemplate(templateTrack,existingOptions),__indexMinMax:plotData.minmaxPrimaryAxis,legendConfig:stackLegendConfig,abbr:curve.name,label:trackHeader,data:utils_plots.tV.bind(null,plotData.data,colorFunc,meta)}}function createTrack(wellLog,axesInfo,templateTrack,colorMapFunctions){const plotSetups=setupTrackPlots(wellLog,templateTrack,axesInfo);if((0,template.xl)(templateTrack)&&plotSetups.length){const track=function newStackedTrack(options){return new index_umd.StackedTrack(void 0,options)}(makeStackedTrackOptions(plotSetups,templateTrack,colorMapFunctions));return updateStackedTrackScale(track),track}if(plotSetups.length||templateTrack.required){const track=function newGraphTrack(options){const gradientFillPlotFactory={...index_umd.defaultPlotFactory,gradientfill:(0,index_umd.createPlotType)(gradientfill_plot.A)},defaultGraphTrackOptions={legendConfig:index_umd.graphLegendConfig,plotFactory:gradientFillPlotFactory};return new index_umd.GraphTrack(void 0,{...defaultGraphTrackOptions,...options})}(makeGraphTrackOptions(plotSetups,templateTrack,colorMapFunctions));return updateGraphTrackScale(track),track}return null}function editTrack(existingTrack,newTemplateTrack,wellLogSets,axisInfo,colorMapFunctions){const newPlotSetups=setupTrackPlots(wellLogSets,newTemplateTrack,axisInfo);if(existingTrack instanceof index_umd.StackedTrack){existingTrack.data=null;const newTrackOptions=makeStackedTrackOptions(newPlotSetups,newTemplateTrack,colorMapFunctions,existingTrack.options);existingTrack.options=newTrackOptions,existingTrack.data=newTrackOptions.data,updateStackedTrackScale(existingTrack)}else if(existingTrack instanceof index_umd.GraphTrack){const newOptions=makeGraphTrackOptions(newPlotSetups,newTemplateTrack,colorMapFunctions,existingTrack.options);existingTrack.options=newOptions,existingTrack.data=newOptions.data,existingTrack.refresh(),updateGraphTrackScale(existingTrack)}return existingTrack}function addPlotToTrack(track,templatePlot,wellLogSets,axesInfo,colorMapFunctions){if(!(track instanceof index_umd.GraphTrack))throw Error("Can only add tracks to GraphTracks");const existingPlots=track.plots,trackDataPoints=track.options.data,existingTemplate=getTrackTemplate(track),existingIndexRange=getTrackIndexRange(track),[setup1,setup2]=(0,utils_plots.SF)(templatePlot,wellLogSets,axesInfo);if(!setup1)throw Error("Invalid plot setup");applySetupMinMax(setup1,setup2,existingIndexRange);const newPlotConfig=(0,utils_plots.mB)(setup1,setup2,existingTemplate,colorMapFunctions,trackDataPoints.length,trackDataPoints.length+1),newPlot=(0,utils_plots.t0)(newPlotConfig,track);existingPlots.push(newPlot),existingTemplate.plots.push(templatePlot),trackDataPoints.push(setup1.plotData.data),setup2&&trackDataPoints.push(setup2.plotData.data),updateGraphTrackScale(track),track.prepareData()}function editTrackPlot(track,oldPlot,templatePlot,wellLogSets,axesInfo,colorMapFunctions){if(!(track instanceof index_umd.GraphTrack))throw Error("Can only add tracks to GraphTracks");const existingPlots=track.plots,iOldPlot=existingPlots.indexOf(oldPlot),trackDataPoints=track.options.data,existingTemplate=getTrackTemplate(track),existingIndexRange=getTrackIndexRange(track);if(iOldPlot<0)throw Error("Plot not in track!");const[setup1,setup2]=(0,utils_plots.SF)(templatePlot,wellLogSets,axesInfo);if(!setup1)throw Error("Invalid plot setup");applySetupMinMax(setup1,setup2,existingIndexRange);const newPlotConfig=(0,utils_plots.mB)(setup1,setup2,existingTemplate,colorMapFunctions,trackDataPoints.length,trackDataPoints.length+1),newPlot=(0,utils_plots.t0)(newPlotConfig,track);existingPlots[iOldPlot]=newPlot,existingTemplate.plots[iOldPlot]=templatePlot,trackDataPoints.push(setup1.plotData.data),setup2&&trackDataPoints.push(setup2.plotData.data),updateGraphTrackScale(track),track.prepareData()}function removeTrackPlot(track,plot){if(!(track instanceof index_umd.GraphTrack))throw new Error("Plots can only be removed from Graph tracks track");const existingTemplate=getTrackTemplate(track),existingPlots=track.plots,iOldPlot=existingPlots.findIndex((p=>p===plot));if(-1===iOldPlot)throw Error("Plot not found in track!");existingPlots.splice(iOldPlot,1),existingTemplate.plots.splice(iOldPlot,1),existingPlots.length||(existingTemplate.required=!0),updateGraphTrackScale(track),track.prepareData()}function getTrackIndexRange(track){const options=track.options;return options.__indexMinMax?options.__indexMinMax:(console.error("No __indexMinMax given in track!"),[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY])}function getTrackTemplate(track){const options=track.options;if(options.__template)return options.__template;{console.error("No __template given in track!");const options=track.options;return{title:options.label?options.label:"",scale:"log"===options.scale?"log":"linear",plots:[]}}}function isScaleTrack(track){return track instanceof index_umd.ScaleTrack||track instanceof index_umd.DualScaleTrack}function getScaleTrackNum(tracks){let n=0;for(const track of tracks)isScaleTrack(track)&&n++;return n}function setUpScaleTracks(axesInfo,wellLog){const curves=wellLog[0].curves,axisIndices=(0,well_log.FH)(curves,axesInfo);if(axisIndices.primary<0)return[];const titlePrimary=(0,axes.Ws)(axesInfo,axesInfo.primaryAxis),curvePrimary=curves[axisIndices.primary],titleSecondary=(0,axes.Ws)(axesInfo,axesInfo.secondaryAxis),curveSecondary=curves[axisIndices.secondary];return axisIndices.secondary>-1?[newDualScaleTrack(0,titlePrimary,curvePrimary.name,curvePrimary.unit),newDualScaleTrack(1,titleSecondary,curveSecondary.name,curveSecondary.unit)]:[(title=titlePrimary,abbr=curvePrimary.name,units=curvePrimary.unit,new index_umd.ScaleTrack(void 0,{maxWidth:50,width:2,label:title,abbr:abbr||title,units:units||"",legendConfig:scaleLegendConfig}))];var title,abbr,units}function createTrackOptionsFromTemplate(templateTrack,existingOptions={}){const options={...existingOptions};return(0,template.xl)(templateTrack)?function setStackedTrackOptionsFromTemplate(options,templateTrack){const plot=templateTrack.plots[0];plot&&(options.showLabels=plot.showLabels,options.showLines=plot.showLines,options.labelRotation=plot.labelRotation??0)}(options,templateTrack):function setGraphTrackOptionsFromTemplate(options,templateTrack){templateTrack.scale?options.scale=templateTrack.scale:delete options.scale}(options,templateTrack),function setTrackOptionsFromTemplate(options,templateTrack){options.label=templateTrack.title,options.tooltip=templateTrack.titleTooltip,void 0!==templateTrack.width&&(options.width=templateTrack.width),options.__template=templateTrack}(options,templateTrack),options}},"./packages/well-log-viewer/src/utils/well-log.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{Dy:function(){return getAvailableAxes},FH:function(){return getAxisIndices},Ie:function(){return findSetAndCurveIndex},P5:function(){return getDiscreteMeta},VN:function(){return getDiscreteColorAndName},kF:function(){return getWellLogSetsFromProps},s0:function(){return getCurveFromVidexPlotId}});var lodash__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/lodash/lodash.js"),lodash__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__),_arrays__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/well-log-viewer/src/utils/arrays.ts"),_color_table__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/well-log-viewer/src/utils/color-table.ts");function findSetAndCurveIndex(wellLogSets,curveName){let iCurve=-1,iSet=-1;for(const logSet of wellLogSets)if(iCurve=findIndexByCurveName(logSet.curves,curveName),iSet++,iCurve>-1)return{iSet:iSet,iCurve:iCurve};return{iCurve:-1,iSet:-1}}function findIndexByCurveName(curves,curveName){return curveName=curveName.toUpperCase(),curves.findIndex((({name:name})=>name.toUpperCase()===curveName))}function getAxisIndices(curves,axesInfo){if(!axesInfo.mnemos)return{primary:-1,secondary:-1};const primaryMemos=axesInfo.mnemos[axesInfo.primaryAxis]??[],secondaryMemos=axesInfo.mnemos[axesInfo.secondaryAxis]??[];return{primary:findIndexByMemos(curves,primaryMemos),secondary:findIndexByMemos(curves,secondaryMemos)}}function findIndexByMemos(curves,memos){return memos=memos.map((v=>v.toUpperCase())),curves.findIndex((({name:name})=>memos.includes(name.toUpperCase())))}function getAvailableAxes(wellLog,axisMnemos){const result=[],curves=function getAllWellLogCurves(wellLogSets){const iterator=lodash__WEBPACK_IMPORTED_MODULE_0___default().iteratee("curves");return lodash__WEBPACK_IMPORTED_MODULE_0___default().flatMap(wellLogSets,iterator)}(wellLog);for(const key in axisMnemos){(0,_arrays__WEBPACK_IMPORTED_MODULE_1__.Bk)(curves,axisMnemos[key])>=0&&result.push(key)}return result}function getWellLogSetsFromProps(props){let ret=[];const setsProp=props.wellLogSets??props.welllog??[];return ret=Array.isArray(setsProp)?setsProp:[setsProp],lodash__WEBPACK_IMPORTED_MODULE_0___default().chain(ret).map("header.well").uniq().value().length>1&&console.warn("Got logs for different wells. WellLogView should only receive logs for the same well. For multiple wells, use SyncLogViewer instead."),ret}function getCurveFromVidexPlotId(wellLogSets,trackId){if(!trackId.match(/^\d+-\d+$/))throw new Error(`Wrong pattern for track-id ${trackId}`);const[iSet,iCurve]=trackId.split("-").map(Number);return wellLogSets[iSet]?.curves[iCurve]}let iStringToNum=0;const mapStringToNum=new Map;function getDiscreteMeta(wellLogSet,name){const metadataTable=function getDiscreteMetaDataByName(wellLogSet,name){const meta=wellLogSet.metadata_discrete;name=name.toUpperCase();for(const key in meta)if(key.toUpperCase()===name)return meta[key];return null}(wellLogSet,name);if(metadataTable){const attributes=metadataTable.attributes;if(attributes){const iCode=attributes.indexOf("code"),iColor=attributes.indexOf("color");if(iColor>=0&&iCode>=0)return{iCode:iCode,iColor:iColor,objects:metadataTable.objects}}}return null}function getDiscreteColorAndName(value,colorMapFunction,meta){let color,name;if(null===value&&(value=Number.NaN),meta){const{objects:objects,iColor:iColor,iCode:iCode}=meta;let object;if("string"==typeof value)name=value,object=objects[value];else{name=value.toString();for(const t in objects){const obj=objects[t];if(value===obj[iCode]){name=t,object=obj;break}}}color=colorMapFunction?(0,_color_table__WEBPACK_IMPORTED_MODULE_2__.BI)(colorMapFunction,object?parseFloat(object[iCode].toString()):Number.NaN):object?object[iColor]:[255,25,25]}else if(name=value.toString(),colorMapFunction)if("string"==typeof value){let v;mapStringToNum.has(value)?v=mapStringToNum.get(value):(mapStringToNum.set(value,iStringToNum),v=iStringToNum,iStringToNum++),color=(0,_color_table__WEBPACK_IMPORTED_MODULE_2__.BI)(colorMapFunction,v)}else color=(0,_color_table__WEBPACK_IMPORTED_MODULE_2__.BI)(colorMapFunction,parseInt(value.toString()));else color=[224,224,224];return{color:color,name:name}}},"./packages/wsc-common/dist/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{Vr:function(){return validateColorTables},Dd:function(){return validateLayers},i6:function(){return validateSchema}});var dist_ajv=__webpack_require__("./node_modules/ajv/dist/ajv.js"),ajv_default=__webpack_require__.n(dist_ajv),Wells_namespaceObject=JSON.parse('{"$comment":"Inspired from https://github.com/geojson/schema","$schema":"http://json-schema.org/draft-07/schema#","$id":"inputSchema/Wells.json","title":"GeoJSON FeatureCollection","type":"object","required":["type","features"],"properties":{"type":{"type":"string","enum":["FeatureCollection"]},"features":{"type":"array","items":{"title":"GeoJSON Feature","type":"object","required":["type","properties","geometry"],"properties":{"type":{"type":"string","enum":["Feature"]},"id":{"oneOf":[{"type":"number"},{"type":"string"}]},"properties":{"oneOf":[{"type":"null"},{"type":"object"}]},"geometry":{"title":"GeoJSON GeometryCollection","type":"object","required":["type","geometries"],"properties":{"type":{"type":"string","enum":["GeometryCollection"]},"geometries":{"type":"array","items":{"oneOf":[{"title":"GeoJSON Point","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["Point"]},"coordinates":{"type":"array","minItems":2,"items":{"type":"number"}}}},{"title":"GeoJSON LineString","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["LineString"]},"coordinates":{"type":"array","minItems":2,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}}}]}}}}}}}}}'),WellLog_namespaceObject=JSON.parse('{"$comment":"See https://jsonwelllogformat.org","$id":"inputSchema/WellLog.json","type":"object","properties":{"header":{"$ref":"#/definitions/header"},"curves":{"type":"array","items":{"$ref":"#/definitions/curve"}},"data":{"type":"array","items":{"$ref":"#/definitions/data_row"}},"metadata_discrete":{"type":"object"}},"required":["curves","data","header"],"definitions":{"header":{"type":"object","properties":{"name":{"type":"string","description":"Log name"},"description":{"type":"string","description":"Log description"},"externalIds":{"type":"object","description":"Record<string,string>; IDs within external storage, key being the storage name, and value being the ID."},"well":{"type":"string","description":"Well name"},"wellbore":{"type":"string","description":"wellbore name"},"field":{"type":"string","description":"Field name"},"country":{"type":"string","description":"Country of operation"},"date":{"type":"string","description":"datetime; Logging date"},"operator":{"type":"string","description":"Operator company name"},"serviceCompany":{"type":"string","description":"Service company name"},"source":{"type":"string","description":"Source system or process of this log"},"runNumber":{"type":"string","description":"Run number"},"elevation":{"type":"number","description":"float; Vertical distance between measured depth 0.0 and mean sea level in SI unit (meters)"},"startIndex":{"type":"number","description":"Value of the first index. Unit according to index curve"},"endIndex":{"type":"number","description":"Value of the last index. Unit according to index curve"},"step":{"type":["number","null"],"description":"Distance between indices if regularly sampled. Unit according to index curve. If log is time based, milliseconds assumed. null if irregular step"},"dataUri":{"type":"string","description":"Point to data source in case this is kept separate. Can be absolute or relative according to the URI specification"}}},"curve":{"type":"object","properties":{"name":{"type":"string","description":"Curve name or mnemonic. Mandatory. Non-null"},"description":{"type":["string","null"],"description":"Curve description. Optional"},"quantity":{"type":["string","null"],"description":"Curve quantity such as length, pressure, force etc. Optional"},"unit":{"type":["string","null"],"description":"Unit of measurement such as m, ft, bar, etc. Optional"},"valueType":{"type":["string","null"],"description":"Curve value type: float, integer, string, datetime or boolean. Non-null. Optional. float assumed if not present"},"dimensions":{"type":"number","description":"Number of dimensions. [1,>. Non-null. Optional. 1 assumed if not present"}},"required":["name"]},"data_row":{"type":"array","items":{"anyOf":[{"type":"number"},{"type":"string"},{"type":"null"}]}},"metadata_discrete":{"type":"object"}}}'),WellLogs_namespaceObject=JSON.parse('{"$id":"inputSchema/WellLogs.json","type":"array","items":{"$ref":"./WellLog.json#"}}'),WellLogTemplate_namespaceObject=JSON.parse('{"type":"object","properties":{"name":{"type":"string"},"scale":{"type":"object","properties":{"primary":{"type":"string"},"allowSecondary":{"type":"boolean"}},"required":["primary"]},"tracks":{"type":"array","items":{"$ref":"#/definitions/track"}},"styles":{"type":"array","items":{"$ref":"#/definitions/style"}}},"required":["tracks"],"definitions":{"domain":{"type":"array","minItems":2,"maxItems":2,"items":{"type":"number"}},"css_color":{"type":"string","description":"Any valid CSS color value (named colors, three-digit hex color, six-digit hex color, RGB colors)","examples":["green","#ff8000","rgb(128,33,23)","rgba(128,33,23,0.6)"]},"plot_type":{"enum":["line","linestep","dot","area","differential","gradientfill","stacked"],"default":"line"},"scale_type":{"enum":["log","linear"],"default":"linear"},"plot_prop":{"type":"object","properties":{"scale":{"$ref":"#/definitions/scale_type"},"type":{"$ref":"#/definitions/plot_type"},"color":{"$ref":"#/definitions/css_color"},"inverseColor":{"$ref":"#/definitions/css_color"},"fill":{"$ref":"#/definitions/css_color"},"fillOpacity":{"type":"number","minimum":0,"maximum":1,"default":0.25,"description":"for \'area\' and \'gradientfill\' plots"},"colorMapFunctionName":{"type":"string","description":"color function/table id (name) for \'gradientfill\' plot"},"inverseColorMapFunctionName":{"type":"string","description":"color function/table id (name) for \'gradientfill\' plot"},"colorScale":{"$ref":"#/definitions/scale_type","description":"table id (name) for \'gradientfill\' plot"},"inverseColorScale":{"$ref":"#/definitions/scale_type","description":"table id (name) for \'gradientfill\' plot"},"color2":{"$ref":"#/definitions/css_color","description":"for \'differetial\' plot"},"fill2":{"$ref":"#/definitions/css_color","description":"for \'differetial\' plot"},"showLines":{"type":"boolean","description":"for \'stacked\' plot"},"showLabels":{"type":"boolean","description":"for \'stacked\' plot"},"labelRotation":{"type":"number","description":"for \'stacked\' plot"}}},"plot":{"allOf":[{"$ref":"#/definitions/plot_prop"}],"type":"object","properties":{"name":{"type":"string"},"style":{"type":"string"},"scale":{"$ref":"#/definitions/scale_type"},"name2":{"type":"string"}},"required":["name"]},"style":{"allOf":[{"$ref":"#/definitions/plot_prop"}],"type":"object","properties":{"name":{"type":"string"}},"required":["name"]},"track":{"type":"object","properties":{"title":{"type":"string"},"width":{"type":"number","default":3,"description":"relative track width (default as in videx-wellog)"},"required":{"type":"boolean"},"scale":{"$ref":"#/definitions/scale_type"},"domain":{"$ref":"#/definitions/domain"},"plots":{"type":"array","items":{"$ref":"#/definitions/plot"}}},"required":["plots"]}}}'),PieChart_namespaceObject=JSON.parse('{"$comment":"PieChart data schema","$id":"inputSchema/PieChart.json","type":"object","properties":{"pies":{"type":"array","items":{"$ref":"#/definitions/pie"}},"properties":{"type":"array","items":{"$ref":"#/definitions/property"}}},"required":["pies","properties"],"definitions":{"pie":{"type":"object","properties":{"x":{"type":"number","description":"Pie chart y-coordinate"},"y":{"type":"number","description":"Pie chart x-coordinate"},"R":{"type":"number","description":"Pie chart radius."},"fractions":{"type":"array","description":"Number and proportion of slices on pie chart.","items":{"$ref":"#/definitions/fraction"}}},"required":["x","y","R","fractions"]},"property":{"type":"object","properties":{"color":{"type":"array","minItems":3,"maxItems":3,"items":{"type":"number"},"description":"Pie slice color as RGB array."},"label":{"type":"string","description":"Pie slice name."}},"required":["color","label"]},"fraction":{"type":"object","properties":{"value":{"type":"number","description":"Proportion on pie slice."},"idx":{"type":"number","description":"Pie slice color and label indexed from properties array."}},"required":["value","idx"]}}}'),Grid_namespaceObject=JSON.parse('{"$comment":"See https://jsonwelllogformat.org","$id":"inputSchema/Grid.json","type":"array","items":{"$ref":"#/definitions/data_row"},"definitions":{"data_row":{"type":"object","required":["cs","vs"],"properties":{"i":{"type":"number","description":"Cell i-index, increases toward east."},"j":{"type":"number","description":"Cell j-index, increases towards north."},"z":{"type":"number","description":"Cell depth."},"cs":{"type":"array","description":"Cell corners","items":{"$ref":"#/definitions/cell_corner"},"minItems":3},"vs":{"type":"array","description":"Time dependent cell values.","items":{"type":"number"}}}},"cell_corner":{"type":"array","items":{"type":"number"},"minItems":3}}}'),FaultPolygons_namespaceObject=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$comment":"Inspired from https://geojson.org/schema/FeatureCollection.json","$id":"inputSchema/FaultPolygons.json","title":"GeoJSON FeatureCollection","type":"object","required":["type","features"],"properties":{"type":{"type":"string","enum":["FeatureCollection"]},"features":{"type":"array","items":{"title":"GeoJSON Feature","type":"object","required":["type","properties","geometry"],"properties":{"type":{"type":"string","enum":["Feature"]},"id":{"oneOf":[{"type":"number"},{"type":"string"}]},"properties":{"oneOf":[{"type":"null"},{"type":"object"}]},"geometry":{"title":"GeoJSON Polygon","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["Polygon"]},"coordinates":{"type":"array","items":{"type":"array","minItems":4,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}}}}}}}'),ColorTables_namespaceObject=JSON.parse('{"$comment":"ColorTables data schema","$id":"inputSchema/ColorTables.json","type":"array","items":{"$ref":"#/definitions/color-table"},"definitions":{"color-table":{"type":"object","required":["name","discrete","colors"],"properties":{"name":{"type":"string","description":"Color table name"},"discrete":{"type":"boolean","description":"True if color table is for discrete data"},"colors":{"type":"array","description":"Color entries as [anchor, R, G, B] for continuous and [index, R, G, B] for discrete","items":{"$ref":"#/definitions/color-row","minItems":4}},"description":{"type":"string","description":"Description"},"colorNaN":{"$ref":"#/definitions/color-row","description":"Color for NaN/undefined value"},"colorBelow":{"$ref":"#/definitions/color-row","description":"Color for value below minimum color range"},"colorAbove":{"$ref":"#/definitions/color-row","description":"Color for value above minimum color range"}}},"color-row":{"type":"array","items":{"type":"number"},"minItems":3}}}');function validateSchema(data,schema_type){let validator=null;try{validator=function createSchemaValidator(schema_type){const ajv=new(ajv_default())({schemas:[WellLog_namespaceObject]});switch(schema_type){case"Wells":return ajv.compile(Wells_namespaceObject);case"WellLog":return ajv.compile(WellLog_namespaceObject);case"WellLogs":return ajv.compile(WellLogs_namespaceObject);case"WellLogTemplate":return ajv.compile(WellLogTemplate_namespaceObject);case"PieChart":return ajv.compile(PieChart_namespaceObject);case"Grid":return ajv.compile(Grid_namespaceObject);case"FaultPolygons":return ajv.compile(FaultPolygons_namespaceObject);case"ColorTables":return ajv.compile(ColorTables_namespaceObject);default:return null}}(schema_type)}catch(e){throw"Wrong JSON schema for "+schema_type+". "+String(e)}if(!validator)throw"Wrong schema type.";if(validator(data),validator.errors)throw function formatSchemaError(schema_type,errors){let error_text="";error_text=errors[0]?(errors[0].instancePath?errors[0].instancePath+": ":"")+errors[0].message:"JSON schema validation failed";return`${schema_type}: ${error_text}.`}(schema_type,validator.errors)}function validateColorTables(colorTables){validateSchema(colorTables,"ColorTables")}function validateLayers(layers){layers.forEach((layer=>{if(layer.isLoaded){!function validateLayer(layer){switch(layer.id){case"wells-layer":!function validateWellsLayer(wellsLayer){validateSchema(wellsLayer.props.data,"Wells");validateSchema(function getLogData(wellsLayer){var _a;const sub_layers=null===(_a=wellsLayer.internalState)||void 0===_a?void 0:_a.subLayers,log_layer=null==sub_layers?void 0:sub_layers.find((layer=>"wells-layer-log_curve"===layer.id));return null==log_layer?void 0:log_layer.props.data}(wellsLayer),"WellLogs")}(layer);break;case"pie-layer":validateSchema(layer.props.data,"PieChart");break;case"grid-layer":validateSchema(layer.props.data,"Grid");break;case"fault-polygons-layer":validateSchema(layer.props.data,"FaultPolygons");break;default:return}}(layer);try{layer.validateProps()}catch(e){throw`${layer.id}- ${String(e)}`}}}))}},"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./packages/well-log-viewer/src/components/styles.scss":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/css-loader/dist/runtime/cssWithMappingToString.js"),_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,'.log-controller{position:relative;user-select:none;flex:1 1 0%;flex-direction:row;display:flex;font-family:Verdana,Tahoma,sans-serif;background-color:#fff;pointer-events:none;overflow:hidden}.log-controller .track{border-right:1px solid #333;overflow:hidden;padding:0;display:flex;flex-direction:column}.log-controller .track .track-title{display:flex;justify-content:center;align-items:center;font-family:sans-serif;font-weight:bold;overflow:hidden;background-color:rgba(0,0,0,0);color:#555;text-align:center;text-anchor:middle;white-space:nowrap;border-bottom:1px solid #333;pointer-events:auto;cursor:help}.log-controller .track .track-legend{pointer-events:all;overflow:hidden;border-bottom:1px solid #333}.log-controller .track .track-container{flex:1 1 auto;overflow:hidden}.log-controller .track .track-container canvas,.log-controller .track .track-container svg{overflow:hidden}.log-controller .track:last-child{border-right:none}.log-controller .track .error{background:repeating-linear-gradient(-45deg, #f99, #f99 10px, #fff 10px, #fff 20px)}.log-controller .overlay{pointer-events:auto;min-height:0;position:absolute;z-index:200}.log-controller .hidden{display:none !important}.log-controller.horizontal{flex-direction:column}.log-controller.horizontal .track{flex-direction:row;border-right:none;border-bottom:1px solid #333}.log-controller.horizontal .track .track-title{writing-mode:vertical-lr;transform:rotate(180deg);border-bottom:none;border-left:1px solid #333}.log-controller.horizontal .track .track-legend{border-bottom:none;border-right:1px solid #333}.log-controller.horizontal .track:last-child{border-bottom:none}.scale-track{stroke:#555}.scale-track .label-bg{stroke:#fff;fill:#fff}.slave-scale{background-color:#f9f9f9}.slave-scale .label-bg{stroke:#f9f9f9;fill:#f9f9f9}.slave-scale text{stroke:#777;fill:#777}.slave-scale .major-tick-line{stroke-width:.5;stroke:#777}.master-scale .major-tick .label-bg{stroke:#fff;fill:#fff}.master-scale .major-tick text{stroke:#555;fill:#555}.master-scale .minor-tick-line{stroke-width:.5;stroke:#555}.welllogview{width:100%;height:100%;display:flex;height:inherit}.welllogview .track .track-title{background-color:#ccc;font-weight:normal;color:#000;font-family:inherit;white-space:nowrap;display:block;text-overflow:ellipsis;overflow:hidden}.welllogview .selected{background-color:rgba(255,155,79,.1)}.welllogview .slave-scale{background-color:rgba(255,255,255,.0235)}.welllogview .track-container{pointer-events:all}.welllogview .overlay .depth{right:5px;bottom:5px;display:inline-block;padding:2px;border-radius:4px;text-align:right;background-color:rgba(0,0,0,.5);color:#fff}.welllogview .overlay .rubber-band{background-color:rgba(255,0,0,.1)}.welllogview .overlay .rubber-band div{background-color:rgba(255,0,0,.7)}.welllogview .overlay .pinned{background-color:rgba(0,0,0,.1)}.welllogview .overlay .pinned div{background-color:rgba(0,255,0,.7)}.welllogview .title{color:#000;background-color:#f1f1f1;font-size:14px;text-align:center;flex:"0, 0"}.welllogview .title-horizontal{writing-mode:vertical-lr;transform:rotate(180deg)}.welllogview .view{width:100%;height:100%;flex:1,1;display:flex;flex-direction:column}.welllogview .view container{flex:1,1}.welllogview .error{flex:0,0;color:#ff4040;background-color:#ffffc0}.welllogview .wellpick{font-size:9px}.welllogview .wellpick .vertical-text{writing-mode:vertical-lr;transform:rotate(180deg)}.welllogview .wellpick-fill{opacity:.3}.welllogview .wellpick-pattern{opacity:.57}.welllogspacer{width:100%;height:100%;display:flex}.welllogspacer .welllogspacer-distance-horizontal{writing-mode:vertical-lr;transform:rotate(180deg)}.welllogspacer .distance{font-size:12;text-align:center}.welllogspacer .wellpick{opacity:.9}.welllogspacer .wellpick-fill{opacity:.3}.welllogspacer .wellpick-pattern{opacity:.57}',"",{version:3,sources:["webpack://./node_modules/@equinor/videx-wellog/dist/styles/log-styles.scss","webpack://./node_modules/@equinor/videx-wellog/dist/styles/scale-styles.scss","webpack://./packages/well-log-viewer/src/components/styles.scss"],names:[],mappings:"AAKA,gBACE,iBAAA,CACA,gBAAA,CACA,WAAA,CACA,kBAAA,CACA,YAAA,CACA,qCAAA,CACA,qBAZQ,CAaR,mBAAA,CACA,eAAA,CACA,uBACE,2BAAA,CACA,eAAA,CACA,SAAA,CACA,YAAA,CACA,qBAAA,CACA,oCACE,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,sBAAA,CACA,gBAAA,CACA,eAAA,CACA,8BAzBU,CA0BV,UA3Ba,CA4Bb,iBAAA,CACA,kBAAA,CACA,kBAAA,CACA,4BAAA,CACA,mBAAA,CACA,WAAA,CAEF,qCACE,kBAAA,CACA,eAAA,CACA,4BAAA,CAEF,wCACE,aAAA,CACA,eAAA,CACA,2FACE,eAAA,CAIN,kCACE,iBAAA,CAEF,8BACE,mFAAA,CAQF,yBACE,mBAAA,CACA,YAAA,CACA,iBAAA,CACA,WAAA,CAGF,wBACE,uBAAA,CAIJ,2BACE,qBAAA,CACA,kCACE,kBAAA,CACA,iBAAA,CACA,4BAAA,CACA,+CACE,wBAAA,CACA,wBAAA,CACA,kBAAA,CACA,0BAAA,CAEF,gDACE,kBAAA,CACA,2BAAA,CAGJ,6CACE,kBAAA,CCtFJ,aACE,WAPmB,CAQnB,uBACE,WANO,CAOP,SAPO,CAUX,aACE,wBAZqB,CAevB,uBACE,cAhBqB,CAiBrB,YAjBqB,CAoBvB,kBACE,WAtBkB,CAuBlB,SAvBkB,CA0BpB,8BACE,eAAA,CACA,WA5BkB,CA+BpB,oCACE,WA9BS,CA+BT,SA/BS,CAkCX,+BACE,WAtCmB,CAuCnB,SAvCmB,CA0CrB,+BACE,eAAA,CACA,WA5CmB,CCQrB,aACE,UAAA,CACA,WAAA,CACA,YAAA,CAGA,cAAA,CAGE,iCACE,qBAAA,CACA,kBAAA,CACA,UAAA,CACA,mBAAA,CACA,kBAAA,CACA,aAAA,CACA,sBAAA,CACA,eAAA,CAWJ,uBACE,oCAAA,CAGF,0BACE,wCAAA,CAGF,8BACE,kBAAA,CAIA,6BAEE,SAAA,CACA,UAAA,CACA,oBAAA,CAEA,WAAA,CACA,iBAAA,CACA,gBAAA,CACA,+BAAA,CACA,UAAA,CAGF,mCACE,iCAAA,CAEA,uCACE,iCAAA,CAIJ,8BACE,+BAAA,CAEA,kCACE,iCAAA,CAKN,oBACE,UAAA,CACA,wBAAA,CACA,cAAA,CACA,iBAAA,CACA,WAAA,CAEF,+BACE,wBAAA,CACA,wBAAA,CAGF,mBACE,UAAA,CACA,WAAA,CACA,QAAA,CACA,YAAA,CACA,qBAAA,CAEA,6BACE,QAAA,CAIJ,oBACE,QAAA,CACA,aAAA,CACA,wBAAA,CAGF,uBACE,aAAA,CAEA,sCACE,wBAAA,CACA,wBAAA,CAIJ,4BACE,UAAA,CAGF,+BACE,WAAA,CAKJ,eACE,UAAA,CACA,WAAA,CACA,YAAA,CAEA,kDACE,wBAAA,CACA,wBAAA,CAEF,yBACE,YAAA,CACA,iBAAA,CAGF,yBACE,UAAA,CAGF,8BACE,UAAA,CAGF,iCACE,WAAA",sourceRoot:""}]),__webpack_exports__.default=___CSS_LOADER_EXPORT___},"./packages/well-log-viewer/src/components/styles.scss":function(module,__unused_webpack_exports,__webpack_require__){var content=__webpack_require__("./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./packages/well-log-viewer/src/components/styles.scss");content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[module.id,content,""]]),content.locals&&(module.exports=content.locals);(0,__webpack_require__("./node_modules/vue-style-loader/lib/addStylesClient.js").A)("925f0916",content,!0,{})}}]);