(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[4861],{"./packages/well-log-viewer/src/components/WellLogView.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{Hw:function(){return _propTypesWellLogView},uB:function(){return argTypesWellLogViewProp},Ay:function(){return components_WellLogView},N7:function(){return getWellPicks},cm:function(){return shouldUpdateWellLogView}});var react=__webpack_require__("./node_modules/react/index.js"),index_umd=__webpack_require__("./node_modules/@equinor/videx-wellog/dist/index.umd.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),dist=(__webpack_require__("./packages/well-log-viewer/src/components/styles.scss"),__webpack_require__("./packages/wsc-common/dist/index.js")),src=__webpack_require__("./node_modules/d3/src/index.js"),log_viewer=__webpack_require__("./packages/well-log-viewer/src/utils/log-viewer.ts"),utils_tracks=__webpack_require__("./packages/well-log-viewer/src/utils/tracks.ts"),deepcopy=__webpack_require__("./packages/well-log-viewer/src/utils/deepcopy.ts"),react_dom=__webpack_require__("./node_modules/react-dom/index.js"),FormControl=__webpack_require__("./node_modules/@mui/material/FormControl/FormControl.js"),InputLabel=__webpack_require__("./node_modules/@mui/material/InputLabel/InputLabel.js"),NativeSelect=__webpack_require__("./node_modules/@mui/material/NativeSelect/NativeSelect.js"),Dialog=__webpack_require__("./node_modules/@mui/material/Dialog/Dialog.js"),DialogTitle=__webpack_require__("./node_modules/@mui/material/DialogTitle/DialogTitle.js"),DialogContent=__webpack_require__("./node_modules/@mui/material/DialogContent/DialogContent.js"),DialogActions=__webpack_require__("./node_modules/@mui/material/DialogActions/DialogActions.js"),Button=__webpack_require__("./node_modules/@mui/material/Button/Button.js");const typeItems={line:"Line",linestep:"Line Step",dot:"Dot",area:"Area",gradientfill:"Gradient Fill",differential:"Differential"},scaleItems={linear:"Linear",log:"Logarithmic"},colorItems={black:"Black",red:"Red",green:"Green",blue:"Blue",brown:"Brown",magenta:"Magenta",orange:"Orange",gray:"Gray",darkred:"Dark red",lightgreen:"Light green",lightblue:"Light blue",yellow:"Yellow",white:"White"},booleanItems={false:"No",true:"Yes"};function _createItems(items){const nodes=[];for(const key in items)nodes.push(react.createElement("option",{key:key,value:key},items[key]));return nodes}function createScaleItems(){return _createItems(scaleItems)}function createColorItems(){return _createItems(colorItems)}function createBooleanItems(){return _createItems(booleanItems)}function createColorTableItems(colorTables){const nodes=[];if(colorTables)for(const colorTable of colorTables)colorTable.discrete||(colorTable.name||console.log("colorTable.name is empty in createColorTableItems()"),nodes.push(react.createElement("option",{key:colorTable.name},colorTable.name)));else console.error("colorTables is missed or empty in createColorTableItems()");return nodes}function createDataItem(item){return react.createElement("option",{key:item,value:item},item)}function dataNames(welllog,track,discrete){const names=[];if(welllog){const skipUsed=!!track,plots=track?track.plots:void 0,abbr=track?track.options.abbr:void 0,curves=welllog.curves;let iCurve=0;for(const curve of curves){if(discrete&&"string"!==curve.valueType&&"integer"!==curve.valueType)continue;let bUsed=!1;if(plots){for(const plot of plots)if(plot.id==iCurve){bUsed=!0;break}}else abbr===curve.name&&(bUsed=!0);bUsed&&skipUsed||names.push(curve.name),iCurve++}}return names}const dialogContentStyle={display:"grid",gridTemplateColumns:"1fr 1fr 1fr",paddingTop:20,gap:10};class PlotPropertiesDialog extends react.Component{constructor(props){super(props);let name="",name2="";const names=this.dataNames(!0);names[0]&&(name2=name=names[0]),names[1]&&(name2=names[1]);const trackTemplate=(0,utils_tracks.Qv)(this.props.track),templatePlot=this.props.templatePlot;this.state=templatePlot?{...templatePlot,open:!0}:{type:trackTemplate.scale?"":"line",name:name,name2:name2,scale:void 0,color:"black",fill:"red",fillOpacity:.25,inverseColor:"",colorTable:this.props.wellLogView.props.colorTables?.[0]?.name,inverseColorTable:void 0,colorScale:void 0,inverseColorScale:void 0,color2:"black",fill2:"green",open:!0},this.closeDialog=this.closeDialog.bind(this),this.onOK=this.onOK.bind(this)}componentDidUpdate(_prevProps,prevState){if(this.state.type!==prevState.type)if("area"===this.state.type)this.state.fill||this.setState({fill:"black"});else if("gradientfill"===this.state.type)this.state.inverseColor&&this.setState({inverseColor:""});else if("differential"===this.state.type&&!this.state.name2){const skipUsed=!this.props.templatePlot;this.setState({name2:this.dataNames(skipUsed)[0]})}}onOK(){this.props.onOK(this.state),this.closeDialog()}closeDialog(){this.setState({open:!1})}dataNames(skipUsed){return dataNames(this.props.wellLogView.props.welllog,skipUsed?this.props.track:null)}createDataItems(skipUsed){return this.dataNames(skipUsed).map((name=>createDataItem(name)))}createSelectControl(valueName,label,nodes,insertEmpty){let value=this.state[valueName];return insertEmpty&&(value||(value="-"),nodes.unshift(react.createElement("option",{key:"-",value:"-"},1==insertEmpty?"â€”":insertEmpty))),react.createElement(FormControl.A,{fullWidth:!0,key:valueName},react.createElement(InputLabel.A,null,label),react.createElement(NativeSelect.A,{value:value,onChange:event=>{const value="-"===event.currentTarget.value?"":event.currentTarget.value,values=new Object;values[valueName]=value,this.setState(values)}},nodes))}createSelectControlFromType(type){if("area"===type||"differential"===type)return[this.createSelectControl("fill","Fill Color",createColorItems()),react.createElement(FormControl.A,{fullWidth:!0,key:"112"}),react.createElement(FormControl.A,{fullWidth:!0,key:"113"}),"area"===this.state.type?this.createSelectControl("inverseColor","Inverse Color",createColorItems(),!0):react.createElement(FormControl.A,{fullWidth:!0,key:"114"})];if("gradientfill"===type){const colorTables=this.props.wellLogView.props.colorTables;return[this.createSelectControl("colorTable","Fill Color table",createColorTableItems(colorTables)),react.createElement(FormControl.A,{fullWidth:!0,key:"211"}),react.createElement(FormControl.A,{fullWidth:!0,key:"212"}),this.createSelectControl("inverseColorTable","Inverse Color table",createColorTableItems(colorTables),!0)]}return[]}render(){const trackTemplate=(0,utils_tracks.Qv)(this.props.track),title=this.props.templatePlot?"Edit plot":"Add New Plot",skipUsed=!this.props.templatePlot,scale=this.state.scale||trackTemplate.scale;return react.createElement(Dialog.A,{open:this.state.open,maxWidth:"sm",fullWidth:!0,onClose:()=>this.setState({open:!1})},react.createElement(DialogTitle.A,null,title),react.createElement(DialogContent.A,{style:dialogContentStyle},this.createSelectControl("type","Type",function createTypeItems(){return _createItems(typeItems)}()),this.createSelectControl("scale","Scale",createScaleItems(),"Track scale"),"gradientfill"===this.state.type&&"linear"===scale?[this.createSelectControl("colorScale","Color Scale",createScaleItems())]:[react.createElement(FormControl.A,{fullWidth:!0,key:"12"})],this.createSelectControl("name","Data",this.createDataItems(skipUsed)),this.createSelectControl("color","dot"===this.state.type?"Dot Color":"Line Color",createColorItems()),this.createSelectControlFromType(this.state.type),"differential"===this.state.type?[this.createSelectControl("name2","Data 2",this.createDataItems(skipUsed)),this.createSelectControl("color2","Line Color 2",createColorItems()),this.createSelectControl("fill2","Fill Color 2",createColorItems())]:[]),react.createElement(DialogActions.A,null,react.createElement(Button.A,{color:"secondary",variant:"contained",onClick:this.closeDialog},"Cancel"),react.createElement(Button.A,{color:"primary",variant:"contained",onClick:this.onOK},"OK")))}}PlotPropertiesDialog.__docgenInfo={description:"",methods:[{name:"onOK",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"closeDialog",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"dataNames",docblock:null,modifiers:[],params:[{name:"skipUsed",optional:!1,type:{name:"boolean"}}],returns:{type:{name:"Array",elements:[{name:"string"}],raw:"string[]"}}},{name:"createDataItems",docblock:null,modifiers:[],params:[{name:"skipUsed",optional:!1,type:{name:"boolean"}}],returns:{type:{name:"Array",elements:[{name:"ReactNode"}],raw:"ReactNode[]"}}},{name:"createSelectControl",docblock:null,modifiers:[],params:[{name:"valueName",optional:!1,type:{name:"string"}},{name:"label",optional:!1,type:{name:"string"}},{name:"nodes",optional:!1,type:{name:"Array",elements:[{name:"ReactNode"}],raw:"ReactNode[]"}},{name:"insertEmpty",optional:!0,type:{name:"union",raw:"string | boolean",elements:[{name:"string"},{name:"boolean"}]}}],returns:{type:{name:"ReactNode"}}},{name:"createSelectControlFromType",docblock:null,modifiers:[],params:[{name:"type",optional:!1,type:{name:"union",raw:'| ""\n| "line"\n| "linestep"\n| "dot"\n| "area"\n| "differential"\n| "gradientfill"\n| "stacked"',elements:[{name:"literal",value:'""'},{name:"literal",value:'"line"'},{name:"literal",value:'"linestep"'},{name:"literal",value:'"dot"'},{name:"literal",value:'"area"'},{name:"literal",value:'"differential"'},{name:"literal",value:'"gradientfill"'},{name:"literal",value:'"stacked"'}],alias:"TemplatePlotTypes"}}],returns:{type:{name:"ReactNode"}}}],displayName:"PlotPropertiesDialog",props:{templatePlot:{required:!1,tsType:{name:"TemplatePlot"},description:""},onOK:{required:!0,tsType:{name:"signature",type:"function",raw:"(templatePlot: TemplatePlot) => void",signature:{arguments:[{type:{name:"TemplatePlot"},name:"templatePlot"}],return:{name:"void"}}},description:""},wellLogView:{required:!0,tsType:{name:"WellLogView"},description:""},track:{required:!0,tsType:{name:"Track"},description:""}}};var TextField=__webpack_require__("./node_modules/@mui/material/TextField/TextField.js");class TrackPropertiesDialog extends react.Component{constructor(props){super(props);let name="";const names=dataNames(this.props.wellLogView.props.welllog,null,!0);names[0]&&(name=names[0]);const templateTrack=this.props.templateTrack;this.bStacked=templateTrack&&templateTrack.plots&&templateTrack.plots[0]&&"stacked"===templateTrack.plots[0].type,this.state=templateTrack?{...templateTrack,stacked:this.bStacked?"1":"0",stackedName:templateTrack.plots[0]?.name,showLabels:!1!==templateTrack.plots[0]?.showLabels?"true":"false",showLines:!1!==templateTrack.plots[0]?.showLines?"true":"false",labelRotation:templateTrack.plots[0]?.labelRotation||0,open:!0}:{title:"New Track",scale:void 0,domain:void 0,plots:[],stacked:"0",stackedName:name,showLabels:"true",showLines:"true",labelRotation:0,open:!0},this.closeDialog=this.closeDialog.bind(this),this.onOK=this.onOK.bind(this),this.onChange=this.onChange.bind(this),this.onChangeChecked=this.onChangeChecked.bind(this)}onOK(){if(parseInt(this.state.stacked)){const plot0=this.state.plots[0];this.state.plots.splice(0,this.state.plots.length);const plot={...plot0,type:"stacked",name:this.state.stackedName,showLabels:"true"===this.state.showLabels,showLines:"true"===this.state.showLines,labelRotation:this.state.labelRotation||0};this.state.plots.push(plot)}this.props.onOK(this.state),this.closeDialog()}onChange(e){this.setState({[e.target.id]:e.target.value})}onChangeChecked(e){this.setState({[e.target.id]:e.target.checked})}closeDialog(){this.setState({open:!1})}createSelectControl(valueName,label,nodes,insertEmpty){let value=this.state[valueName];return insertEmpty&&(value||(value="-"),nodes.unshift(react.createElement("option",{key:"-",value:"-"},"â€”"))),react.createElement(FormControl.A,{fullWidth:!0,key:valueName},react.createElement(InputLabel.A,null,label),react.createElement(NativeSelect.A,{value:value,onChange:event=>{const value="-"===event.currentTarget.value?"":event.currentTarget.value,values=new Object;values[valueName]=value,this.setState(values)}},nodes))}render(){const templateTrack=this.props.templateTrack,title=templateTrack?"Edit track":"Add New Track";return react.createElement(Dialog.A,{open:this.state.open,maxWidth:"sm",fullWidth:!0,onClose:()=>this.setState({open:!1})},react.createElement(DialogTitle.A,null,title),react.createElement(DialogContent.A,{style:dialogContentStyle},react.createElement(TextField.A,{id:"title",label:"Title",value:this.state.title,onChange:this.onChange}),templateTrack?react.createElement(react.Fragment,null):this.createSelectControl("stacked","Type",_createItems({0:"Graph",1:"Stacked"}),!1),parseInt(this.state.stacked)?[this.createSelectControl("stackedName","Data",(welllog=this.props.wellLogView.props.welllog,track=null,discrete=!0,dataNames(welllog,track,discrete).map((name=>createDataItem(name))))),this.createSelectControl("showLines","Lines",createBooleanItems()),this.createSelectControl("showLabels","Labels",createBooleanItems()),react.createElement(TextField.A,{type:"number",id:"labelRotation",label:"Labels Rotation",key:"labelRotation",value:this.state.labelRotation,onChange:e=>{this.setState({[e.target.id]:Number(e.target.value)})},InputProps:{inputProps:{min:-180,max:180,step:10}}})]:[this.createSelectControl("scale","Scale",createScaleItems(),!0)]),react.createElement(DialogActions.A,null,react.createElement(Button.A,{color:"secondary",variant:"contained",onClick:this.closeDialog},"Cancel"),react.createElement(Button.A,{color:"primary",variant:"contained",onClick:this.onOK},"OK")));var welllog,track,discrete}}TrackPropertiesDialog.__docgenInfo={description:"",methods:[{name:"onOK",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"onChange",docblock:null,modifiers:[],params:[{name:"e",optional:!1,type:{name:"ReactChangeEvent",raw:"React.ChangeEvent<HTMLInputElement>",elements:[{name:"HTMLInputElement"}],alias:"React.ChangeEvent"}}],returns:{type:{name:"void"}}},{name:"onChangeChecked",docblock:null,modifiers:[],params:[{name:"e",optional:!1,type:{name:"ReactChangeEvent",raw:"React.ChangeEvent<HTMLInputElement>",elements:[{name:"HTMLInputElement"}],alias:"React.ChangeEvent"}}],returns:{type:{name:"void"}}},{name:"closeDialog",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"createSelectControl",docblock:null,modifiers:[],params:[{name:"valueName",optional:!1,type:{name:"string"}},{name:"label",optional:!1,type:{name:"string"}},{name:"nodes",optional:!1,type:{name:"Array",elements:[{name:"ReactNode"}],raw:"ReactNode[]"}},{name:"insertEmpty",optional:!0,type:{name:"boolean"}}],returns:{type:{name:"ReactNode"}}}],displayName:"TrackPropertiesDialog",props:{templateTrack:{required:!1,tsType:{name:"signature",type:"object",raw:"{\n    title: string;\n    required?: boolean;\n    /**\n     * Relative track width when used in a LogController, i.e. a track with width set to\n     * 3 will be three times wider than tracks set to width 1.\n     *\n     * Default is 1\n     */\n    width?: number;\n    plots: TemplatePlot[];\n    scale?: TemplatePlotScaleTypes; // 'linear' or 'log', default first plot scale\n    domain?: [number, number]; // min, max values, default all plots domain\n}",signature:{properties:[{key:"title",value:{name:"string",required:!0}},{key:"required",value:{name:"boolean",required:!1}},{key:"width",value:{name:"number",required:!1},description:"Relative track width when used in a LogController, i.e. a track with width set to\n3 will be three times wider than tracks set to width 1.\n\nDefault is 1"},{key:"plots",value:{name:"Array",elements:[{name:"TemplatePlot"}],raw:"TemplatePlot[]",required:!0}},{key:"scale",value:{name:"union",raw:'"linear" | "log"',elements:[{name:"literal",value:'"linear"'},{name:"literal",value:'"log"'}],required:!1}},{key:"domain",value:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}],required:!1}}]}},description:""},onOK:{required:!0,tsType:{name:"signature",type:"function",raw:"(templateTrack: TemplateTrack) => void",signature:{arguments:[{type:{name:"signature",type:"object",raw:"{\n    title: string;\n    required?: boolean;\n    /**\n     * Relative track width when used in a LogController, i.e. a track with width set to\n     * 3 will be three times wider than tracks set to width 1.\n     *\n     * Default is 1\n     */\n    width?: number;\n    plots: TemplatePlot[];\n    scale?: TemplatePlotScaleTypes; // 'linear' or 'log', default first plot scale\n    domain?: [number, number]; // min, max values, default all plots domain\n}",signature:{properties:[{key:"title",value:{name:"string",required:!0}},{key:"required",value:{name:"boolean",required:!1}},{key:"width",value:{name:"number",required:!1},description:"Relative track width when used in a LogController, i.e. a track with width set to\n3 will be three times wider than tracks set to width 1.\n\nDefault is 1"},{key:"plots",value:{name:"Array",elements:[{name:"TemplatePlot"}],raw:"TemplatePlot[]",required:!0}},{key:"scale",value:{name:"union",raw:'"linear" | "log"',elements:[{name:"literal",value:'"linear"'},{name:"literal",value:'"log"'}],required:!1}},{key:"domain",value:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}],required:!1}}]}},name:"templateTrack"}],return:{name:"void"}}},description:""},wellLogView:{required:!0,tsType:{name:"WellLogView"},description:""}}};const rubberBandSize=9,rubberBandOffset=rubberBandSize/2;function showSelection(rbelm,pinelm,vCur,vPin,horizontal,logViewer){if(void 0===vCur)return rbelm.style.visibility="hidden",void(pinelm.style.visibility="hidden");const v=logViewer.scale(vCur);if(!Number.isFinite(v))return rbelm.style.visibility="hidden",void(pinelm.style.visibility="hidden");if(rbelm.style[horizontal?"left":"top"]=v-rubberBandOffset+"px",rbelm.style.visibility="visible",void 0!==vPin&&Number.isFinite(vPin)){const pinelm1=pinelm.firstElementChild;let min,max;vPin<vCur?(pinelm1.style[horizontal?"left":"top"]=`${rubberBandOffset}px`,pinelm1.style[horizontal?"right":"bottom"]="",min=vPin,max=vCur):(pinelm1.style[horizontal?"right":"bottom"]=`${rubberBandOffset}px`,pinelm1.style[horizontal?"left":"top"]="",min=vCur,max=vPin),min=logViewer.scale(min),max=logViewer.scale(max);const x=min-rubberBandOffset,w=max-min+rubberBandSize;pinelm.style[horizontal?"left":"top"]=`${x}px`,pinelm.style[horizontal?"width":"height"]=`${w}px`}else pinelm.style.visibility="hidden"}const wpSize=3,wpOffset=wpSize/2;function showWellPick(elm,vCur,horizontal,logViewer){if(void 0===vCur)return void(elm.style.visibility="hidden");const v=logViewer.scale(vCur);Number.isFinite(v)?(elm.style[horizontal?"left":"top"]=v-wpOffset+"px",elm.style.visibility="visible"):elm.style.visibility="hidden"}function fillWellPicks(elm,vCur,vCur2,horizontal,logViewer){if(void 0===vCur)return void(elm.style.visibility="hidden");const v=logViewer.scale(vCur);if(!Number.isFinite(v))return void(elm.style.visibility="hidden");if(void 0===vCur2)return void(elm.style.visibility="hidden");const v2=logViewer.scale(vCur2);if(!Number.isFinite(v2))return void(elm.style.visibility="hidden");elm.style[horizontal?"left":"top"]=`${v}px`,elm.style[horizontal?"width":"height"]=v2-v+"px",elm.style.visibility="visible";const elm1=elm.querySelector("div.wellpick-pattern");if(elm1){const backgroundPosition="background-position-"+(horizontal?"x":"y");elm1.style[backgroundPosition]=-v+"px"}}function getWellPicks(wellLogView){const wps=[],wellpick=wellLogView.props.wellpick;if(!wellpick)return wps;if(!wellpick.wellpick)return console.error("No WellLog object in WellLogView prop.wellpick given"),wps;const curves=wellpick.wellpick.curves,mnemo=wellpick.md?wellpick.md:"MD",md=function _getLogIndexByNames(curves,names){for(const name of names){const n=name.toLowerCase(),index=curves.findIndex((item=>item.name.toLowerCase()===n));if(index>=0)return index}return-1}(curves,[mnemo]);if(md<0)return console.error("Depth log '"+mnemo+"' is not found for wellpicks"),wps;const primaryAxis=wellLogView.props.primaryAxis,scaleInterpolator=wellLogView.scaleInterpolator;for(const c in curves){if(curves[c].name!==wellpick.name)continue;const data=wellpick.wellpick.data;for(const d of data){if(null===d[md])continue;const horizon=d[c];if(null===horizon)continue;const vMD=d[md],vPrimary="md"===primaryAxis?vMD:scaleInterpolator?.forward(vMD),vSecondary="md"===primaryAxis?scaleInterpolator?.reverse(vMD):vMD,colorTable=wellpick.colorTables.find((colorTable=>colorTable.name==wellpick.color)),meta=(0,utils_tracks.P5)(wellpick.wellpick,wellpick.name),{color:color}=(0,utils_tracks.VN)(d[c],colorTable,meta),wp={vMD:vMD,vPrimary:vPrimary,vSecondary:vSecondary,horizon:horizon,color:color};wps.push(wp)}break}return wps}function posWellPickTitles(instance,parent){if(parent.logController&&parent.props.wellpick){const element=instance.overlay.elm.node();if(element){const horizontal=parent.props.horizontal;let i=0;for(const track of parent.logController.tracks){if(!(0,utils_tracks.Q1)(track))continue;const elm=track.elm,style="wp-title-"+i;for(const _td of element.querySelectorAll("td."+style)){const td=_td;td.style.position="absolute",horizontal?td.style.top=elm.offsetTop+"px":(td.style.left=elm.offsetLeft+"px",elm.offsetWidth<38?(td.style.width="",td.style.top="-11px",td.classList.add("vertical-text")):(td.style.width=elm.offsetWidth+"px",td.style.top="",td.classList.remove("vertical-text")))}i++}}}}function addWellPickOverlay(instance,parent){for(const elmName in instance.overlay.elements)"wp"==elmName.substring(0,2)&&instance.overlay.remove(elmName);if(!parent.props.wellpick)return;const wps=getWellPicks(parent);if(!wps.length)return;const horizontal=parent.props.horizontal,wellpickColorFill=parent.props.options?.wellpickColorFill,patternsTable=parent.props.patternsTable,patterns=parent.props.patterns,wellpickPatternFill=patternsTable&&patterns&&parent.props.options?.wellpickPatternFill,patternSize=patternsTable?.patternSize,patternImages=patternsTable?.patternImages;for(const wp of wps){const horizon=wp.horizon,vPrimary=wp.vPrimary,vSecondary=wp.vSecondary,color=wp.color,txtPrimary=Number.isFinite(vPrimary)?vPrimary?.toFixed(0):"",txtSecondary=Number.isFinite(vSecondary)?vSecondary?.toFixed(0):"",elmName="wp"+horizon,pinelm=instance.overlay.create(elmName,{}),rgba="rgba("+color[0]+","+color[1]+","+color[2]+",0.8)",styleText="style='background-color:rgba("+color[0]+","+color[1]+","+color[2]+",0.16)'";(0,src.Ltv)(pinelm).classed("wellpick",!0).style(horizontal?"width":"height",`${wpSize}px`).style(horizontal?"height":"width","100%").style(horizontal?"top":"left","0px").style("position","absolute").style("background-color",rgba).style("visibility","false").append("div").html(horizontal?"<table height=100%'><tr><td class='wp-title-0'><span "+styleText+">"+txtPrimary+"</span></td></tr><tr><td class='wp-title-1'><span "+styleText+">"+txtSecondary+"</span></td></tr><tr><td height=100%><span "+styleText+">"+horizon+"</span></td></tr></table>":"<table width=100% style='position:relative; top:-1.5em;'><tr><td class='wp-title-0'><span "+styleText+">"+txtPrimary+"</span></td><td class='wp-title-1'><span "+styleText+">"+txtSecondary+"</span></td><td align=center><span "+styleText+">"+horizon+"</span></td></tr></table>").style("position","absolute").style(horizontal?"width":"height","1px").style(horizontal?"height":"width","100%").style("background-color",rgba);{const elmName="wpFill"+horizon;if(wellpickPatternFill||wellpickColorFill){const pinelm=instance.overlay.create(elmName,{}),pin=(0,src.Ltv)(pinelm).style("position","absolute").style(horizontal?"width":"height",`${wpSize}px`).style(horizontal?"height":"width","100%").style(horizontal?"top":"left","0px").style("visibility","false");if(wellpickColorFill&&pin.append("div").classed("wellpick-fill",!0).style("width","100%").style("height","100%").style("background-color",rgba),wellpickPatternFill){const pattern=patterns.find((value=>value[0]===horizon));if(void 0!==pattern){const patternImage=patternImages[pattern[1]];pin.append("div").classed("wellpick-pattern",!0).style("position","absolute").style("left","0px").style("top","0px").style("width","100%").style("height","100%").style("background-size",patternSize+"px "+patternSize+"px").style("background-image","url('"+patternImage+"')")}}}}}}function initOverlays(instance,parent){instance.overlay.elm.style("overflow","hidden"),function addReadoutOverlay(instance,parent){const horizontal=parent.props.horizontal,elm=instance.overlay.create("depth",{onClick:event=>{if(parent.props.options?.hideCurrentPosition||parent.props.options?.hideSelectionInterval)return;const{caller:caller,x:x,y:y}=event,value=caller.scale.invert(horizontal?x:y),elem=event.target;if(elem){const axisTitle=parent.props.axisTitles&&parent.props.primaryAxis?parent.props.axisTitles[parent.props.primaryAxis]:void 0;elem.textContent=Number.isFinite(value)?`Pinned ${axisTitle||""}: ${value.toFixed(1)}`:"-",elem.style.visibility="visible"}},onMouseMove:event=>{if(parent.selPersistent)return;const{caller:caller,x:x,y:y}=event,value=caller.scale.invert(parent.props.horizontal?x:y),elem=event.target;if(elem){const axisTitles=parent.props.axisTitles;let axisTitle;axisTitles&&(axisTitle=parent.props.primaryAxis?axisTitles[parent.props.primaryAxis]:axisTitles[0]),elem.textContent=Number.isFinite(value)?`${axisTitle||""}: ${value.toFixed(1)}`:"-",elem.style.visibility="visible"}},onMouseExit:event=>{const elem=event.target;elem&&(elem.style.visibility="hidden")},onRescale:event=>{const elem=event.target;if(elem&&event.transform){parent.onContentRescale();const k=event.transform.k;Number.isFinite(k)?(elem.style.visibility="visible",elem.textContent=`Zoom: x${k.toFixed(1)}`):elem.style.visibility="hidden"}}});elm.className="depth",elm.style.visibility="hidden",elm.style.position="absolute"}(instance,parent),function addRubberbandOverlay(instance,parent){const horizontal=parent.props.horizontal,rbelm=instance.overlay.create("rubber-band",{onMouseMove:event=>{if(parent.selPersistent)return;const v=horizontal?event.x:event.y;parent.selCurrent=instance.scale.invert(v);const rbelm=event.target,pinelm=instance.overlay.elements.pinned;rbelm&&pinelm&&showSelection(rbelm,pinelm,parent.selCurrent,parent.selPinned,horizontal,instance),parent.setInfo(parent.selCurrent),parent.onContentSelection()},onMouseExit:event=>{event.target}});(0,src.Ltv)(rbelm).classed("rubber-band",!0).style(horizontal?"width":"height",`${rubberBandSize}px`).style(horizontal?"height":"width","100%").style("visibility","hidden").append("div").style(horizontal?"width":"height","1px").style(horizontal?"height":"width","100%").style(horizontal?"left":"top",`${rubberBandOffset}px`).style("position","relative")}(instance,parent),function addPinnedValueOverlay(instance,parent){const horizontal=parent.props.horizontal,pinelm=instance.overlay.create("pinned",{onClick:event=>{const v=horizontal?event.x:event.y,pinelm=event.target;if(pinelm)if("visible"==pinelm.style.visibility)parent.selPersistent?(parent.selPersistent=!1,parent.selCurrent=instance.scale.invert(v),pinelm.style.visibility="hidden",parent.selPinned=void 0,parent.onContentSelection()):parent.selPersistent=!0;else{parent.selPinned=instance.scale.invert(v),void 0!==parent.selCurrent||parent.props.options?.hideCurrentPosition||(parent.selCurrent=parent.selPinned);const rbelm=instance.overlay.elements["rubber-band"];rbelm&&pinelm&&showSelection(rbelm,pinelm,parent.selCurrent,parent.selPinned,horizontal,instance)}}});(0,src.Ltv)(pinelm).classed("pinned",!0).style(horizontal?"width":"height",`${rubberBandSize}px`).style(horizontal?"height":"width","100%").style(horizontal?"top":"left","0px").style("position","absolute").style("visibility","hidden").append("div").style(horizontal?"width":"height","1px").style(horizontal?"height":"width","100%").style(horizontal?"left":"top",`${rubberBandOffset}px`).style("position","absolute")}(instance,parent),addWellPickOverlay(instance,parent)}function createInterpolator(from,to){const mul=new Float32Array(from.length),n=from.length;for(let i=0;i<n;i++)if(i){const d=from[i]-from[i-1];mul[i]=d?(to[i]-to[i-1])/d:1}else mul[i]=0;return(x,expand)=>{for(let i=0;i<n;i++)if(x<from[i])return i?(x-from[i])*mul[i]+to[i]:expand?to[0]:Number.NaN;return expand?to[n?n-1:0]:Number.NaN}}function setTracksToController(logController,axes,welllog,template,colorTables){const{tracks:tracks,minmaxPrimaryAxis:minmaxPrimaryAxis,primaries:primaries,secondaries:secondaries}=(0,utils_tracks.Tt)(welllog,axes,template.tracks,template.styles,colorTables);logController.reset();const scaleInterpolator=function createScaleInterpolator(primaries,secondaries){const primary2secondary=createInterpolator(primaries,secondaries),secondary2primary=createInterpolator(secondaries,primaries);return{forward:v=>secondary2primary(v,!1),reverse:v=>primary2secondary(v,!1),forwardInterpolatedDomain:domain=>domain.map((v=>secondary2primary(v,!0))),reverseInterpolatedDomain:domain=>domain.map((v=>primary2secondary(v,!0)))}}(primaries,secondaries);return logController.scaleHandler=new index_umd.InterpolatedScaleHandler(scaleInterpolator),(0,log_viewer.R6)(logController,minmaxPrimaryAxis),logController.setTracks(tracks),scaleInterpolator}function addTrackMouseEventListner(type,area,element,track,func){element.addEventListener(type,(ev=>{func({track:track,plot:null,element:element,ev:ev,type:type,area:area}),ev.preventDefault()}))}const types=["contextmenu","click","dblclick"],areas=["title","legend","container"];function getContentBaseScale(controller,horizontal){if(controller){const base=controller.getContentBaseDomain(),logController=controller.logController;if(logController){const overlay=logController?.overlay,source=overlay?.elm.node();if(source){const m=(horizontal?source.clientWidth:source.clientHeight)*(.0254/96);return(base[1]-base[0])/m}}}return 16e3}const argTypesWellLogViewProp={horizontal:{description:"Orientation of the track plots on the screen."},welllog:{description:"JSON object describing well log data."},template:{description:"Prop containing track template data."},colorTables:{description:"Prop containing color table data for discrete well logs."},wellpick:{description:"Well Picks data"},patternsTable:{description:"Patterns table"},patterns:{description:"Horizon to pattern index map"},domain:{description:"Initial visible range"},selection:{description:"Initial selected range"},primaryAxis:{description:"Primary axis id"},axisMnemos:{description:"Log mnemonics for axes"},axisTitles:{description:"Names for axes"},viewTitle:{description:"The view title. Set desired string or react element or true for default value from welllog file"},options:{description:"Additional options:<br/>maxContentZoom: The maximum zoom value (default 256)<br/>maxVisibleTrackNum: The maximum number of visible tracks<br/>checkDatafileSchema: Validate JSON datafile against schema<br/>hideTrackTitle: Hide titles on the tracks<br/>hideLegend: Hide legends on the tracks."}};function shouldUpdateWellLogView(props,nextProps){return props.horizontal!==nextProps.horizontal||(props.welllog!==nextProps.welllog||(props.template!==nextProps.template||(props.colorTables!==nextProps.colorTables||(props.wellpick!==nextProps.wellpick||(props.primaryAxis!==nextProps.primaryAxis||(props.axisTitles!==nextProps.axisTitles||(props.axisMnemos!==nextProps.axisMnemos||(props.viewTitle!==nextProps.viewTitle||(!(0,log_viewer.hC)(props.domain,nextProps.domain)||(!(0,log_viewer.hC)(props.selection,nextProps.selection)||(props.options?.hideTrackTitle!==nextProps.options?.hideTrackTitle||(props.options?.hideTrackLegend!==nextProps.options?.hideTrackLegend||(props.options?.maxVisibleTrackNum!==nextProps.options?.maxVisibleTrackNum||(props.options?.maxContentZoom!==nextProps.options?.maxContentZoom||(props.options?.checkDatafileSchema!==nextProps.options?.checkDatafileSchema||(props.options?.wellpickColorFill!==nextProps.options?.wellpickColorFill||props.options?.wellpickPatternFill!==nextProps.options?.wellpickPatternFill))))))))))))))))}class WellLogView extends react.Component{constructor(props){super(props),this.container=void 0,this.logController=void 0,this.selCurrent=void 0,this.selPinned=void 0,this.selPersistent=void 0,this.isDefZoom=!1,this.resizeObserver=new ResizeObserver((entries=>{const entry=entries[0];entry&&entry.target&&(this.logController&&posWellPickTitles(this.logController,this),this.onContentRescale())})),this.template={name:"",scale:{primary:""},tracks:[],styles:[]},this.scaleInterpolator=void 0,this.state={infos:[],scrollTrackPos:0},this.onTrackMouseEvent=this.onTrackMouseEvent.bind(this),this.props.onCreateController?.(this),this._isMount=!1}componentDidMount(){this._isMount=!0,this.template=(0,deepcopy.a)(this.props.template),this.logController||(this.createLogViewer(),this.setTracks(!0))}componentWillUnmount(){this._isMount=!1}shouldComponentUpdate(nextProps,nextState){return!!shouldUpdateWellLogView(this.props,nextProps)||(this.state.scrollTrackPos!==nextState.scrollTrackPos||this.state.errorText!==nextState.errorText)}componentDidUpdate(prevProps,prevState){this.props.onCreateController!==prevProps.onCreateController&&this.props.onCreateController?.(this);let selection,selectedTrackIndices=[],shouldSetTracks=!1,checkSchema=!1;this.props.horizontal===prevProps.horizontal&&this.props.options?.hideTrackTitle===prevProps.options?.hideTrackTitle&&this.props.options?.hideTrackLegend===prevProps.options?.hideTrackLegend&&this.props.options?.maxContentZoom===prevProps.options?.maxContentZoom||(selection=this.getContentSelection(),selectedTrackIndices=this.getSelectedTrackIndices(),this.createLogViewer(),shouldSetTracks=!0),this.props.welllog===prevProps.welllog&&this.props.options?.checkDatafileSchema===prevProps.options?.checkDatafileSchema||(selection=this.props.selection,selectedTrackIndices=this.getSelectedTrackIndices(),shouldSetTracks=!0,checkSchema=!0),this.props.template!==prevProps.template&&(this.props.template&&(this.template=(0,deepcopy.a)(this.props.template)),shouldSetTracks=!0,checkSchema=!0),this.props.primaryAxis!==prevProps.primaryAxis&&(this.selectContent([void 0,void 0]),selectedTrackIndices=this.getSelectedTrackIndices(),shouldSetTracks=!0),this.props.colorTables!==prevProps.colorTables&&(selection=this.getContentSelection(),selectedTrackIndices=this.getSelectedTrackIndices(),shouldSetTracks=!0),this.props.axisTitles===prevProps.axisTitles&&this.props.axisMnemos===prevProps.axisMnemos||(selection=this.getContentSelection(),selectedTrackIndices=this.getSelectedTrackIndices(),shouldSetTracks=!0),this.props.wellpick===prevProps.wellpick&&this.props.options?.wellpickPatternFill===prevProps.options?.wellpickPatternFill&&this.props.options?.wellpickColorFill===prevProps.options?.wellpickColorFill||this.logController&&(addWellPickOverlay(this.logController,this),this.showSelection()),shouldSetTracks?(this.setTracks(checkSchema),(0,log_viewer._X)(this.logController,selectedTrackIndices),this.setControllerZoom(),selection&&this.selectContent(selection)):this.state.scrollTrackPos===prevState.scrollTrackPos&&this.props.options?.maxVisibleTrackNum===prevProps.options?.maxVisibleTrackNum||(this.onTrackScroll(),this.onTrackSelection(),this.updateInfo()),!this.props.domain||prevProps.domain&&this.props.domain[0]===prevProps.domain[0]&&this.props.domain[1]===prevProps.domain[1]||this.setControllerZoom(),!this.props.selection||prevProps.selection&&this.props.selection[0]===prevProps.selection[0]&&this.props.selection[1]===prevProps.selection[1]||this.setControllerSelection()}createLogViewer(){this.selPersistent=void 0,this.logController&&(this.logController.reset(),this.logController.onUnmount(),(0,log_viewer.Zn)(this.logController),this.logController=void 0),this.container&&(this.logController=new index_umd.LogViewer({horizontal:this.props.horizontal,showTitles:!this.props.options?.hideTrackTitle,showLegend:!this.props.options?.hideTrackLegend,maxZoom:this.props.options?.maxContentZoom,onTrackEnter:(elm,track)=>function addTrackMouseEventHandlers(elm,track,func){for(const area of areas){const elements=elm.getElementsByClassName("track-"+area);for(const element of elements)for(const type of types)addTrackMouseEventListner(type,area,element,track,func)}}(elm,track,this.onTrackMouseEvent)}),this.logController.init(this.container),this.container&&this.resizeObserver.observe(this.container),initOverlays(this.logController,this)),this.updateInfo()}getAxesInfo(){const axes=(0,utils_tracks.Dy)(this.props.welllog,this.props.axisMnemos),primaryAxisIndex=axes.findIndex((value=>value===this.props.primaryAxis));return{primaryAxis:this.props.primaryAxis||"",secondaryAxis:this.props.template&&this.props.template.scale&&this.props.template.scale.allowSecondary&&axes.length>1?axes[primaryAxisIndex+1]||axes[0]:"",titles:this.props.axisTitles,mnemos:this.props.axisMnemos}}setTracks(checkSchema){if(this.selCurrent=this.selPinned=void 0,checkSchema)try{(0,dist.i6)(this.template,"WellLogTemplate"),this.props.options?.checkDatafileSchema&&(0,dist.i6)(this.props.welllog,"WellLog")}catch(e){this.setState({errorText:String(e)})}if(this.logController){const axes=this.getAxesInfo();this.scaleInterpolator=setTracksToController(this.logController,axes,this.props.welllog,this.template,this.props.colorTables),addWellPickOverlay(this.logController,this)}this.setControllerZoom(),this.setControllerSelection(),this.setControllerZoom(),this.onTrackScroll(),this.onTrackSelection(),this.updateInfo()}findTrackById(trackId){return this.logController?.tracks.find((function(track){return track.id===trackId}))}setControllerZoom(){this.props.domain&&this.zoomContentTo(this.props.domain)}setControllerSelection(){this.props.selection&&this.selectContent(this.props.selection)}setControllerDefaultZoom(){this.props.domain?this.zoomContentTo(this.props.domain):this.zoomContentTo(this.getContentBaseDomain()),this.isDefZoom=!0}onTrackScroll(){const iFrom=this.getTrackScrollPos(),iTo=iFrom+this._maxVisibleTrackNum();this.logController&&(0,log_viewer.PZ)(this.logController,iFrom,iTo),this.props.onTrackScroll?.()}onTrackSelection(){this.props.onTrackSelection?.()}setInfo(x=Number.NaN){if(!this.props.onInfo)return;if(!this.logController)return;isNaN(x)&&void 0!==this.selCurrent&&(x=this.selCurrent);const iFrom=this.getTrackScrollPos(),iTo=iFrom+this._maxVisibleTrackNum();this.props.onInfo(x,this.logController,iFrom,iTo)}onContentRescale(){this.showSelection(),this.props.onContentRescale?.()}onContentSelection(){this.showSelection(),this.props.onContentSelection?.()}onTrackMouseEvent(ev){this.props.onTrackMouseEvent?.(this,ev)}onTemplateChanged(){this.updateInfo(),this.template=this._generateTemplate(),this.props.onTemplateChanged?.()}zoomContentTo(domain){return!!this.logController&&(0,log_viewer.uL)(this.logController,domain)}scrollContentTo(f){return this.isDefZoom?(this.isDefZoom=!1,!1):!!this.logController&&(0,log_viewer.eM)(this.logController,f)}zoomContent(zoom){return!!this.logController&&(0,log_viewer.Lk)(this.logController,zoom)}showSelection(){if(!this.logController)return;this.props.options?.hideCurrentPosition&&(this.selCurrent=void 0),this.props.options?.hideSelectionInterval&&(this.selPinned=void 0);const horizontal=this.props.horizontal,elements=this.logController.overlay.elements,rbelm=elements["rubber-band"],pinelm=elements.pinned;rbelm&&pinelm&&(rbelm.style.visibility=void 0===this.selCurrent?"hidden":"visible",pinelm.style.visibility=void 0===this.selPinned?"hidden":"visible",showSelection(rbelm,pinelm,this.selCurrent,this.selPinned,horizontal,this.logController));if(this.props.wellpick){const wps=getWellPicks(this);if(!wps.length)return;let i=0;for(const wp of wps){const horizon=wp.horizon,vPrimary=wp.vPrimary,pinelm=elements["wp"+horizon];if(pinelm){if(showWellPick(pinelm,vPrimary,horizontal,this.logController),this.props.patterns){const pinelm1=elements["wpFill"+horizon];if(pinelm1){const wp2=wps[i+1],vPrimary2=wp2?.vPrimary;fillWellPicks(pinelm1,vPrimary,vPrimary2,horizontal,this.logController)}}i++}}posWellPickTitles(this.logController,this)}}selectContent(selection){const selPinned=selection[1];this.selCurrent===selection[0]&&this.selPinned===selPinned||(this.selCurrent=selection[0],this.selPinned=selPinned,this.selPersistent=void 0!==this.selPinned,this.showSelection(),this.updateInfo())}setContentBaseDomain(domain){return!!this.logController&&(0,log_viewer.R6)(this.logController,domain)}getContentBaseDomain(){return this.logController?(0,log_viewer.tq)(this.logController):[0,0]}getContentDomain(){return this.logController?(0,log_viewer.cl)(this.logController):[0,0]}getContentZoom(){return this.logController?(0,log_viewer.zu)(this.logController):1}getContentSelection(){return this.logController?[this.selCurrent,this.selPinned]:[void 0,void 0]}setContentScale(value){return function setContentScale(controller,horizontal,value){if(controller){const zoom=getContentBaseScale(controller,horizontal)/value;controller.zoomContent(zoom)}}(this,this.props.horizontal,value)}getContentScale(){const zoomValue=this.getContentZoom();return getContentBaseScale(this,this.props.horizontal)/zoomValue}_graphTrackMax(){if(!this.logController)return 0;const nScaleTracks=(0,utils_tracks.C9)(this.logController.tracks);return this.logController.tracks.length-nScaleTracks}_newTrackScrollPos(pos){let newPos=pos;const posMax=this.getTrackScrollPosMax();return newPos>posMax&&(newPos=posMax),newPos<0&&(newPos=0),newPos}_maxVisibleTrackNum(){return this.props.options?.maxVisibleTrackNum?this.props.options?.maxVisibleTrackNum:this.props.horizontal?3:5}_forceUpdateTitleTooltips(){if(!this.container)return;const elements=this.container.getElementsByClassName("track-title");for(const element of elements)element.textContent&&element.setAttribute("title",element.textContent)}scrollTrackBy(delta){this.setState((state=>({scrollTrackPos:this._newTrackScrollPos(state.scrollTrackPos+delta)})))}scrollTrackTo(pos){this._isMount&&this.setState((state=>{const newPos=this._newTrackScrollPos(pos);return state.scrollTrackPos===newPos?null:{scrollTrackPos:newPos}}))}getTrackScrollPos(){return this.state.scrollTrackPos}getTrackScrollPosMax(){let posMax=this._graphTrackMax()-this._maxVisibleTrackNum();return posMax<0&&(posMax=0),posMax}getTrackZoom(){return this._graphTrackMax()/this._maxVisibleTrackNum()}getSelectedTrackIndices(){return(0,log_viewer.ul)(this.logController)}setSelectedTrackIndices(selection){const changed=(0,log_viewer._X)(this.logController,selection);return changed&&this.onTrackSelection(),changed}updateInfo(){this.setInfo()}getWellLog(){return this.props.welllog}getTemplate(){return this.template}setTemplate(template){const tNew=JSON.stringify(template);JSON.stringify(this.template)!==tNew&&(this.template=JSON.parse(tNew),this.setTracks(!0),this.onTemplateChanged())}_generateTemplate(){const template=this.template,tracks=[];if(this.logController)for(const track of this.logController.tracks){if((0,utils_tracks.Q1)(track))continue;const templateTrack=(0,utils_tracks.Qv)(track);tracks.push((0,deepcopy.A)(templateTrack))}const axes=(0,utils_tracks.Dy)(this.props.welllog,this.props.axisMnemos);return{name:template.name,scale:{primary:this.props.primaryAxis||"",allowSecondary:template.scale?.allowSecondary&&axes.length>1},tracks:tracks,styles:template.styles}}_addTrack(trackCurrent,templateTrack){templateTrack.required=!0;let trackNew;trackNew=templateTrack.plots&&templateTrack.plots[0]&&"stacked"===templateTrack.plots[0].type?(0,utils_tracks.X1)(this,null,templateTrack,trackCurrent,true):(0,utils_tracks._H)(this,null,templateTrack,trackCurrent,true),trackNew&&(this.onTemplateChanged(),this.scrollTrackBy(1),this.selectTrack(trackNew,!0))}_editTrack(track,templateTrack){const titleCompare=track.options.label?.localeCompare(templateTrack.title);templateTrack.plots&&templateTrack.plots[0]&&"stacked"===templateTrack.plots[0].type?(0,utils_tracks.X1)(this,track,templateTrack,track,!1):(0,utils_tracks._H)(this,track,templateTrack,track,!1),titleCompare&&this._forceUpdateTitleTooltips(),this.onTemplateChanged()}removeTrack(track){this.logController&&(this.logController.removeTrack(track),this.onTrackScroll(),this.onTrackSelection(),this.onTemplateChanged())}isTrackSelected(track){return!!this.logController&&(0,log_viewer.$h)(this.logController,track)}selectTrack(track,selected){let changed=!1;if(this.logController)for(const _track of this.logController.tracks)(0,log_viewer.k7)(this.logController,_track,selected&&track===_track)&&(changed=!0);return changed&&this.onTrackSelection(),changed}addTrackPlot(track,templatePlot){(0,utils_tracks.nv)(this,track,null,templatePlot),this.onTemplateChanged()}_editTrackPlot(track,plot,_templatePlot){const templatePlot={..._templatePlot};(0,utils_tracks.nv)(this,track,plot,templatePlot),this.onTemplateChanged()}removeTrackPlot(track,plot){(0,utils_tracks.fP)(this,track,plot);(0,utils_tracks.Qv)(track).required=!0,this.onTemplateChanged()}addTrack(parent,trackCurrent){parent&&function addTrack(parent,wellLogView,onOK){const el=document.createElement("div");el.style.width="10px",el.style.height="13px",parent.appendChild(el),react_dom.render(react.createElement(TrackPropertiesDialog,{wellLogView:wellLogView,onOK:onOK}),el)}(parent,this,this._addTrack.bind(this,trackCurrent))}editTrack(parent,track){if(parent){!function editTrack(parent,wellLogView,templateTrack,onOK){const el=document.createElement("div");el.style.width="10px",el.style.height="13px",parent.appendChild(el),react_dom.render(react.createElement(TrackPropertiesDialog,{templateTrack:templateTrack,wellLogView:wellLogView,onOK:onOK}),el)}(parent,this,(0,utils_tracks.Qv)(track),this._editTrack.bind(this,track))}}addPlot(parent,track){parent&&function addPlot(parent,wellLogView,track){const el=document.createElement("div");el.style.width="10px",el.style.height="13px",parent.appendChild(el),react_dom.render(react.createElement(PlotPropertiesDialog,{wellLogView:wellLogView,track:track,onOK:wellLogView.addTrackPlot.bind(wellLogView,track)}),el)}(parent,this,track)}editPlot(parent,track,plot){if(parent){const templatePlot=function fillPlotTemplate(templateTrack,plot){const options=plot.options,optionsDifferential=plot.options,options1=optionsDifferential.serie1,options2=optionsDifferential.serie2,legend=options.legendInfo(),legendDifferential=legend,legend1=legendDifferential.serie1,legend2=legendDifferential.serie2,scale=templateTrack?.scale!==options.scale?options.scale:void 0;return{style:void 0,type:(0,utils_tracks.Kc)(plot),scale:"log"==scale||"linear"==scale?scale:void 0,name:(legend1&&legend1.label?legend1.label:legend.label)||"",name2:legend2&&legend2.label?legend2.label:"",color:(options1?options1.color:options.color)||"",color2:options2?options2.color:"",inverseColor:options.inverseColor||"",fill:(options1?options1.fill:options.fill)||"",fill2:options2?options2.fill:"",colorTable:"function"==typeof options.colorTable?"Function":options.colorTable?.name??"",inverseColorTable:"function"==typeof options.inverseColorTable?"Function":options.inverseColorTable?.name??"",colorScale:options.colorScale,inverseColorScale:options.inverseColorScale}}((0,utils_tracks.Qv)(track),plot);!function editPlot(parent,wellLogView,track,templatePlot,onOK){const el=document.createElement("div");el.style.width="10px",el.style.height="13px",parent.appendChild(el),react_dom.render(react.createElement(PlotPropertiesDialog,{templatePlot:templatePlot,wellLogView:wellLogView,track:track,onOK:onOK}),el)}(parent,this,track,templatePlot,this._editTrackPlot.bind(this,track,plot))}}createViewTitle(viewTitle){return"object"==typeof viewTitle?viewTitle:!0===viewTitle?this.props.welllog?.header.well:viewTitle}render(){const horizontal=this.props.horizontal,viewTitle=this.props.viewTitle;return react.createElement("div",{className:"welllogview",style:{flexDirection:horizontal?"row":"column"}},viewTitle&&react.createElement("div",{className:horizontal?"title title-horizontal":"title"},this.createViewTitle(viewTitle)),react.createElement("div",{className:"view"},react.createElement("div",{className:"container",ref:el=>this.container=el}),this.state.errorText&&react.createElement("div",{className:"error"},this.state.errorText)))}}const WellLogViewOptions_propTypes=prop_types_default().shape({maxContentZoom:prop_types_default().number,maxVisibleTrackNum:prop_types_default().number,checkDatafileSchema:prop_types_default().bool,hideTrackTitle:prop_types_default().bool,hideTrackLegend:prop_types_default().bool,hideCurrentPosition:prop_types_default().bool,hideSelectionInterval:prop_types_default().bool});function _propTypesWellLogView(){return{id:prop_types_default().string,welllog:prop_types_default().object,template:prop_types_default().object.isRequired,colorTables:prop_types_default().any,wellpick:prop_types_default().object,patternsTable:prop_types_default().object,patterns:prop_types_default().array,horizontal:prop_types_default().bool,primaryAxis:prop_types_default().string,axisTitles:prop_types_default().object,axisMnemos:prop_types_default().object,viewTitle:prop_types_default().oneOfType([prop_types_default().bool,prop_types_default().string,prop_types_default().object]),domain:prop_types_default().arrayOf(prop_types_default().number),selection:prop_types_default().arrayOf(prop_types_default().number),options:WellLogViewOptions_propTypes}}WellLogView.propTypes=_propTypesWellLogView();var components_WellLogView=WellLogView;WellLogView.__docgenInfo={description:"",methods:[{name:"createLogViewer",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"getAxesInfo",docblock:null,modifiers:[],params:[],returns:{type:{name:"AxesInfo"}}},{name:"setTracks",docblock:null,modifiers:[],params:[{name:"checkSchema",optional:!0,type:{name:"boolean"}}],returns:{type:{name:"void"}}},{name:"findTrackById",docblock:null,modifiers:[],params:[{name:"trackId",optional:!1,type:{name:"union",raw:"string | number",elements:[{name:"string"},{name:"number"}]}}],returns:{type:{name:"union",raw:"Track | undefined",elements:[{name:"Track"},{name:"undefined"}]}}},{name:"setControllerZoom",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"setControllerSelection",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"setControllerDefaultZoom",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"onTrackScroll",docblock:"Display current state of track scrolling",modifiers:[],params:[],returns:{type:{name:"void"}},description:"Display current state of track scrolling"},{name:"onTrackSelection",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"setInfo",docblock:null,modifiers:[],params:[{name:"x",optional:!0,type:null}],returns:{type:{name:"void"}}},{name:"onContentRescale",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"onContentSelection",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"onTrackMouseEvent",docblock:null,modifiers:[],params:[{name:"ev",optional:!1,type:{name:"TrackMouseEvent",alias:"TrackMouseEvent"}}],returns:{type:{name:"void"}}},{name:"onTemplateChanged",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"zoomContentTo",docblock:null,modifiers:[],params:[{name:"domain",optional:!1,type:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]}}],returns:{type:{name:"boolean"}}},{name:"scrollContentTo",docblock:null,modifiers:[],params:[{name:"f",optional:!1,type:{name:"number"}}],returns:{type:{name:"boolean"}}},{name:"zoomContent",docblock:null,modifiers:[],params:[{name:"zoom",optional:!1,type:{name:"number"}}],returns:{type:{name:"boolean"}}},{name:"showSelection",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"selectContent",docblock:null,modifiers:[],params:[{name:"selection",optional:!1,type:{name:"tuple",raw:"[number | undefined, number | undefined]",elements:[{name:"union",raw:"number | undefined",elements:[{name:"number"},{name:"undefined"}]},{name:"union",raw:"number | undefined",elements:[{name:"number"},{name:"undefined"}]}]}}],returns:{type:{name:"void"}}},{name:"setContentBaseDomain",docblock:null,modifiers:[],params:[{name:"domain",optional:!1,type:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]}}],returns:{type:{name:"boolean"}}},{name:"getContentBaseDomain",docblock:null,modifiers:[],params:[],returns:{type:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]}}},{name:"getContentDomain",docblock:null,modifiers:[],params:[],returns:{type:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]}}},{name:"getContentZoom",docblock:null,modifiers:[],params:[],returns:{type:{name:"number"}}},{name:"getContentSelection",docblock:null,modifiers:[],params:[],returns:{type:{name:"tuple",raw:"[number | undefined, number | undefined]",elements:[{name:"union",raw:"number | undefined",elements:[{name:"number"},{name:"undefined"}]},{name:"union",raw:"number | undefined",elements:[{name:"number"},{name:"undefined"}]}]}}},{name:"setContentScale",docblock:null,modifiers:[],params:[{name:"value",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"getContentScale",docblock:null,modifiers:[],params:[],returns:{type:{name:"number"}}},{name:"_graphTrackMax",docblock:null,modifiers:[],params:[],returns:{type:{name:"number"}}},{name:"_newTrackScrollPos",docblock:null,modifiers:[],params:[{name:"pos",optional:!1,type:{name:"number"}}],returns:{type:{name:"number"}}},{name:"_maxVisibleTrackNum",docblock:null,modifiers:[],params:[],returns:{type:{name:"number"}}},{name:"_forceUpdateTitleTooltips",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"scrollTrackBy",docblock:null,modifiers:[],params:[{name:"delta",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"scrollTrackTo",docblock:null,modifiers:[],params:[{name:"pos",optional:!1,type:{name:"number"}}],returns:{type:{name:"void"}}},{name:"getTrackScrollPos",docblock:null,modifiers:[],params:[],returns:{type:{name:"number"}}},{name:"getTrackScrollPosMax",docblock:null,modifiers:[],params:[],returns:{type:{name:"number"}}},{name:"getTrackZoom",docblock:null,modifiers:[],params:[],returns:{type:{name:"number"}}},{name:"getSelectedTrackIndices",docblock:null,modifiers:[],params:[],returns:{type:{name:"Array",elements:[{name:"number"}],raw:"number[]"}}},{name:"setSelectedTrackIndices",docblock:null,modifiers:[],params:[{name:"selection",optional:!1,type:{name:"Array",elements:[{name:"number"}],raw:"number[]"}}],returns:{type:{name:"boolean"}}},{name:"updateInfo",docblock:null,modifiers:[],params:[],returns:{type:{name:"void"}}},{name:"getWellLog",docblock:null,modifiers:[],params:[],returns:{type:{name:"union",raw:"WellLog | undefined",elements:[{name:"signature",type:"object",raw:"{\n    header: WellLogHeader;\n    curves: WellLogCurve[];\n    data: WellLogDataRow[];\n\n    metadata_discrete?: Record<string, WellLogMetadataDiscrete>;\n}",signature:{properties:[{key:"header",value:{name:"signature",type:"object",raw:"{\n    name?: string; // Log name\n    description?: string; // Log description\n    externalIds?: Record<string, string>; // IDs within external storage, key being the storage name, and value being the ID.\n    well?: string; // Well name\n    wellbore?: string; // Wellbore name\n    filed?: string; // Field name\n    country?: string; // Country of operation\n    date?: datetime; // Logging date\n    operator?: string; // Operator company name\n    serviceCompany?: string; // Service company name\n    runNumber?: string; // Run number\n    elevation?: float; // Vertical distance between measured depth 0.0 and mean sea level in SI unit (meters)\n    source?: string; // Source system or process of this log\n    startIndex?: number /*According to index value type*/; // Value of the first index. Unit according to index curve.\n    endIndex?: number /*According to index value type*/; // Value of the last index. Unit according to index curve.\n    step?: number /*According to index value type*/; // Distance between indices if regularly sampled. Unit according to index curve. If log is time based, milliseconds assumed.\n    dataUri?: string; //\tPoint to data source in case this is kept separate. Can be absolute or relative according to the URI specification.\n    //...\n}",signature:{properties:[{key:"name",value:{name:"string",required:!1}},{key:"description",value:{name:"string",required:!1}},{key:"externalIds",value:{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>",required:!1}},{key:"well",value:{name:"string",required:!1}},{key:"wellbore",value:{name:"string",required:!1}},{key:"filed",value:{name:"string",required:!1}},{key:"country",value:{name:"string",required:!1}},{key:"date",value:{name:"string",required:!1}},{key:"operator",value:{name:"string",required:!1}},{key:"serviceCompany",value:{name:"string",required:!1}},{key:"runNumber",value:{name:"string",required:!1}},{key:"elevation",value:{name:"number",required:!1}},{key:"source",value:{name:"string",required:!1}},{key:"startIndex",value:{name:"number",required:!1}},{key:"endIndex",value:{name:"number",required:!1}},{key:"step",value:{name:"number",required:!1}},{key:"dataUri",value:{name:"string",required:!1}}]},required:!0}},{key:"curves",value:{name:"Array",elements:[{name:"signature",type:"object",raw:"{\n    name: string; // Curve name or mnemonic. Mandatory. Non-null.\n    description?: string | null; // Curve description. Optional.\n    quantity?: string | null; // Curve quantity such as length, pressure, force etc. Optional.\n    unit?: string | null; // Unit of measurement such as m, ft, bar, etc. Optional.\n    valueType?: string | null; // Curve value type: float, integer, string, datetime or boolean. Non-null. Optional. float assumed if not present.\n    dimensions?: integer; //  \tNumber of dimensions. [1,>. Non-null. Optional. 1 assumed if not present.\n    // Not supported yet:\n    //axis?: \tarray of curve definition; \t// A detailed description of the multi-dimensional structure of the curve in case this spans multiple axes. One element per axis. The combined product of the axis diemsnsions elements must equal the dimensions of the curve. Optional.\n    //maxSize?: integer; \t// Maximum storage size (number of bytes) for UTF-8 string data. Used with binary storage in order to align the curve data. [0,>. Optional. 20 assumed if not present. Ignored for curves where valueType is other than string.\n}",signature:{properties:[{key:"name",value:{name:"string",required:!0}},{key:"description",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"quantity",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"unit",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"valueType",value:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}],required:!1}},{key:"dimensions",value:{name:"number",required:!1}}]}}],raw:"WellLogCurve[]",required:!0}},{key:"data",value:{name:"Array",elements:[{name:"Array",elements:[{name:"unknown"}],raw:"(number | string | null)[]"}],raw:"WellLogDataRow[]",required:!0}},{key:"metadata_discrete",value:{name:"Record",elements:[{name:"string"},{name:"signature",type:"object",raw:'{\n    attributes: string[] /* ["color", "code" ] */;\n    objects: WellLogMetadataDiscreteObjects;\n}',signature:{properties:[{key:"attributes",value:{name:"Array",elements:[{name:"string"}],raw:"string[]",required:!0}},{key:"objects",value:{name:"Record",elements:[{name:"string"},{name:"tuple",raw:"[]",elements:[]}],raw:"Record<string, []>",required:!0}}]}}],raw:"Record<string, WellLogMetadataDiscrete>",required:!1}}]}},{name:"undefined"}]}}},{name:"getTemplate",docblock:null,modifiers:[],params:[],returns:{type:{name:"Template"}}},{name:"setTemplate",docblock:null,modifiers:[],params:[{name:"template",optional:!1,type:{name:"Template",alias:"Template"}}],returns:{type:{name:"void"}}},{name:"_generateTemplate",docblock:null,modifiers:[],params:[],returns:{type:{name:"Template"}}},{name:"_addTrack",docblock:null,modifiers:[],params:[{name:"trackCurrent",optional:!1,type:{name:"Track",alias:"Track"}},{name:"templateTrack",optional:!1,type:{name:"signature",type:"object",raw:"{\n    title: string;\n    required?: boolean;\n    /**\n     * Relative track width when used in a LogController, i.e. a track with width set to\n     * 3 will be three times wider than tracks set to width 1.\n     *\n     * Default is 1\n     */\n    width?: number;\n    plots: TemplatePlot[];\n    scale?: TemplatePlotScaleTypes; // 'linear' or 'log', default first plot scale\n    domain?: [number, number]; // min, max values, default all plots domain\n}",signature:{properties:[{key:"title",value:{name:"string",required:!0}},{key:"required",value:{name:"boolean",required:!1}},{key:"width",value:{name:"number",required:!1},description:"Relative track width when used in a LogController, i.e. a track with width set to\n3 will be three times wider than tracks set to width 1.\n\nDefault is 1"},{key:"plots",value:{name:"Array",elements:[{name:"TemplatePlot"}],raw:"TemplatePlot[]",required:!0}},{key:"scale",value:{name:"union",raw:'"linear" | "log"',elements:[{name:"literal",value:'"linear"'},{name:"literal",value:'"log"'}],required:!1}},{key:"domain",value:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}],required:!1}}]},alias:"TemplateTrack"}}],returns:{type:{name:"void"}}},{name:"_editTrack",docblock:null,modifiers:[],params:[{name:"track",optional:!1,type:{name:"Track",alias:"Track"}},{name:"templateTrack",optional:!1,type:{name:"signature",type:"object",raw:"{\n    title: string;\n    required?: boolean;\n    /**\n     * Relative track width when used in a LogController, i.e. a track with width set to\n     * 3 will be three times wider than tracks set to width 1.\n     *\n     * Default is 1\n     */\n    width?: number;\n    plots: TemplatePlot[];\n    scale?: TemplatePlotScaleTypes; // 'linear' or 'log', default first plot scale\n    domain?: [number, number]; // min, max values, default all plots domain\n}",signature:{properties:[{key:"title",value:{name:"string",required:!0}},{key:"required",value:{name:"boolean",required:!1}},{key:"width",value:{name:"number",required:!1},description:"Relative track width when used in a LogController, i.e. a track with width set to\n3 will be three times wider than tracks set to width 1.\n\nDefault is 1"},{key:"plots",value:{name:"Array",elements:[{name:"TemplatePlot"}],raw:"TemplatePlot[]",required:!0}},{key:"scale",value:{name:"union",raw:'"linear" | "log"',elements:[{name:"literal",value:'"linear"'},{name:"literal",value:'"log"'}],required:!1}},{key:"domain",value:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}],required:!1}}]},alias:"TemplateTrack"}}],returns:{type:{name:"void"}}},{name:"removeTrack",docblock:null,modifiers:[],params:[{name:"track",optional:!1,type:{name:"Track",alias:"Track"}}],returns:{type:{name:"void"}}},{name:"isTrackSelected",docblock:null,modifiers:[],params:[{name:"track",optional:!1,type:{name:"Track",alias:"Track"}}],returns:{type:{name:"boolean"}}},{name:"selectTrack",docblock:null,modifiers:[],params:[{name:"track",optional:!1,type:{name:"Track",alias:"Track"}},{name:"selected",optional:!1,type:{name:"boolean"}}],returns:{type:{name:"boolean"}}},{name:"addTrackPlot",docblock:null,modifiers:[],params:[{name:"track",optional:!1,type:{name:"Track",alias:"Track"}},{name:"templatePlot",optional:!1,type:{name:"TemplatePlot",alias:"TemplatePlot"}}],returns:{type:{name:"void"}}},{name:"_editTrackPlot",docblock:null,modifiers:[],params:[{name:"track",optional:!1,type:{name:"Track",alias:"Track"}},{name:"plot",optional:!1,type:{name:"Plot",alias:"Plot"}},{name:"_templatePlot",optional:!1,type:{name:"TemplatePlot",alias:"TemplatePlot"}}],returns:{type:{name:"void"}}},{name:"removeTrackPlot",docblock:null,modifiers:[],params:[{name:"track",optional:!1,type:{name:"Track",alias:"Track"}},{name:"plot",optional:!1,type:{name:"Plot",alias:"Plot"}}],returns:{type:{name:"void"}}},{name:"addTrack",docblock:null,modifiers:[],params:[{name:"parent",optional:!1,type:{name:"union",raw:"HTMLElement | null",elements:[{name:"HTMLElement"},{name:"null"}]}},{name:"trackCurrent",optional:!1,type:{name:"Track",alias:"Track"}}],returns:{type:{name:"void"}}},{name:"editTrack",docblock:null,modifiers:[],params:[{name:"parent",optional:!1,type:{name:"union",raw:"HTMLElement | null",elements:[{name:"HTMLElement"},{name:"null"}]}},{name:"track",optional:!1,type:{name:"Track",alias:"Track"}}],returns:{type:{name:"void"}}},{name:"addPlot",docblock:null,modifiers:[],params:[{name:"parent",optional:!1,type:{name:"union",raw:"HTMLElement | null",elements:[{name:"HTMLElement"},{name:"null"}]}},{name:"track",optional:!1,type:{name:"Track",alias:"Track"}}],returns:{type:{name:"void"}}},{name:"editPlot",docblock:null,modifiers:[],params:[{name:"parent",optional:!1,type:{name:"union",raw:"HTMLElement | null",elements:[{name:"HTMLElement"},{name:"null"}]}},{name:"track",optional:!1,type:{name:"Track",alias:"Track"}},{name:"plot",optional:!1,type:{name:"Plot",alias:"Plot"}}],returns:{type:{name:"void"}}},{name:"createViewTitle",docblock:null,modifiers:[],params:[{name:"viewTitle",optional:!1,type:{name:"union",raw:"string | boolean | JSX.Element",elements:[{name:"string"},{name:"boolean"},{name:"JSX.Element"}]}}],returns:{type:{name:"ReactNode"}}}],displayName:"WellLogView"}},"./packages/well-log-viewer/src/utils/deepcopy.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";function deepCopy(source){return JSON.parse(JSON.stringify(source))}function deepCopyTemplate(source){const target=deepCopy(source);return source?.styles?.forEach(((style,index)=>{const target_style=target.styles?.at(index);target_style&&(style.colorTable&&"function"==typeof style.colorTable&&(target_style.colorTable=style.colorTable),style.inverseColorTable&&"function"==typeof style.inverseColorTable&&(target_style.inverseColorTable=style.inverseColorTable))})),target}__webpack_require__.d(__webpack_exports__,{A:function(){return deepCopy},a:function(){return deepCopyTemplate}})},"./packages/well-log-viewer/src/utils/log-viewer.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{$h:function(){return isTrackSelected},Lk:function(){return zoomContent},OG:function(){return updateLegendRows},PZ:function(){return scrollTracksTo},R6:function(){return setContentBaseDomain},Zn:function(){return removeOverlay},_X:function(){return setSelectedTrackIndices},cl:function(){return getContentDomain},eM:function(){return scrollContentTo},hC:function(){return isEqualRanges},k7:function(){return selectTrack},q_:function(){return isEqDomains},tq:function(){return getContentBaseDomain},uL:function(){return zoomContentTo},ul:function(){return getSelectedTrackIndices},zu:function(){return getContentZoom}});var _utils_tracks__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./packages/well-log-viewer/src/utils/tracks.ts");function isEqualRanges(d1,d2){return d1?d2?d1[0]===d2[0]&&d1[1]===d2[1]:!d1:!d2}function isEqDomains(d1,d2){if(Number.isNaN(d1[1])||Number.isNaN(d1[0])||Number.isNaN(d2[1])||Number.isNaN(d2[0]))return!0;const eps=1e-5*Math.abs(d1[1]-d1[0]+(d2[1]-d2[0]));return Math.abs(d1[0]-d2[0])<eps&&Math.abs(d1[1]-d2[1])<eps}function removeOverlay(logViewer){logViewer.container.select(".overlay").remove()}function showTrack(track,visible){if(track.elm){const elm=track.elm.parentElement;if(elm){const display=visible?"flex":"none";if(elm.style.display!==display)return elm.style.display=display,!0}}return!1}function isTrackSelected(_logViewer,track){if(track.elm){const elm=track.elm.parentElement;if(elm)return elm.classList.contains("selected")}return!1}function selectTrack(logViewer,track,selected){if(track.elm){const elm=track.elm.parentElement;if(elm&&isTrackSelected(0,track)!==selected)return elm.classList.toggle("selected"),!0}return!1}function getSelectedTrackIndices(logViewer){const selectedTrackIndices=[];if(logViewer){let iTrack=0;for(const track of logViewer.tracks)isTrackSelected(0,track)&&selectedTrackIndices.push(iTrack),iTrack++}return selectedTrackIndices}function zoomContent(logViewer,zoom){zoom||(zoom=1);const[b1,b2]=logViewer.scaleHandler.baseDomain(),[d1,d2]=logViewer.domain,currentZoom=Math.abs(b2-b1)/Math.abs(d2-d1);if(Math.abs(Math.log(currentZoom/zoom))>.01){let d=.5*(d2-d1),c=d1+d;d*=currentZoom/zoom,c+d>b2&&(c=b2-d),c-d<b1&&(c=b1+d);return zoomContentTo(logViewer,[c-d,c+d])}return!1}function scrollContentTo(logViewer,f){const[b1,b2]=logViewer.scaleHandler.baseDomain(),[d1,d2]=logViewer.domain,d=d2-d1,c=b1+f*(b2-b1-d);return zoomContentTo(logViewer,[c,c+d])}function zoomContentTo(logViewer,domain){return!isEqDomains(logViewer.domain,domain)&&(logViewer.zoomTo(domain),isEqDomains(logViewer.domain,domain)||(logViewer.zoomTo(domain),isEqDomains(logViewer.domain,domain)||(console.warn("zoomContentTo failed. Try to set "+domain+" but get "+logViewer.domain),logViewer.zoomTo(domain))),!0)}function setContentBaseDomain(logViewer,domain){const[b1,b2]=logViewer.scaleHandler.baseDomain();return(b1!==domain[0]||b2!==domain[1])&&(logViewer.domain=domain,!0)}function getContentBaseDomain(logViewer){const[b1,b2]=logViewer.scaleHandler.baseDomain();return[b1,b2]}function getContentDomain(logViewer){const[d1,d2]=logViewer.domain;return[d1,d2]}function getContentZoom(logViewer){const[b1,b2]=logViewer.scaleHandler.baseDomain(),[d1,d2]=logViewer.domain;return Math.abs(b2-b1)/Math.abs(d2-d1)}function scrollTracksTo(logViewer,iFrom,iTo){let visibilityIsChanged=!1,iTrack=0;for(const track of logViewer.tracks){if((0,_utils_tracks__WEBPACK_IMPORTED_MODULE_0__.Q1)(track))continue;showTrack(track,iFrom<=iTrack&&iTrack<iTo)&&(visibilityIsChanged=!0),iTrack++}return visibilityIsChanged&&logViewer.updateTracks(),visibilityIsChanged}function setSelectedTrackIndices(logViewer,selectedTrackIndices){let changed=!1;if(logViewer&&selectedTrackIndices){let iTrack=0;for(const track of logViewer.tracks){selectTrack(0,track,selectedTrackIndices.indexOf(iTrack)>=0)&&(changed=!0),iTrack++}}return changed}function updateLegendRows(logViewer){logViewer.updateLegendRows()}},"./packages/well-log-viewer/src/utils/minmax.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";function checkMinMaxValue(minmax,value){null!==value&&(minmax[0]===Number.POSITIVE_INFINITY?minmax[0]=minmax[1]=value:minmax[0]>value?minmax[0]=value:minmax[1]<value&&(minmax[1]=value))}function checkMinMax(minmax,minmaxSrc){minmax[0]===Number.POSITIVE_INFINITY?(minmax[0]=minmaxSrc[0],minmax[1]=minmaxSrc[1]):(minmax[0]>minmaxSrc[0]&&(minmax[0]=minmaxSrc[0]),minmax[1]<minmaxSrc[1]&&(minmax[1]=minmaxSrc[1]))}function roundMinMax(minmax){let mi=minmax[0],ma=minmax[1];if(!isFinite(mi)||!isFinite(ma))return[mi,ma];if(!mi&&!ma)return[mi,ma];let d=ma-mi;if(d<0)return[mi,ma];d?(ma-=1e-7*d,mi+=1e-7*d,d=ma-mi):d=1;const l0=Math.floor(Math.log10(d));let p=Math.pow(10,l0+1),c=(mi+.5*d)/p;Math.abs(c)>1e9?c*=p:c=Math.floor(c)*p;let q=.5,l=l0,k1=0,k2=0,k=k2-k1;for(;l>-20;l--){for(p*=.1;q>=.5&&(d=p*q,k2=Math.floor((ma-c)/d),ma>=c&&k2++,k1=Math.floor((mi-c)/d),mi<c&&k1--,k=k2-k1,!(k>=9));)q*=.5;if(k>=9)break;q=2}if(k>=9)for(;l<l0;l++){for(;q<=2&&(d=p*q,k2=Math.floor((ma-c)/d),ma>=c&&k2++,k1=Math.floor((mi-c)/d),mi<c&&k1--,k=k2-k1,!(k<=9));)q*=2;if(k<=9)break;q=.5,p*=10}if(k<6){const j=2==q?5:2;k=k1>=0?k1/j*j:(k1-j+1)/j*j,k2-k>6?(k=k2<0?k2/j*j:(k2+j-1)/j*j,k2=k-k1>6?(k2+k1+6)/2:k):(k1=k2-6,k2=k1+6),k1=k}const b=k2*d+c;return[parseFloat((k1*d+c).toPrecision(5)),parseFloat(b.toPrecision(5))]}function roundLogMinMax(minmax){const r=roundMinMax(minmax);return r[0]<=0&&(r[0]=minmax[0],r[0]<=0&&console.error("Wrong data range for logarithm scale "+minmax)),[parseFloat(r[0].toPrecision(5)),parseFloat(r[1].toPrecision(5))]}__webpack_require__.d(__webpack_exports__,{T5:function(){return roundMinMax},nt:function(){return checkMinMax},uN:function(){return checkMinMaxValue},xY:function(){return roundLogMinMax}})},"./packages/well-log-viewer/src/utils/tracks.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{_H:function(){return addOrEditGraphTrack},nv:function(){return addOrEditGraphTrackPlot},X1:function(){return addOrEditStackedTrack},Tt:function(){return createTracks},Dy:function(){return getAvailableAxes},VN:function(){return getDiscreteColorAndName},P5:function(){return getDiscreteMeta},Kc:function(){return getPlotType},C9:function(){return getScaleTrackNum},Qv:function(){return getTrackTemplate},Yl:function(){return indexOfElementByName},Q1:function(){return isScaleTrack},fP:function(){return removeGraphTrackPlot},Sw:function(){return toggleId}});var index_umd=__webpack_require__("./node_modules/@equinor/videx-wellog/dist/index.umd.js"),src=__webpack_require__("./node_modules/d3/src/index.js");function onUpdateLegend(elm,bounds,track){const lg=(0,src.Ltv)(elm),{horizontal:horizontal,label:label,abbr:abbr}=track.options,vertText=horizontal;let{height:h,width:w,top:top}=bounds;if(h+=top,horizontal!=vertText){top=0;const tmp=h;h=w,w=tmp}const lineSize=Math.min(12,h/3.3),lsp=.1*lineSize,x=w/2;top=5;let y0=top+h;y0-=(h-3.3*lineSize)/2;const y3=y0-lineSize/1.2,y2=y3-lineSize+lsp,y1=y2-lineSize-lsp,bScaleTrack=!(track instanceof index_umd.StackedTrack);let textSize=lineSize;textSize=Math.max(6,Math.min(textSize,w*(bScaleTrack?.25:.15)));const g=lg.select(".legend"),lbl=g.select("text.scale-title");if((0,index_umd.setAttrs)(lbl,{transform:vertText?`translate(${bScaleTrack?y1:y2}, ${x})rotate(-90)`:`translate(${x},${bScaleTrack?y1:y2})`,"font-size":`${textSize}px`,fill:track instanceof index_umd.DualScaleTrack&&track.isMaster?"black":"#555"}),lbl.text(abbr||label||"???"),bScaleTrack&&track.extent){const val=g.select("text.scale-range");(0,index_umd.setAttrs)(val,{transform:vertText?`translate(${y2},${x})rotate(-90)`:`translate(${x},${y2})`,"font-size":`${textSize}px`});const[min,max]=track.extent,span=Math.round(2*(max-min))/2;val.text(Number.isNaN(span)?"-":span);const unit=g.select("text.scale-units");(0,index_umd.setAttrs)(unit,{transform:vertText?`translate(${y3},${x})rotate(-90)`:`translate(${x},${y3})`,"font-size":textSize/1.2+"px"}),unit.text(track.options.units||"units")}}const scaleLegendConfig={elementType:"svg",getLegendRows:()=>2,onInit:(elm,track,updateTrigger)=>{track.legendUpdate=updateTrigger;const lg=(0,src.Ltv)(elm);lg.selectAll("g.legend").remove();const g=lg.append("g").attr("class","legend");g.append("text").classed("scale-title",!0).attr("font-weight","600").style("text-anchor","middle"),g.append("text").attr("class","scale-range").style("text-anchor","middle"),g.append("text").attr("class","scale-units").style("text-anchor","middle")},onUpdate:onUpdateLegend},stackLegendConfig={elementType:"svg",getLegendRows:()=>2,onInit:(elm,track,updateTrigger)=>{track.legendUpdate=updateTrigger;const lg=(0,src.Ltv)(elm);lg.selectAll("g.legend").remove();lg.append("g").attr("class","legend").append("text").classed("scale-title",!0).style("text-anchor","middle")},onUpdate:onUpdateLegend};function binarySearch(array,v){let lo=-1,hi=array.length;for(;1+lo<hi;){const mi=lo+(hi-lo>>1);array[mi][0]>v?hi=mi:lo=mi}return hi}function colorToString(color,cDefault){if(!color)return cDefault;return"#"+(16777216|color[0]<<16|color[1]<<8|color[2]).toString(16).substr(1)}function color4ToString(color){return"#"+(16777216|color[1]<<16|color[2]<<8|color[3]).toString(16).substr(1)}function getInterpolatedColor(colorTable,v){if("function"==typeof colorTable)return colorTable(v);const cNaN=colorTable.colorNaN?colorTable.colorNaN:[255,255,255];if(Number.isNaN(v))return cNaN;const colors=colorTable.colors,j=binarySearch(colors,v),cBelow=colorTable.colorBelow?colorTable.colorBelow:cNaN;if(j<=0)return cBelow;const cAbove=colorTable.colorAbove?colorTable.colorAbove:cBelow;if(j>=colors.length)return cAbove;const color0=colors[j-1],color=colors[j],f=(v-color0[0])/(color[0]-color0[0]);return[color0[1]+f*(color[1]-color0[1]),color0[2]+f*(color[2]-color0[2]),color0[3]+f*(color[3]-color0[3])]}function getInterpolatedColorString(colorTable,v){if("function"==typeof colorTable)return colorToString(colorTable(v),"#ffffff");const cNaN=colorToString(colorTable.colorNaN,"#ffffff");if(Number.isNaN(v))return cNaN;const cBelow=colorToString(colorTable.colorBelow,cNaN),cAbove=colorToString(colorTable.colorAbove,cBelow),colors=colorTable.colors,j=binarySearch(colors,v);let c;if(j<=0)c=cBelow;else if(j>=colors.length)c=cAbove;else{const color0=colors[j-1],color=colors[j],f=(v-color0[0])/(color[0]-color0[0]),p=16777216|color0[1]+f*(color[1]-color0[1])<<16|color0[2]+f*(color[2]-color0[2])<<8|color0[3]+f*(color[3]-color0[3]);if(c="#"+p.toString(16).substr(1),7!==c.length)return console.error("wrong color table "),console.log(c,p,p.toString(16),f,color,color0),cNaN}return c}var utils_minmax=__webpack_require__("./packages/well-log-viewer/src/utils/minmax.ts"),log_viewer=__webpack_require__("./packages/well-log-viewer/src/utils/log-viewer.ts"),deepcopy=__webpack_require__("./packages/well-log-viewer/src/utils/deepcopy.ts");function renderBasicPlotLegend(g,bounds,label,unit,domain,color,addLabelBg=!1){const x1=bounds.left+2,x2=Math.max(x1,bounds.left+bounds.width-2),lineY=bounds.top+.5*bounds.height,lineWidth=.1*bounds.height,line=g.append("line");(0,index_umd.setProps)(line,{attrs:{x1:x1,x2:x2,y1:lineY,y2:lineY},styles:{"stroke-width":lineWidth,stroke:color,fill:color}}),function renderTextLabels(g,bounds,label,unit,domain,color,addLabelBg=!1){const{height:h,width:w,top:top,left:left}=bounds,textSize=.35*h,subTextSize=.85*textSize,subY=top+.5*h+subTextSize,centerX=left+w/2,[min,max]=domain,labelTransform=`translate(${centerX},${top+textSize})`;let labelBg;addLabelBg&&(labelBg=g.append("rect").classed("label-bg",!0).attr("fill","white"));const labelText=g.append("text").text(label);if((0,index_umd.setProps)(labelText,{styles:{"text-anchor":"middle",fill:color},attrs:{class:"legend-label","font-size":`${textSize}px`,transform:labelTransform}}),addLabelBg){const bbox=labelText.node().getBBox();(0,index_umd.setAttrs)(labelBg,{x:centerX+bbox.x-1,y:top+1,width:bbox.width+2,height:.5*h-2})}if(unit){const unitTransform=`translate(${centerX},${subY})`,unitText=g.append("text").text(unit);(0,index_umd.setProps)(unitText,{styles:{"text-anchor":"middle",fill:color},attrs:{class:"legend-unit","font-size":`${subTextSize}px`,transform:unitTransform}})}const minText=Math.abs(min)>1e3&&min%1e3==0?`${Math.round(min/1e3)}k`:`${min}`,maxText=Math.abs(max)>1e3&&max%1e3==0?`${Math.round(max/1e3)}k`:`${max}`,minDomain=g.append("text").text(minText);(0,index_umd.setProps)(minDomain,{styles:{"text-anchor":"start",fill:color},attrs:{class:"legend-domain","font-size":`${subTextSize}px`,x:left+2,y:subY}});const maxDomain=g.append("text").text(maxText);(0,index_umd.setProps)(maxDomain,{styles:{"text-anchor":"end",fill:color},attrs:{class:"legend-domain","font-size":`${subTextSize}px`,x:left+w-2,y:subY}})}(g,bounds,label,unit,domain,color,addLabelBg)}let __idGradient=0;function createGradient(g,colorTable,rLogarithmic){const id="grad"+ ++__idGradient,lg=g.append("defs").append("linearGradient").attr("id",id).attr("x1","0%").attr("x2","100%").attr("y1","0%").attr("y2","0%");if(void 0!==rLogarithmic){const yDelta=Math.log(rLogarithmic),d=rLogarithmic-1,nIntervals=25;for(let i=0;i<=nIntervals;i++){const fraction=i/nIntervals,y=1+fraction*d,c=getInterpolatedColorString(colorTable,Math.log(y)/yDelta);lg.append("stop").attr("offset",100*fraction+"%").style("stop-color",c)}}else if("function"==typeof colorTable){const nIntervals=5;for(let i=0;i<nIntervals;i++){const fraction=i/nIntervals,c=getInterpolatedColorString(colorTable,fraction);lg.append("stop").attr("offset",100*fraction+"%").style("stop-color",c)}}else{const colors=colorTable.colors;for(let i=0;i<colors.length;i++){const color=colors[i],c=color4ToString(color);lg.append("stop").attr("offset",100*color[0]+"%").style("stop-color",c)}}return id}function renderGradientFillPlotLegend(g,bounds,legendInfo,plot){const options=plot.options,{top:top,left:left,width:width,height:height}=bounds,shadeH=height/2,shadeY=top,fillOpacity=Math.min((options.fillOpacity||0)+.25,1);if(options.inverseColor||options.inverseColorTable){const[min,max]=plot.scale.domain(),minIsLeft=min<=max,centerX=left+width/2,useMinAsBase=void 0===options.useMinAsBase||options.useMinAsBase,shadeW=Math.max(0,width-2);let fillNrm=useMinAsBase&&minIsLeft?plot.options.color:options.inverseColor,fillInv=useMinAsBase&&minIsLeft?options.inverseColor:plot.options.color,colorTable=useMinAsBase&&minIsLeft?options.colorTable:options.inverseColorTable;if(colorTable){fillNrm="url(#"+createGradient(g,colorTable,"linear"===options.scale&&"log"===options.colorScale?max/min:void 0)+")"}if(colorTable=useMinAsBase&&minIsLeft?options.inverseColorTable:options.colorTable,colorTable){fillInv="url(#"+createGradient(g,colorTable,"linear"===options.scale&&"log"===(options.inverseColorScale||options.colorScale)?max/min:void 0)+")"}(0,index_umd.setAttrs)(g.append("rect"),{x:left+2,y:shadeY,width:shadeW/2,height:shadeH,fill:fillNrm,"fill-opacity":fillOpacity}),(0,index_umd.setAttrs)(g.append("rect"),{x:centerX,y:shadeY,width:shadeW/2,height:shadeH,fill:fillInv,"fill-opacity":fillOpacity})}else{let fillNrm=plot.options.color;const colorTable=options.colorTable;if(colorTable){const[min,max]=plot.scale.domain();fillNrm="url(#"+createGradient(g,colorTable,"linear"===options.scale&&"log"===options.colorScale?max/min:void 0)+")"}(0,index_umd.setAttrs)(g.append("rect"),{x:left+2,y:shadeY,width:Math.max(0,width-4),height:shadeH,fill:fillNrm,"fill-opacity":fillOpacity})}renderBasicPlotLegend(g,bounds,legendInfo.label?legendInfo.label:"",legendInfo.unit?legendInfo.unit:"",plot.scale.domain(),plot.options.color?plot.options.color:"",!0)}function gradientfill_plot_createGradient(ctx,yscale,horizontal,plotdata,xscale,colorTable,scale){const dataFrom=plotdata[0],dataTo=plotdata[plotdata.length-1],sFrom=yscale(dataFrom[0]),sTo=yscale(dataTo[0]),gradient=horizontal?ctx.createLinearGradient(sFrom,0,sTo,0):ctx.createLinearGradient(0,sFrom,0,sTo);if("log"===scale){const[min,max]=xscale.domain(),xFrom=dataFrom[0],xDelta=dataTo[0]-xFrom,yFrom=Math.log(min),yDelta=Math.log(max)-yFrom;for(const data of plotdata){const stop=(data[0]-xFrom)/xDelta;if(0<=stop&&stop<=1){const c=getInterpolatedColorString(colorTable,(Math.log(data[1])-yFrom)/yDelta);gradient.addColorStop(stop,c)}}}else{const xFrom=dataFrom[0],xDelta=dataTo[0]-xFrom,yFrom=xscale.domain()[0],yDelta=xscale.domain()[1]-yFrom;for(const data of plotdata){const stop=(data[0]-xFrom)/xDelta;if(0<=stop&&stop<=1){const c=getInterpolatedColorString(colorTable,(data[1]-yFrom)/yDelta);gradient.addColorStop(stop,c)}}}return gradient}class GradientFillPlot extends index_umd.Plot{constructor(id,options={}){super(id,options),this.options.renderLegend=renderGradientFillPlotLegend}plot(ctx,scale){const{scale:xscale,data:plotdata}=this;if(!xscale)return;const options=this.options;if(options.hidden)return;const useMinAsBase=void 0===options.useMinAsBase||options.useMinAsBase,[d0,d1]=xscale.domain(),dmin=Math.min(d0,d1),dmax=Math.max(d0,d1),rmin=xscale(dmin),rmax=xscale(dmax),zeroValue=useMinAsBase?rmin:rmax;ctx.save();const areaFunction=(0,src.Wcw)().defined((d=>options.defined(d[1],d[0]))).context(ctx);if(options.horizontal?areaFunction.y1((d=>xscale(d[1]))).y0(zeroValue).x((d=>scale(d[0]))):areaFunction.x1((d=>xscale(d[1]))).x0(zeroValue).y((d=>scale(d[0]))),ctx.globalAlpha=options.fillOpacity||1,options.inverseColor||options.inverseColorTable){const inverseValue=useMinAsBase?rmax:rmin,inverseAreaFunction=(0,src.Wcw)().defined((d=>options.defined(d[1],d[0]))).context(ctx);options.horizontal?inverseAreaFunction.y1((d=>xscale(d[1]))).y0(inverseValue).x((d=>scale(d[0]))):inverseAreaFunction.x1((d=>xscale(d[1]))).x0(inverseValue).y((d=>scale(d[0]))),ctx.beginPath(),inverseAreaFunction(plotdata),ctx.fillStyle=options.inverseColor||"";const colorTable=options.inverseColorTable;colorTable&&(ctx.fillStyle=gradientfill_plot_createGradient(ctx,scale,options.horizontal,plotdata,xscale,colorTable,options.inverseColorScale||options.colorScale||options.scale)),ctx.fill()}ctx.beginPath(),areaFunction(plotdata),ctx.lineWidth=options.width||0,ctx.fillStyle=options.fill||options.color||"";const colorTable=options.colorTable;colorTable&&(ctx.fillStyle=gradientfill_plot_createGradient(ctx,scale,options.horizontal,plotdata,xscale,colorTable,options.colorScale||options.scale)),ctx.fill(),ctx.globalAlpha=1,ctx.strokeStyle=options.color||"",ctx.stroke(),ctx.restore()}}function indexOfElementByName(array,name){if(array&&name){const nameUpper=name.toUpperCase();let i=0;for(const element of array){if(element.name&&element.name.toUpperCase()==nameUpper)return i;i++}}return-1}function indexOfElementByNames(array,names){if(array&&names){let i=0;for(const element of array){if(element.name&&names.indexOf(element.name.toUpperCase())>=0)return i;i++}}return-1}const __colors=["red","blue","orange","green","red","magenta","gray","brown"];let __iPlotColor=0;function generateColor(){return __colors[__iPlotColor++%__colors.length]}const defPlotType="line";class PlotData{constructor(){this.minmax=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY],this.minmaxPrimaryAxis=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY],this.data=[]}}function preparePlotData(data,iCurve,iPrimaryAxis){const plot=new PlotData;let i=0;for(const row of data){let value=row[iCurve];"number"==typeof value&&(0,utils_minmax.uN)(plot.minmax,value);const primary=iPrimaryAxis>=0?row[iPrimaryAxis]:i++;null==primary&&(value=null),(0,utils_minmax.uN)(plot.minmaxPrimaryAxis,primary),plot.data.push([primary,value])}return plot}function makeTrackHeader(welllog,templateTrack){if(templateTrack.title)return templateTrack.title;const templatePlots=templateTrack.plots;if(templatePlots&&templatePlots[0]){const curves=welllog.curves,templatePlot=templatePlots[0],iCurve=indexOfElementByName(curves,templatePlot.name);if(iCurve<0)return templatePlot.name;const curve=curves[iCurve];return curve.description?function shortDescription(description){if("0"<=description[0]&&description[0]<="9"){if(" "==description[1])return description.substring(2);if("0"<=description[1]&&description[2]<="9"&&" "==description[2])return description.substring(3)}return description}(curve.description):curve.name}return""}class TracksInfo{constructor(){this.tracks=[],this.minmaxPrimaryAxis=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY],this.minmaxSecondaryAxis=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY],this.primaries=new Float32Array(0),this.secondaries=new Float32Array(0)}}function getAvailableAxes(welllog,axisMnemos){const result=[];if(welllog){const curves=welllog.curves;for(const key in axisMnemos){indexOfElementByNames(curves,axisMnemos[key])>=0&&result.push(key)}}return result}function getPlotType(plot){return plot instanceof GradientFillPlot?"gradientfill":plot instanceof index_umd.LinePlot?"line":plot instanceof index_umd.AreaPlot?"area":plot instanceof index_umd.DotPlot?"dot":plot instanceof index_umd.DifferentialPlot?"differential":plot instanceof index_umd.LineStepPlot?"linestep":""}function getTemplatePlotProps(templatePlot,templateStyles){const iStyle=templatePlot.style&&templateStyles?indexOfElementByName(templateStyles,templatePlot.style):-1,options=iStyle>=0&&templateStyles?{...templateStyles[iStyle],...templatePlot}:{...templatePlot};return options.type||(options.type=defPlotType),function isValidPlotType(plotType){return["line","linestep","dot","area","differential","gradientfill","stacked"].indexOf(plotType)>=0}(options.type)||(console.error("unknown plot type '"+options.type+"': use default type '"+defPlotType+"'"),options.type=defPlotType),"stacked"!==options.type&&(options.color||(options.color=generateColor())),"area"===options.type?options.fill||(options.fillOpacity=0):"gradientfill"===options.type?options.colorTable||(options.fillOpacity=0):"differential"===options.type&&(options.fill||(options.fill=generateColor()),options.color2||(options.color2=generateColor()),options.fill2||(options.fill2=generateColor())),options}class __dataAccessor{constructor(iData){this.iData=iData}dataAccessor(d){return d[this.iData]}}function makeDataAccessor(iData){const _dataAccessor=new __dataAccessor(iData);return _dataAccessor.dataAccessor.bind(_dataAccessor)}class __dataAccessor2{constructor(iData,iData2){this.iData=iData,this.iData2=iData2}dataAccessor(d){return[d[this.iData],d[this.iData2]]}}function makeDataAccessor2(iData,iData2){const _dataAccessor=new __dataAccessor2(iData,iData2);return _dataAccessor.dataAccessor.bind(_dataAccessor)}const defColorTable={name:"not found",discrete:!1,colors:[[0,1,0,0],[.5,.5,0,0],[1,1,0,0]]};function getColorTable(id,colorTables){if(id&&"function"==typeof id)return id;if(id&&"string"!=typeof id)return console.log("colorTable id='"+id+"' is not string"),defColorTable;if(id&&colorTables){const colorTable=colorTables.find((value=>value.name===id));return colorTable||(console.error("colorTable id='"+id+"' is not found in getColorTable()"),defColorTable)}id&&!colorTables&&console.log("colorTables is not given in getColorTable()")}function getPlotOptions(templatePlotProps,trackScale,minmax,curve,iPlot,curve2,iPlot2,colorTables){const scale=templatePlotProps.scale||trackScale||"linear",domain=("log"===scale||"gradientfill"===templatePlotProps.type&&"log"===templatePlotProps.colorScale?utils_minmax.xY:utils_minmax.T5)(minmax),options={dataAccessor:curve2?makeDataAccessor2(iPlot,iPlot2):makeDataAccessor(iPlot),scale:scale,domain:templatePlotProps.domain||domain,color:templatePlotProps.color,inverseColor:templatePlotProps.inverseColor,fill:templatePlotProps.fill,fillOpacity:templatePlotProps.fillOpacity?templatePlotProps.fillOpacity:.25,useMinAsBase:!0,colorTable:getColorTable(templatePlotProps.colorTable,colorTables),inverseColorTable:getColorTable(templatePlotProps.inverseColorTable,colorTables),colorScale:templatePlotProps.colorScale,inverseColorScale:templatePlotProps.inverseColorScale,legendInfo:()=>({label:curve.name,unit:curve.unit?curve.unit:"",serie1:{show:!0,label:curve.name,unit:curve.unit?curve.unit:""},serie2:{show:!0,label:curve2?curve2.name:"",unit:curve2&&curve2.unit?curve2.unit:""}})};return options.serie1={scale:scale,domain:domain,color:templatePlotProps.color,fill:templatePlotProps.fill},options.serie2={scale:scale,domain:domain,color:templatePlotProps.color2,fill:templatePlotProps.fill2},options}function getPlotConfig(id,templatePlotProps,trackScale,minmax,curve,iPlot,curve2,iPlot2,colorTables){return{id:id,type:templatePlotProps.type,options:getPlotOptions(templatePlotProps,trackScale,minmax,curve,iPlot,curve2,iPlot2,colorTables)}}function updateGraphTrackScale(track){const track_options=track.options,templateTrack=track_options.__template;if(templateTrack){if(templateTrack.plots.length){const plotTemplate=templateTrack.plots[0];track.options.scale=plotTemplate.scale,track.options.domain=plotTemplate.domain,track.options.label||(track.options.label=plotTemplate.name)}track_options.__template.scale&&(track.options.scale=track_options.__template.scale),track.options.scale||(track.options.scale="linear")}if(track.plots?.length){const plot=track.plots[0];track.options.domain=plot.options.domain}if(track.options.domain||(console.log("Empty track.options.domain!"),track.options.domain="log"===track.options.scale?[1,100]:[0,100]),"log"===track.options.scale&&track.options.domain&&track.options.domain[0]<0&&console.error("wrong data range for logarithm scale "+track.options.domain),!track.options.scale)throw Error("Invalid track.options.scale!");track.trackScale=function createScale(type,domain){if("linear"===type)return(0,src.m4Y)().domain(domain);if("log"===type)return(0,src.ZEH)().domain(domain);throw Error("Invalid input!")}(track.options.scale,track.options.domain)}function updateStackedTrackScale(track){const templateTrack=track.options.__template;if(templateTrack&&templateTrack.plots.length){const plotTemplate=templateTrack.plots[0];track.options.label||(track.options.label=plotTemplate.name)}track.xscale}function addOrEditGraphTrackPlot(wellLogView,track,plot,templatePlot){const minmaxPrimaryAxis=plot?function editGraphTrackPlot(wellLogView,track,plot,templatePlot){const templateTrack=getTrackTemplate(track),minmaxPrimaryAxis=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY],axes=wellLogView.getAxesInfo(),plotFactory=track.options.plotFactory,welllog=wellLogView.props.welllog;if(plotFactory&&welllog){const data=welllog.data,curves=welllog.curves,iPrimaryAxis=axes.mnemos?indexOfElementByNames(curves,axes.mnemos[axes.primaryAxis]):-1,iCurve=indexOfElementByName(curves,templatePlot.name);iCurve<0&&console.log("iCurve < 0");const curve=curves[iCurve];1!==(void 0===curve.dimensions?1:curve.dimensions)&&console.log("curve.dimensions !== 1"),"string"===curve.valueType&&console.log('curve.valueType === "string"');const plotData=preparePlotData(data,iCurve,iPrimaryAxis);(0,utils_minmax.nt)(minmaxPrimaryAxis,plotData.minmaxPrimaryAxis);const minmax=[plotData.minmax[0],plotData.minmax[1]],plotDatas=track.options.data,plots=track.plots,colorTables=wellLogView.props.colorTables;let curve2,plotData2,iCurve2=-1;"differential"===templatePlot.type&&(iCurve2=templatePlot.name2?indexOfElementByName(curves,templatePlot.name2):-1,curve2=iCurve2>=0?curves[iCurve2]:void 0,curve2||console.error("templatePlot.name2 '"+templatePlot.name2+"' not found"),plotData2=preparePlotData(data,iCurve2,iPrimaryAxis),(0,utils_minmax.nt)(minmaxPrimaryAxis,plotData2.minmaxPrimaryAxis),(0,utils_minmax.nt)(minmax,plotData2.minmax));const p=getPlotConfig(iCurve,getTemplatePlotProps(templatePlot,[]),templateTrack.scale,minmax,curve,plotDatas.length,curve2,plotDatas.length+1,colorTables);plotDatas.push(plotData.data),plotData2&&plotDatas.push(plotData2.data);const createPlot=plotFactory[p.type];if(!createPlot)throw Error(`No factory function for creating '${p.type}'-plot!`);const iPlot=plots.indexOf(plot);if(iPlot<0)console.error("Error!","Edited plot not found!");else{const plotNew=createPlot(p,track.trackScale);plotNew&&(plots[iPlot]=plotNew,templateTrack.plots[iPlot]=templatePlot,updateGraphTrackScale(track),track.prepareData())}}return minmaxPrimaryAxis}(wellLogView,track,plot,templatePlot):function addGraphTrackPlot(wellLogView,track,templatePlot){const templateTrack=getTrackTemplate(track),minmaxPrimaryAxis=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY],axes=wellLogView.getAxesInfo(),plotFactory=track.options.plotFactory,welllog=wellLogView.props.welllog;if(plotFactory&&welllog){const data=welllog.data,curves=welllog.curves,iPrimaryAxis=axes.mnemos?indexOfElementByNames(curves,axes.mnemos[axes.primaryAxis]):-1,iCurve=indexOfElementByName(curves,templatePlot.name);iCurve<0&&console.log("iCurve < 0");const curve=curves[iCurve];1!==(void 0===curve.dimensions?1:curve.dimensions)&&console.log("curve.dimensions !== 1"),"string"===curve.valueType&&console.log('curve.valueType === "string"');const plotData=preparePlotData(data,iCurve,iPrimaryAxis);(0,utils_minmax.nt)(minmaxPrimaryAxis,plotData.minmaxPrimaryAxis);const minmax=[plotData.minmax[0],plotData.minmax[1]],plotDatas=track.options.data,plots=track.plots,colorTables=wellLogView.props.colorTables;let curve2,plotData2,iCurve2=-1;"differential"===templatePlot.type&&(iCurve2=templatePlot.name2?indexOfElementByName(curves,templatePlot.name2):-1,curve2=iCurve2>=0?curves[iCurve2]:void 0,plotData2=preparePlotData(data,iCurve2,iPrimaryAxis),curve2||console.error("templatePlot.name2 '"+templatePlot.name2+"' not found"),(0,utils_minmax.nt)(minmaxPrimaryAxis,plotData2.minmaxPrimaryAxis),(0,utils_minmax.nt)(minmax,plotData2.minmax));const p=getPlotConfig(iCurve,getTemplatePlotProps(templatePlot,[]),templateTrack.scale,minmax,curve,plotDatas.length,curve2,plotDatas.length+1,colorTables);plotDatas.push(plotData.data),plotData2&&plotDatas.push(plotData2.data);const createPlot=plotFactory[p.type];if(!createPlot)throw Error(`No factory function for creating '${p.type}'-plot!`);const plot=createPlot(p,track.trackScale);plot&&(plots.push(plot),templateTrack.plots.push(templatePlot),updateGraphTrackScale(track),track.prepareData())}return minmaxPrimaryAxis}(wellLogView,track,templatePlot);if(wellLogView.logController){{const baseDomain=wellLogView.logController.scaleHandler.baseDomain();baseDomain[0]>minmaxPrimaryAxis[0]&&(baseDomain[0]=minmaxPrimaryAxis[0]),baseDomain[1]<minmaxPrimaryAxis[1]&&(baseDomain[1]=minmaxPrimaryAxis[1]),wellLogView.logController.rescale()}(0,log_viewer.OG)(wellLogView.logController),wellLogView.logController.updateTracks()}}function removeGraphTrackPlot(wellLogView,track,plot){!function _removeGraphTrackPlot(track,_plot){const template=getTrackTemplate(track),plots=track.plots;let index=0;for(const plot of plots){if(plot===_plot){plots.splice(index,1),template.plots.splice(index,1);break}index++}return index}(track,plot),updateGraphTrackScale(track),wellLogView.logController&&((0,log_viewer.OG)(wellLogView.logController),wellLogView.logController.updateTracks()),track.prepareData()}function newDualScaleTrack(mode,title,abbr,units){return new index_umd.DualScaleTrack(void 0,{mode:mode,maxWidth:50,width:2,label:title,abbr:abbr||title,units:units||"",legendConfig:scaleLegendConfig})}let iStringToNum=0;const mapStringToNum=new Map;function getDiscreteColorAndName(value,colorTable,meta){let color,name;if(null==value&&(value=Number.NaN),meta){const{objects:objects,iColor:iColor,iCode:iCode}=meta;let object;if("string"==typeof value)name=value,object=objects[value];else{name=value.toString();for(const t in objects){const obj=objects[t];if(value===obj[iCode]){name=t,object=obj;break}}}color=colorTable?getInterpolatedColor(colorTable,object?parseFloat(object[iCode].toString()):Number.NaN):object?object[iColor]:[255,25,25]}else if(name=value.toString(),colorTable)if("string"==typeof value){let v;mapStringToNum.has(value)?v=mapStringToNum.get(value):(mapStringToNum.set(value,iStringToNum),v=iStringToNum,iStringToNum++),color=getInterpolatedColor(colorTable,v)}else color=getInterpolatedColor(colorTable,parseInt(value.toString()));else color=[224,224,224];return{color:color,name:name}}function createAreaData(from,to,value,colorTable,meta){const{color:color,name:name}=getDiscreteColorAndName(value,colorTable,meta);return{from:from,to:to,name:name,color:{r:color[0],g:color[1],b:color[2]}}}async function createStackData(data,colorTable,meta){const arr=new Array;let prev=null,area=null;for(const p of data){let boundary=p[0];if(null===boundary){area&&(arr.push(area),area=null);continue}if(prev&&(boundary=prev[0],null===boundary))continue;area&&(area.to=boundary);const value=p[1];prev&&value!==prev[1]&&area&&(arr.push(area),area=null),area||null==value||null===p[0]||(area=createAreaData(boundary,p[0],value,colorTable,meta)),prev=p}return area&&arr.push(area),arr}function newStackedTrack(options){return new index_umd.StackedTrack(void 0,options)}function getDiscreteMeta(welllog,name){const meta=welllog.metadata_discrete;if(meta){const table=function elementByKeyName(meta,name){name=name.toUpperCase();for(const key in meta)if(key.toUpperCase()===name)return meta[key];return null}(meta,name);if(table){const attributes=table.attributes;if(attributes){const iCode=attributes.indexOf("code"),iColor=attributes.indexOf("color");if(iColor>=0&&iCode>=0)return{iCode:iCode,iColor:iColor,objects:table.objects}}}}return null}const defaultOptions={plotFactory:{...index_umd.defaultPlotFactory,gradientfill:(0,index_umd.createPlotType)(GradientFillPlot)},legendConfig:index_umd.graphLegendConfig};function getTrackTemplate(track){const options=track.options;if(options.__template)return options.__template;{console.error("No __template given in track!");const options=track.options;return{title:options.label?options.label:"",scale:"log"===options.scale?"log":"linear",plots:[]}}}function newGraphTrack(options){return new index_umd.GraphTrack(void 0,{...defaultOptions,...options})}function isScaleTrack(track){return track instanceof index_umd.ScaleTrack||track instanceof index_umd.DualScaleTrack}function getScaleTrackNum(tracks){let n=0;for(const track of tracks)isScaleTrack(track)&&n++;return n}function addScaleTracks(info,axes,curves,data,iPrimaryAxis){const titlePrimaryAxis=axes.titles?axes.titles[axes.primaryAxis]:axes.primaryAxis,curvePrimaryAxis=curves[iPrimaryAxis],iSecondaryAxis=axes.mnemos?indexOfElementByNames(curves,axes.mnemos[axes.secondaryAxis]):-1;if(iSecondaryAxis>=0){info.tracks.push(newDualScaleTrack(0,titlePrimaryAxis,curvePrimaryAxis.name,curvePrimaryAxis.unit));const titleSecondaryAxis=axes.titles?axes.titles[axes.secondaryAxis]:axes.secondaryAxis,curveSecondaryAxis=curves[iSecondaryAxis];info.tracks.push(newDualScaleTrack(1,titleSecondaryAxis,curveSecondaryAxis.name,curveSecondaryAxis.unit)),info.primaries=new Float32Array(data.length),info.secondaries=new Float32Array(data.length);{let count=0;for(const row of data){const secondary=row[iSecondaryAxis];if((0,utils_minmax.uN)(info.minmaxSecondaryAxis,secondary),null!==secondary){const primary=row[iPrimaryAxis];null!==primary&&(info.secondaries[count]=secondary,info.primaries[count]=primary,count++)}}count<info.primaries.length&&(info.primaries=info.primaries.subarray(0,count),info.secondaries=info.secondaries.subarray(0,count))}}else info.tracks.push(function newScaleTrack(title,abbr,units){return new index_umd.ScaleTrack(void 0,{maxWidth:50,width:2,label:title,abbr:abbr||title,units:units||"",legendConfig:scaleLegendConfig})}(titlePrimaryAxis,curvePrimaryAxis.name,curvePrimaryAxis.unit))}function addGraphTrack(info,welllog,curves,data,iPrimaryAxis,templateTrack,templateStyles,colorTables){const plotDatas=[],plots=[];if(templateTrack.plots)for(const templatePlot of templateTrack.plots){const iCurve=indexOfElementByName(curves,templatePlot.name);if(iCurve<0)continue;const curve=curves[iCurve];if(1!==(void 0===curve.dimensions?1:curve.dimensions))continue;if("string"===curve.valueType)continue;const plotData=preparePlotData(data,iCurve,iPrimaryAxis);(0,utils_minmax.nt)(info.minmaxPrimaryAxis,plotData.minmaxPrimaryAxis);const minmax=[plotData.minmax[0],plotData.minmax[1]];let curve2,plotData2,iCurve2=-1;"differential"===templatePlot.type&&(iCurve2=templatePlot.name2?indexOfElementByName(curves,templatePlot.name2):-1,curve2=iCurve2>=0?curves[iCurve2]:void 0,plotData2=preparePlotData(data,iCurve2,iPrimaryAxis),(0,utils_minmax.nt)(info.minmaxPrimaryAxis,plotData2.minmaxPrimaryAxis),(0,utils_minmax.nt)(minmax,plotData2.minmax));const p=getPlotConfig(iCurve,getTemplatePlotProps(templatePlot,templateStyles),templateTrack.scale,minmax,curve,plotDatas.length,curve2,plotDatas.length+1,colorTables);plotDatas.push(plotData.data),plotData2&&plotDatas.push(plotData2.data),plots.push(p)}if(plots.length||templateTrack.required){const label=makeTrackHeader(welllog,templateTrack),options={data:plotDatas,plots:plots};setGraphTrackOptionsFromTemplate(options,templateTrack),options.label=label;const track=newGraphTrack(options);updateGraphTrackScale(track),info.tracks.push(track)}}function addStackedTrack(info,welllog,curves,data,iPrimaryAxis,templateTrack,templateStyles,colorTables,showLines,showLabels,labelRotation){const templatePlot=templateTrack.plots[0],name=templatePlot.name,iCurve=indexOfElementByName(curves,name);if(iCurve<0)return;const curve=curves[iCurve];if(1!==(void 0===curve.dimensions?1:curve.dimensions))return;const plotData=preparePlotData(data,iCurve,iPrimaryAxis);(0,utils_minmax.nt)(info.minmaxPrimaryAxis,plotData.minmaxPrimaryAxis);const templatePlotProps=getTemplatePlotProps(templatePlot,templateStyles),templateTrackFullPlot=(0,deepcopy.A)(templateTrack),label=makeTrackHeader(welllog,templateTrack);templateTrackFullPlot.title=label,templateTrackFullPlot.plots[0].type=templatePlotProps.type;const meta=getDiscreteMeta(welllog,name);meta||"integer"!=curve.valueType||console.log("Discrete meta information for '"+name+"' not found. Use default");const logColor=templatePlotProps.colorTable;let colorTable;logColor?colorTables?(colorTable=colorTables.find((colorTable=>colorTable.name==logColor)),colorTable||console.error("Missed '"+logColor+"' color table")):console.error("No color tables file given for '"+logColor+"' color table"):meta||console.error("No color table given in template plot props");const plot=templateTrackFullPlot.plots[0];plot&&(plot.showLabels=showLabels,plot.showLines=showLines,plot.labelRotation=labelRotation??0);const options={abbr:name,legendConfig:stackLegendConfig,data:createStackData.bind(null,plotData.data,colorTable,meta)};setStackedTrackOptionsFromTemplate(options,templateTrackFullPlot);const track=newStackedTrack(options);updateStackedTrackScale(track),info.tracks.push(track)}function getTemplateTrackFirstPlotProps(templateTrack,templateStyles){if(!templateTrack.plots)return;const templatePlot=templateTrack.plots[0];if(!templatePlot)return;return getTemplatePlotProps(templatePlot,templateStyles)}function createTracks(welllog,axes,templateTracks,templateStyles,colorTables){const info=new TracksInfo;if(welllog){const data=welllog.data,curves=welllog.curves,iPrimaryAxis=axes.mnemos?indexOfElementByNames(curves,axes.mnemos[axes.primaryAxis]):-1;if(iPrimaryAxis>=0&&addScaleTracks(info,axes,curves,data,iPrimaryAxis),templateTracks)for(const templateTrack of templateTracks){const templatePlotProps=getTemplateTrackFirstPlotProps(templateTrack,templateStyles);templatePlotProps&&"stacked"===templatePlotProps.type?addStackedTrack(info,welllog,curves,data,iPrimaryAxis,templateTrack,templateStyles,colorTables,templatePlotProps.showLines,templatePlotProps.showLabels,templatePlotProps.labelRotation):addGraphTrack(info,welllog,curves,data,iPrimaryAxis,templateTrack,templateStyles,colorTables)}}return info}function addTrack(wellLogView,trackNew,trackCurrent,bAfter){if(wellLogView.logController){let order=0;for(const track of wellLogView.logController.tracks)track.order=order++,trackCurrent==track&&(bAfter?trackNew.order=order++:(trackNew.order=track.order,track.order=order++));wellLogView.logController.addTrack(trackNew)}}function setTrackOptionsFromTemplate(options,templateTrack){options.label=templateTrack.title,void 0!==templateTrack.width&&(options.width=templateTrack.width),options.__template=(0,deepcopy.A)(templateTrack)}function setGraphTrackOptionsFromTemplate(options,templateTrack){templateTrack.scale?options.scale=templateTrack.scale:delete options.scale,setTrackOptionsFromTemplate(options,templateTrack)}function setStackedTrackOptionsFromTemplate(options,templateTrack){const plot=templateTrack.plots[0];plot&&(options.showLabels=plot.showLabels,options.showLines=plot.showLines,options.labelRotation=plot.labelRotation??0),setTrackOptionsFromTemplate(options,templateTrack)}function addOrEditGraphTrack(wellLogView,track,templateTrack,trackCurrent,bAfter){if(track)setGraphTrackOptionsFromTemplate(track.options,templateTrack),updateGraphTrackScale(track);else{const options={plots:[],data:[]};setGraphTrackOptionsFromTemplate(options,templateTrack),addTrack(wellLogView,track=newGraphTrack(options),trackCurrent,bAfter)}return wellLogView.logController&&wellLogView.logController.updateTracks(),track}function addOrEditStackedTrack(wellLogView,track,templateTrack,trackCurrent,bAfter){const props=wellLogView.props,welllog=props.welllog,templatePlot=templateTrack.plots[0];if(!welllog||!templatePlot)return null;const name=templatePlot.name,templatePlotProps=getTemplatePlotProps(templatePlot,props.template.styles),colorTable=props.colorTables.find((colorTable=>colorTable.name==templatePlotProps.colorTable)),meta=getDiscreteMeta(welllog,name),data=welllog.data,curves=welllog.curves,iCurve=indexOfElementByName(curves,name),axes=wellLogView.getAxesInfo(),plotData=preparePlotData(data,iCurve,indexOfElementByNames(curves,axes.mnemos[axes.primaryAxis])),stackData=createStackData.bind(null,plotData.data,colorTable,meta);if(track)track.data=null,wellLogView.logController&&wellLogView.logController.updateTracks(),track.options.abbr=name,track.options.data=stackData,track.data=track.options.data,setStackedTrackOptionsFromTemplate(track.options,templateTrack),updateStackedTrackScale(track),wellLogView.logController&&wellLogView.logController.refresh();else{const options={abbr:name,data:stackData,legendConfig:stackLegendConfig};setStackedTrackOptionsFromTemplate(options,templateTrack),addTrack(wellLogView,track=newStackedTrack(options),trackCurrent,bAfter)}return wellLogView.logController&&wellLogView.logController.updateTracks(),track}function toggleId(trackIds,trackId){const i=trackIds.indexOf(trackId);i<0?trackIds.push(trackId):trackIds.splice(i,1)}},"./packages/wsc-common/dist/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{Vr:function(){return validateColorTables},Dd:function(){return validateLayers},i6:function(){return validateSchema}});var dist_ajv=__webpack_require__("./node_modules/ajv/dist/ajv.js"),ajv_default=__webpack_require__.n(dist_ajv),Wells_namespaceObject=JSON.parse('{"$comment":"Inspired from https://github.com/geojson/schema","$schema":"http://json-schema.org/draft-07/schema#","$id":"inputSchema/Wells.json","title":"GeoJSON FeatureCollection","type":"object","required":["type","features"],"properties":{"type":{"type":"string","enum":["FeatureCollection"]},"features":{"type":"array","items":{"title":"GeoJSON Feature","type":"object","required":["type","properties","geometry"],"properties":{"type":{"type":"string","enum":["Feature"]},"id":{"oneOf":[{"type":"number"},{"type":"string"}]},"properties":{"oneOf":[{"type":"null"},{"type":"object"}]},"geometry":{"title":"GeoJSON GeometryCollection","type":"object","required":["type","geometries"],"properties":{"type":{"type":"string","enum":["GeometryCollection"]},"geometries":{"type":"array","items":{"oneOf":[{"title":"GeoJSON Point","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["Point"]},"coordinates":{"type":"array","minItems":2,"items":{"type":"number"}}}},{"title":"GeoJSON LineString","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["LineString"]},"coordinates":{"type":"array","minItems":2,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}}}]}}}}}}}}}'),WellLog_namespaceObject=JSON.parse('{"$comment":"See https://jsonwelllogformat.org","$id":"inputSchema/WellLog.json","type":"object","properties":{"header":{"$ref":"#/definitions/header"},"curves":{"type":"array","items":{"$ref":"#/definitions/curve"}},"data":{"type":"array","items":{"$ref":"#/definitions/data_row"}},"metadata_discrete":{"type":"object"}},"required":["curves","data","header"],"definitions":{"header":{"type":"object","properties":{"name":{"type":"string","description":"Log name"},"description":{"type":"string","description":"Log description"},"externalIds":{"type":"object","description":"Record<string,string>; IDs within external storage, key being the storage name, and value being the ID."},"well":{"type":"string","description":"Well name"},"wellbore":{"type":"string","description":"wellbore name"},"field":{"type":"string","description":"Field name"},"country":{"type":"string","description":"Country of operation"},"date":{"type":"string","description":"datetime; Logging date"},"operator":{"type":"string","description":"Operator company name"},"serviceCompany":{"type":"string","description":"Service company name"},"source":{"type":"string","description":"Source system or process of this log"},"runNumber":{"type":"string","description":"Run number"},"elevation":{"type":"number","description":"float; Vertical distance between measured depth 0.0 and mean sea level in SI unit (meters)"},"startIndex":{"type":"number","description":"Value of the first index. Unit according to index curve"},"endIndex":{"type":"number","description":"Value of the last index. Unit according to index curve"},"step":{"type":["number","null"],"description":"Distance between indices if regularly sampled. Unit according to index curve. If log is time based, milliseconds assumed. null if irregular step"},"dataUri":{"type":"string","description":"Point to data source in case this is kept separate. Can be absolute or relative according to the URI specification"}}},"curve":{"type":"object","properties":{"name":{"type":"string","description":"Curve name or mnemonic. Mandatory. Non-null"},"description":{"type":["string","null"],"description":"Curve description. Optional"},"quantity":{"type":["string","null"],"description":"Curve quantity such as length, pressure, force etc. Optional"},"unit":{"type":["string","null"],"description":"Unit of measurement such as m, ft, bar, etc. Optional"},"valueType":{"type":["string","null"],"description":"Curve value type: float, integer, string, datetime or boolean. Non-null. Optional. float assumed if not present"},"dimensions":{"type":"number","description":"Number of dimensions. [1,>. Non-null. Optional. 1 assumed if not present"}},"required":["name"]},"data_row":{"type":"array","items":{"anyOf":[{"type":"number"},{"type":"string"},{"type":"null"}]}},"metadata_discrete":{"type":"object"}}}'),WellLogs_namespaceObject=JSON.parse('{"$id":"inputSchema/WellLogs.json","type":"array","items":{"$ref":"./WellLog.json#"}}'),WellLogTemplate_namespaceObject=JSON.parse('{"type":"object","properties":{"name":{"type":"string"},"scale":{"type":"object","properties":{"primary":{"type":"string"},"allowSecondary":{"type":"boolean"}},"required":["primary"]},"tracks":{"type":"array","items":{"$ref":"#/definitions/track"}},"styles":{"type":"array","items":{"$ref":"#/definitions/style"}}},"required":["tracks"],"definitions":{"domain":{"type":"array","minItems":2,"maxItems":2,"items":{"type":"number"}},"css_color":{"type":"string","description":"Any valid CSS color value (named colors, three-digit hex color, six-digit hex color, RGB colors)","examples":["green","#ff8000","rgb(128,33,23)","rgba(128,33,23,0.6)"]},"plot_type":{"enum":["line","linestep","dot","area","differential","gradientfill","stacked"],"default":"line"},"scale_type":{"enum":["log","linear"],"default":"linear"},"plot_prop":{"type":"object","properties":{"scale":{"$ref":"#/definitions/scale_type"},"type":{"$ref":"#/definitions/plot_type"},"color":{"$ref":"#/definitions/css_color"},"inverseColor":{"$ref":"#/definitions/css_color"},"fill":{"$ref":"#/definitions/css_color"},"fillOpacity":{"type":"number","minimum":0,"maximum":1,"default":0.25,"description":"for \'area\' and \'gradientfill\' plots"},"colorTable":{"type":"string","description":"table id (name) for \'gradientfill\' plot"},"inverseColorTable":{"type":"string","description":"table id (name) for \'gradientfill\' plot"},"colorScale":{"$ref":"#/definitions/scale_type","description":"table id (name) for \'gradientfill\' plot"},"inverseColorScale":{"$ref":"#/definitions/scale_type","description":"table id (name) for \'gradientfill\' plot"},"color2":{"$ref":"#/definitions/css_color","description":"for \'differetial\' plot"},"fill2":{"$ref":"#/definitions/css_color","description":"for \'differetial\' plot"},"showLines":{"type":"boolean","description":"for \'stacked\' plot"},"showLabels":{"type":"boolean","description":"for \'stacked\' plot"},"labelRotation":{"type":"number","description":"for \'stacked\' plot"}}},"plot":{"allOf":[{"$ref":"#/definitions/plot_prop"}],"type":"object","properties":{"name":{"type":"string"},"style":{"type":"string"},"scale":{"$ref":"#/definitions/scale_type"},"name2":{"type":"string"}},"required":["name"]},"style":{"allOf":[{"$ref":"#/definitions/plot_prop"}],"type":"object","properties":{"name":{"type":"string"}},"required":["name"]},"track":{"type":"object","properties":{"title":{"type":"string"},"width":{"type":"number","default":3,"description":"relative track width (default as in videx-wellog)"},"required":{"type":"boolean"},"scale":{"$ref":"#/definitions/scale_type"},"domain":{"$ref":"#/definitions/domain"},"plots":{"type":"array","items":{"$ref":"#/definitions/plot"}}},"required":["plots"]}}}'),PieChart_namespaceObject=JSON.parse('{"$comment":"PieChart data schema","$id":"inputSchema/PieChart.json","type":"object","properties":{"pies":{"type":"array","items":{"$ref":"#/definitions/pie"}},"properties":{"type":"array","items":{"$ref":"#/definitions/property"}}},"required":["pies","properties"],"definitions":{"pie":{"type":"object","properties":{"x":{"type":"number","description":"Pie chart y-coordinate"},"y":{"type":"number","description":"Pie chart x-coordinate"},"R":{"type":"number","description":"Pie chart radius."},"fractions":{"type":"array","description":"Number and proportion of slices on pie chart.","items":{"$ref":"#/definitions/fraction"}}},"required":["x","y","R","fractions"]},"property":{"type":"object","properties":{"color":{"type":"array","minItems":3,"maxItems":3,"items":{"type":"number"},"description":"Pie slice color as RGB array."},"label":{"type":"string","description":"Pie slice name."}},"required":["color","label"]},"fraction":{"type":"object","properties":{"value":{"type":"number","description":"Proportion on pie slice."},"idx":{"type":"number","description":"Pie slice color and label indexed from properties array."}},"required":["value","idx"]}}}'),Grid_namespaceObject=JSON.parse('{"$comment":"See https://jsonwelllogformat.org","$id":"inputSchema/Grid.json","type":"array","items":{"$ref":"#/definitions/data_row"},"definitions":{"data_row":{"type":"object","required":["cs","vs"],"properties":{"i":{"type":"number","description":"Cell i-index, increases toward east."},"j":{"type":"number","description":"Cell j-index, increases towards north."},"z":{"type":"number","description":"Cell depth."},"cs":{"type":"array","description":"Cell corners","items":{"$ref":"#/definitions/cell_corner"},"minItems":3},"vs":{"type":"array","description":"Time dependent cell values.","items":{"type":"number"}}}},"cell_corner":{"type":"array","items":{"type":"number"},"minItems":3}}}'),FaultPolygons_namespaceObject=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$comment":"Inspired from https://geojson.org/schema/FeatureCollection.json","$id":"inputSchema/FaultPolygons.json","title":"GeoJSON FeatureCollection","type":"object","required":["type","features"],"properties":{"type":{"type":"string","enum":["FeatureCollection"]},"features":{"type":"array","items":{"title":"GeoJSON Feature","type":"object","required":["type","properties","geometry"],"properties":{"type":{"type":"string","enum":["Feature"]},"id":{"oneOf":[{"type":"number"},{"type":"string"}]},"properties":{"oneOf":[{"type":"null"},{"type":"object"}]},"geometry":{"title":"GeoJSON Polygon","type":"object","required":["type","coordinates"],"properties":{"type":{"type":"string","enum":["Polygon"]},"coordinates":{"type":"array","items":{"type":"array","minItems":4,"items":{"type":"array","minItems":2,"items":{"type":"number"}}}},"bbox":{"type":"array","minItems":4,"items":{"type":"number"}}}}}}}}}'),ColorTables_namespaceObject=JSON.parse('{"$comment":"ColorTables data schema","$id":"inputSchema/ColorTables.json","type":"array","items":{"$ref":"#/definitions/color-table"},"definitions":{"color-table":{"type":"object","required":["name","discrete","colors"],"properties":{"name":{"type":"string","description":"Color table name"},"discrete":{"type":"boolean","description":"True if color table is for discrete data"},"colors":{"type":"array","description":"Color entries as [anchor, R, G, B] for continuous and [index, R, G, B] for discrete","items":{"$ref":"#/definitions/color-row","minItems":4}},"description":{"type":"string","description":"Description"},"colorNaN":{"$ref":"#/definitions/color-row","description":"Color for NaN/undefined value"},"colorBelow":{"$ref":"#/definitions/color-row","description":"Color for value below minimum color range"},"colorAbove":{"$ref":"#/definitions/color-row","description":"Color for value above minimum color range"}}},"color-row":{"type":"array","items":{"type":"number"},"minItems":3}}}');function validateSchema(data,schema_type){let validator=null;try{validator=function createSchemaValidator(schema_type){const ajv=new(ajv_default())({schemas:[WellLog_namespaceObject]});switch(schema_type){case"Wells":return ajv.compile(Wells_namespaceObject);case"WellLog":return ajv.compile(WellLog_namespaceObject);case"WellLogs":return ajv.compile(WellLogs_namespaceObject);case"WellLogTemplate":return ajv.compile(WellLogTemplate_namespaceObject);case"PieChart":return ajv.compile(PieChart_namespaceObject);case"Grid":return ajv.compile(Grid_namespaceObject);case"FaultPolygons":return ajv.compile(FaultPolygons_namespaceObject);case"ColorTables":return ajv.compile(ColorTables_namespaceObject);default:return null}}(schema_type)}catch(e){throw"Wrong JSON schema for "+schema_type+". "+String(e)}if(!validator)throw"Wrong schema type.";if(validator(data),validator.errors)throw function formatSchemaError(schema_type,errors){let error_text="";error_text=errors[0]?(errors[0].instancePath?errors[0].instancePath+": ":"")+errors[0].message:"JSON schema validation failed";return`${schema_type}: ${error_text}.`}(schema_type,validator.errors)}function validateColorTables(colorTables){validateSchema(colorTables,"ColorTables")}function validateLayers(layers){layers.forEach((layer=>{if(layer.isLoaded){!function validateLayer(layer){switch(layer.id){case"wells-layer":!function validateWellsLayer(wellsLayer){validateSchema(wellsLayer.props.data,"Wells");validateSchema(function getLogData(wellsLayer){var _a;const sub_layers=null===(_a=wellsLayer.internalState)||void 0===_a?void 0:_a.subLayers,log_layer=null==sub_layers?void 0:sub_layers.find((layer=>"wells-layer-log_curve"===layer.id));return null==log_layer?void 0:log_layer.props.data}(wellsLayer),"WellLogs")}(layer);break;case"pie-layer":validateSchema(layer.props.data,"PieChart");break;case"grid-layer":validateSchema(layer.props.data,"Grid");break;case"fault-polygons-layer":validateSchema(layer.props.data,"FaultPolygons");break;default:return}}(layer);try{layer.validateProps()}catch(e){throw`${layer.id}- ${String(e)}`}}}))}},"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./packages/well-log-viewer/src/components/styles.scss":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/css-loader/dist/runtime/cssWithMappingToString.js"),_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,'.log-controller{position:relative;user-select:none;flex:1 1 0%;flex-direction:row;display:flex;font-family:Verdana,Tahoma,sans-serif;background-color:#fff;pointer-events:none;overflow:hidden}.log-controller .track{border-right:1px solid #333;overflow:hidden;padding:0;display:flex;flex-direction:column}.log-controller .track .track-title{display:flex;justify-content:center;align-items:center;font-family:sans-serif;font-weight:bold;overflow:hidden;background-color:rgba(0,0,0,0);color:#555;text-align:center;text-anchor:middle;white-space:nowrap;border-bottom:1px solid #333;pointer-events:auto;cursor:help}.log-controller .track .track-legend{pointer-events:all;overflow:hidden;border-bottom:1px solid #333}.log-controller .track .track-container{flex:1 1 auto;overflow:hidden}.log-controller .track .track-container canvas,.log-controller .track .track-container svg{overflow:hidden}.log-controller .track:last-child{border-right:none}.log-controller .track .error{background:repeating-linear-gradient(-45deg, #f99, #f99 10px, #fff 10px, #fff 20px)}.log-controller .overlay{pointer-events:auto;min-height:0;position:absolute;z-index:200}.log-controller .hidden{display:none !important}.log-controller.horizontal{flex-direction:column}.log-controller.horizontal .track{flex-direction:row;border-right:none;border-bottom:1px solid #333}.log-controller.horizontal .track .track-title{writing-mode:vertical-lr;transform:rotate(180deg);border-bottom:none;border-left:1px solid #333}.log-controller.horizontal .track .track-legend{border-bottom:none;border-right:1px solid #333}.log-controller.horizontal .track:last-child{border-bottom:none}.scale-track{stroke:#555}.scale-track .label-bg{stroke:#fff;fill:#fff}.slave-scale{background-color:#f9f9f9}.slave-scale .label-bg{stroke:#f9f9f9;fill:#f9f9f9}.slave-scale text{stroke:#777;fill:#777}.slave-scale .major-tick-line{stroke-width:.5;stroke:#777}.master-scale .major-tick .label-bg{stroke:#fff;fill:#fff}.master-scale .major-tick text{stroke:#555;fill:#555}.master-scale .minor-tick-line{stroke-width:.5;stroke:#555}.welllogview{width:100%;height:100%;display:flex;height:inherit}.welllogview .track .track-title{background-color:#ccc;font-weight:normal;color:#000;font-family:inherit;white-space:nowrap;display:block;text-overflow:ellipsis;overflow:hidden}.welllogview .selected{background-color:rgba(255,155,79,.1)}.welllogview .slave-scale{background-color:rgba(255,255,255,.0235)}.welllogview .track-container{pointer-events:all}.welllogview .overlay .depth{right:5px;bottom:5px;display:inline-block;padding:2px;border-radius:4px;text-align:right;background-color:rgba(0,0,0,.5);color:#fff}.welllogview .overlay .rubber-band{background-color:rgba(255,0,0,.1)}.welllogview .overlay .rubber-band div{background-color:rgba(255,0,0,.7)}.welllogview .overlay .pinned{background-color:rgba(0,0,0,.1)}.welllogview .overlay .pinned div{background-color:rgba(0,255,0,.7)}.welllogview .title{color:#000;background-color:#f1f1f1;font-size:14px;text-align:center;flex:"0, 0"}.welllogview .title-horizontal{writing-mode:vertical-lr;transform:rotate(180deg)}.welllogview .view{width:100%;height:100%;flex:1,1;display:flex;flex-direction:column}.welllogview .view container{flex:1,1}.welllogview .error{flex:0,0;color:#ff4040;background-color:#ffffc0}.welllogview .wellpick{font-size:9px}.welllogview .wellpick .vertical-text{writing-mode:vertical-lr;transform:rotate(180deg)}.welllogview .wellpick-fill{opacity:.3}.welllogview .wellpick-pattern{opacity:.57}.welllogspacer{width:100%;height:100%;display:flex}.welllogspacer .welllogspacer-distance-horizontal{writing-mode:vertical-lr;transform:rotate(180deg)}.welllogspacer .distance{font-size:12;text-align:center}.welllogspacer .wellpick{opacity:.9}.welllogspacer .wellpick-fill{opacity:.3}.welllogspacer .wellpick-pattern{opacity:.57}',"",{version:3,sources:["webpack://./node_modules/@equinor/videx-wellog/dist/styles/log-styles.scss","webpack://./node_modules/@equinor/videx-wellog/dist/styles/scale-styles.scss","webpack://./packages/well-log-viewer/src/components/styles.scss"],names:[],mappings:"AAKA,gBACE,iBAAA,CACA,gBAAA,CACA,WAAA,CACA,kBAAA,CACA,YAAA,CACA,qCAAA,CACA,qBAZQ,CAaR,mBAAA,CACA,eAAA,CACA,uBACE,2BAAA,CACA,eAAA,CACA,SAAA,CACA,YAAA,CACA,qBAAA,CACA,oCACE,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,sBAAA,CACA,gBAAA,CACA,eAAA,CACA,8BAzBU,CA0BV,UA3Ba,CA4Bb,iBAAA,CACA,kBAAA,CACA,kBAAA,CACA,4BAAA,CACA,mBAAA,CACA,WAAA,CAEF,qCACE,kBAAA,CACA,eAAA,CACA,4BAAA,CAEF,wCACE,aAAA,CACA,eAAA,CACA,2FACE,eAAA,CAIN,kCACE,iBAAA,CAEF,8BACE,mFAAA,CAQF,yBACE,mBAAA,CACA,YAAA,CACA,iBAAA,CACA,WAAA,CAGF,wBACE,uBAAA,CAIJ,2BACE,qBAAA,CACA,kCACE,kBAAA,CACA,iBAAA,CACA,4BAAA,CACA,+CACE,wBAAA,CACA,wBAAA,CACA,kBAAA,CACA,0BAAA,CAEF,gDACE,kBAAA,CACA,2BAAA,CAGJ,6CACE,kBAAA,CCtFJ,aACE,WAPmB,CAQnB,uBACE,WANO,CAOP,SAPO,CAUX,aACE,wBAZqB,CAevB,uBACE,cAhBqB,CAiBrB,YAjBqB,CAoBvB,kBACE,WAtBkB,CAuBlB,SAvBkB,CA0BpB,8BACE,eAAA,CACA,WA5BkB,CA+BpB,oCACE,WA9BS,CA+BT,SA/BS,CAkCX,+BACE,WAtCmB,CAuCnB,SAvCmB,CA0CrB,+BACE,eAAA,CACA,WA5CmB,CCQrB,aACE,UAAA,CACA,WAAA,CACA,YAAA,CAGA,cAAA,CAGE,iCACE,qBAAA,CACA,kBAAA,CACA,UAAA,CACA,mBAAA,CACA,kBAAA,CACA,aAAA,CACA,sBAAA,CACA,eAAA,CAWJ,uBACE,oCAAA,CAGF,0BACE,wCAAA,CAGF,8BACE,kBAAA,CAIA,6BAEE,SAAA,CACA,UAAA,CACA,oBAAA,CAEA,WAAA,CACA,iBAAA,CACA,gBAAA,CACA,+BAAA,CACA,UAAA,CAGF,mCACE,iCAAA,CAEA,uCACE,iCAAA,CAIJ,8BACE,+BAAA,CAEA,kCACE,iCAAA,CAKN,oBACE,UAAA,CACA,wBAAA,CACA,cAAA,CACA,iBAAA,CACA,WAAA,CAEF,+BACE,wBAAA,CACA,wBAAA,CAGF,mBACE,UAAA,CACA,WAAA,CACA,QAAA,CACA,YAAA,CACA,qBAAA,CAEA,6BACE,QAAA,CAIJ,oBACE,QAAA,CACA,aAAA,CACA,wBAAA,CAGF,uBACE,aAAA,CAEA,sCACE,wBAAA,CACA,wBAAA,CAIJ,4BACE,UAAA,CAGF,+BACE,WAAA,CAKJ,eACE,UAAA,CACA,WAAA,CACA,YAAA,CAEA,kDACE,wBAAA,CACA,wBAAA,CAEF,yBACE,YAAA,CACA,iBAAA,CAGF,yBACE,UAAA,CAGF,8BACE,UAAA,CAGF,iCACE,WAAA",sourcesContent:["$plot_bg: white;\n$plot_border_color: #333;\n$plot_title_color: #555;\n$plot_title_bg: transparent;\n\n.log-controller {\n  position: relative;\n  user-select: none;\n  flex: 1 1 0%;\n  flex-direction: row;\n  display: flex;\n  font-family: Verdana, Tahoma, sans-serif;\n  background-color: $plot_bg;\n  pointer-events: none;\n  overflow: hidden;\n  .track {\n    border-right: 1px solid $plot_border_color;\n    overflow: hidden;\n    padding: 0;\n    display: flex;\n    flex-direction: column;\n    .track-title {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      font-family: sans-serif;\n      font-weight: bold;\n      overflow: hidden;\n      background-color: $plot_title_bg;\n      color: $plot_title_color;\n      text-align: center;\n      text-anchor: middle;\n      white-space: nowrap;\n      border-bottom: 1px solid $plot_border_color;\n      pointer-events: auto;\n      cursor: help;\n    }\n    .track-legend {\n      pointer-events: all;\n      overflow: hidden;\n      border-bottom: 1px solid $plot_border_color;\n    }\n    .track-container {\n      flex: 1 1 auto;\n      overflow: hidden;\n      canvas,svg {\n        overflow: hidden;\n      }\n    }\n  }\n  .track:last-child {\n    border-right: none;\n  }\n  .track .error {\n    background: repeating-linear-gradient(\n      -45deg,\n      #f99,\n      #f99 10px,\n      #fff 10px,\n      #fff 20px\n    );\n  }\n  .overlay {\n    pointer-events: auto;\n    min-height: 0;\n    position: absolute;\n    z-index: 200;\n  }\n\n  .hidden {\n    display: none !important;\n  }\n}\n\n.log-controller.horizontal {\n  flex-direction: column;\n  .track {\n    flex-direction: row;\n    border-right: none;\n    border-bottom: 1px solid $plot_border_color;\n    .track-title {\n      writing-mode: vertical-lr;\n      transform: rotate(180deg);\n      border-bottom: none;\n      border-left: 1px solid $plot_border_color;\n    }\n    .track-legend {\n      border-bottom: none;\n      border-right: 1px solid $plot_border_color;\n    }\n  }\n  .track:last-child {\n    border-bottom: none;\n  }\n}\n","$scale_master_color: #555;\n$scale_minor_color: #777;\n$scale_slave_scale_bg: #f9f9f9;\n$scale_bg: white;\n\n\n.scale-track {\n  stroke: $scale_master_color; }\n  .scale-track .label-bg {\n    stroke: $scale_bg;\n    fill: $scale_bg;\n}\n\n.slave-scale {\n  background-color: $scale_slave_scale_bg;\n}\n\n.slave-scale .label-bg {\n  stroke: $scale_slave_scale_bg;\n  fill: $scale_slave_scale_bg;\n}\n\n.slave-scale text {\n  stroke: $scale_minor_color;\n  fill: $scale_minor_color;\n}\n\n.slave-scale .major-tick-line {\n  stroke-width: 0.5;\n  stroke: $scale_minor_color;\n}\n\n.master-scale .major-tick .label-bg {\n  stroke: $scale_bg;\n  fill: $scale_bg;\n}\n\n.master-scale .major-tick text {\n  stroke: $scale_master_color;\n  fill: $scale_master_color;\n}\n\n.master-scale .minor-tick-line {\n  stroke-width: 0.5;\n  stroke: $scale_master_color;\n}\n\n","// These are important to properly display the component\n@import '@equinor/videx-wellog/dist/styles/log-styles.scss';\n//@import '@equinor/videx-wellog/dist/styles/loader-styles.scss';\n@import '@equinor/videx-wellog/dist/styles/scale-styles.scss';\n\n\n//$scale_slave_scale_bg: #ff0000;\n\n.welllogview {\n  width: 100%;\n  height: 100%;\n  display: flex;\n\n  // redefine videx-wellog log-controller\n  height: inherit;\n\n  .track {\n    .track-title {\n      background-color: #ccc;\n      font-weight: normal;\n      color: black;\n      font-family: inherit;\n      white-space: nowrap;\n      display: block;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n    .track-legend {\n      /*.scale-title {\n        display: block;\n        text-overflow: ellipsis;\n        overflow: hidden;\n      }*/\n    }\n  }\n\n  .selected {\n    background-color: rgba(255, 155, 79, 0.1);\n  }\n\n  .slave-scale {\n    background-color: rgba(255, 255, 255, 0.0235); // to make track selection background visible\n  }\n\n  .track-container {\n    pointer-events: all; // to allow mouse events handling\n  }\n\n  .overlay {\n    .depth {\n      //not work?? position : absolute;\n      right: 5px;\n      bottom: 5px;\n      display: inline-block;\n\n      padding: 2px;\n      border-radius: 4px;\n      text-align: right;\n      background-color: rgba(0, 0, 0, 0.5);\n      color: white;\n    }\n\n    .rubber-band {\n      background-color: rgba(255, 0, 0, 0.1);\n\n      div {\n        background-color: rgba(255, 0, 0, 0.7);\n      }\n    }\n\n    .pinned {\n      background-color: rgba(0, 0, 0, 0.1);\n\n      div {\n        background-color: rgba(0, 255, 0, 0.7);\n      }\n    }\n  }\n\n  .title {\n    color: rgb(0, 0, 0);\n    background-color: rgb(241, 241, 241);\n    font-size: 14px;\n    text-align: center;\n    flex: \"0, 0\",\n  }\n  .title-horizontal {\n    writing-mode: vertical-lr;\n    transform: rotate(180deg);\n  }                          \n\n  .view {\n    width: 100%;\n    height: 100%;\n    flex: 1, 1;\n    display: flex;\n    flex-direction: column;\n\n    container { \n      flex: 1, 1;\n    }\n  }  \n\n  .error {\n    flex: 0, 0;\n    color: rgb(255, 64, 64);\n    background-color: rgb(255, 255, 192)\n  }\n\n  .wellpick {\n    font-size: 9px;\n\n    .vertical-text {\n      writing-mode: vertical-lr;\n      transform: rotate(180deg);\n    }\n  }\n\n  .wellpick-fill {\n    opacity: 0.3;\n  }\n\n  .wellpick-pattern {\n    opacity: 0.57\n  }\n}\n\n\n.welllogspacer {\n  width: 100%;\n  height: 100%;\n  display: flex;\n\n  .welllogspacer-distance-horizontal {\n    writing-mode: vertical-lr;\n    transform: rotate(180deg);\n  }\n  .distance { \n    font-size: 12;\n    text-align: center;\n  }\n\n  .wellpick {\n    opacity: 0.9\n  }\n\n  .wellpick-fill {\n    opacity: 0.3\n  }\n\n  .wellpick-pattern {\n    opacity: 0.57\n  }\n}\n\n"],sourceRoot:""}]),__webpack_exports__.default=___CSS_LOADER_EXPORT___},"./packages/well-log-viewer/src/components/styles.scss":function(module,__unused_webpack_exports,__webpack_require__){var content=__webpack_require__("./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./packages/well-log-viewer/src/components/styles.scss");content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[module.id,content,""]]),content.locals&&(module.exports=content.locals);(0,__webpack_require__("./node_modules/vue-style-loader/lib/addStylesClient.js").A)("925f0916",content,!0,{})}}]);