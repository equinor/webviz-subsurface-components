"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[6454],{"./packages/subsurface-viewer/src/layers/intersection/intersectionView.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{FencePolygon:function(){return FencePolygon},IntersectionViewExample:function(){return IntersectionViewExample},WithSamplePolylineData:function(){return WithSamplePolylineData},WithWellsData:function(){return WithWellsData},__namedExportsOrder:function(){return __namedExportsOrder}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx");__webpack_exports__.default={parameters:{storySource:{source:'import React from "react";\nimport SubsurfaceViewer from "../../SubsurfaceViewer";\nexport default {\n  component: SubsurfaceViewer,\n  title: "SubsurfaceViewer / Experimental Intersection View"\n};\nconst StoryTemplate = args => {\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, args);\n};\nconst defaultProps = {\n  id: "SubsurfaceViewer",\n  views: {\n    layout: [1, 2],\n    showLabel: true,\n    viewports: [{\n      id: "orbit_view",\n      name: "3d view",\n      show3D: true,\n      isSync: false\n    }, {\n      id: "intersection_view",\n      name: "Intersection view",\n      show3D: false,\n      layerIds: ["enhanced-path-layer", "wells-layer"],\n      isSync: false\n    }]\n  }\n};\nconst polyline_data = {\n  type: "FeatureCollection",\n  features: [{\n    type: "Feature",\n    geometry: {\n      type: "GeometryCollection",\n      geometries: [{\n        type: "LineString",\n        coordinates: [[500, 2000, -400], [1500, 2000, -600], [1700, 2500, -400]]\n      }]\n    }\n  }]\n};\n\n// Intersection view example with sample polyline data\nexport const WithSamplePolylineData = StoryTemplate.bind({});\nWithSamplePolylineData.args = {\n  ...defaultProps,\n  bounds: [0, 0, 2000, 3000],\n  layers: [{\n    "@@type": "UnfoldedGeoJsonLayer",\n    id: "enhanced-path-layer",\n    data: polyline_data,\n    lineWidthScale: 20,\n    lineBillboard: true\n  }, {\n    "@@type": "AxesLayer",\n    id: "axes-layer",\n    bounds: [0, 0, 0, 2000, 3000, 1000]\n  }]\n};\n\n// Intersection view example with wells data\nexport const WithWellsData = StoryTemplate.bind({});\nWithWellsData.args = {\n  ...defaultProps,\n  bounds: [432205, 6475078, 437720, 6481113],\n  resources: {\n    wellsData: "./volve_wells.json"\n  },\n  layers: [{\n    "@@type": "AxesLayer",\n    id: "axes-layer",\n    bounds: [432205, 6475078, 0, 437720, 6481113, 3500]\n  }, {\n    "@@type": "WellsLayer",\n    data: "@@#resources.wellsData",\n    lineStyle: {\n      width: object => {\n        if (object["properties"]["name"] === "15/9-F-4") return 6;\n        return 0;\n      }\n    },\n    wellHeadStyle: {\n      size: object => {\n        if (object["properties"]["name"] === "15/9-F-4") return 8;\n        return 0;\n      }\n    }\n  }]\n};\nconst FencePolygonData = {\n  type: "FeatureCollection",\n  features: [{\n    type: "Feature",\n    geometry: {\n      type: "GeometryCollection",\n      geometries: [{\n        type: "Polygon",\n        coordinates: [[[500, 1000, -400], [800, 1200, -400], [1000, 1100, -400], [1000, 1100, -600], [800, 1200, -600], [500, 1000, -600], [500, 1000, -400]]]\n      }]\n    }\n  }]\n};\n\n// With fence polygon data\nexport const FencePolygon = StoryTemplate.bind({});\nFencePolygon.args = {\n  ...defaultProps,\n  bounds: [500, 1000, 1200, 1500],\n  layers: [{\n    "@@type": "AxesLayer",\n    id: "axes-layer",\n    bounds: [300, 800, 400, 1300, 1600, 600]\n  }, {\n    "@@type": "UnfoldedGeoJsonLayer",\n    id: "enhanced-path-layer",\n    data: FencePolygonData,\n    lineWidthScale: 2,\n    lineBillboard: true,\n    stroked: true\n  }]\n};\nconst IntersectionViewData = {\n  type: "FeatureCollection",\n  features: [{\n    type: "Feature",\n    geometry: {\n      type: "GeometryCollection",\n      geometries: [{\n        type: "Polygon",\n        coordinates: [[[500, 1000, -400], [800, 1200, -400], [1000, 1100, -400], [1000, 1100, -600], [800, 1200, -600], [500, 1000, -600], [500, 1000, -400]]]\n      }]\n    },\n    properties: {\n      name: "Fence",\n      color: [235, 107, 52, 255]\n    }\n  }, {\n    type: "Feature",\n    geometry: {\n      type: "GeometryCollection",\n      geometries: [{\n        type: "Point",\n        coordinates: [500, 1000, -400]\n      }, {\n        type: "LineString",\n        coordinates: [[500, 1000, -400], [575, 1050, -450], [650, 1100, -450], [725, 1150, -500], [800, 1200, -500], [900, 1150, -550], [950, 1125, -550], [1000, 1100, -550]]\n      }]\n    },\n    properties: {\n      name: "Well",\n      color: [52, 125, 235, 255]\n    }\n  }, {\n    type: "Feature",\n    geometry: {\n      type: "GeometryCollection",\n      geometries: [{\n        type: "LineString",\n        coordinates: [[500, 1000, -475], [800, 1200, -475], [1000, 1100, -475]]\n      }]\n    },\n    properties: {\n      name: "Surface 1",\n      color: [52, 235, 211, 255]\n    }\n  }, {\n    type: "Feature",\n    geometry: {\n      type: "GeometryCollection",\n      geometries: [{\n        type: "LineString",\n        coordinates: [[500, 1000, -525], [800, 1200, -525], [1000, 1100, -525]]\n      }]\n    },\n    properties: {\n      name: "Surface 2",\n      color: [32, 252, 3, 255]\n    }\n  }]\n};\n\n// An intersection view example with sample surface, wells data laong with fence.\nexport const IntersectionViewExample = StoryTemplate.bind({});\nIntersectionViewExample.args = {\n  ...defaultProps,\n  bounds: [500, 1000, 1200, 1500],\n  layers: [{\n    "@@type": "AxesLayer",\n    id: "axes-layer",\n    bounds: [300, 800, 400, 1300, 1600, 600]\n  }, {\n    "@@type": "UnfoldedGeoJsonLayer",\n    id: "enhanced-path-layer",\n    data: IntersectionViewData,\n    lineWidthScale: 1,\n    lineBillboard: true,\n    pointBillboard: true,\n    stroked: true,\n    getPointRadius: 3,\n    getLineColor: d => d.properties?.["color"],\n    getFillColor: d => d.properties?.["color"]\n  }]\n};',locationsMap:{"with-sample-polyline-data":{startLoc:{col:22,line:7},endLoc:{col:1,line:9},startBody:{col:22,line:7},endBody:{col:1,line:9}},"with-wells-data":{startLoc:{col:22,line:7},endLoc:{col:1,line:9},startBody:{col:22,line:7},endBody:{col:1,line:9}},"fence-polygon":{startLoc:{col:22,line:7},endLoc:{col:1,line:9},startBody:{col:22,line:7},endBody:{col:1,line:9}},"intersection-view-example":{startLoc:{col:22,line:7},endLoc:{col:1,line:9},startBody:{col:22,line:7},endBody:{col:1,line:9}}}}},component:_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,title:"SubsurfaceViewer / Experimental Intersection View"};const StoryTemplate=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,args),defaultProps={id:"SubsurfaceViewer",views:{layout:[1,2],showLabel:!0,viewports:[{id:"orbit_view",name:"3d view",show3D:!0,isSync:!1},{id:"intersection_view",name:"Intersection view",show3D:!1,layerIds:["enhanced-path-layer","wells-layer"],isSync:!1}]}},WithSamplePolylineData=StoryTemplate.bind({});WithSamplePolylineData.args={...defaultProps,bounds:[0,0,2e3,3e3],layers:[{"@@type":"UnfoldedGeoJsonLayer",id:"enhanced-path-layer",data:{type:"FeatureCollection",features:[{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"LineString",coordinates:[[500,2e3,-400],[1500,2e3,-600],[1700,2500,-400]]}]}}]},lineWidthScale:20,lineBillboard:!0},{"@@type":"AxesLayer",id:"axes-layer",bounds:[0,0,0,2e3,3e3,1e3]}]};const WithWellsData=StoryTemplate.bind({});WithWellsData.args={...defaultProps,bounds:[432205,6475078,437720,6481113],resources:{wellsData:"./volve_wells.json"},layers:[{"@@type":"AxesLayer",id:"axes-layer",bounds:[432205,6475078,0,437720,6481113,3500]},{"@@type":"WellsLayer",data:"@@#resources.wellsData",lineStyle:{width:object=>"15/9-F-4"===object.properties.name?6:0},wellHeadStyle:{size:object=>"15/9-F-4"===object.properties.name?8:0}}]};const FencePolygon=StoryTemplate.bind({});FencePolygon.args={...defaultProps,bounds:[500,1e3,1200,1500],layers:[{"@@type":"AxesLayer",id:"axes-layer",bounds:[300,800,400,1300,1600,600]},{"@@type":"UnfoldedGeoJsonLayer",id:"enhanced-path-layer",data:{type:"FeatureCollection",features:[{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"Polygon",coordinates:[[[500,1e3,-400],[800,1200,-400],[1e3,1100,-400],[1e3,1100,-600],[800,1200,-600],[500,1e3,-600],[500,1e3,-400]]]}]}}]},lineWidthScale:2,lineBillboard:!0,stroked:!0}]};const IntersectionViewExample=StoryTemplate.bind({});IntersectionViewExample.args={...defaultProps,bounds:[500,1e3,1200,1500],layers:[{"@@type":"AxesLayer",id:"axes-layer",bounds:[300,800,400,1300,1600,600]},{"@@type":"UnfoldedGeoJsonLayer",id:"enhanced-path-layer",data:{type:"FeatureCollection",features:[{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"Polygon",coordinates:[[[500,1e3,-400],[800,1200,-400],[1e3,1100,-400],[1e3,1100,-600],[800,1200,-600],[500,1e3,-600],[500,1e3,-400]]]}]},properties:{name:"Fence",color:[235,107,52,255]}},{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"Point",coordinates:[500,1e3,-400]},{type:"LineString",coordinates:[[500,1e3,-400],[575,1050,-450],[650,1100,-450],[725,1150,-500],[800,1200,-500],[900,1150,-550],[950,1125,-550],[1e3,1100,-550]]}]},properties:{name:"Well",color:[52,125,235,255]}},{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"LineString",coordinates:[[500,1e3,-475],[800,1200,-475],[1e3,1100,-475]]}]},properties:{name:"Surface 1",color:[52,235,211,255]}},{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"LineString",coordinates:[[500,1e3,-525],[800,1200,-525],[1e3,1100,-525]]}]},properties:{name:"Surface 2",color:[32,252,3,255]}}]},lineWidthScale:1,lineBillboard:!0,pointBillboard:!0,stroked:!0,getPointRadius:3,getLineColor:d=>d.properties?.color,getFillColor:d=>d.properties?.color}]},WithSamplePolylineData.parameters={...WithSamplePolylineData.parameters,docs:{...WithSamplePolylineData.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...WithSamplePolylineData.parameters?.docs?.source}}},WithWellsData.parameters={...WithWellsData.parameters,docs:{...WithWellsData.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...WithWellsData.parameters?.docs?.source}}},FencePolygon.parameters={...FencePolygon.parameters,docs:{...FencePolygon.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...FencePolygon.parameters?.docs?.source}}},IntersectionViewExample.parameters={...IntersectionViewExample.parameters,docs:{...IntersectionViewExample.parameters?.docs,source:{originalSource:"args => {\n  return <SubsurfaceViewer {...args} />;\n}",...IntersectionViewExample.parameters?.docs?.source}}};const __namedExportsOrder=["WithSamplePolylineData","WithWellsData","FencePolygon","IntersectionViewExample"]}}]);