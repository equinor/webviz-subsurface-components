"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[9020],{"./packages/subsurface-viewer/src/storybook/layers/WellsLayer.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllTrajectoryHidden:function(){return AllTrajectoryHidden},AllWellHeadsHidden:function(){return AllWellHeadsHidden},CallbackStyledWells:function(){return CallbackStyledWells},ContinuousColorTable:function(){return ContinuousColorTable},ContinuousWellLogs:function(){return ContinuousWellLogs},CustomColoredWells:function(){return CustomColoredWells},CustomWidthWells:function(){return CustomWidthWells},DashedWells:function(){return DashedWells},DiscreteWellLogs:function(){return DiscreteWellLogs},LegendWithColorSelector:function(){return LegendWithColorSelector},MultipleVolveWells:function(){return MultipleVolveWells},SimplifiedRendering:function(){return SimplifiedRendering},VerticalWellWithDuplicates:function(){return VerticalWellWithDuplicates},VolveWells:function(){return VolveWells},VolveWellsWithResetButton:function(){return VolveWellsWithResetButton},Wells3d:function(){return Wells3d},Wells3dDashed:function(){return Wells3dDashed},WellsRefine:function(){return WellsRefine},__namedExportsOrder:function(){return __namedExportsOrder},default:function(){return WellsLayer_stories},volveWells2:function(){return volveWells2}});var react=__webpack_require__("./node_modules/react/index.js"),Slider=__webpack_require__("./node_modules/@mui/material/Slider/Slider.js"),styled=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),dist=__webpack_require__("./node_modules/@emerson-eps/color-tables/dist/index.js"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),esm=__webpack_require__("./node_modules/@equinor/eds-tokens/dist/esm/index.mjs");const{colors:colors,spacings:{comfortable:{small:small,x_small:x_small}},typography:typography,shape:shape}=esm.tokens,nativeselect={background:colors.ui.background__light.rgba,typography:{...typography.input.text,color:colors.text.static_icons__default.rgba},entities:{input:{spacings:{left:small,right:small,top:"6px",bottom:"6px"}},icon:{width:"24px"}},boxShadow:"inset 0 -1px 0 0 "+colors.text.static_icons__tertiary.rgba,states:{focus:{outline:{type:"outline",width:"2px",color:colors.interactive.primary__resting.rgba,style:"solid",offset:"0px"}},disabled:{typography:{color:colors.interactive.disabled__text.rgba}}},modes:{compact:{minHeight:shape._modes.compact.straight.minHeight,entities:{input:{spacings:{left:x_small,right:x_small,top:"0",bottom:"0"}}}}}};var templates=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-utils/dist/esm/utils/templates/index.mjs"),templates_focus=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-utils/dist/esm/utils/templates/focus.mjs"),useToken=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-utils/dist/esm/hooks/useToken.mjs"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),eds_context=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-core-react/dist/esm/components/EdsProvider/eds.context.js"),Label=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-core-react/dist/esm/components/Label/Label.js");const Container=styled_components_browser_esm.ZP.div.withConfig({displayName:"NativeSelect__Container",componentId:"sc-82vb16-0"})(["min-width:100px;width:100%;"]),StyledSelect=styled_components_browser_esm.ZP.select.withConfig({displayName:"NativeSelect__StyledSelect",componentId:"sc-82vb16-1"})(["border:none;border-radius:0;box-shadow:",";"," "," padding-right:calc("," *2 + ",");display:block;margin:0;appearance:none;background-image:url(\"data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='%236f6f6f' d='M7 9.5l5 5 5-5H7z'/%3E%3C/svg%3E\"),linear-gradient( to bottom,"," 0%,"," 100% );background-repeat:no-repeat,repeat;background-position:right "," top 50%;width:100%;&:active,&:focus{box-shadow:none;","}&:disabled{color:",";background-image:url(\"data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='%23bebebe' d='M7 9.5l5 5 5-5H7z'/%3E%3C/svg%3E\"),linear-gradient( to bottom,"," 0%,"," 100% );cursor:not-allowed;box-shadow:none;outline:none;.arrow-icon{fill:red;}&:focus,&:active{outline:none;}}"],nativeselect.boxShadow,(0,templates.oc)(nativeselect.typography),(({theme:theme})=>(0,styled_components_browser_esm.iv)(["height:",";",""],theme.minHeight,(0,templates.SH)(theme.entities.input.spacings))),nativeselect.entities.input.spacings.right,nativeselect.entities.icon.width,nativeselect.background,nativeselect.background,nativeselect.entities.input.spacings.right,(0,templates_focus.p)(nativeselect.states.focus.outline),nativeselect.states.disabled.typography.color,nativeselect.background,nativeselect.background),NativeSelect=(0,react.forwardRef)((function NativeSelect({label:label,children:children,className:className,style:style,selectRef:selectRef,id:id,meta:meta,disabled:disabled=!1,multiple:multiple=!1,...other},ref){const{density:density}=(0,eds_context.q)(),token=(0,useToken.d)({density:density},nativeselect),containerProps={ref:ref,className:className,style:style},selectProps={ref:selectRef,id:id,disabled:disabled,multiple:multiple,...other},labelProps={htmlFor:id,label:label,meta:meta,disabled:disabled},showLabel=label||meta;return(0,jsx_runtime.jsx)(styled_components_browser_esm.f6,{theme:token,children:(0,jsx_runtime.jsxs)(Container,{...containerProps,children:[showLabel&&(0,jsx_runtime.jsx)(Label._,{...labelProps}),(0,jsx_runtime.jsx)(StyledSelect,{...selectProps,children:children})]})})}));var SubsurfaceViewer=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),axesLayer=__webpack_require__("./packages/subsurface-viewer/src/layers/axes/axesLayer.ts"),wellsLayer=__webpack_require__("./packages/subsurface-viewer/src/layers/wells/wellsLayer.ts"),sharedSettings=__webpack_require__("./packages/subsurface-viewer/src/storybook/sharedSettings.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}var WellsLayer_stories={parameters:{storySource:{source:'function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n // remove when ready to fix these.\n\nimport React, { useState } from "react";\nimport { Slider } from "@mui/material";\nimport { styled } from "@mui/material/styles";\nimport { ColorLegend, colorTables, createColorMapFunction } from "@emerson-eps/color-tables";\nimport { NativeSelect } from "@equinor/eds-core-react";\nimport SubsurfaceViewer from "../../SubsurfaceViewer";\nimport AxesLayer from "../../layers/axes/axesLayer";\nimport WellsLayer from "../../layers/wells/wellsLayer";\nimport { default3DViews, defaultStoryParameters, volveWellsBounds, volveWellsFromResourcesLayer, volveWellsResources } from "../sharedSettings";\nconst stories = {\n  component: SubsurfaceViewer,\n  title: "SubsurfaceViewer / Wells Layer",\n  args: {\n    // Add a reset button for all the stories.\n    // Somehow, I do not manage to add the triggerHome to the general "unset" controls :/\n    triggerHome: 0\n  },\n  tags: ["no-test"]\n};\nexport default stories;\nconst PREFIX = "VolveWells";\nconst testWellWithDuplicates = {\n  type: "FeatureCollection",\n  features: [{\n    type: "Feature",\n    geometry: {\n      type: "GeometryCollection",\n      geometries: [{\n        type: "Point",\n        coordinates: [0, 0]\n      }, {\n        type: "LineString",\n        coordinates: [[0, 0, -100], [0, 0, -200], [0, 0, -300], [0, 0, -400], [0, 0, -400], [0, 0, -400], [0, 0, -500], [0, 0, -600], [0, 0, -700], [0, 0, -800]]\n      }]\n    },\n    properties: {\n      name: "wl6",\n      color: [255, 255, 0, 255],\n      md: [[0, 1, 2, 3, 4, 5, 8, 9]]\n    }\n  }]\n};\nconst classes = {\n  main: `${PREFIX}-main`\n};\nconst Root = styled("div")({\n  [`& .${classes.main}`]: {\n    height: 500,\n    border: "1px solid black",\n    position: "relative"\n  }\n});\nconst defaultProps = {\n  id: "some id",\n  resources: {\n    ...volveWellsResources.resources\n  },\n  bounds: volveWellsBounds\n};\nconst continuousLogsLayer = {\n  ...volveWellsFromResourcesLayer,\n  refine: false,\n  outline: false,\n  logData: "./volve_logs.json",\n  logrunName: "BLOCKING",\n  logName: "PORO",\n  logColor: "Physics"\n};\n\n// Volve wells default example.\nexport const VolveWells = {\n  args: {\n    ...defaultProps,\n    layers: [volveWellsFromResourcesLayer]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example"\n      }\n    }\n  }\n};\n\n// Volve wells with mouseCallback function without logs\nconst VolveWellsWithMouseCallback = props => {\n  const onMouseEvent = React.useCallback(event => {\n    console.log(event);\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({}, props, {\n    onMouseEvent: onMouseEvent\n  })), /*#__PURE__*/React.createElement("div", {\n    style: {\n      position: "absolute",\n      marginLeft: 200\n    }\n  }));\n};\nexport const volveWells2 = {\n  args: {\n    id: "volve-wells",\n    resources: {\n      wellsData: "./volve_wells.json"\n    },\n    bounds: volveWellsBounds,\n    layers: [{\n      "@@type": "WellsLayer",\n      data: "@@#resources.wellsData"\n    }, {\n      "@@type": "Axes2DLayer",\n      id: "axes-layer2D",\n      axisColor: [100, 100, 255],\n      marginH: 100,\n      // Horizontal margin (in pixels)\n      marginV: 40 // Vertical margin (in pixels)\n    }]\n  },\n  render: args => /*#__PURE__*/React.createElement(VolveWellsWithMouseCallback, args),\n  tags: ["no-test"]\n};\n\n// Volve wells with logs.\n//\nexport const DiscreteWellLogs = {\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      refine: false,\n      outline: false,\n      logData: "volve_blocking_zonelog_logs.json",\n      logrunName: "BLOCKING",\n      logName: "ZONELOG",\n      logColor: "Stratigraphy"\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with well logs."\n      }\n    }\n  }\n};\nexport const ContinuousWellLogs = {\n  args: {\n    ...defaultProps,\n    layers: [continuousLogsLayer]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with well logs."\n      }\n    }\n  }\n};\nexport const DashedWells = {\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      lineStyle: {\n        dash: true\n      },\n      refine: false,\n      outline: false\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with default dashed well trajectories."\n      }\n    }\n  }\n};\n\n// Volve wells default example.\nexport const MultipleVolveWells = {\n  args: {\n    id: "volve-wells",\n    resources: {\n      wellsData: "./volve_wells_1.json",\n      wellsData2: "./volve_wells_2.json"\n    },\n    bounds: volveWellsBounds,\n    layers: [{\n      "@@type": "WellsLayer",\n      data: "@@#resources.wellsData",\n      id: "id1"\n    }, {\n      "@@type": "WellsLayer",\n      data: "@@#resources.wellsData2",\n      id: "id2"\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Multiple Volve wells example"\n      }\n    }\n  }\n};\nexport const CustomColoredWells = {\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      lineStyle: {\n        color: [255, 0, 0, 255],\n        dash: [10, 3]\n      },\n      wellHeadStyle: {\n        color: [255, 0, 0, 255]\n      },\n      refine: false,\n      outline: false\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with dashed style and red trajectories, with custom style."\n      }\n    }\n  }\n};\nexport const CustomWidthWells = {\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      lineStyle: {\n        width: 10\n      },\n      refine: false,\n      outline: false\n    }]\n  }\n};\nconst WellsWithResetButton = props => {\n  const [editedData, setEditedData] = React.useState(props.editedData);\n  const [triggerResetMultipleWells, setTriggerResetMultipleWells] = React.useState(0);\n  const handleChange1 = () => {\n    setTriggerResetMultipleWells(triggerResetMultipleWells + 1);\n  };\n  React.useEffect(() => {\n    setEditedData(props.editedData);\n  }, [props.editedData]);\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({}, props, {\n    editedData: editedData,\n    setProps: updatedProps => {\n      setEditedData(updatedProps);\n    },\n    triggerResetMultipleWells: triggerResetMultipleWells\n  }))), /*#__PURE__*/React.createElement("button", {\n    onClick: handleChange1\n  }, " Reset Multiple Wells "));\n};\nexport const VolveWellsWithResetButton = {\n  args: {\n    id: "volve-wells",\n    resources: {\n      wellsData: "./volve_wells.json"\n    },\n    bounds: volveWellsBounds,\n    layers: [{\n      "@@type": "WellsLayer",\n      data: "@@#resources.wellsData"\n    }]\n  },\n  render: args => /*#__PURE__*/React.createElement(WellsWithResetButton, args)\n};\nfunction wellheadSizeCallback(object) {\n  if (object["properties"]["name"].match("15/9-19")) return 0;else return 8;\n}\nfunction colorCallback(object) {\n  if (object["properties"]["name"].match("15/9-F-10")) return [0, 0, 0, 0];else return object["properties"]["color"];\n}\nfunction dashCallback(object) {\n  if (object["properties"]["name"].match("15/9-19")) return [1.5, 1.5];else if (object["properties"]["name"] === "15/9-F-15") return true;else return false;\n}\nfunction widthCallback(object) {\n  if (object["properties"]["name"].match("15/9-F-1")) return 3;else if (object["properties"]["name"] === "15/9-F-4") return 8;else return 5;\n}\nexport const CallbackStyledWells = {\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      lineStyle: {\n        color: colorCallback,\n        dash: dashCallback,\n        width: widthCallback\n      },\n      wellHeadStyle: {\n        size: wellheadSizeCallback\n      },\n      refine: false,\n      outline: false\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with trajectory color, width and dash style supplied as callback."\n      }\n    }\n  }\n};\nexport const AllTrajectoryHidden = {\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      lineStyle: {\n        color: [0, 0, 0, 0]\n      },\n      refine: false,\n      outline: false\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with all trajectory hidden."\n      }\n    }\n  }\n};\nexport const AllWellHeadsHidden = {\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      wellHeadStyle: {\n        size: 0\n      },\n      refine: false,\n      outline: false\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with all well heads hidden."\n      }\n    }\n  }\n};\nconst testWell = {\n  type: "FeatureCollection",\n  features: [{\n    type: "Feature",\n    geometry: {\n      type: "GeometryCollection",\n      geometries: [{\n        type: "Point",\n        coordinates: [0, 0]\n      }, {\n        type: "LineString",\n        coordinates: [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 50, -50], [0, 0, -100], [99, 99, -150], [99, 0, -250]]\n      }]\n    },\n    properties: {\n      name: "well99",\n      color: [255, 255, 0, 255],\n      md: [[0, 1, 2, 3, 4, 5, 8, 9]]\n    }\n  }]\n};\nconst BBox = [-100, -100, -250, 100, 100, 0];\nconst WellsRefineComponent = props => {\n  const [refineNumber, setRefineNumber] = React.useState(1);\n  const propsWithLayers = {\n    ...props,\n    layers: [{\n      "@@type": "WellsLayer",\n      data: testWell,\n      refine: refineNumber,\n      ZIncreasingDownwards: false\n    }, {\n      "@@type": "AxesLayer",\n      ZIncreasingDownwards: false,\n      bounds: BBox\n    }]\n  };\n  const handleChange = React.useCallback((_event, value) => {\n    setRefineNumber(value);\n  }, []);\n  return /*#__PURE__*/React.createElement(Root, null, /*#__PURE__*/React.createElement("div", {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, propsWithLayers)), /*#__PURE__*/React.createElement(Slider, {\n    min: 1,\n    max: 10,\n    defaultValue: 1,\n    step: 1,\n    onChange: handleChange,\n    valueLabelDisplay: "auto"\n  }));\n};\nexport const WellsRefine = {\n  args: {\n    id: "refine-wells",\n    cameraPosition: {\n      rotationOrbit: -45,\n      rotationX: 15,\n      zoom: BBox,\n      target: [0, 0, 0]\n    },\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "3D wells example"\n      }\n    }\n  },\n  render: args => /*#__PURE__*/React.createElement(WellsRefineComponent, args),\n  tags: ["no-test"]\n};\nexport const Wells3d = {\n  args: {\n    ...defaultProps,\n    layers: [volveWellsFromResourcesLayer],\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "3D wells example"\n      }\n    }\n  }\n};\nexport const VerticalWellWithDuplicates = {\n  args: {\n    id: "well_176",\n    bounds: [-150, -150, 150, 150],\n    layers: [new WellsLayer({\n      data: testWellWithDuplicates,\n      ZIncreasingDownwards: false\n    }), new AxesLayer({\n      id: "axes-layer",\n      bounds: [-100, -100, -500, 100, 100, 0],\n      ZIncreasingDownwards: false\n    })],\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "One single vertical well"\n      }\n    }\n  }\n};\n\n// Gullfaks wells.\nconst SimplifiedRenderingComponent = props => {\n  const [simplifiedRendering, setSimplifiedRendering] = React.useState(false);\n  const propsWithLayers = {\n    ...props,\n    onDragStart: () => setSimplifiedRendering(true),\n    onDragEnd: () => setSimplifiedRendering(false),\n    layers: [new WellsLayer({\n      data: "./gullfaks.json",\n      wellHeadStyle: {\n        size: 4\n      },\n      refine: true,\n      outline: true,\n      simplifiedRendering,\n      // If true will cause wellslayer to draw simplified.\n      ZIncreasingDownwards: false\n    }), new AxesLayer({\n      id: "axes-layer",\n      bounds: [450000, 6781000, 0, 464000, 6791000, 3500]\n    })]\n  };\n  return /*#__PURE__*/React.createElement(SubsurfaceViewer, propsWithLayers);\n};\nexport const SimplifiedRendering = {\n  args: {\n    id: "gullfaks",\n    bounds: [450000, 6781000, 464000, 6791000],\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "3D gullfaks wells example"\n      }\n    }\n  },\n  render: args => /*#__PURE__*/React.createElement(SimplifiedRenderingComponent, args)\n};\nexport const Wells3dDashed = {\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      lineStyle: {\n        dash: true\n      },\n      refine: false,\n      outline: false\n    }],\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "3D dashed wells example"\n      },\n      ...defaultStoryParameters.docs\n    }\n  }\n};\nconst ContinuousColorTableComponent = () => {\n  const [colorTable, setColorTable] = useState("Physics");\n  const mapProps = React.useMemo(() => {\n    return {\n      ...defaultProps,\n      layers: [{\n        ...continuousLogsLayer,\n        logColor: colorTable\n      }]\n    };\n  }, [colorTable]);\n  const handleOnChange = event => {\n    setColorTable(event.target?.value);\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NativeSelect, {\n    id: "test",\n    label: "Color table",\n    value: colorTable,\n    onChange: handleOnChange\n  }, /*#__PURE__*/React.createElement("option", {\n    key: "Physics"\n  }, "Physics"), /*#__PURE__*/React.createElement("option", {\n    key: "Rainbow"\n  }, "Rainbow")), /*#__PURE__*/React.createElement("div", {\n    style: {\n      height: "80vh",\n      position: "relative"\n    }\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, mapProps)));\n};\nexport const ContinuousColorTable = {\n  render: () => /*#__PURE__*/React.createElement(ContinuousColorTableComponent, null)\n};\n\n// colorselector for welllayer\nconst wellLayers = [{\n  ...volveWellsFromResourcesLayer,\n  refine: false,\n  outline: false,\n  logData: "./volve_logs.json",\n  logrunName: "BLOCKING",\n  logName: "ZONELOG",\n  logColor: "Stratigraphy",\n  colorMappingFunction: createColorMapFunction("Stratigraphy", true, true, [])\n}];\n\n// prop for legend\nconst min = 0;\nconst max = 0.35;\nconst dataObjectName = "ZONELOG";\nconst position = [16, 10];\nconst horizontal = true;\nconst discreteData = {\n  Above_BCU: [[], 0],\n  ABOVE: [[], 1],\n  H12: [[], 2],\n  H11: [[], 3],\n  H10: [[], 4],\n  H9: [[], 5],\n  H8: [[], 6],\n  H7: [[], 7],\n  H6: [[], 8],\n  H5: [[], 9],\n  H4: [[], 10],\n  H3: [[], 11],\n  H2: [[], 12],\n  H1: [[], 13],\n  BELOW: [[], 14]\n};\nconst reverseRange = false;\n\n\nconst WellLayerTemplate = args => {\n  const [getColorName, setColorName] = React.useState("Rainbow");\n  const [isLog, setIsLog] = React.useState(false);\n  const wellLayerData = React.useCallback(data => {\n    setColorName(data);\n  }, []);\n\n  // interpolation method\n  const getInterpolateMethod = React.useCallback(data => {\n    setIsLog(data.isLog);\n  }, []);\n  const layers = [{\n    ...args.wellLayers[0],\n    colorMappingFunction: createColorMapFunction(getColorName, true, true, []),\n    logColor: getColorName ? getColorName : wellLayers[0].logColor,\n    isLog: isLog\n  }];\n  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {\n    style: {\n      float: "right",\n      zIndex: 999,\n      opacity: 1,\n      position: "relative"\n    }\n  }, /*#__PURE__*/React.createElement(ColorLegend, _extends({}, args, {\n    getColorName: wellLayerData,\n    getInterpolateMethod: getInterpolateMethod\n  }))), /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({}, args, {\n    layers: layers\n  })));\n};\n\n\nexport const LegendWithColorSelector = {\n  args: {\n    min,\n    max,\n    dataObjectName,\n    position,\n    horizontal,\n    colorTables,\n    discreteData,\n    ...defaultProps,\n    id: defaultProps.id,\n    wellLayers,\n    legend: {\n      visible: false\n    },\n    reverseRange\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Clicking on legend opens(toggle) the color selector component and then click on the color scale to update the layer."\n      }\n    }\n  },\n  render: args => /*#__PURE__*/React.createElement(WellLayerTemplate, args)\n};',locationsMap:{"volve-wells":{startLoc:{col:26,line:74},endLoc:{col:1,line:87},startBody:{col:26,line:74},endBody:{col:1,line:87}},"volve-wells-2":{startLoc:{col:27,line:103},endLoc:{col:1,line:124},startBody:{col:27,line:103},endBody:{col:1,line:124}},"discrete-well-logs":{startLoc:{col:32,line:128},endLoc:{col:1,line:149},startBody:{col:32,line:128},endBody:{col:1,line:149}},"continuous-well-logs":{startLoc:{col:34,line:150},endLoc:{col:1,line:163},startBody:{col:34,line:150},endBody:{col:1,line:163}},"dashed-wells":{startLoc:{col:27,line:164},endLoc:{col:1,line:184},startBody:{col:27,line:164},endBody:{col:1,line:184}},"multiple-volve-wells":{startLoc:{col:34,line:187},endLoc:{col:1,line:213},startBody:{col:34,line:187},endBody:{col:1,line:213}},"custom-colored-wells":{startLoc:{col:34,line:214},endLoc:{col:1,line:238},startBody:{col:34,line:214},endBody:{col:1,line:238}},"custom-width-wells":{startLoc:{col:32,line:239},endLoc:{col:1,line:251},startBody:{col:32,line:239},endBody:{col:1,line:251}},"volve-wells-with-reset-button":{startLoc:{col:41,line:273},endLoc:{col:1,line:286},startBody:{col:41,line:273},endBody:{col:1,line:286}},"callback-styled-wells":{startLoc:{col:35,line:299},endLoc:{col:1,line:324},startBody:{col:35,line:299},endBody:{col:1,line:324}},"all-trajectory-hidden":{startLoc:{col:35,line:325},endLoc:{col:1,line:345},startBody:{col:35,line:325},endBody:{col:1,line:345}},"all-well-heads-hidden":{startLoc:{col:34,line:346},endLoc:{col:1,line:366},startBody:{col:34,line:346},endBody:{col:1,line:366}},"wells-refine":{startLoc:{col:27,line:418},endLoc:{col:1,line:439},startBody:{col:27,line:418},endBody:{col:1,line:439}},"wells-3-d":{startLoc:{col:23,line:440},endLoc:{col:1,line:454},startBody:{col:23,line:440},endBody:{col:1,line:454}},"vertical-well-with-duplicates":{startLoc:{col:42,line:455},endLoc:{col:1,line:477},startBody:{col:42,line:455},endBody:{col:1,line:477}},"simplified-rendering":{startLoc:{col:35,line:503},endLoc:{col:1,line:518},startBody:{col:35,line:503},endBody:{col:1,line:518}},"wells-3-d-dashed":{startLoc:{col:29,line:519},endLoc:{col:1,line:540},startBody:{col:29,line:519},endBody:{col:1,line:540}},"continuous-color-table":{startLoc:{col:36,line:571},endLoc:{col:1,line:573},startBody:{col:36,line:571},endBody:{col:1,line:573}},"legend-with-color-selector":{startLoc:{col:39,line:646},endLoc:{col:1,line:672},startBody:{col:39,line:646},endBody:{col:1,line:672}}}}},component:SubsurfaceViewer.Z,title:"SubsurfaceViewer / Wells Layer",args:{triggerHome:0},tags:["no-test"]};const classes={main:"VolveWells-main"},Root=(0,styled.ZP)("div")({[`& .${classes.main}`]:{height:500,border:"1px solid black",position:"relative"}}),defaultProps={id:"some id",resources:{...sharedSettings.M8.resources},bounds:sharedSettings.z},continuousLogsLayer={...sharedSettings.y8,refine:!1,outline:!1,logData:"./volve_logs.json",logrunName:"BLOCKING",logName:"PORO",logColor:"Physics"},VolveWells={args:{...defaultProps,layers:[sharedSettings.y8]},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"Volve wells example"}}}},VolveWellsWithMouseCallback=props=>{const onMouseEvent=react.useCallback((event=>{console.log(event)}),[]);return react.createElement(react.Fragment,null,react.createElement(SubsurfaceViewer.Z,_extends({},props,{onMouseEvent:onMouseEvent})),react.createElement("div",{style:{position:"absolute",marginLeft:200}}))},volveWells2={args:{id:"volve-wells",resources:{wellsData:"./volve_wells.json"},bounds:sharedSettings.z,layers:[{"@@type":"WellsLayer",data:"@@#resources.wellsData"},{"@@type":"Axes2DLayer",id:"axes-layer2D",axisColor:[100,100,255],marginH:100,marginV:40}]},render:args=>react.createElement(VolveWellsWithMouseCallback,args),tags:["no-test"]},DiscreteWellLogs={args:{...defaultProps,layers:[{...sharedSettings.y8,refine:!1,outline:!1,logData:"volve_blocking_zonelog_logs.json",logrunName:"BLOCKING",logName:"ZONELOG",logColor:"Stratigraphy"}]},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"Volve wells example with well logs."}}}},ContinuousWellLogs={args:{...defaultProps,layers:[continuousLogsLayer]},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"Volve wells example with well logs."}}}},DashedWells={args:{...defaultProps,layers:[{...sharedSettings.y8,lineStyle:{dash:!0},refine:!1,outline:!1}]},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"Volve wells example with default dashed well trajectories."}}}},MultipleVolveWells={args:{id:"volve-wells",resources:{wellsData:"./volve_wells_1.json",wellsData2:"./volve_wells_2.json"},bounds:sharedSettings.z,layers:[{"@@type":"WellsLayer",data:"@@#resources.wellsData",id:"id1"},{"@@type":"WellsLayer",data:"@@#resources.wellsData2",id:"id2"}]},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"Multiple Volve wells example"}}}},CustomColoredWells={args:{...defaultProps,layers:[{...sharedSettings.y8,lineStyle:{color:[255,0,0,255],dash:[10,3]},wellHeadStyle:{color:[255,0,0,255]},refine:!1,outline:!1}]},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"Volve wells example with dashed style and red trajectories, with custom style."}}}},CustomWidthWells={args:{...defaultProps,layers:[{...sharedSettings.y8,lineStyle:{width:10},refine:!1,outline:!1}]}},WellsWithResetButton=props=>{const[editedData,setEditedData]=react.useState(props.editedData),[triggerResetMultipleWells,setTriggerResetMultipleWells]=react.useState(0);return react.useEffect((()=>{setEditedData(props.editedData)}),[props.editedData]),react.createElement(Root,null,react.createElement("div",{className:classes.main},react.createElement(SubsurfaceViewer.Z,_extends({},props,{editedData:editedData,setProps:updatedProps=>{setEditedData(updatedProps)},triggerResetMultipleWells:triggerResetMultipleWells}))),react.createElement("button",{onClick:()=>{setTriggerResetMultipleWells(triggerResetMultipleWells+1)}}," Reset Multiple Wells "))},VolveWellsWithResetButton={args:{id:"volve-wells",resources:{wellsData:"./volve_wells.json"},bounds:sharedSettings.z,layers:[{"@@type":"WellsLayer",data:"@@#resources.wellsData"}]},render:args=>react.createElement(WellsWithResetButton,args)};const CallbackStyledWells={args:{...defaultProps,layers:[{...sharedSettings.y8,lineStyle:{color:function colorCallback(object){return object.properties.name.match("15/9-F-10")?[0,0,0,0]:object.properties.color},dash:function dashCallback(object){return object.properties.name.match("15/9-19")?[1.5,1.5]:"15/9-F-15"===object.properties.name},width:function widthCallback(object){return object.properties.name.match("15/9-F-1")?3:"15/9-F-4"===object.properties.name?8:5}},wellHeadStyle:{size:function wellheadSizeCallback(object){return object.properties.name.match("15/9-19")?0:8}},refine:!1,outline:!1}]},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"Volve wells example with trajectory color, width and dash style supplied as callback."}}}},AllTrajectoryHidden={args:{...defaultProps,layers:[{...sharedSettings.y8,lineStyle:{color:[0,0,0,0]},refine:!1,outline:!1}]},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"Volve wells example with all trajectory hidden."}}}},AllWellHeadsHidden={args:{...defaultProps,layers:[{...sharedSettings.y8,wellHeadStyle:{size:0},refine:!1,outline:!1}]},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"Volve wells example with all well heads hidden."}}}},testWell={type:"FeatureCollection",features:[{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"Point",coordinates:[0,0]},{type:"LineString",coordinates:[[0,0,0],[0,0,1],[0,0,2],[0,50,-50],[0,0,-100],[99,99,-150],[99,0,-250]]}]},properties:{name:"well99",color:[255,255,0,255],md:[[0,1,2,3,4,5,8,9]]}}]},BBox=[-100,-100,-250,100,100,0],WellsRefineComponent=props=>{const[refineNumber,setRefineNumber]=react.useState(1),propsWithLayers={...props,layers:[{"@@type":"WellsLayer",data:testWell,refine:refineNumber,ZIncreasingDownwards:!1},{"@@type":"AxesLayer",ZIncreasingDownwards:!1,bounds:BBox}]},handleChange=react.useCallback(((_event,value)=>{setRefineNumber(value)}),[]);return react.createElement(Root,null,react.createElement("div",{className:classes.main},react.createElement(SubsurfaceViewer.Z,propsWithLayers)),react.createElement(Slider.ZP,{min:1,max:10,defaultValue:1,step:1,onChange:handleChange,valueLabelDisplay:"auto"}))},WellsRefine={args:{id:"refine-wells",cameraPosition:{rotationOrbit:-45,rotationX:15,zoom:BBox,target:[0,0,0]},views:sharedSettings.Pl},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"3D wells example"}}},render:args=>react.createElement(WellsRefineComponent,args),tags:["no-test"]},Wells3d={args:{...defaultProps,layers:[sharedSettings.y8],views:sharedSettings.Pl},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"3D wells example"}}}},VerticalWellWithDuplicates={args:{id:"well_176",bounds:[-150,-150,150,150],layers:[new wellsLayer.ZP({data:{type:"FeatureCollection",features:[{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"Point",coordinates:[0,0]},{type:"LineString",coordinates:[[0,0,-100],[0,0,-200],[0,0,-300],[0,0,-400],[0,0,-400],[0,0,-400],[0,0,-500],[0,0,-600],[0,0,-700],[0,0,-800]]}]},properties:{name:"wl6",color:[255,255,0,255],md:[[0,1,2,3,4,5,8,9]]}}]},ZIncreasingDownwards:!1}),new axesLayer.Z({id:"axes-layer",bounds:[-100,-100,-500,100,100,0],ZIncreasingDownwards:!1})],views:sharedSettings.Pl},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"One single vertical well"}}}},SimplifiedRenderingComponent=props=>{const[simplifiedRendering,setSimplifiedRendering]=react.useState(!1),propsWithLayers={...props,onDragStart:()=>setSimplifiedRendering(!0),onDragEnd:()=>setSimplifiedRendering(!1),layers:[new wellsLayer.ZP({data:"./gullfaks.json",wellHeadStyle:{size:4},refine:!0,outline:!0,simplifiedRendering:simplifiedRendering,ZIncreasingDownwards:!1}),new axesLayer.Z({id:"axes-layer",bounds:[45e4,6781e3,0,464e3,6791e3,3500]})]};return react.createElement(SubsurfaceViewer.Z,propsWithLayers)},SimplifiedRendering={args:{id:"gullfaks",bounds:[45e4,6781e3,464e3,6791e3],views:sharedSettings.Pl},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"3D gullfaks wells example"}}},render:args=>react.createElement(SimplifiedRenderingComponent,args)},Wells3dDashed={args:{...defaultProps,layers:[{...sharedSettings.y8,lineStyle:{dash:!0},refine:!1,outline:!1}],views:sharedSettings.Pl},parameters:{docs:{description:{story:"3D dashed wells example"},...sharedSettings.R4.docs}}},ContinuousColorTableComponent=()=>{const[colorTable,setColorTable]=(0,react.useState)("Physics"),mapProps=react.useMemo((()=>({...defaultProps,layers:[{...continuousLogsLayer,logColor:colorTable}]})),[colorTable]);return react.createElement(react.Fragment,null,react.createElement(NativeSelect,{id:"test",label:"Color table",value:colorTable,onChange:event=>{setColorTable(event.target?.value)}},react.createElement("option",{key:"Physics"},"Physics"),react.createElement("option",{key:"Rainbow"},"Rainbow")),react.createElement("div",{style:{height:"80vh",position:"relative"}},react.createElement(SubsurfaceViewer.Z,mapProps)))},ContinuousColorTable={render:()=>react.createElement(ContinuousColorTableComponent,null)},wellLayers=[{...sharedSettings.y8,refine:!1,outline:!1,logData:"./volve_logs.json",logrunName:"BLOCKING",logName:"ZONELOG",logColor:"Stratigraphy",colorMappingFunction:(0,dist.rX)("Stratigraphy",!0,!0,[])}],WellLayerTemplate=args=>{const[getColorName,setColorName]=react.useState("Rainbow"),[isLog,setIsLog]=react.useState(!1),wellLayerData=react.useCallback((data=>{setColorName(data)}),[]),getInterpolateMethod=react.useCallback((data=>{setIsLog(data.isLog)}),[]),layers=[{...args.wellLayers[0],colorMappingFunction:(0,dist.rX)(getColorName,!0,!0,[]),logColor:getColorName||wellLayers[0].logColor,isLog:isLog}];return react.createElement("div",null,react.createElement("div",{style:{float:"right",zIndex:999,opacity:1,position:"relative"}},react.createElement(dist.n6,_extends({},args,{getColorName:wellLayerData,getInterpolateMethod:getInterpolateMethod}))),react.createElement(SubsurfaceViewer.Z,_extends({},args,{layers:layers})))},LegendWithColorSelector={args:{min:0,max:.35,dataObjectName:"ZONELOG",position:[16,10],horizontal:!0,colorTables:dist.Su,discreteData:{Above_BCU:[[],0],ABOVE:[[],1],H12:[[],2],H11:[[],3],H10:[[],4],H9:[[],5],H8:[[],6],H7:[[],7],H6:[[],8],H5:[[],9],H4:[[],10],H3:[[],11],H2:[[],12],H1:[[],13],BELOW:[[],14]},...defaultProps,id:defaultProps.id,wellLayers:wellLayers,legend:{visible:!1},reverseRange:!1},parameters:{docs:{...sharedSettings.R4.docs,description:{story:"Clicking on legend opens(toggle) the color selector component and then click on the color scale to update the layer."}}},render:args=>react.createElement(WellLayerTemplate,args)};VolveWells.parameters={...VolveWells.parameters,docs:{...VolveWells.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [volveWellsFromResourcesLayer]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example"\n      }\n    }\n  }\n}',...VolveWells.parameters?.docs?.source}}},volveWells2.parameters={...volveWells2.parameters,docs:{...volveWells2.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "volve-wells",\n    resources: {\n      wellsData: "./volve_wells.json"\n    },\n    bounds: volveWellsBounds,\n    layers: [{\n      "@@type": "WellsLayer",\n      data: "@@#resources.wellsData"\n    }, {\n      "@@type": "Axes2DLayer",\n      id: "axes-layer2D",\n      axisColor: [100, 100, 255],\n      marginH: 100,\n      // Horizontal margin (in pixels)\n      marginV: 40 // Vertical margin (in pixels)\n    }]\n  },\n  render: args => <VolveWellsWithMouseCallback {...args} />,\n  tags: ["no-test"]\n}',...volveWells2.parameters?.docs?.source}}},DiscreteWellLogs.parameters={...DiscreteWellLogs.parameters,docs:{...DiscreteWellLogs.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      refine: false,\n      outline: false,\n      logData: "volve_blocking_zonelog_logs.json",\n      logrunName: "BLOCKING",\n      logName: "ZONELOG",\n      logColor: "Stratigraphy"\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with well logs."\n      }\n    }\n  }\n}',...DiscreteWellLogs.parameters?.docs?.source}}},ContinuousWellLogs.parameters={...ContinuousWellLogs.parameters,docs:{...ContinuousWellLogs.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [continuousLogsLayer]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with well logs."\n      }\n    }\n  }\n}',...ContinuousWellLogs.parameters?.docs?.source}}},DashedWells.parameters={...DashedWells.parameters,docs:{...DashedWells.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      lineStyle: {\n        dash: true\n      },\n      refine: false,\n      outline: false\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with default dashed well trajectories."\n      }\n    }\n  }\n}',...DashedWells.parameters?.docs?.source}}},MultipleVolveWells.parameters={...MultipleVolveWells.parameters,docs:{...MultipleVolveWells.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "volve-wells",\n    resources: {\n      wellsData: "./volve_wells_1.json",\n      wellsData2: "./volve_wells_2.json"\n    },\n    bounds: volveWellsBounds,\n    layers: [{\n      "@@type": "WellsLayer",\n      data: "@@#resources.wellsData",\n      id: "id1"\n    }, {\n      "@@type": "WellsLayer",\n      data: "@@#resources.wellsData2",\n      id: "id2"\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Multiple Volve wells example"\n      }\n    }\n  }\n}',...MultipleVolveWells.parameters?.docs?.source}}},CustomColoredWells.parameters={...CustomColoredWells.parameters,docs:{...CustomColoredWells.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      lineStyle: {\n        color: [255, 0, 0, 255],\n        dash: [10, 3]\n      },\n      wellHeadStyle: {\n        color: [255, 0, 0, 255]\n      },\n      refine: false,\n      outline: false\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with dashed style and red trajectories, with custom style."\n      }\n    }\n  }\n}',...CustomColoredWells.parameters?.docs?.source}}},CustomWidthWells.parameters={...CustomWidthWells.parameters,docs:{...CustomWidthWells.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      lineStyle: {\n        width: 10\n      },\n      refine: false,\n      outline: false\n    }]\n  }\n}",...CustomWidthWells.parameters?.docs?.source}}},VolveWellsWithResetButton.parameters={...VolveWellsWithResetButton.parameters,docs:{...VolveWellsWithResetButton.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "volve-wells",\n    resources: {\n      wellsData: "./volve_wells.json"\n    },\n    bounds: volveWellsBounds,\n    layers: [{\n      "@@type": "WellsLayer",\n      data: "@@#resources.wellsData"\n    }]\n  },\n  render: args => <WellsWithResetButton {...args} />\n}',...VolveWellsWithResetButton.parameters?.docs?.source}}},CallbackStyledWells.parameters={...CallbackStyledWells.parameters,docs:{...CallbackStyledWells.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      lineStyle: {\n        color: colorCallback,\n        dash: dashCallback,\n        width: widthCallback\n      },\n      wellHeadStyle: {\n        size: wellheadSizeCallback\n      },\n      refine: false,\n      outline: false\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with trajectory color, width and dash style supplied as callback."\n      }\n    }\n  }\n}',...CallbackStyledWells.parameters?.docs?.source}}},AllTrajectoryHidden.parameters={...AllTrajectoryHidden.parameters,docs:{...AllTrajectoryHidden.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      lineStyle: {\n        color: [0, 0, 0, 0]\n      },\n      refine: false,\n      outline: false\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with all trajectory hidden."\n      }\n    }\n  }\n}',...AllTrajectoryHidden.parameters?.docs?.source}}},AllWellHeadsHidden.parameters={...AllWellHeadsHidden.parameters,docs:{...AllWellHeadsHidden.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      wellHeadStyle: {\n        size: 0\n      },\n      refine: false,\n      outline: false\n    }]\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Volve wells example with all well heads hidden."\n      }\n    }\n  }\n}',...AllWellHeadsHidden.parameters?.docs?.source}}},WellsRefine.parameters={...WellsRefine.parameters,docs:{...WellsRefine.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "refine-wells",\n    cameraPosition: {\n      rotationOrbit: -45,\n      rotationX: 15,\n      zoom: BBox,\n      target: [0, 0, 0]\n    },\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "3D wells example"\n      }\n    }\n  },\n  render: args => <WellsRefineComponent {...args} />,\n  tags: ["no-test"]\n}',...WellsRefine.parameters?.docs?.source}}},Wells3d.parameters={...Wells3d.parameters,docs:{...Wells3d.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [volveWellsFromResourcesLayer],\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "3D wells example"\n      }\n    }\n  }\n}',...Wells3d.parameters?.docs?.source}}},VerticalWellWithDuplicates.parameters={...VerticalWellWithDuplicates.parameters,docs:{...VerticalWellWithDuplicates.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "well_176",\n    bounds: [-150, -150, 150, 150],\n    layers: [new WellsLayer({\n      data: testWellWithDuplicates,\n      ZIncreasingDownwards: false\n    }), new AxesLayer({\n      id: "axes-layer",\n      bounds: [-100, -100, -500, 100, 100, 0],\n      ZIncreasingDownwards: false\n    })],\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "One single vertical well"\n      }\n    }\n  }\n}',...VerticalWellWithDuplicates.parameters?.docs?.source}}},SimplifiedRendering.parameters={...SimplifiedRendering.parameters,docs:{...SimplifiedRendering.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "gullfaks",\n    bounds: ([450000, 6781000, 464000, 6791000] as [number, number, number, number]),\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "3D gullfaks wells example"\n      }\n    }\n  },\n  render: args => <SimplifiedRenderingComponent {...args} />\n}',...SimplifiedRendering.parameters?.docs?.source}}},Wells3dDashed.parameters={...Wells3dDashed.parameters,docs:{...Wells3dDashed.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...defaultProps,\n    layers: [{\n      ...volveWellsFromResourcesLayer,\n      lineStyle: {\n        dash: true\n      },\n      refine: false,\n      outline: false\n    }],\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "3D dashed wells example"\n      },\n      ...defaultStoryParameters.docs\n    }\n  }\n}',...Wells3dDashed.parameters?.docs?.source}}},ContinuousColorTable.parameters={...ContinuousColorTable.parameters,docs:{...ContinuousColorTable.parameters?.docs,source:{originalSource:"{\n  render: () => <ContinuousColorTableComponent />\n}",...ContinuousColorTable.parameters?.docs?.source}}},LegendWithColorSelector.parameters={...LegendWithColorSelector.parameters,docs:{...LegendWithColorSelector.parameters?.docs,source:{originalSource:'{\n  args: {\n    min,\n    max,\n    dataObjectName,\n    position,\n    horizontal,\n    colorTables,\n    discreteData,\n    ...defaultProps,\n    id: defaultProps.id,\n    wellLayers,\n    legend: {\n      visible: false\n    },\n    reverseRange\n  },\n  parameters: {\n    docs: {\n      ...defaultStoryParameters.docs,\n      description: {\n        story: "Clicking on legend opens(toggle) the color selector component and then click on the color scale to update the layer."\n      }\n    }\n  },\n  render: args => <WellLayerTemplate {...args} />\n}',...LegendWithColorSelector.parameters?.docs?.source}}};const __namedExportsOrder=["VolveWells","volveWells2","DiscreteWellLogs","ContinuousWellLogs","DashedWells","MultipleVolveWells","CustomColoredWells","CustomWidthWells","VolveWellsWithResetButton","CallbackStyledWells","AllTrajectoryHidden","AllWellHeadsHidden","WellsRefine","Wells3d","VerticalWellWithDuplicates","SimplifiedRendering","Wells3dDashed","ContinuousColorTable","LegendWithColorSelector"]},"./packages/subsurface-viewer/src/storybook/sharedSettings.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{BX:function(){return EditedDataTemplate},D$:function(){return northArrowLayer},Dh:function(){return hillshadingLayer},HV:function(){return mainStyle},Jl:function(){return hugin2DBounds},M1:function(){return customLayerWithPolylineData},M8:function(){return volveWellsResources},Ng:function(){return customLayerWithTextData},On:function(){return volveWellsWithLogsLayer},Pl:function(){return default3DViews},QH:function(){return huginAxes3DLayer},R4:function(){return defaultStoryParameters},Rd:function(){return customLayerWithPolygonData},Sh:function(){return classes},Wj:function(){return colormapLayer},as:function(){return hugin25mDepthMapLayer},cs:function(){return hugin5mKhNetmapMapLayer},e1:function(){return hugin25mKhNetmapMapLayerPng},ex:function(){return volveWellsLayer},fC:function(){return Root},iH:function(){return redAxes2DLayer},vj:function(){return subsufaceProps},vz:function(){return hugin25mKhNetmapMapLayer},y8:function(){return volveWellsFromResourcesLayer},yP:function(){return hugin3DBounds},z:function(){return volveWellsBounds},zs:function(){return default2DViews}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../example-data/deckgl-map.json");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const defaultStoryParameters={docs:{inlineStories:!1,iframeHeight:500}},classes={main:"default-main"},mainStyle={[`& .${classes.main}`]:{width:750,height:500,top:"50%",left:"50%",transform:"translate(-50%, -50%)",border:"1px solid black",background:"azure",position:"absolute"}},Root=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__.ZP)("div")(mainStyle),subsufaceProps=_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0],colormapLayer={..._example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].layers[0],id:"colormap-layer"},hillshadingLayer={..._example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].layers[1],id:"hillshading-layer"},redAxes2DLayer={"@@type":"Axes2DLayer",id:"axes-layer",marginH:80,marginV:30,isLeftRuler:!0,isRightRuler:!1,isBottomRuler:!0,isTopRuler:!1,backgroundColor:[155,0,0,255]},hugin2DOrigin=[432150,6475800],hugin2DBounds=[432150,6475800,439400,6481500],hugin3DBounds=[432150,6475800,-2e3,439400,6481500,-3500],huginAxes3DLayer={"@@type":"AxesLayer",id:"axes-layer2",bounds:[432150,6475800,2e3,439400,6481500,3500]},northArrowLayer={"@@type":"NorthArrow3DLayer",id:"north-arrow-layer"},volveWellsResources={resources:{wellsData:"./volve_wells.json"}},volveWellsFromResourcesLayer={"@@type":"WellsLayer",id:"volve-wells",data:"@@#resources.wellsData",ZIncreasingDownwards:!1},volveWellsLayer={"@@type":"WellsLayer",id:"volve-wells",data:"./volve_wells.json",ZIncreasingDownwards:!1},volveWellsBounds=[432150,6475800,439400,6481500],volveWellsWithLogsLayer={"@@type":"WellsLayer",id:"volve-wells-with-logs",data:"./volve_wells.json",logData:"./volve_logs.json",logrunName:"BLOCKING",logName:"ZONELOG",logColor:"Stratigraphy",ZIncreasingDownwards:!1},hugin25mDepthMapLayer={"@@type":"MapLayer",id:"hugin_depth",meshData:"hugin_depth_25_m.float32",frame:{origin:hugin2DOrigin,count:[291,229],increment:[25,25],rotDeg:0},propertiesData:"hugin_depth_25_m.float32",contours:[0,100],isContoursDepth:!0,gridLines:!1,smoothShading:!0,material:!0},hugin25mKhNetmapMapLayer={...hugin25mDepthMapLayer,id:"hugin_kh_netmap",propertiesData:"kh_netmap_25_m.float32",colorMapName:"Physics"},hugin25mKhNetmapMapLayerPng={...hugin25mDepthMapLayer,meshData:"hugin_depth_25_m.png",propertiesData:"kh_netmap_25_m.png",colorMapName:"Physics"},hugin5mKhNetmapMapLayer={"@@type":"MapLayer",id:"mesh-layer",meshUrl:"hugin_depth_5_m.float32",frame:{origin:hugin2DOrigin,count:[1451,1141],increment:[5,5],rotDeg:0},propertiesUrl:"kh_netmap_5_m.float32",contours:[0,100],colorMapName:"Physics"},default2DViews={layout:[1,1],viewports:[{id:"view_1",show3D:!1}]},default3DViews={layout:[1,1],viewports:[{id:"view_1",show3D:!0}]},customLayerWithPolylineData={"@@type":"GeoJsonLayer",id:"geojson-line-layer",name:"Line",data:{type:"FeatureCollection",features:[{type:"Feature",properties:{},geometry:{type:"LineString",coordinates:[[434e3,6477500],[435500,6477500]]}}]},getLineWidth:20,lineWidthMinPixels:2},customLayerWithPolygonData={"@@type":"GeoJsonLayer",id:"geojson-layer",name:"Polygon",data:{type:"Feature",properties:{},geometry:{type:"Polygon",coordinates:[[[434562,6477595],[434562,6478595],[435062,6478595],[435062,6477595],[434562,6477595]]]}},getLineWidth:20,lineWidthMinPixels:2,getLineColor:[0,255,255],getFillColor:[0,255,0],opacity:.3},customLayerWithTextData={"@@type":"TextLayer",id:"text-layer",name:"Text",data:[{name:"Custom GeoJson layer",coordinates:[434800,6478695]}],pickable:!0,getPosition:d=>d.coordinates,getText:d=>d.name,getColor:[255,0,0],getSize:16,getAngle:0,getTextAnchor:"middle",getAlignmentBaseline:"center"},EditedDataTemplate=args=>{const[editedData,setEditedData]=react__WEBPACK_IMPORTED_MODULE_0__.useState(args.editedData);return react__WEBPACK_IMPORTED_MODULE_0__.useEffect((()=>{setEditedData(args.editedData)}),[args.editedData]),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,_extends({},args,{editedData:editedData,setProps:updatedProps=>{setEditedData(updatedProps.editedData)}}))};try{Root.displayName="Root",Root.__docgenInfo={description:"",displayName:"Root",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/sharedSettings.tsx#Root"]={docgenInfo:Root.__docgenInfo,name:"Root",path:"packages/subsurface-viewer/src/storybook/sharedSettings.tsx#Root"})}catch(__react_docgen_typescript_loader_error){}try{EditedDataTemplate.displayName="EditedDataTemplate",EditedDataTemplate.__docgenInfo={description:"",displayName:"EditedDataTemplate",props:{id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},resources:{defaultValue:null,description:"",name:"resources",required:!1,type:{name:"Record<string, unknown>"}},layers:{defaultValue:null,description:"",name:"layers",required:!1,type:{name:"Record<string, unknown>[] | LayersList"}},bounds:{defaultValue:null,description:"",name:"bounds",required:!1,type:{name:"[number, number, number, number] | BoundsAccessor"}},cameraPosition:{defaultValue:null,description:"",name:"cameraPosition",required:!1,type:{name:"ViewStateType"}},triggerHome:{defaultValue:null,description:"",name:"triggerHome",required:!1,type:{name:"number"}},views:{defaultValue:null,description:"",name:"views",required:!1,type:{name:"ViewsType"}},coords:{defaultValue:null,description:"",name:"coords",required:!1,type:{name:"{ visible?: boolean | null; multiPicking?: boolean | null; pickDepth?: number | null | undefined; } | undefined"}},scale:{defaultValue:null,description:"",name:"scale",required:!1,type:{name:"{ visible?: boolean | null; incrementValue?: number | null; widthPerUnit?: number | null | undefined; cssStyle?: Record<string, unknown> | null | undefined; } | undefined"}},coordinateUnit:{defaultValue:null,description:"",name:"coordinateUnit",required:!1,type:{name:"enum",value:[{value:'"m"'},{value:'"mm"'},{value:'"cm"'},{value:'"km"'},{value:'"in"'},{value:'"ft-us"'},{value:'"ft"'},{value:'"yd"'},{value:'"mi"'},{value:'"mm2"'},{value:'"cm2"'},{value:'"m2"'},{value:'"ha"'},{value:'"km2"'},{value:'"in2"'},{value:'"ft2"'},{value:'"ac"'},{value:'"mi2"'},{value:'"mcg"'},{value:'"mg"'},{value:'"g"'},{value:'"kg"'},{value:'"oz"'},{value:'"lb"'},{value:'"mt"'},{value:'"t"'},{value:'"mm3"'},{value:'"cm3"'},{value:'"ml"'},{value:'"l"'},{value:'"kl"'},{value:'"m3"'},{value:'"km3"'},{value:'"tsp"'},{value:'"Tbs"'},{value:'"in3"'},{value:'"fl-oz"'},{value:'"cup"'},{value:'"pnt"'},{value:'"qt"'},{value:'"gal"'},{value:'"ft3"'},{value:'"yd3"'},{value:'"mm3/s"'},{value:'"cm3/s"'},{value:'"ml/s"'},{value:'"cl/s"'},{value:'"dl/s"'},{value:'"l/s"'},{value:'"l/min"'},{value:'"l/h"'},{value:'"kl/s"'},{value:'"kl/min"'},{value:'"kl/h"'},{value:'"m3/s"'},{value:'"m3/min"'},{value:'"m3/h"'},{value:'"km3/s"'},{value:'"tsp/s"'},{value:'"Tbs/s"'},{value:'"in3/s"'},{value:'"in3/min"'},{value:'"in3/h"'},{value:'"fl-oz/s"'},{value:'"fl-oz/min"'},{value:'"fl-oz/h"'},{value:'"cup/s"'},{value:'"pnt/s"'},{value:'"pnt/min"'},{value:'"pnt/h"'},{value:'"qt/s"'},{value:'"gal/s"'},{value:'"gal/min"'},{value:'"gal/h"'},{value:'"ft3/s"'},{value:'"ft3/min"'},{value:'"ft3/h"'},{value:'"yd3/s"'},{value:'"yd3/min"'},{value:'"yd3/h"'},{value:'"C"'},{value:'"F"'},{value:'"K"'},{value:'"R"'},{value:'"ns"'},{value:'"mu"'},{value:'"ms"'},{value:'"s"'},{value:'"min"'},{value:'"h"'},{value:'"d"'},{value:'"week"'},{value:'"month"'},{value:'"year"'},{value:'"Hz"'},{value:'"mHz"'},{value:'"kHz"'},{value:'"MHz"'},{value:'"GHz"'},{value:'"THz"'},{value:'"rpm"'},{value:'"deg/s"'},{value:'"rad/s"'},{value:'"m/s"'},{value:'"km/h"'},{value:'"m/h"'},{value:'"knot"'},{value:'"ft/s"'},{value:'"s/m"'},{value:'"min/km"'},{value:'"s/ft"'},{value:'"min/mi"'},{value:'"Pa"'},{value:'"hPa"'},{value:'"kPa"'},{value:'"MPa"'},{value:'"bar"'},{value:'"torr"'},{value:'"psi"'},{value:'"ksi"'},{value:'"b"'},{value:'"Kb"'},{value:'"Mb"'},{value:'"Gb"'},{value:'"Tb"'},{value:'"B"'},{value:'"KB"'},{value:'"MB"'},{value:'"GB"'},{value:'"TB"'},{value:'"lx"'},{value:'"ft-cd"'},{value:'"ppm"'},{value:'"ppb"'},{value:'"ppt"'},{value:'"ppq"'},{value:'"V"'},{value:'"mV"'},{value:'"kV"'},{value:'"A"'},{value:'"mA"'},{value:'"kA"'},{value:'"W"'},{value:'"mW"'},{value:'"kW"'},{value:'"MW"'},{value:'"GW"'},{value:'"VA"'},{value:'"mVA"'},{value:'"kVA"'},{value:'"MVA"'},{value:'"GVA"'},{value:'"VAR"'},{value:'"mVAR"'},{value:'"kVAR"'},{value:'"MVAR"'},{value:'"GVAR"'},{value:'"Wh"'},{value:'"mWh"'},{value:'"kWh"'},{value:'"MWh"'},{value:'"GWh"'},{value:'"J"'},{value:'"kJ"'},{value:'"VARh"'},{value:'"mVARh"'},{value:'"kVARh"'},{value:'"MVARh"'},{value:'"GVARH"'},{value:'"deg"'},{value:'"rad"'},{value:'"grad"'},{value:'"arcmin"'},{value:'"arcsec"'}]}},colorTables:{defaultValue:null,description:"",name:"colorTables",required:!1,type:{name:"colorTablesArray"}},editedData:{defaultValue:null,description:"",name:"editedData",required:!1,type:{name:"Record<string, unknown>"}},setProps:{defaultValue:null,description:"",name:"setProps",required:!1,type:{name:"((data: Record<string, unknown>) => void)"}},checkDatafileSchema:{defaultValue:null,description:"Validate JSON datafile against schema",name:"checkDatafileSchema",required:!1,type:{name:"boolean"}},onMouseEvent:{defaultValue:null,description:"For get mouse events",name:"onMouseEvent",required:!1,type:{name:"((event: MapMouseEvent) => void)"}},getCameraPosition:{defaultValue:null,description:"",name:"getCameraPosition",required:!1,type:{name:"((input: ViewStateType) => void)"}},onRenderingProgress:{defaultValue:null,description:"Will be called while layers are processed to rendered data.\n@param progress vlaue between 0 and 100.",name:"onRenderingProgress",required:!1,type:{name:"((progress: number) => void)"}},onDragStart:{defaultValue:null,description:"",name:"onDragStart",required:!1,type:{name:"((info: PickingInfo, event: MjolnirGestureEvent) => void)"}},onDragEnd:{defaultValue:null,description:"",name:"onDragEnd",required:!1,type:{name:"((info: PickingInfo, event: MjolnirGestureEvent) => void)"}},triggerResetMultipleWells:{defaultValue:null,description:"",name:"triggerResetMultipleWells",required:!1,type:{name:"number"}},selection:{defaultValue:null,description:"Range selection of the current well",name:"selection",required:!1,type:{name:"{ well: string; selection: [number, number | undefined] | undefined; } | undefined"}},getTooltip:{defaultValue:null,description:"Override default tooltip with a callback.",name:"getTooltip",required:!1,type:{name:"TooltipCallback"}},lights:{defaultValue:null,description:"",name:"lights",required:!1,type:{name:"LightsType"}},typedArraySupport:{defaultValue:null,description:"If set to true allows to use typed arrays in layer description JS objects.",name:"typedArraySupport",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/sharedSettings.tsx#EditedDataTemplate"]={docgenInfo:EditedDataTemplate.__docgenInfo,name:"EditedDataTemplate",path:"packages/subsurface-viewer/src/storybook/sharedSettings.tsx#EditedDataTemplate"})}catch(__react_docgen_typescript_loader_error){}},"./packages/subsurface-viewer/node_modules/@equinor/eds-core-react/dist/esm/components/Label/Label.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{_:function(){return Label}});var react=__webpack_require__("./node_modules/react/index.js"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),templates=__webpack_require__("./packages/subsurface-viewer/node_modules/@equinor/eds-utils/dist/esm/utils/templates/index.mjs"),esm=__webpack_require__("./node_modules/@equinor/eds-tokens/dist/esm/index.mjs");const{colors:colors,spacings:{comfortable:comfortable},typography:typography}=esm.tokens,label={background:colors.ui.background__light.rgba,typography:{...typography.input.label,color:colors.text.static_icons__tertiary.rgba},spacings:{left:comfortable.small,right:comfortable.small,top:"6px",bottom:"6px"},states:{disabled:{typography:{color:colors.interactive.disabled__text.rgba}}}};var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const LabelBase=styled_components_browser_esm.ZP.label.withConfig({displayName:"Label__LabelBase",componentId:"sc-1gi2bcn-0"})(["display:flex;justify-content:space-between;position:relative;"," margin-left:",";margin-right:",";color:",";"],(0,templates.oc)(label.typography),label.spacings.left,label.spacings.right,(({$disabledText:$disabledText})=>$disabledText?label.states.disabled.typography.color:label.typography.color)),Text=styled_components_browser_esm.ZP.span.withConfig({displayName:"Label__Text",componentId:"sc-1gi2bcn-1"})(["margin:0;"]),Label=(0,react.forwardRef)((function Label(props,ref){const{label:label="",meta:meta,disabled:disabled=!1,...other}=props;return(0,jsx_runtime.jsxs)(LabelBase,{ref:ref,$disabledText:disabled,...other,children:[(0,jsx_runtime.jsx)(Text,{children:label}),meta&&(0,jsx_runtime.jsx)(Text,{children:meta})]})}))},"../example-data/deckgl-map.json":function(module){module.exports=JSON.parse('[{"id":"DeckGL-Map","coords":{"visible":true,"multiPicking":true,"pickDepth":10},"scale":{"visible":true,"incrementValue":100,"widthPerUnit":100,"cssStyle":{"left":10,"top":10}},"coordinateUnit":"m","resources":{"propertyMap":"propertyMap.png","depthMap":"propertyMap.png","wellsData":"volve_wells.json","logData":"volve_logs.json"},"bounds":[432205,6475078,437720,6481113],"layers":[{"@@type":"ColormapLayer","image":"@@#resources.propertyMap","rotDeg":0,"bounds":[432205,6475078,437720,6481113],"colorMapName":"Rainbow","valueRange":[2782,3513],"colorMapRange":[2782,3513]},{"@@type":"Hillshading2DLayer","bounds":[432205,6475078,437720,6481113],"valueRange":[2782,3513],"rotDeg":0,"image":"@@#resources.depthMap"},{"@@type":"WellsLayer","data":"@@#resources.wellsData","logData":"@@#resources.logData","logrunName":"BLOCKING","logName":"ZONELOG","logColor":"Stratigraphy"},{"@@type":"FaultPolygonsLayer","data":"fault_polygons.geojson"},{"@@type":"PieChartLayer","data":"piechart.json"},{"@@type":"NorthArrow3DLayer","visible":true},{"@@type":"DrawingLayer"}],"editedData":{},"views":{"layout":[1,1],"showLabel":false,"viewports":[{"id":"view_1","show3D":false,"layerIds":[]}]}}]')}}]);