"use strict";(self.webpackChunk_webviz_subsurface_components=self.webpackChunk_webviz_subsurface_components||[]).push([[5143],{"./packages/subsurface-viewer/src/storybook/examples/miscExamples.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:function(){return Default},MapClampColor:function(){return MapClampColor},MapInContainer:function(){return MapInContainer},MapMaterial:function(){return MapMaterial},Minimal:function(){return Minimal},SelectableFeatureExample:function(){return SelectableFeatureExample},UserDefinedLayer1:function(){return UserDefinedLayer1},UserDefinedLayer2:function(){return UserDefinedLayer2},__namedExportsOrder:function(){return __namedExportsOrder},colorMapFunction:function(){return colorMapFunction},default:function(){return miscExamples_stories}});var react=__webpack_require__("./node_modules/react/index.js"),SubsurfaceViewer=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx");var sharedSettings=__webpack_require__("./packages/subsurface-viewer/src/storybook/sharedSettings.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}var miscExamples_stories={parameters:{storySource:{source:'function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from "react";\nimport SubsurfaceViewer from "../../SubsurfaceViewer";\nimport { argTypes } from "../sharedDoc";\nimport { Root, classes, colormapLayer, customLayerWithPolygonData, customLayerWithPolylineData, customLayerWithTextData, huginMeshMapLayerPng, subsufaceProps, hugin2DBounds, default3DViews } from "../sharedSettings";\nconst stories = {\n  component: SubsurfaceViewer,\n  title: "SubsurfaceViewer/Examples",\n  argTypes: argTypes,\n  args: {\n    // Add a reset button for all the stories.\n    // Somehow, I do not manage to add the triggerHome to the general "unset" controls :/\n    triggerHome: 0\n  }\n};\nexport default stories;\n\n// Layers data for storybook example 1\nconst layersData1 = [customLayerWithPolylineData, customLayerWithPolygonData, customLayerWithTextData];\n\n// Layers data for storybook example 2\nconst layersData2 = [colormapLayer, customLayerWithPolylineData, customLayerWithPolygonData, customLayerWithTextData];\n\n// Storybook example 1\nexport const Default = {\n  args: subsufaceProps\n};\n\n// Minimal map example.\nexport const Minimal = {\n  parameters: {\n    docs: {\n      description: {\n        story: "An example showing the minimal required arguments, which will give an empty map viewer."\n      }\n    }\n  },\n  render: () => /*#__PURE__*/React.createElement(SubsurfaceViewer, {\n    id: "deckgl-map",\n    bounds: [0, 0, 1, 1]\n  })\n};\n\n//Material property may take these values:\n//          true  = default material. See deck.gl documentation for what that is. This is default property value.\n//          false = no material.\n//          Full spec:\n//                {\n//                    ambient: 0.35,\n//                    diffuse: 0.6,\n//                    shininess: 32,\n//                    specularColor: [255, 255, 255],\n//                }\nconst material = {\n  ambient: 0.35,\n  diffuse: 0.6,\n  shininess: 32,\n  specularColor: [255, 255, 255]\n};\nexport const MapMaterial = {\n  args: {\n    id: "material",\n    layers: [{\n      ...huginMeshMapLayerPng,\n      material\n    }],\n    bounds: hugin2DBounds,\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "An example showing example usage of Map3D material property."\n      },\n      inlineStories: false,\n      iframeHeight: 500\n    }\n  }\n};\n\n// Exapmple of using "colorMapClampColor" property.\n// Clamps colormap to this color at ends.\n// Given as array of three values (r,g,b) e.g: [255, 0, 0]\n// If not set (undefined) or set to true, it will clamp to color map min and max values.\n// If set to false the clamp color will be completely transparent.\nconst propertyValueRange = [2782, 3513];\nconst colorMapRange = [3000, 3513];\nconst colorMapClampColor = [0, 255, 0]; // a color e.g. [0, 255, 0],  false, true or undefined.\n\nexport const MapClampColor = {\n  args: {\n    id: "clampcolor",\n    layers: [{\n      ...huginMeshMapLayerPng,\n      propertyValueRange,\n      colorMapRange,\n      colorMapClampColor\n    }],\n    bounds: [432150, 6475800, 439400, 6481500],\n    views: {\n      layout: [1, 1],\n      viewports: [{\n        id: "view_1",\n        show3D: false,\n        layerIds: []\n      }]\n    }\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: \'An example usage of map property `"colorMapClampColor"\'\n      },\n      inlineStories: false,\n      iframeHeight: 500\n    }\n  }\n};\n\n// Example using "colorMapFunction" property.\nconst layer = {\n  ...huginMeshMapLayerPng,\n  isContoursDepth: true,\n  colorMapFunction: x => [255 - x * 100, 255 - x * 100, 255 * x] // If defined this function will override the colormap.\n};\nexport const colorMapFunction = {\n  args: {\n    id: "colorMapFunction",\n    layers: [\n    // map layer\n    layer,\n    // colormap layer\n    {\n      ...colormapLayer,\n      image: "propertyMap.png",\n      colorMapFunction: x => [255 - x * 100, 255 - x * 100, 255 * x] // If defined this function will override the colormap.\n    }],\n    bounds: [432150, 6475800, 439400, 6481500],\n    views: {\n      layout: [1, 1],\n      viewports: [{\n        id: "view_1",\n        show3D: true,\n        layerIds: []\n      }]\n    }\n  }\n};\n\n// custom layer example\nexport const UserDefinedLayer1 = {\n  args: {\n    id: subsufaceProps.id,\n    bounds: subsufaceProps.bounds,\n    layers: layersData1\n  }\n};\n\n// custom layer with colormap\nexport const UserDefinedLayer2 = {\n  args: {\n    id: subsufaceProps.id,\n    resources: subsufaceProps.resources,\n    bounds: subsufaceProps.bounds,\n    layers: layersData2\n  }\n};\n\n// ---------Selectable GeoJson Layer example--------------- //\nconst SelectableFeatureComponent = args => {\n  const [editedData, setEditedData] = React.useState(args.editedData);\n  React.useEffect(() => {\n    setEditedData(args.editedData);\n  }, [args.editedData]);\n  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(SubsurfaceViewer, _extends({}, args, {\n    editedData: editedData,\n    setProps: updatedProps => {\n      setEditedData(updatedProps.editedData);\n    }\n  })), /*#__PURE__*/React.createElement("pre", null, JSON.stringify(editedData, null, 2)));\n};\nconst polylineUsingSelectableGeoJsonLayer = {\n  ...customLayerWithPolylineData,\n  "@@type": "SelectableGeoJsonLayer"\n};\nconst polygonUsingSelectableGeoJsonLayer = {\n  ...customLayerWithPolygonData,\n  "@@type": "SelectableGeoJsonLayer"\n};\nexport const SelectableFeatureExample = {\n  args: {\n    id: "DeckGL-Map",\n    bounds: [432205, 6475078, 437720, 6481113],\n    layers: [polylineUsingSelectableGeoJsonLayer, polygonUsingSelectableGeoJsonLayer]\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "An example showing selectable feature example from the map."\n      }\n    }\n  },\n  render: args => /*#__PURE__*/React.createElement(SelectableFeatureComponent, args)\n};\nexport const MapInContainer = {\n  args: subsufaceProps,\n  render: args => /*#__PURE__*/React.createElement(Root, {\n    className: classes.main\n  }, /*#__PURE__*/React.createElement(SubsurfaceViewer, args))\n};',locationsMap:{default:{startLoc:{col:23,line:25},endLoc:{col:1,line:27},startBody:{col:23,line:25},endBody:{col:1,line:27}},minimal:{startLoc:{col:23,line:30},endLoc:{col:1,line:42},startBody:{col:23,line:30},endBody:{col:1,line:42}},"map-material":{startLoc:{col:27,line:60},endLoc:{col:1,line:79},startBody:{col:27,line:60},endBody:{col:1,line:79}},"map-clamp-color":{startLoc:{col:29,line:90},endLoc:{col:1,line:118},startBody:{col:29,line:90},endBody:{col:1,line:118}},"color-map-function":{startLoc:{col:32,line:126},endLoc:{col:1,line:148},startBody:{col:32,line:126},endBody:{col:1,line:148}},"user-defined-layer-1":{startLoc:{col:33,line:151},endLoc:{col:1,line:157},startBody:{col:33,line:151},endBody:{col:1,line:157}},"user-defined-layer-2":{startLoc:{col:33,line:160},endLoc:{col:1,line:167},startBody:{col:33,line:160},endBody:{col:1,line:167}},"selectable-feature-example":{startLoc:{col:40,line:190},endLoc:{col:1,line:204},startBody:{col:40,line:190},endBody:{col:1,line:204}},"map-in-container":{startLoc:{col:30,line:205},endLoc:{col:1,line:210},startBody:{col:30,line:205},endBody:{col:1,line:210}}}}},component:SubsurfaceViewer.Z,title:"SubsurfaceViewer/Examples",argTypes:{id:{description:"The ID of this component, used to identify dash components in callbacks. The ID needs to be unique across all of the components in an app."},resources:{description:"Resource dictionary made available in the DeckGL specification as an enum.       The values can be accessed like this: `@@#resources.resourceId`, where       `resourceId` is the key in the `resources` dict. For more information,       see the DeckGL documentation on enums in the json spec:       https://deck.gl/docs/api-reference/json/conversion-reference#enumerations-and-using-the--prefix"},layers:{description:"List of JSON object containing layer specific data.       Each JSON object will consist of layer type with key as `@@type` and layer specific data, if any."},cameraPosition:{description:"Camera position to set the point of view."},bounds:{description:"Coordinate boundary for the view defined as [left, bottom, right, top]."},triggerHome:{description:"Forces resetting to initial home position",control:{type:"number"}},views:{description:"Views configuration for map. If not specified, all the layers will be displayed in a single 2D viewport.<br/>Options:<br/>layout: [number, number] — Layout for viewport in specified as [row, column],<br/>viewports: [`ViewportType`] — Layers configuration for multiple viewport,<br/><br/>`ViewportType` options: <br/>id: string — Viewport id <br>name: string — Viewport name <br>show3D: boolean — Toggle 3D view <br>layerIds: [string] — Layer ids to be displayed on viewport."},coords:{description:"Options for readout panel.<br/>visible: boolean — Show/hide readout,<br/>multipicking: boolean — Enable or disable multi picking,<br/>pickDepth: number — Number of objects to pick."},scale:{description:"Options for distance scale component.<br/>visible: boolean — Show/hide scale bar,<br/>incrementValue: number — Increment value for the scale,<br/>widthPerUnit: number — Scale bar width in pixels per unit value,<br/>position: [number, number] — Scale bar position in pixels."},coordinateUnit:{description:"Unit for the scale ruler"},legend:{description:"Options for color legend.<br/>visible: boolean — Show/hide color legend,<br/>position: [number, number] — Legend position in pixels,<br/>horizontal: boolean — Orientation of color legend."},colorTables:{description:"Prop containing color table data.See colorTables repo for reference:<br/>https://github.com/emerson-eps/color-tables/blob/main/react-app/dist/component/color-tables.json"},editedData:{description:"Map data returned via editedData prop.<br/>selectedWell: string — Selected well name,<br/>selectedPie: object — Selected pie chart data,<br/>selectedFeatureIndexes: [number] — Drawing layer data index,<br/>data: object — Drawing layer data, indexed from selectedFeatureIndexes."},setProps:{description:"For reacting to prop changes"}},args:{triggerHome:0}};const layersData1=[sharedSettings.M1,sharedSettings.Rd,sharedSettings.Ng],layersData2=[sharedSettings.Wj,sharedSettings.M1,sharedSettings.Rd,sharedSettings.Ng],Default={args:sharedSettings.vj},Minimal={parameters:{docs:{description:{story:"An example showing the minimal required arguments, which will give an empty map viewer."}}},render:()=>react.createElement(SubsurfaceViewer.Z,{id:"deckgl-map",bounds:[0,0,1,1]})},MapMaterial={args:{id:"material",layers:[{...sharedSettings.wL,material:{ambient:.35,diffuse:.6,shininess:32,specularColor:[255,255,255]}}],bounds:sharedSettings.Jl,views:sharedSettings.Pl},parameters:{docs:{description:{story:"An example showing example usage of Map3D material property."},inlineStories:!1,iframeHeight:500}}},MapClampColor={args:{id:"clampcolor",layers:[{...sharedSettings.wL,propertyValueRange:[2782,3513],colorMapRange:[3e3,3513],colorMapClampColor:[0,255,0]}],bounds:[432150,6475800,439400,6481500],views:{layout:[1,1],viewports:[{id:"view_1",show3D:!1,layerIds:[]}]}},parameters:{docs:{description:{story:'An example usage of map property `"colorMapClampColor"'},inlineStories:!1,iframeHeight:500}}},colorMapFunction={args:{id:"colorMapFunction",layers:[{...sharedSettings.wL,isContoursDepth:!0,colorMapFunction:x=>[255-100*x,255-100*x,255*x]},{...sharedSettings.Wj,image:"propertyMap.png",colorMapFunction:x=>[255-100*x,255-100*x,255*x]}],bounds:[432150,6475800,439400,6481500],views:{layout:[1,1],viewports:[{id:"view_1",show3D:!0,layerIds:[]}]}}},UserDefinedLayer1={args:{id:sharedSettings.vj.id,bounds:sharedSettings.vj.bounds,layers:layersData1}},UserDefinedLayer2={args:{id:sharedSettings.vj.id,resources:sharedSettings.vj.resources,bounds:sharedSettings.vj.bounds,layers:layersData2}},SelectableFeatureComponent=args=>{const[editedData,setEditedData]=react.useState(args.editedData);return react.useEffect((()=>{setEditedData(args.editedData)}),[args.editedData]),react.createElement("div",null,react.createElement(SubsurfaceViewer.Z,_extends({},args,{editedData:editedData,setProps:updatedProps=>{setEditedData(updatedProps.editedData)}})),react.createElement("pre",null,JSON.stringify(editedData,null,2)))},SelectableFeatureExample={args:{id:"DeckGL-Map",bounds:[432205,6475078,437720,6481113],layers:[{...sharedSettings.M1,"@@type":"SelectableGeoJsonLayer"},{...sharedSettings.Rd,"@@type":"SelectableGeoJsonLayer"}]},parameters:{docs:{description:{story:"An example showing selectable feature example from the map."}}},render:args=>react.createElement(SelectableFeatureComponent,args)},MapInContainer={args:sharedSettings.vj,render:args=>react.createElement(sharedSettings.fC,{className:sharedSettings.Sh.main},react.createElement(SubsurfaceViewer.Z,args))};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: subsufaceProps\n}",...Default.parameters?.docs?.source}}},Minimal.parameters={...Minimal.parameters,docs:{...Minimal.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      description: {\n        story: "An example showing the minimal required arguments, which will give an empty map viewer."\n      }\n    }\n  },\n  render: () => <SubsurfaceViewer id={"deckgl-map"} bounds={[0, 0, 1, 1]} />\n}',...Minimal.parameters?.docs?.source}}},MapMaterial.parameters={...MapMaterial.parameters,docs:{...MapMaterial.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "material",\n    layers: [{\n      ...huginMeshMapLayerPng,\n      material\n    }],\n    bounds: hugin2DBounds,\n    views: default3DViews\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "An example showing example usage of Map3D material property."\n      },\n      inlineStories: false,\n      iframeHeight: 500\n    }\n  }\n}',...MapMaterial.parameters?.docs?.source}}},MapClampColor.parameters={...MapClampColor.parameters,docs:{...MapClampColor.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "clampcolor",\n    layers: [{\n      ...huginMeshMapLayerPng,\n      propertyValueRange,\n      colorMapRange,\n      colorMapClampColor\n    }],\n    bounds: [432150, 6475800, 439400, 6481500],\n    views: {\n      layout: [1, 1],\n      viewports: [{\n        id: "view_1",\n        show3D: false,\n        layerIds: []\n      }]\n    }\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: \'An example usage of map property `"colorMapClampColor"\'\n      },\n      inlineStories: false,\n      iframeHeight: 500\n    }\n  }\n}',...MapClampColor.parameters?.docs?.source}}},colorMapFunction.parameters={...colorMapFunction.parameters,docs:{...colorMapFunction.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "colorMapFunction",\n    layers: [\n    // map layer\n    layer,\n    // colormap layer\n    {\n      ...colormapLayer,\n      image: "propertyMap.png",\n      colorMapFunction: x => [255 - x * 100, 255 - x * 100, 255 * x] // If defined this function will override the colormap.\n    }],\n    bounds: [432150, 6475800, 439400, 6481500],\n    views: {\n      layout: [1, 1],\n      viewports: [{\n        id: "view_1",\n        show3D: true,\n        layerIds: []\n      }]\n    }\n  }\n}',...colorMapFunction.parameters?.docs?.source}}},UserDefinedLayer1.parameters={...UserDefinedLayer1.parameters,docs:{...UserDefinedLayer1.parameters?.docs,source:{originalSource:"{\n  args: {\n    id: subsufaceProps.id,\n    bounds: subsufaceProps.bounds,\n    layers: layersData1\n  }\n}",...UserDefinedLayer1.parameters?.docs?.source}}},UserDefinedLayer2.parameters={...UserDefinedLayer2.parameters,docs:{...UserDefinedLayer2.parameters?.docs,source:{originalSource:"{\n  args: {\n    id: subsufaceProps.id,\n    resources: subsufaceProps.resources,\n    bounds: subsufaceProps.bounds,\n    layers: layersData2\n  }\n}",...UserDefinedLayer2.parameters?.docs?.source}}},SelectableFeatureExample.parameters={...SelectableFeatureExample.parameters,docs:{...SelectableFeatureExample.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "DeckGL-Map",\n    bounds: [432205, 6475078, 437720, 6481113],\n    layers: [polylineUsingSelectableGeoJsonLayer, polygonUsingSelectableGeoJsonLayer]\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: "An example showing selectable feature example from the map."\n      }\n    }\n  },\n  render: args => <SelectableFeatureComponent {...args} />\n}',...SelectableFeatureExample.parameters?.docs?.source}}},MapInContainer.parameters={...MapInContainer.parameters,docs:{...MapInContainer.parameters?.docs,source:{originalSource:"{\n  args: subsufaceProps,\n  render: args => <Root className={classes.main}>\n            <SubsurfaceViewer {...args} />\n        </Root>\n}",...MapInContainer.parameters?.docs?.source}}};const __namedExportsOrder=["Default","Minimal","MapMaterial","MapClampColor","colorMapFunction","UserDefinedLayer1","UserDefinedLayer2","SelectableFeatureExample","MapInContainer"]},"./packages/subsurface-viewer/src/storybook/sharedSettings.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{BX:function(){return EditedDataTemplate},D$:function(){return northArrowLayer},DU:function(){return huginMapDepthPropLayerPng},Dh:function(){return hillshadingLayer},HV:function(){return mainStyle},Jl:function(){return hugin2DBounds},M1:function(){return customLayerWithPolylineData},Ng:function(){return customLayerWithTextData},On:function(){return volveWellsWithLogsLayer},PQ:function(){return huginMapNetmapPropLayerPng},Pl:function(){return default3DViews},QH:function(){return huginAxes3DLayer},Rd:function(){return customLayerWithPolygonData},Sh:function(){return classes},Wj:function(){return colormapLayer},ex:function(){return volveWellsLayer},fC:function(){return Root},iH:function(){return redAxes2DLayer},vj:function(){return subsufaceProps},wL:function(){return huginMeshMapLayerPng},yP:function(){return hugin3DBounds},z:function(){return volveWellsBounds}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/subsurface-viewer/src/SubsurfaceViewer.tsx"),_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../example-data/deckgl-map.json");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const classes={main:"default-main"},mainStyle={[`& .${classes.main}`]:{width:750,height:500,top:"50%",left:"50%",transform:"translate(-50%, -50%)",border:"1px solid black",background:"azure",position:"absolute"}},Root=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_3__.ZP)("div")(mainStyle),subsufaceProps=_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0],colormapLayer={..._example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].layers[0],id:"colormap-layer"},hillshadingLayer={..._example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].layers[1],id:"hillshading-layer"},redAxes2DLayer=(_example_data_deckgl_map_json__WEBPACK_IMPORTED_MODULE_2__[0].layers[2],{"@@type":"Axes2DLayer",id:"axes-layer",marginH:80,marginV:30,isLeftRuler:!0,isRightRuler:!1,isBottomRuler:!0,isTopRuler:!1,backgroundColor:[155,0,0,255]}),hugin2DBounds=[432150,6475800,439400,6481500],hugin3DBounds=[432150,6475800,-2e3,439400,6481500,-3500],huginAxes3DLayer={"@@type":"AxesLayer",id:"axes-layer2",bounds:[432150,6475800,2e3,439400,6481500,3500]},northArrowLayer={"@@type":"NorthArrow3DLayer",id:"north-arrow-layer"},volveWellsLayer={"@@type":"WellsLayer",id:"volve-wells",data:"./volve_wells.json"},volveWellsBounds=[432150,6475800,439400,6481500],volveWellsWithLogsLayer={"@@type":"WellsLayer",id:"volve-wells-with-logs",data:"./volve_wells.json",logData:"./volve_logs.json",logrunName:"BLOCKING",logName:"ZONELOG",logColor:"Stratigraphy"},huginMapDepthPropLayerPng={"@@type":"MapLayer",id:"hugin_depth",meshData:"hugin_depth_25_m.float32",frame:{origin:[432150,6475800],count:[291,229],increment:[25,25],rotDeg:0},propertiesData:"hugin_depth_25_m.float32",contours:[0,100],material:!1},huginMapNetmapPropLayerPng={...huginMapDepthPropLayerPng,id:"hugin_kh_netmap",propertiesData:"kh_netmap_25_m.float32"},huginMeshMapLayerPng={"@@type":"MapLayer",id:"hugin-mesh-layer",meshData:"hugin_depth_25_m.png",frame:{origin:[432150,6475800],count:[291,229],increment:[25,25],rotDeg:0},propertiesData:"kh_netmap_25_m.png",contours:[0,100],isContoursDepth:!0,gridLines:!1,material:!0,smoothShading:!0,colorMapName:"Physics",ZIncreasingDownwards:!0},default3DViews={layout:[1,1],viewports:[{id:"view_1",show3D:!0}]},customLayerWithPolylineData={"@@type":"GeoJsonLayer",id:"geojson-line-layer",name:"Line",data:{type:"FeatureCollection",features:[{type:"Feature",properties:{},geometry:{type:"LineString",coordinates:[[434e3,6477500],[435500,6477500]]}}]},getLineWidth:20,lineWidthMinPixels:2},customLayerWithPolygonData={"@@type":"GeoJsonLayer",id:"geojson-layer",name:"Polygon",data:{type:"Feature",properties:{},geometry:{type:"Polygon",coordinates:[[[434562,6477595],[434562,6478595],[435062,6478595],[435062,6477595],[434562,6477595]]]}},getLineWidth:20,lineWidthMinPixels:2,getLineColor:[0,255,255],getFillColor:[0,255,0],opacity:.3},customLayerWithTextData={"@@type":"TextLayer",id:"text-layer",name:"Text",data:[{name:"Custom GeoJson layer",coordinates:[434800,6478695]}],pickable:!0,getPosition:d=>d.coordinates,getText:d=>d.name,getColor:[255,0,0],getSize:16,getAngle:0,getTextAnchor:"middle",getAlignmentBaseline:"center"},EditedDataTemplate=args=>{const[editedData,setEditedData]=react__WEBPACK_IMPORTED_MODULE_0__.useState(args.editedData);return react__WEBPACK_IMPORTED_MODULE_0__.useEffect((()=>{setEditedData(args.editedData)}),[args.editedData]),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SubsurfaceViewer__WEBPACK_IMPORTED_MODULE_1__.Z,_extends({},args,{editedData:editedData,setProps:updatedProps=>{setEditedData(updatedProps.editedData)}}))};try{Root.displayName="Root",Root.__docgenInfo={description:"",displayName:"Root",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/sharedSettings.tsx#Root"]={docgenInfo:Root.__docgenInfo,name:"Root",path:"packages/subsurface-viewer/src/storybook/sharedSettings.tsx#Root"})}catch(__react_docgen_typescript_loader_error){}try{EditedDataTemplate.displayName="EditedDataTemplate",EditedDataTemplate.__docgenInfo={description:"",displayName:"EditedDataTemplate",props:{id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},resources:{defaultValue:null,description:"",name:"resources",required:!1,type:{name:"Record<string, unknown>"}},layers:{defaultValue:null,description:"",name:"layers",required:!1,type:{name:"Record<string, unknown>[] | LayersList"}},bounds:{defaultValue:null,description:"",name:"bounds",required:!1,type:{name:"[number, number, number, number] | BoundsAccessor"}},cameraPosition:{defaultValue:null,description:"",name:"cameraPosition",required:!1,type:{name:"ViewStateType"}},triggerHome:{defaultValue:null,description:"",name:"triggerHome",required:!1,type:{name:"number"}},views:{defaultValue:null,description:"",name:"views",required:!1,type:{name:"ViewsType"}},coords:{defaultValue:null,description:"",name:"coords",required:!1,type:{name:"{ visible?: boolean | null; multiPicking?: boolean | null; pickDepth?: number | null | undefined; } | undefined"}},scale:{defaultValue:null,description:"",name:"scale",required:!1,type:{name:"{ visible?: boolean | null; incrementValue?: number | null; widthPerUnit?: number | null | undefined; cssStyle?: Record<string, unknown> | null | undefined; } | undefined"}},coordinateUnit:{defaultValue:null,description:"",name:"coordinateUnit",required:!1,type:{name:"enum",value:[{value:'"m"'},{value:'"mm"'},{value:'"cm"'},{value:'"km"'},{value:'"in"'},{value:'"ft-us"'},{value:'"ft"'},{value:'"mi"'},{value:'"mm2"'},{value:'"cm2"'},{value:'"m2"'},{value:'"ha"'},{value:'"km2"'},{value:'"in2"'},{value:'"ft2"'},{value:'"ac"'},{value:'"mi2"'},{value:'"mcg"'},{value:'"mg"'},{value:'"g"'},{value:'"kg"'},{value:'"oz"'},{value:'"lb"'},{value:'"mt"'},{value:'"t"'},{value:'"mm3"'},{value:'"cm3"'},{value:'"ml"'},{value:'"l"'},{value:'"kl"'},{value:'"m3"'},{value:'"km3"'},{value:'"tsp"'},{value:'"Tbs"'},{value:'"in3"'},{value:'"fl-oz"'},{value:'"cup"'},{value:'"pnt"'},{value:'"qt"'},{value:'"gal"'},{value:'"ft3"'},{value:'"yd3"'},{value:'"mm3/s"'},{value:'"cm3/s"'},{value:'"ml/s"'},{value:'"cl/s"'},{value:'"dl/s"'},{value:'"l/s"'},{value:'"l/min"'},{value:'"l/h"'},{value:'"kl/s"'},{value:'"kl/min"'},{value:'"kl/h"'},{value:'"m3/s"'},{value:'"m3/min"'},{value:'"m3/h"'},{value:'"km3/s"'},{value:'"tsp/s"'},{value:'"Tbs/s"'},{value:'"in3/s"'},{value:'"in3/min"'},{value:'"in3/h"'},{value:'"fl-oz/s"'},{value:'"fl-oz/min"'},{value:'"fl-oz/h"'},{value:'"cup/s"'},{value:'"pnt/s"'},{value:'"pnt/min"'},{value:'"pnt/h"'},{value:'"qt/s"'},{value:'"gal/s"'},{value:'"gal/min"'},{value:'"gal/h"'},{value:'"ft3/s"'},{value:'"ft3/min"'},{value:'"ft3/h"'},{value:'"yd3/s"'},{value:'"yd3/min"'},{value:'"yd3/h"'},{value:'"C"'},{value:'"F"'},{value:'"K"'},{value:'"R"'},{value:'"ns"'},{value:'"mu"'},{value:'"ms"'},{value:'"s"'},{value:'"min"'},{value:'"h"'},{value:'"d"'},{value:'"week"'},{value:'"month"'},{value:'"year"'},{value:'"Hz"'},{value:'"mHz"'},{value:'"kHz"'},{value:'"MHz"'},{value:'"GHz"'},{value:'"THz"'},{value:'"rpm"'},{value:'"deg/s"'},{value:'"rad/s"'},{value:'"m/s"'},{value:'"km/h"'},{value:'"m/h"'},{value:'"knot"'},{value:'"ft/s"'},{value:'"s/m"'},{value:'"min/km"'},{value:'"s/ft"'},{value:'"Pa"'},{value:'"hPa"'},{value:'"kPa"'},{value:'"MPa"'},{value:'"bar"'},{value:'"torr"'},{value:'"psi"'},{value:'"ksi"'},{value:'"b"'},{value:'"Kb"'},{value:'"Mb"'},{value:'"Gb"'},{value:'"Tb"'},{value:'"B"'},{value:'"KB"'},{value:'"MB"'},{value:'"GB"'},{value:'"TB"'},{value:'"lx"'},{value:'"ft-cd"'},{value:'"ppm"'},{value:'"ppb"'},{value:'"ppt"'},{value:'"ppq"'},{value:'"V"'},{value:'"mV"'},{value:'"kV"'},{value:'"A"'},{value:'"mA"'},{value:'"kA"'},{value:'"W"'},{value:'"mW"'},{value:'"kW"'},{value:'"MW"'},{value:'"GW"'},{value:'"VA"'},{value:'"mVA"'},{value:'"kVA"'},{value:'"MVA"'},{value:'"GVA"'},{value:'"VAR"'},{value:'"mVAR"'},{value:'"kVAR"'},{value:'"MVAR"'},{value:'"GVAR"'},{value:'"Wh"'},{value:'"mWh"'},{value:'"kWh"'},{value:'"MWh"'},{value:'"GWh"'},{value:'"J"'},{value:'"kJ"'},{value:'"VARh"'},{value:'"mVARh"'},{value:'"kVARh"'},{value:'"MVARh"'},{value:'"GVARH"'},{value:'"deg"'},{value:'"rad"'},{value:'"grad"'},{value:'"arcmin"'},{value:'"arcsec"'}]}},colorTables:{defaultValue:null,description:"",name:"colorTables",required:!1,type:{name:"colorTablesArray"}},editedData:{defaultValue:null,description:"",name:"editedData",required:!1,type:{name:"Record<string, unknown>"}},setProps:{defaultValue:null,description:"",name:"setProps",required:!1,type:{name:"((data: Record<string, unknown>) => void)"}},checkDatafileSchema:{defaultValue:null,description:"Validate JSON datafile against schema",name:"checkDatafileSchema",required:!1,type:{name:"boolean"}},onMouseEvent:{defaultValue:null,description:"For get mouse events",name:"onMouseEvent",required:!1,type:{name:"((event: MapMouseEvent) => void)"}},getCameraPosition:{defaultValue:null,description:"",name:"getCameraPosition",required:!1,type:{name:"((input: ViewStateType) => void)"}},isRenderedCallback:{defaultValue:null,description:"Will be called after all layers have rendered data.",name:"isRenderedCallback",required:!1,type:{name:"((arg: boolean) => void)"}},onDragStart:{defaultValue:null,description:"",name:"onDragStart",required:!1,type:{name:"((info: PickingInfo, event: MjolnirGestureEvent) => void)"}},onDragEnd:{defaultValue:null,description:"",name:"onDragEnd",required:!1,type:{name:"((info: PickingInfo, event: MjolnirGestureEvent) => void)"}},triggerResetMultipleWells:{defaultValue:null,description:"",name:"triggerResetMultipleWells",required:!1,type:{name:"number"}},selection:{defaultValue:null,description:"Range selection of the current well",name:"selection",required:!1,type:{name:"{ well: string; selection: [number, number | undefined] | undefined; } | undefined"}},getTooltip:{defaultValue:null,description:"Override default tooltip with a callback.",name:"getTooltip",required:!1,type:{name:"TooltipCallback"}},lights:{defaultValue:null,description:"",name:"lights",required:!1,type:{name:"LightsType"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/subsurface-viewer/src/storybook/sharedSettings.tsx#EditedDataTemplate"]={docgenInfo:EditedDataTemplate.__docgenInfo,name:"EditedDataTemplate",path:"packages/subsurface-viewer/src/storybook/sharedSettings.tsx#EditedDataTemplate"})}catch(__react_docgen_typescript_loader_error){}},"../example-data/deckgl-map.json":function(module){module.exports=JSON.parse('[{"id":"DeckGL-Map","coords":{"visible":true,"multiPicking":true,"pickDepth":10},"scale":{"visible":true,"incrementValue":100,"widthPerUnit":100,"cssStyle":{"left":10,"top":10}},"coordinateUnit":"m","resources":{"propertyMap":"propertyMap.png","depthMap":"propertyMap.png","wellsData":"volve_wells.json","logData":"volve_logs.json"},"bounds":[432205,6475078,437720,6481113],"layers":[{"@@type":"ColormapLayer","image":"@@#resources.propertyMap","rotDeg":0,"bounds":[432205,6475078,437720,6481113],"colorMapName":"Rainbow","valueRange":[2782,3513],"colorMapRange":[2782,3513]},{"@@type":"Hillshading2DLayer","bounds":[432205,6475078,437720,6481113],"valueRange":[2782,3513],"rotDeg":0,"image":"@@#resources.depthMap"},{"@@type":"Map3DLayer","bounds":[432205,6475078,437720,6481113],"meshMaxError":5,"mesh":"hugin_depth_25_m_normalized_margin.png","meshValueRange":[2782,3513],"propertyTexture":"kh_netmap_25_m_normalized_margin.png","propertyValueRange":[2782,3513],"rotDeg":0,"contours":[0,50],"isContoursDepth":true,"colorMapName":"Physics","colorMapRange":[2782,3513],"visible":false},{"@@type":"WellsLayer","data":"@@#resources.wellsData","logData":"@@#resources.logData","logrunName":"BLOCKING","logName":"ZONELOG","logColor":"Stratigraphy"},{"@@type":"FaultPolygonsLayer","data":"fault_polygons.geojson"},{"@@type":"PieChartLayer","data":"piechart.json"},{"@@type":"NorthArrow3DLayer","visible":true},{"@@type":"DrawingLayer"}],"editedData":{},"views":{"layout":[1,1],"showLabel":false,"viewports":[{"id":"view_1","show3D":false,"layerIds":[]}]}}]')}}]);